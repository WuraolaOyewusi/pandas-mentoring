{"pandas.tseries.offsets.DateOffset": {"type": "type", "docstring": "Standard kind of date increment used for a date range.\n\nWorks exactly like relativedelta in terms of the keyword args you\npass in, use of the keyword n is discouraged-- you would be better\noff specifying n in the keywords you use, but regardless it is\nthere for you. n is needed for DateOffset subclasses.\n\nDateOffset work as follows.  Each offset specify a set of dates\nthat conform to the DateOffset.  For example, Bday defines this\nset to be the set of dates that are weekdays (M-F).  To test if a\ndate is in the set of a DateOffset dateOffset we can use the\nonOffset method: dateOffset.onOffset(date).\n\nIf a date is not on a valid date, the rollback and rollforward\nmethods can be used to roll the date to the nearest valid date\nbefore/after the date.\n\nDateOffsets can be created to move dates forward a given number of\nvalid dates.  For example, Bday(2) can be added to a date to move\nit two business days forward.  If the date does not start on a\nvalid date, first it is moved to a valid date.  Thus pseudo code\nis:\n\ndef __add__(date):\n  date = rollback(date) # does nothing if date is valid\n  return date + <n number of periods>\n\nWhen a date offset is created for a negative number of periods,\nthe date is first rolled forward.  The pseudo code is:\n\ndef __add__(date):\n  date = rollforward(date) # does nothing is date is valid\n  return date + <n number of periods>\n\nZero presents a problem.  Should it roll forward or back?  We\narbitrarily have it rollforward:\n\ndate + BDay(0) == BDay.rollforward(date)\n\nSince 0 is a bit weird, we suggest avoiding its use.\n\nParameters\n----------\nn : int, default 1\n    The number of time periods the offset represents.\nnormalize : bool, default False\n    Whether to round the result of a DateOffset addition down to the\n    previous midnight.\n**kwds\n    Temporal parameter that add to or replace the offset value.\n\n    Parameters that **add** to the offset (like Timedelta):\n\n    - years\n    - months\n    - weeks\n    - days\n    - hours\n    - minutes\n    - seconds\n    - microseconds\n    - nanoseconds\n\n    Parameters that **replace** the offset value:\n\n    - year\n    - month\n    - day\n    - weekday\n    - hour\n    - minute\n    - second\n    - microsecond\n    - nanosecond\n\nSee Also\n--------\ndateutil.relativedelta.relativedelta\n\nExamples\n--------\n>>> ts = pd.Timestamp('2017-01-01 09:10:11')\n>>> ts + DateOffset(months=3)\nTimestamp('2017-04-01 09:10:11')\n\n>>> ts = pd.Timestamp('2017-01-01 09:10:11')\n>>> ts + DateOffset(month=3)\nTimestamp('2017-03-01 09:10:11')", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 157, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L157", "errors": [["PR09", "Parameter \"**kwds\" description should finish with \".\""], ["SA04", "Missing description for See Also \"dateutil.relativedelta.relativedelta\" reference"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 84, in pandas.tseries.offsets.DateOffset\nFailed example:\n    ts + DateOffset(months=3)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.tseries.offsets.DateOffset[1]>\", line 1, in <module>\n        ts + DateOffset(months=3)\n    NameError: name 'DateOffset' is not defined\n**********************************************************************\nLine 88, in pandas.tseries.offsets.DateOffset\nFailed example:\n    ts + DateOffset(month=3)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.tseries.offsets.DateOffset[3]>\", line 1, in <module>\n        ts + DateOffset(month=3)\n    NameError: name 'DateOffset' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'DateOffset' (2 times)"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 84, in pandas.tseries.offsets.DateOffset\nFailed example:\n    ts + DateOffset(months=3)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.tseries.offsets.DateOffset[1]>\", line 1, in <module>\n        ts + DateOffset(months=3)\n    NameError: name 'DateOffset' is not defined\n**********************************************************************\nLine 88, in pandas.tseries.offsets.DateOffset\nFailed example:\n    ts + DateOffset(month=3)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.tseries.offsets.DateOffset[3]>\", line 1, in <module>\n        ts + DateOffset(month=3)\n    NameError: name 'DateOffset' is not defined\n", "in_api": true, "section": "DateOffset", "subsection": "", "shared_code_with": ""}, "pandas.tseries.offsets.DateOffset.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "DateOffset", "subsection": "Properties", "shared_code_with": ""}, "pandas.tseries.offsets.DateOffset.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "DateOffset", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.DateOffset.freqstr"}, "pandas.tseries.offsets.DateOffset.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "DateOffset", "subsection": "Properties", "shared_code_with": ""}, "pandas.tseries.offsets.DateOffset.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "DateOffset", "subsection": "Properties", "shared_code_with": ""}, "pandas.tseries.offsets.DateOffset.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DateOffset", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.DateOffset.kwds"}, "pandas.tseries.offsets.DateOffset.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "DateOffset", "subsection": "Properties", "shared_code_with": ""}, "pandas.tseries.offsets.DateOffset.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 267, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L267", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "DateOffset", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.DateOffset.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "DateOffset", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.DateOffset.normalize"}, "pandas.tseries.offsets.DateOffset.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "DateOffset", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.DateOffset.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 421, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L421", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "DateOffset", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.BusinessDay": {"type": "type", "docstring": "DateOffset subclass representing possibly n business days.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 525, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L525", "errors": [["PR01", "Parameters {normalize, n, offset} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BusinessDay", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.BusinessDay.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.DateOffset.copy"}, "pandas.tseries.offsets.BusinessDay.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessDay.freqstr"}, "pandas.tseries.offsets.BusinessDay.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.DateOffset.name"}, "pandas.tseries.offsets.BusinessDay.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.DateOffset.nanos"}, "pandas.tseries.offsets.BusinessDay.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BusinessDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessDay.kwds"}, "pandas.tseries.offsets.BusinessDay.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.DateOffset.rule_code"}, "pandas.tseries.offsets.BusinessDay.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 569, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L569", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessDay", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.BusinessDay.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessDay", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BusinessDay.normalize"}, "pandas.tseries.offsets.BusinessDay.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessDay", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BusinessDay.apply_index"}, "pandas.tseries.offsets.BusinessDay.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessDay", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.DateOffset.isAnchored"}, "pandas.tseries.offsets.BusinessDay.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 634, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L634", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessDay", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.BusinessHour": {"type": "type", "docstring": "DateOffset subclass representing possibly n business hours.\n\n.. versionadded:: 0.16.1", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 979, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L979", "errors": [["PR01", "Parameters {start, normalize, n, end, offset} not documented"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BusinessHour", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.BusinessHour.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessHour", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessDay.copy"}, "pandas.tseries.offsets.BusinessHour.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessHour", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessHour.freqstr"}, "pandas.tseries.offsets.BusinessHour.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessHour", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessDay.name"}, "pandas.tseries.offsets.BusinessHour.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessHour", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessDay.nanos"}, "pandas.tseries.offsets.BusinessHour.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BusinessHour", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessHour.kwds"}, "pandas.tseries.offsets.BusinessHour.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessHour", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessDay.rule_code"}, "pandas.tseries.offsets.BusinessHour.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 841, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L841", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessHour", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.BusinessHour.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessHour", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BusinessHour.normalize"}, "pandas.tseries.offsets.BusinessHour.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessHour", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BusinessDay.isAnchored"}, "pandas.tseries.offsets.BusinessHour.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 934, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L934", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessHour", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.CustomBusinessDay": {"type": "type", "docstring": "DateOffset subclass representing possibly n custom business days,\nexcluding holidays.\n\nParameters\n----------\nn : int, default 1\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range\nweekmask : str, Default 'Mon Tue Wed Thu Fri'\n    weekmask of valid business days, passed to ``numpy.busdaycalendar``\nholidays : list\n    list/array of dates to exclude from the set of valid business days,\n    passed to ``numpy.busdaycalendar``\ncalendar : pd.HolidayCalendar or np.busdaycalendar\noffset : timedelta, default timedelta(0)", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 997, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L997", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"n\" has no description"], ["PR09", "Parameter \"normalize\" description should finish with \".\""], ["PR08", "Parameter \"weekmask\" description should start with a capital letter"], ["PR09", "Parameter \"weekmask\" description should finish with \".\""], ["PR08", "Parameter \"holidays\" description should start with a capital letter"], ["PR09", "Parameter \"holidays\" description should finish with \".\""], ["PR07", "Parameter \"calendar\" has no description"], ["PR07", "Parameter \"offset\" has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CustomBusinessDay", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.CustomBusinessDay.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessHour.copy"}, "pandas.tseries.offsets.CustomBusinessDay.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessDay.freqstr"}, "pandas.tseries.offsets.CustomBusinessDay.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessHour.name"}, "pandas.tseries.offsets.CustomBusinessDay.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessHour.nanos"}, "pandas.tseries.offsets.CustomBusinessDay.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CustomBusinessDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessDay.kwds"}, "pandas.tseries.offsets.CustomBusinessDay.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessHour.rule_code"}, "pandas.tseries.offsets.CustomBusinessDay.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1035, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1035", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessDay", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.CustomBusinessDay.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessDay", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CustomBusinessDay.normalize"}, "pandas.tseries.offsets.CustomBusinessDay.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessDay", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BusinessHour.isAnchored"}, "pandas.tseries.offsets.CustomBusinessDay.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1068, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1068", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessDay", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.CustomBusinessHour": {"type": "type", "docstring": "DateOffset subclass representing possibly n custom business days.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1075, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1075", "errors": [["PR01", "Parameters {normalize, n, holidays, offset, calendar, weekmask, start, end} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CustomBusinessHour", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.CustomBusinessHour.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessHour", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessDay.copy"}, "pandas.tseries.offsets.CustomBusinessHour.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessHour", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessHour.freqstr"}, "pandas.tseries.offsets.CustomBusinessHour.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessHour", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessDay.name"}, "pandas.tseries.offsets.CustomBusinessHour.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessHour", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessDay.nanos"}, "pandas.tseries.offsets.CustomBusinessHour.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CustomBusinessHour", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessHour.kwds"}, "pandas.tseries.offsets.CustomBusinessHour.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessHour", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessDay.rule_code"}, "pandas.tseries.offsets.CustomBusinessHour.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 841, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L841", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessHour", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BusinessHour.apply"}, "pandas.tseries.offsets.CustomBusinessHour.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessHour", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CustomBusinessHour.normalize"}, "pandas.tseries.offsets.CustomBusinessHour.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessHour", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CustomBusinessDay.isAnchored"}, "pandas.tseries.offsets.CustomBusinessHour.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 934, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L934", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessHour", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BusinessHour.onOffset"}, "pandas.tseries.offsets.MonthOffset": {"type": "type", "docstring": "Standard kind of date increment used for a date range.\n\nWorks exactly like relativedelta in terms of the keyword args you\npass in, use of the keyword n is discouraged-- you would be better\noff specifying n in the keywords you use, but regardless it is\nthere for you. n is needed for DateOffset subclasses.\n\nDateOffset work as follows.  Each offset specify a set of dates\nthat conform to the DateOffset.  For example, Bday defines this\nset to be the set of dates that are weekdays (M-F).  To test if a\ndate is in the set of a DateOffset dateOffset we can use the\nonOffset method: dateOffset.onOffset(date).\n\nIf a date is not on a valid date, the rollback and rollforward\nmethods can be used to roll the date to the nearest valid date\nbefore/after the date.\n\nDateOffsets can be created to move dates forward a given number of\nvalid dates.  For example, Bday(2) can be added to a date to move\nit two business days forward.  If the date does not start on a\nvalid date, first it is moved to a valid date.  Thus pseudo code\nis:\n\ndef __add__(date):\n  date = rollback(date) # does nothing if date is valid\n  return date + <n number of periods>\n\nWhen a date offset is created for a negative number of periods,\nthe date is first rolled forward.  The pseudo code is:\n\ndef __add__(date):\n  date = rollforward(date) # does nothing is date is valid\n  return date + <n number of periods>\n\nZero presents a problem.  Should it roll forward or back?  We\narbitrarily have it rollforward:\n\ndate + BDay(0) == BDay.rollforward(date)\n\nSince 0 is a bit weird, we suggest avoiding its use.\n\nParameters\n----------\nn : int, default 1\n    The number of time periods the offset represents.\nnormalize : bool, default False\n    Whether to round the result of a DateOffset addition down to the\n    previous midnight.\n**kwds\n    Temporal parameter that add to or replace the offset value.\n\n    Parameters that **add** to the offset (like Timedelta):\n\n    - years\n    - months\n    - weeks\n    - days\n    - hours\n    - minutes\n    - seconds\n    - microseconds\n    - nanoseconds\n\n    Parameters that **replace** the offset value:\n\n    - year\n    - month\n    - day\n    - weekday\n    - hour\n    - minute\n    - second\n    - microsecond\n    - nanosecond\n\nSee Also\n--------\ndateutil.relativedelta.relativedelta\n\nExamples\n--------\n>>> ts = pd.Timestamp('2017-01-01 09:10:11')\n>>> ts + DateOffset(months=3)\nTimestamp('2017-04-01 09:10:11')\n\n>>> ts = pd.Timestamp('2017-01-01 09:10:11')\n>>> ts + DateOffset(month=3)\nTimestamp('2017-03-01 09:10:11')", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1108, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1108", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthOffset", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.MonthOffset.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthOffset", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessHour.copy"}, "pandas.tseries.offsets.MonthOffset.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthOffset", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.MonthOffset.freqstr"}, "pandas.tseries.offsets.MonthOffset.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1114, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1114", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthOffset", "subsection": "Properties", "shared_code_with": ""}, "pandas.tseries.offsets.MonthOffset.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthOffset", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessHour.nanos"}, "pandas.tseries.offsets.MonthOffset.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "MonthOffset", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.MonthOffset.kwds"}, "pandas.tseries.offsets.MonthOffset.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthOffset", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessHour.rule_code"}, "pandas.tseries.offsets.MonthOffset.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1127, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1127", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthOffset", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.MonthOffset.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthOffset", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.MonthOffset.normalize"}, "pandas.tseries.offsets.MonthOffset.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthOffset", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.MonthOffset.apply_index"}, "pandas.tseries.offsets.MonthOffset.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthOffset", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CustomBusinessHour.isAnchored"}, "pandas.tseries.offsets.MonthOffset.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1122, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1122", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthOffset", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.MonthEnd": {"type": "type", "docstring": "DateOffset of one month end.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1141, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1141", "errors": [["PR01", "Parameters {normalize, n} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "MonthEnd", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.MonthEnd.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.MonthOffset.copy"}, "pandas.tseries.offsets.MonthEnd.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.MonthEnd.freqstr"}, "pandas.tseries.offsets.MonthEnd.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1114, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1114", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.MonthOffset.name"}, "pandas.tseries.offsets.MonthEnd.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.MonthOffset.nanos"}, "pandas.tseries.offsets.MonthEnd.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "MonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.MonthEnd.kwds"}, "pandas.tseries.offsets.MonthEnd.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.MonthOffset.rule_code"}, "pandas.tseries.offsets.MonthEnd.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1127, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1127", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.MonthOffset.apply"}, "pandas.tseries.offsets.MonthEnd.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.MonthEnd.normalize"}, "pandas.tseries.offsets.MonthEnd.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.MonthEnd.apply_index"}, "pandas.tseries.offsets.MonthEnd.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.MonthOffset.isAnchored"}, "pandas.tseries.offsets.MonthEnd.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1122, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1122", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.MonthOffset.onOffset"}, "pandas.tseries.offsets.MonthBegin": {"type": "type", "docstring": "DateOffset of one month at beginning.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1150, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1150", "errors": [["PR01", "Parameters {normalize, n} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "MonthBegin", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.MonthBegin.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.MonthEnd.copy"}, "pandas.tseries.offsets.MonthBegin.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.MonthBegin.freqstr"}, "pandas.tseries.offsets.MonthBegin.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1114, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1114", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.MonthEnd.name"}, "pandas.tseries.offsets.MonthBegin.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.MonthEnd.nanos"}, "pandas.tseries.offsets.MonthBegin.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "MonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.MonthBegin.kwds"}, "pandas.tseries.offsets.MonthBegin.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.MonthEnd.rule_code"}, "pandas.tseries.offsets.MonthBegin.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1127, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1127", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.MonthEnd.apply"}, "pandas.tseries.offsets.MonthBegin.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.MonthBegin.normalize"}, "pandas.tseries.offsets.MonthBegin.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.MonthBegin.apply_index"}, "pandas.tseries.offsets.MonthBegin.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.MonthEnd.isAnchored"}, "pandas.tseries.offsets.MonthBegin.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1122, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1122", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.MonthEnd.onOffset"}, "pandas.tseries.offsets.BusinessMonthEnd": {"type": "type", "docstring": "DateOffset increments between business EOM dates.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1159, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1159", "errors": [["PR01", "Parameters {normalize, n} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BusinessMonthEnd", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.BusinessMonthEnd.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.MonthBegin.copy"}, "pandas.tseries.offsets.BusinessMonthEnd.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessMonthEnd.freqstr"}, "pandas.tseries.offsets.BusinessMonthEnd.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1114, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1114", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.MonthBegin.name"}, "pandas.tseries.offsets.BusinessMonthEnd.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.MonthBegin.nanos"}, "pandas.tseries.offsets.BusinessMonthEnd.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BusinessMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessMonthEnd.kwds"}, "pandas.tseries.offsets.BusinessMonthEnd.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.MonthBegin.rule_code"}, "pandas.tseries.offsets.BusinessMonthEnd.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1127, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1127", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.MonthBegin.apply"}, "pandas.tseries.offsets.BusinessMonthEnd.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BusinessMonthEnd.normalize"}, "pandas.tseries.offsets.BusinessMonthEnd.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BusinessMonthEnd.apply_index"}, "pandas.tseries.offsets.BusinessMonthEnd.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.MonthBegin.isAnchored"}, "pandas.tseries.offsets.BusinessMonthEnd.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1122, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1122", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.MonthBegin.onOffset"}, "pandas.tseries.offsets.BusinessMonthBegin": {"type": "type", "docstring": "DateOffset of one business month at beginning.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1168, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1168", "errors": [["PR01", "Parameters {normalize, n} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BusinessMonthBegin", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.BusinessMonthBegin.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessMonthEnd.copy"}, "pandas.tseries.offsets.BusinessMonthBegin.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessMonthBegin.freqstr"}, "pandas.tseries.offsets.BusinessMonthBegin.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1114, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1114", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessMonthEnd.name"}, "pandas.tseries.offsets.BusinessMonthBegin.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessMonthEnd.nanos"}, "pandas.tseries.offsets.BusinessMonthBegin.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BusinessMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessMonthBegin.kwds"}, "pandas.tseries.offsets.BusinessMonthBegin.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessMonthEnd.rule_code"}, "pandas.tseries.offsets.BusinessMonthBegin.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1127, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1127", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BusinessMonthEnd.apply"}, "pandas.tseries.offsets.BusinessMonthBegin.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BusinessMonthBegin.normalize"}, "pandas.tseries.offsets.BusinessMonthBegin.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BusinessMonthBegin.apply_index"}, "pandas.tseries.offsets.BusinessMonthBegin.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BusinessMonthEnd.isAnchored"}, "pandas.tseries.offsets.BusinessMonthBegin.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1122, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1122", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BusinessMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BusinessMonthEnd.onOffset"}, "pandas.tseries.offsets.CustomBusinessMonthEnd": {"type": "type", "docstring": "DateOffset subclass representing custom business month(s).\n\nIncrements between end of month dates.\n\nParameters\n----------\nn : int, default 1\n    The number of months represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nweekmask : str, Default 'Mon Tue Wed Thu Fri'\n    Weekmask of valid business days, passed to ``numpy.busdaycalendar``.\nholidays : list\n    List/array of dates to exclude from the set of valid business days,\n    passed to ``numpy.busdaycalendar``.\ncalendar : pd.HolidayCalendar or np.busdaycalendar\n    Calendar to integrate.\noffset : timedelta, default timedelta(0)\n    Time offset to apply.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1275, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1275", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthEnd", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.CustomBusinessMonthEnd.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessMonthBegin.copy"}, "pandas.tseries.offsets.CustomBusinessMonthEnd.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthEnd.freqstr"}, "pandas.tseries.offsets.CustomBusinessMonthEnd.m_offset": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthEnd.kwds"}, "pandas.tseries.offsets.CustomBusinessMonthEnd.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1114, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1114", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessMonthBegin.name"}, "pandas.tseries.offsets.CustomBusinessMonthEnd.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessMonthBegin.nanos"}, "pandas.tseries.offsets.CustomBusinessMonthEnd.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthEnd.m_offset"}, "pandas.tseries.offsets.CustomBusinessMonthEnd.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BusinessMonthBegin.rule_code"}, "pandas.tseries.offsets.CustomBusinessMonthEnd.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1259, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1259", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthEnd", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.CustomBusinessMonthEnd.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthEnd.normalize"}, "pandas.tseries.offsets.CustomBusinessMonthEnd.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BusinessMonthBegin.isAnchored"}, "pandas.tseries.offsets.CustomBusinessMonthEnd.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 421, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L421", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.DateOffset.onOffset"}, "pandas.tseries.offsets.CustomBusinessMonthBegin": {"type": "type", "docstring": "DateOffset subclass representing custom business month(s).\n\nIncrements between beginning of month dates.\n\nParameters\n----------\nn : int, default 1\n    The number of months represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nweekmask : str, Default 'Mon Tue Wed Thu Fri'\n    Weekmask of valid business days, passed to ``numpy.busdaycalendar``.\nholidays : list\n    List/array of dates to exclude from the set of valid business days,\n    passed to ``numpy.busdaycalendar``.\ncalendar : pd.HolidayCalendar or np.busdaycalendar\n    Calendar to integrate.\noffset : timedelta, default timedelta(0)\n    Time offset to apply.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1281, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1281", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthBegin", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.CustomBusinessMonthBegin.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthEnd.copy"}, "pandas.tseries.offsets.CustomBusinessMonthBegin.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthBegin.freqstr"}, "pandas.tseries.offsets.CustomBusinessMonthBegin.m_offset": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthBegin.kwds"}, "pandas.tseries.offsets.CustomBusinessMonthBegin.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1114, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1114", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthEnd.name"}, "pandas.tseries.offsets.CustomBusinessMonthBegin.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthEnd.nanos"}, "pandas.tseries.offsets.CustomBusinessMonthBegin.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthBegin.m_offset"}, "pandas.tseries.offsets.CustomBusinessMonthBegin.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthEnd.rule_code"}, "pandas.tseries.offsets.CustomBusinessMonthBegin.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1259, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1259", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthEnd.apply"}, "pandas.tseries.offsets.CustomBusinessMonthBegin.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthBegin.normalize"}, "pandas.tseries.offsets.CustomBusinessMonthBegin.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthEnd.isAnchored"}, "pandas.tseries.offsets.CustomBusinessMonthBegin.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 421, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L421", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CustomBusinessMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthEnd.onOffset"}, "pandas.tseries.offsets.SemiMonthOffset": {"type": "type", "docstring": "Standard kind of date increment used for a date range.\n\nWorks exactly like relativedelta in terms of the keyword args you\npass in, use of the keyword n is discouraged-- you would be better\noff specifying n in the keywords you use, but regardless it is\nthere for you. n is needed for DateOffset subclasses.\n\nDateOffset work as follows.  Each offset specify a set of dates\nthat conform to the DateOffset.  For example, Bday defines this\nset to be the set of dates that are weekdays (M-F).  To test if a\ndate is in the set of a DateOffset dateOffset we can use the\nonOffset method: dateOffset.onOffset(date).\n\nIf a date is not on a valid date, the rollback and rollforward\nmethods can be used to roll the date to the nearest valid date\nbefore/after the date.\n\nDateOffsets can be created to move dates forward a given number of\nvalid dates.  For example, Bday(2) can be added to a date to move\nit two business days forward.  If the date does not start on a\nvalid date, first it is moved to a valid date.  Thus pseudo code\nis:\n\ndef __add__(date):\n  date = rollback(date) # does nothing if date is valid\n  return date + <n number of periods>\n\nWhen a date offset is created for a negative number of periods,\nthe date is first rolled forward.  The pseudo code is:\n\ndef __add__(date):\n  date = rollforward(date) # does nothing is date is valid\n  return date + <n number of periods>\n\nZero presents a problem.  Should it roll forward or back?  We\narbitrarily have it rollforward:\n\ndate + BDay(0) == BDay.rollforward(date)\n\nSince 0 is a bit weird, we suggest avoiding its use.\n\nParameters\n----------\nn : int, default 1\n    The number of time periods the offset represents.\nnormalize : bool, default False\n    Whether to round the result of a DateOffset addition down to the\n    previous midnight.\n**kwds\n    Temporal parameter that add to or replace the offset value.\n\n    Parameters that **add** to the offset (like Timedelta):\n\n    - years\n    - months\n    - weeks\n    - days\n    - hours\n    - minutes\n    - seconds\n    - microseconds\n    - nanoseconds\n\n    Parameters that **replace** the offset value:\n\n    - year\n    - month\n    - day\n    - weekday\n    - hour\n    - minute\n    - second\n    - microsecond\n    - nanosecond\n\nSee Also\n--------\ndateutil.relativedelta.relativedelta\n\nExamples\n--------\n>>> ts = pd.Timestamp('2017-01-01 09:10:11')\n>>> ts + DateOffset(months=3)\nTimestamp('2017-04-01 09:10:11')\n\n>>> ts = pd.Timestamp('2017-01-01 09:10:11')\n>>> ts + DateOffset(month=3)\nTimestamp('2017-03-01 09:10:11')", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1289, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1289", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthOffset", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.SemiMonthOffset.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthOffset", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthBegin.copy"}, "pandas.tseries.offsets.SemiMonthOffset.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthOffset", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.SemiMonthOffset.freqstr"}, "pandas.tseries.offsets.SemiMonthOffset.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthOffset", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessHour.name"}, "pandas.tseries.offsets.SemiMonthOffset.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthOffset", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthBegin.nanos"}, "pandas.tseries.offsets.SemiMonthOffset.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "SemiMonthOffset", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.SemiMonthOffset.kwds"}, "pandas.tseries.offsets.SemiMonthOffset.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1312, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1312", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthOffset", "subsection": "Properties", "shared_code_with": ""}, "pandas.tseries.offsets.SemiMonthOffset.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1317, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1317", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthOffset", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.SemiMonthOffset.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthOffset", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.SemiMonthOffset.normalize"}, "pandas.tseries.offsets.SemiMonthOffset.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthOffset", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.SemiMonthOffset.apply_index"}, "pandas.tseries.offsets.SemiMonthOffset.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthOffset", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthBegin.isAnchored"}, "pandas.tseries.offsets.SemiMonthOffset.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 421, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L421", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthOffset", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthBegin.onOffset"}, "pandas.tseries.offsets.SemiMonthEnd": {"type": "type", "docstring": "Two DateOffset's per month repeating on the last\nday of the month and day_of_month.\n\nParameters\n----------\nn : int\nnormalize : bool, default False\nday_of_month : int, {1, 3,...,27}, default 15", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1394, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1394", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"n\" has no description"], ["PR07", "Parameter \"normalize\" has no description"], ["PR07", "Parameter \"day_of_month\" has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "SemiMonthEnd", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.SemiMonthEnd.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.SemiMonthOffset.copy"}, "pandas.tseries.offsets.SemiMonthEnd.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.SemiMonthEnd.freqstr"}, "pandas.tseries.offsets.SemiMonthEnd.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.SemiMonthOffset.name"}, "pandas.tseries.offsets.SemiMonthEnd.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.SemiMonthOffset.nanos"}, "pandas.tseries.offsets.SemiMonthEnd.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "SemiMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.SemiMonthEnd.kwds"}, "pandas.tseries.offsets.SemiMonthEnd.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1312, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1312", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.SemiMonthOffset.rule_code"}, "pandas.tseries.offsets.SemiMonthEnd.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1317, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1317", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.SemiMonthOffset.apply"}, "pandas.tseries.offsets.SemiMonthEnd.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.SemiMonthEnd.normalize"}, "pandas.tseries.offsets.SemiMonthEnd.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.SemiMonthEnd.apply_index"}, "pandas.tseries.offsets.SemiMonthEnd.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.SemiMonthOffset.isAnchored"}, "pandas.tseries.offsets.SemiMonthEnd.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1409, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1409", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthEnd", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.SemiMonthBegin": {"type": "type", "docstring": "Two DateOffset's per month repeating on the first\nday of the month and day_of_month.\n\nParameters\n----------\nn : int\nnormalize : bool, default False\nday_of_month : int, {2, 3,...,27}, default 15", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1453, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1453", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"n\" has no description"], ["PR07", "Parameter \"normalize\" has no description"], ["PR07", "Parameter \"day_of_month\" has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "SemiMonthBegin", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.SemiMonthBegin.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.SemiMonthEnd.copy"}, "pandas.tseries.offsets.SemiMonthBegin.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.SemiMonthBegin.freqstr"}, "pandas.tseries.offsets.SemiMonthBegin.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.SemiMonthEnd.name"}, "pandas.tseries.offsets.SemiMonthBegin.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.SemiMonthEnd.nanos"}, "pandas.tseries.offsets.SemiMonthBegin.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "SemiMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.SemiMonthBegin.kwds"}, "pandas.tseries.offsets.SemiMonthBegin.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1312, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1312", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.SemiMonthEnd.rule_code"}, "pandas.tseries.offsets.SemiMonthBegin.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1317, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1317", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.SemiMonthEnd.apply"}, "pandas.tseries.offsets.SemiMonthBegin.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.SemiMonthBegin.normalize"}, "pandas.tseries.offsets.SemiMonthBegin.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.SemiMonthBegin.apply_index"}, "pandas.tseries.offsets.SemiMonthBegin.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.SemiMonthEnd.isAnchored"}, "pandas.tseries.offsets.SemiMonthBegin.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1467, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1467", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "SemiMonthBegin", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.Week": {"type": "type", "docstring": "Weekly offset.\n\nParameters\n----------\nweekday : int, default None\n    Always generate specific day of week. 0 for Monday", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1513, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1513", "errors": [["PR01", "Parameters {normalize, n} not documented"], ["PR09", "Parameter \"weekday\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Week", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.Week.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Week", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.SemiMonthBegin.copy"}, "pandas.tseries.offsets.Week.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Week", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Week.freqstr"}, "pandas.tseries.offsets.Week.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Week", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.SemiMonthBegin.name"}, "pandas.tseries.offsets.Week.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Week", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.SemiMonthBegin.nanos"}, "pandas.tseries.offsets.Week.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Week", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Week.kwds"}, "pandas.tseries.offsets.Week.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1616, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1616", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Week", "subsection": "Properties", "shared_code_with": ""}, "pandas.tseries.offsets.Week.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1541, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1541", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Week", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.Week.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Week", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Week.normalize"}, "pandas.tseries.offsets.Week.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Week", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Week.apply_index"}, "pandas.tseries.offsets.Week.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1538, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1538", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Week", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.Week.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1609, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1609", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Week", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.WeekOfMonth": {"type": "type", "docstring": "Describes monthly dates like \"the Tuesday of the 2nd week of each month\".\n\nParameters\n----------\nn : int\nweek : {0, 1, 2, 3, ...}, default 0\n    0 is 1st week of month, 1 2nd week, etc.\nweekday : {0, 1, ..., 6}, default 0\n    0: Mondays\n    1: Tuesdays\n    2: Wednesdays\n    3: Thursdays\n    4: Fridays\n    5: Saturdays\n    6: Sundays", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1658, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1658", "errors": [["PR01", "Parameters {normalize} not documented"], ["PR07", "Parameter \"n\" has no description"], ["PR08", "Parameter \"week\" description should start with a capital letter"], ["PR08", "Parameter \"weekday\" description should start with a capital letter"], ["PR09", "Parameter \"weekday\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "WeekOfMonth", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.WeekOfMonth.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "WeekOfMonth", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Week.copy"}, "pandas.tseries.offsets.WeekOfMonth.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "WeekOfMonth", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.WeekOfMonth.freqstr"}, "pandas.tseries.offsets.WeekOfMonth.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "WeekOfMonth", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Week.name"}, "pandas.tseries.offsets.WeekOfMonth.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "WeekOfMonth", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Week.nanos"}, "pandas.tseries.offsets.WeekOfMonth.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "WeekOfMonth", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.WeekOfMonth.kwds"}, "pandas.tseries.offsets.WeekOfMonth.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1713, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1713", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "WeekOfMonth", "subsection": "Properties", "shared_code_with": ""}, "pandas.tseries.offsets.WeekOfMonth.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1638, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1638", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "WeekOfMonth", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.WeekOfMonth.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "WeekOfMonth", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.WeekOfMonth.normalize"}, "pandas.tseries.offsets.WeekOfMonth.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "WeekOfMonth", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.SemiMonthBegin.isAnchored"}, "pandas.tseries.offsets.WeekOfMonth.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1652, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1652", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "WeekOfMonth", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.LastWeekOfMonth": {"type": "type", "docstring": "Describes monthly dates in last week of month like \"the last Tuesday of\neach month\".\n\nParameters\n----------\nn : int, default 1\nweekday : {0, 1, ..., 6}, default 0\n    0: Mondays\n    1: Tuesdays\n    2: Wednesdays\n    3: Thursdays\n    4: Fridays\n    5: Saturdays\n    6: Sundays", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1733, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1733", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {normalize} not documented"], ["PR07", "Parameter \"n\" has no description"], ["PR08", "Parameter \"weekday\" description should start with a capital letter"], ["PR09", "Parameter \"weekday\" description should finish with \".\""]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "LastWeekOfMonth", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.LastWeekOfMonth.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "LastWeekOfMonth", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.WeekOfMonth.copy"}, "pandas.tseries.offsets.LastWeekOfMonth.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "LastWeekOfMonth", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.LastWeekOfMonth.freqstr"}, "pandas.tseries.offsets.LastWeekOfMonth.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "LastWeekOfMonth", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.WeekOfMonth.name"}, "pandas.tseries.offsets.LastWeekOfMonth.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "LastWeekOfMonth", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.WeekOfMonth.nanos"}, "pandas.tseries.offsets.LastWeekOfMonth.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "LastWeekOfMonth", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.LastWeekOfMonth.kwds"}, "pandas.tseries.offsets.LastWeekOfMonth.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1786, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1786", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "LastWeekOfMonth", "subsection": "Properties", "shared_code_with": ""}, "pandas.tseries.offsets.LastWeekOfMonth.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1638, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1638", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "LastWeekOfMonth", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.WeekOfMonth.apply"}, "pandas.tseries.offsets.LastWeekOfMonth.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "LastWeekOfMonth", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.LastWeekOfMonth.normalize"}, "pandas.tseries.offsets.LastWeekOfMonth.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "LastWeekOfMonth", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.WeekOfMonth.isAnchored"}, "pandas.tseries.offsets.LastWeekOfMonth.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1652, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1652", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "LastWeekOfMonth", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.WeekOfMonth.onOffset"}, "pandas.tseries.offsets.QuarterOffset": {"type": "type", "docstring": "Quarter representation - doesn't call super.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1806, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1806", "errors": [["PR01", "Parameters {normalize, startingMonth, n} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "QuarterOffset", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.QuarterOffset.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterOffset", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.LastWeekOfMonth.copy"}, "pandas.tseries.offsets.QuarterOffset.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterOffset", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.QuarterOffset.freqstr"}, "pandas.tseries.offsets.QuarterOffset.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterOffset", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.LastWeekOfMonth.name"}, "pandas.tseries.offsets.QuarterOffset.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterOffset", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.LastWeekOfMonth.nanos"}, "pandas.tseries.offsets.QuarterOffset.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "QuarterOffset", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.QuarterOffset.kwds"}, "pandas.tseries.offsets.QuarterOffset.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1839, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1839", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterOffset", "subsection": "Properties", "shared_code_with": ""}, "pandas.tseries.offsets.QuarterOffset.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1844, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1844", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterOffset", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.QuarterOffset.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterOffset", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.QuarterOffset.normalize"}, "pandas.tseries.offsets.QuarterOffset.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterOffset", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.QuarterOffset.apply_index"}, "pandas.tseries.offsets.QuarterOffset.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1826, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1826", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterOffset", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.QuarterOffset.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1858, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1858", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterOffset", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.BQuarterEnd": {"type": "type", "docstring": "DateOffset increments between business Quarter dates.\n\nstartingMonth = 1 corresponds to dates like 1/31/2007, 4/30/2007, ...\nstartingMonth = 2 corresponds to dates like 2/28/2007, 5/31/2007, ...\nstartingMonth = 3 corresponds to dates like 3/30/2007, 6/29/2007, ...", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1876, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1876", "errors": [["PR01", "Parameters {normalize, startingMonth, n} not documented"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BQuarterEnd", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.BQuarterEnd.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BQuarterEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.QuarterOffset.copy"}, "pandas.tseries.offsets.BQuarterEnd.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BQuarterEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BQuarterEnd.freqstr"}, "pandas.tseries.offsets.BQuarterEnd.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BQuarterEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.QuarterOffset.name"}, "pandas.tseries.offsets.BQuarterEnd.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BQuarterEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.QuarterOffset.nanos"}, "pandas.tseries.offsets.BQuarterEnd.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BQuarterEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BQuarterEnd.kwds"}, "pandas.tseries.offsets.BQuarterEnd.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1839, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1839", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BQuarterEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.QuarterOffset.rule_code"}, "pandas.tseries.offsets.BQuarterEnd.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1844, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1844", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BQuarterEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.QuarterOffset.apply"}, "pandas.tseries.offsets.BQuarterEnd.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BQuarterEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BQuarterEnd.normalize"}, "pandas.tseries.offsets.BQuarterEnd.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BQuarterEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BQuarterEnd.apply_index"}, "pandas.tseries.offsets.BQuarterEnd.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1826, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1826", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BQuarterEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.QuarterOffset.isAnchored"}, "pandas.tseries.offsets.BQuarterEnd.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1858, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1858", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BQuarterEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.QuarterOffset.onOffset"}, "pandas.tseries.offsets.BQuarterBegin": {"type": "type", "docstring": "Quarter representation - doesn't call super.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1893, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1893", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BQuarterBegin", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.BQuarterBegin.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BQuarterBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BQuarterEnd.copy"}, "pandas.tseries.offsets.BQuarterBegin.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BQuarterBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BQuarterBegin.freqstr"}, "pandas.tseries.offsets.BQuarterBegin.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BQuarterBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BQuarterEnd.name"}, "pandas.tseries.offsets.BQuarterBegin.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BQuarterBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BQuarterEnd.nanos"}, "pandas.tseries.offsets.BQuarterBegin.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BQuarterBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BQuarterBegin.kwds"}, "pandas.tseries.offsets.BQuarterBegin.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1839, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1839", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BQuarterBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BQuarterEnd.rule_code"}, "pandas.tseries.offsets.BQuarterBegin.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1844, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1844", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BQuarterBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BQuarterEnd.apply"}, "pandas.tseries.offsets.BQuarterBegin.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BQuarterBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BQuarterBegin.normalize"}, "pandas.tseries.offsets.BQuarterBegin.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BQuarterBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BQuarterBegin.apply_index"}, "pandas.tseries.offsets.BQuarterBegin.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1826, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1826", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BQuarterBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BQuarterEnd.isAnchored"}, "pandas.tseries.offsets.BQuarterBegin.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1858, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1858", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BQuarterBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BQuarterEnd.onOffset"}, "pandas.tseries.offsets.QuarterEnd": {"type": "type", "docstring": "DateOffset increments between business Quarter dates.\n\nstartingMonth = 1 corresponds to dates like 1/31/2007, 4/30/2007, ...\nstartingMonth = 2 corresponds to dates like 2/28/2007, 5/31/2007, ...\nstartingMonth = 3 corresponds to dates like 3/31/2007, 6/30/2007, ...", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1902, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1902", "errors": [["PR01", "Parameters {normalize, startingMonth, n} not documented"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "QuarterEnd", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.QuarterEnd.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BQuarterBegin.copy"}, "pandas.tseries.offsets.QuarterEnd.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.QuarterEnd.freqstr"}, "pandas.tseries.offsets.QuarterEnd.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BQuarterBegin.name"}, "pandas.tseries.offsets.QuarterEnd.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BQuarterBegin.nanos"}, "pandas.tseries.offsets.QuarterEnd.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "QuarterEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.QuarterEnd.kwds"}, "pandas.tseries.offsets.QuarterEnd.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1839, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1839", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BQuarterBegin.rule_code"}, "pandas.tseries.offsets.QuarterEnd.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1844, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1844", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BQuarterBegin.apply"}, "pandas.tseries.offsets.QuarterEnd.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.QuarterEnd.normalize"}, "pandas.tseries.offsets.QuarterEnd.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.QuarterEnd.apply_index"}, "pandas.tseries.offsets.QuarterEnd.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1826, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1826", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BQuarterBegin.isAnchored"}, "pandas.tseries.offsets.QuarterEnd.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1858, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1858", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BQuarterBegin.onOffset"}, "pandas.tseries.offsets.QuarterBegin": {"type": "type", "docstring": "Quarter representation - doesn't call super.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1917, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1917", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterBegin", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.QuarterBegin.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.QuarterEnd.copy"}, "pandas.tseries.offsets.QuarterBegin.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.QuarterBegin.freqstr"}, "pandas.tseries.offsets.QuarterBegin.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.QuarterEnd.name"}, "pandas.tseries.offsets.QuarterBegin.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.QuarterEnd.nanos"}, "pandas.tseries.offsets.QuarterBegin.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "QuarterBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.QuarterBegin.kwds"}, "pandas.tseries.offsets.QuarterBegin.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1839, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1839", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.QuarterEnd.rule_code"}, "pandas.tseries.offsets.QuarterBegin.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1844, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1844", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.QuarterEnd.apply"}, "pandas.tseries.offsets.QuarterBegin.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.QuarterBegin.normalize"}, "pandas.tseries.offsets.QuarterBegin.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.QuarterBegin.apply_index"}, "pandas.tseries.offsets.QuarterBegin.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1826, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1826", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.QuarterEnd.isAnchored"}, "pandas.tseries.offsets.QuarterBegin.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1858, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1858", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "QuarterBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.QuarterEnd.onOffset"}, "pandas.tseries.offsets.YearOffset": {"type": "type", "docstring": "DateOffset that just needs a month.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1929, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1929", "errors": [["PR01", "Parameters {normalize, n, month} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "YearOffset", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.YearOffset.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearOffset", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.QuarterBegin.copy"}, "pandas.tseries.offsets.YearOffset.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearOffset", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.YearOffset.freqstr"}, "pandas.tseries.offsets.YearOffset.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearOffset", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.QuarterBegin.name"}, "pandas.tseries.offsets.YearOffset.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearOffset", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.QuarterBegin.nanos"}, "pandas.tseries.offsets.YearOffset.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "YearOffset", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.YearOffset.kwds"}, "pandas.tseries.offsets.YearOffset.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1982, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1982", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearOffset", "subsection": "Properties", "shared_code_with": ""}, "pandas.tseries.offsets.YearOffset.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1944, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1944", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearOffset", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.YearOffset.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearOffset", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.YearOffset.normalize"}, "pandas.tseries.offsets.YearOffset.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearOffset", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.YearOffset.apply_index"}, "pandas.tseries.offsets.YearOffset.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearOffset", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.LastWeekOfMonth.isAnchored"}, "pandas.tseries.offsets.YearOffset.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1961, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1961", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearOffset", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.BYearEnd": {"type": "type", "docstring": "DateOffset increments between business EOM dates.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1988, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1988", "errors": [["PR01", "Parameters {normalize, n, month} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BYearEnd", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.BYearEnd.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BYearEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.YearOffset.copy"}, "pandas.tseries.offsets.BYearEnd.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BYearEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BYearEnd.freqstr"}, "pandas.tseries.offsets.BYearEnd.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BYearEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.YearOffset.name"}, "pandas.tseries.offsets.BYearEnd.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BYearEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.YearOffset.nanos"}, "pandas.tseries.offsets.BYearEnd.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BYearEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BYearEnd.kwds"}, "pandas.tseries.offsets.BYearEnd.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1982, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1982", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BYearEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.YearOffset.rule_code"}, "pandas.tseries.offsets.BYearEnd.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1944, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1944", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BYearEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.YearOffset.apply"}, "pandas.tseries.offsets.BYearEnd.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BYearEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BYearEnd.normalize"}, "pandas.tseries.offsets.BYearEnd.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BYearEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BYearEnd.apply_index"}, "pandas.tseries.offsets.BYearEnd.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BYearEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.YearOffset.isAnchored"}, "pandas.tseries.offsets.BYearEnd.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1961, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1961", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BYearEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.YearOffset.onOffset"}, "pandas.tseries.offsets.BYearBegin": {"type": "type", "docstring": "DateOffset increments between business year begin dates.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1999, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1999", "errors": [["PR01", "Parameters {normalize, n, month} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BYearBegin", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.BYearBegin.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BYearBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BYearEnd.copy"}, "pandas.tseries.offsets.BYearBegin.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BYearBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BYearBegin.freqstr"}, "pandas.tseries.offsets.BYearBegin.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BYearBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BYearEnd.name"}, "pandas.tseries.offsets.BYearBegin.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BYearBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BYearEnd.nanos"}, "pandas.tseries.offsets.BYearBegin.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BYearBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BYearBegin.kwds"}, "pandas.tseries.offsets.BYearBegin.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1982, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1982", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BYearBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BYearEnd.rule_code"}, "pandas.tseries.offsets.BYearBegin.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1944, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1944", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BYearBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BYearEnd.apply"}, "pandas.tseries.offsets.BYearBegin.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BYearBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BYearBegin.normalize"}, "pandas.tseries.offsets.BYearBegin.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BYearBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BYearBegin.apply_index"}, "pandas.tseries.offsets.BYearBegin.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BYearBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BYearEnd.isAnchored"}, "pandas.tseries.offsets.BYearBegin.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1961, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1961", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BYearBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BYearEnd.onOffset"}, "pandas.tseries.offsets.YearEnd": {"type": "type", "docstring": "DateOffset increments between calendar year ends.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2010, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2010", "errors": [["PR01", "Parameters {normalize, n, month} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "YearEnd", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.YearEnd.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BYearBegin.copy"}, "pandas.tseries.offsets.YearEnd.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.YearEnd.freqstr"}, "pandas.tseries.offsets.YearEnd.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BYearBegin.name"}, "pandas.tseries.offsets.YearEnd.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BYearBegin.nanos"}, "pandas.tseries.offsets.YearEnd.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "YearEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.YearEnd.kwds"}, "pandas.tseries.offsets.YearEnd.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1982, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1982", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BYearBegin.rule_code"}, "pandas.tseries.offsets.YearEnd.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1944, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1944", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BYearBegin.apply"}, "pandas.tseries.offsets.YearEnd.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.YearEnd.normalize"}, "pandas.tseries.offsets.YearEnd.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.YearEnd.apply_index"}, "pandas.tseries.offsets.YearEnd.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BYearBegin.isAnchored"}, "pandas.tseries.offsets.YearEnd.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1961, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1961", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BYearBegin.onOffset"}, "pandas.tseries.offsets.YearBegin": {"type": "type", "docstring": "DateOffset increments between calendar year begin dates.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2020, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2020", "errors": [["PR01", "Parameters {normalize, n, month} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "YearBegin", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.YearBegin.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.YearEnd.copy"}, "pandas.tseries.offsets.YearBegin.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.YearBegin.freqstr"}, "pandas.tseries.offsets.YearBegin.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.YearEnd.name"}, "pandas.tseries.offsets.YearBegin.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.YearEnd.nanos"}, "pandas.tseries.offsets.YearBegin.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "YearBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.YearBegin.kwds"}, "pandas.tseries.offsets.YearBegin.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1982, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1982", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.YearEnd.rule_code"}, "pandas.tseries.offsets.YearBegin.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1944, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1944", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.YearEnd.apply"}, "pandas.tseries.offsets.YearBegin.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.YearBegin.normalize"}, "pandas.tseries.offsets.YearBegin.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.YearBegin.apply_index"}, "pandas.tseries.offsets.YearBegin.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.YearEnd.isAnchored"}, "pandas.tseries.offsets.YearBegin.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1961, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1961", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "YearBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.YearEnd.onOffset"}, "pandas.tseries.offsets.FY5253": {"type": "type", "docstring": "Describes 52-53 week fiscal year. This is also known as a 4-4-5 calendar.\n\nIt is used by companies that desire that their\nfiscal year always end on the same day of the week.\n\nIt is a method of managing accounting periods.\nIt is a common calendar structure for some industries,\nsuch as retail, manufacturing and parking industry.\n\nFor more information see:\nhttp://en.wikipedia.org/wiki/4-4-5_calendar\n\nThe year may either:\n- end on the last X day of the Y month.\n- end on the last X day closest to the last day of the Y month.\n\nX is a specific day of the week.\nY is a certain month of the year\n\nParameters\n----------\nn : int\nweekday : {0, 1, ..., 6}\n    0: Mondays\n    1: Tuesdays\n    2: Wednesdays\n    3: Thursdays\n    4: Fridays\n    5: Saturdays\n    6: Sundays\nstartingMonth : The month in which fiscal years end. {1, 2, ... 12}\nvariation : str\n    {\"nearest\", \"last\"} for \"LastOfMonth\" or \"NearestEndMonth\"", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2034, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2034", "errors": [["PR01", "Parameters {normalize} not documented"], ["PR07", "Parameter \"n\" has no description"], ["PR08", "Parameter \"weekday\" description should start with a capital letter"], ["PR09", "Parameter \"weekday\" description should finish with \".\""], ["PR07", "Parameter \"startingMonth\" has no description"], ["PR08", "Parameter \"variation\" description should start with a capital letter"], ["PR09", "Parameter \"variation\" description should finish with \".\""]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "FY5253", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.FY5253.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "FY5253", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.YearBegin.copy"}, "pandas.tseries.offsets.FY5253.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "FY5253", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.FY5253.freqstr"}, "pandas.tseries.offsets.FY5253.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "FY5253", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.YearBegin.name"}, "pandas.tseries.offsets.FY5253.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "FY5253", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.YearBegin.nanos"}, "pandas.tseries.offsets.FY5253.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "FY5253", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.FY5253.kwds"}, "pandas.tseries.offsets.FY5253.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2191, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2191", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "FY5253", "subsection": "Properties", "shared_code_with": ""}, "pandas.tseries.offsets.FY5253.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2109, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2109", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "FY5253", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.FY5253.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "FY5253", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.FY5253.normalize"}, "pandas.tseries.offsets.FY5253.get_rule_code_suffix": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2203, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2203", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "FY5253", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.FY5253.get_year_end": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2165, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2165", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "FY5253", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.FY5253.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2092, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2092", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "FY5253", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.FY5253.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2097, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2097", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "FY5253", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.FY5253Quarter": {"type": "type", "docstring": "DateOffset increments between business quarter dates\nfor 52-53 week fiscal year (also known as a 4-4-5 calendar).\n\nIt is used by companies that desire that their\nfiscal year always end on the same day of the week.\n\nIt is a method of managing accounting periods.\nIt is a common calendar structure for some industries,\nsuch as retail, manufacturing and parking industry.\n\nFor more information see:\nhttp://en.wikipedia.org/wiki/4-4-5_calendar\n\nThe year may either:\n- end on the last X day of the Y month.\n- end on the last X day closest to the last day of the Y month.\n\nX is a specific day of the week.\nY is a certain month of the year\n\nstartingMonth = 1 corresponds to dates like 1/31/2007, 4/30/2007, ...\nstartingMonth = 2 corresponds to dates like 2/28/2007, 5/31/2007, ...\nstartingMonth = 3 corresponds to dates like 3/30/2007, 6/29/2007, ...\n\nParameters\n----------\nn : int\nweekday : {0, 1, ..., 6}\n    0: Mondays\n    1: Tuesdays\n    2: Wednesdays\n    3: Thursdays\n    4: Fridays\n    5: Saturdays\n    6: Sundays\nstartingMonth : The month in which fiscal years end. {1, 2, ... 12}\nqtr_with_extra_week : The quarter number that has the leap\n    or 14 week when needed. {1,2,3,4}\nvariation : str\n    {\"nearest\", \"last\"} for \"LastOfMonth\" or \"NearestEndMonth\"", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2236, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2236", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {normalize} not documented"], ["PR07", "Parameter \"n\" has no description"], ["PR08", "Parameter \"weekday\" description should start with a capital letter"], ["PR09", "Parameter \"weekday\" description should finish with \".\""], ["PR07", "Parameter \"startingMonth\" has no description"], ["PR08", "Parameter \"qtr_with_extra_week\" description should start with a capital letter"], ["PR09", "Parameter \"qtr_with_extra_week\" description should finish with \".\""], ["PR08", "Parameter \"variation\" description should start with a capital letter"], ["PR09", "Parameter \"variation\" description should finish with \".\""]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "FY5253Quarter", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.FY5253Quarter.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "FY5253Quarter", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.FY5253.copy"}, "pandas.tseries.offsets.FY5253Quarter.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "FY5253Quarter", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.FY5253Quarter.freqstr"}, "pandas.tseries.offsets.FY5253Quarter.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "FY5253Quarter", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.FY5253.name"}, "pandas.tseries.offsets.FY5253Quarter.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "FY5253Quarter", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.FY5253.nanos"}, "pandas.tseries.offsets.FY5253Quarter.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "FY5253Quarter", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.FY5253Quarter.kwds"}, "pandas.tseries.offsets.FY5253Quarter.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2429, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2429", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "FY5253Quarter", "subsection": "Properties", "shared_code_with": ""}, "pandas.tseries.offsets.FY5253Quarter.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2363, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2363", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "FY5253Quarter", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.FY5253Quarter.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "FY5253Quarter", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.FY5253Quarter.normalize"}, "pandas.tseries.offsets.FY5253Quarter.get_weeks": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2391, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2391", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "FY5253Quarter", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.FY5253Quarter.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2313, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2313", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "FY5253Quarter", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.FY5253Quarter.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2412, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2412", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "FY5253Quarter", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.FY5253Quarter.year_has_extra_week": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2401, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2401", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "FY5253Quarter", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.Easter": {"type": "type", "docstring": "DateOffset for the Easter holiday using logic defined in dateutil.\n\nRight now uses the revised method which is valid in years 1583-4099.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2444, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2444", "errors": [["PR01", "Parameters {normalize, n} not documented"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Easter", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.Easter.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Easter", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.FY5253Quarter.copy"}, "pandas.tseries.offsets.Easter.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Easter", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Easter.freqstr"}, "pandas.tseries.offsets.Easter.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Easter", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.FY5253Quarter.name"}, "pandas.tseries.offsets.Easter.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Easter", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.FY5253Quarter.nanos"}, "pandas.tseries.offsets.Easter.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Easter", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Easter.kwds"}, "pandas.tseries.offsets.Easter.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Easter", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthBegin.rule_code"}, "pandas.tseries.offsets.Easter.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2456, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2456", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Easter", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.Easter.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Easter", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Easter.normalize"}, "pandas.tseries.offsets.Easter.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Easter", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.YearBegin.isAnchored"}, "pandas.tseries.offsets.Easter.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2485, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2485", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Easter", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.Tick": {"type": "type", "docstring": "dummy class to mix into tseries.offsets.Tick so that in tslibs.period we\ncan do isinstance checks on _Tick and avoid importing tseries.offsets", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2513, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2513", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Tick", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.Tick.delta": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2587, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2587", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Tick", "subsection": "Properties", "shared_code_with": ""}, "pandas.tseries.offsets.Tick.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Tick", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Easter.copy"}, "pandas.tseries.offsets.Tick.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Tick", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Tick.freqstr"}, "pandas.tseries.offsets.Tick.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Tick", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Easter.name"}, "pandas.tseries.offsets.Tick.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2591, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2591", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Tick", "subsection": "Properties", "shared_code_with": ""}, "pandas.tseries.offsets.Tick.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Tick", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Tick.kwds"}, "pandas.tseries.offsets.Tick.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Tick", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Easter.rule_code"}, "pandas.tseries.offsets.Tick.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Tick", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Tick.normalize"}, "pandas.tseries.offsets.Tick.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2621, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2621", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Tick", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.Tick.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 421, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L421", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Tick", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.SemiMonthOffset.onOffset"}, "pandas.tseries.offsets.Day": {"type": "type", "docstring": "dummy class to mix into tseries.offsets.Tick so that in tslibs.period we\ncan do isinstance checks on _Tick and avoid importing tseries.offsets", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2648, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2648", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Day", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.Day.delta": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2587, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2587", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Day", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Tick.delta"}, "pandas.tseries.offsets.Day.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Day", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Tick.copy"}, "pandas.tseries.offsets.Day.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Day", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Day.freqstr"}, "pandas.tseries.offsets.Day.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Day", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Tick.name"}, "pandas.tseries.offsets.Day.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2591, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2591", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Day", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Tick.nanos"}, "pandas.tseries.offsets.Day.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Day", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Day.kwds"}, "pandas.tseries.offsets.Day.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Day", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Tick.rule_code"}, "pandas.tseries.offsets.Day.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Day", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Day.normalize"}, "pandas.tseries.offsets.Day.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2621, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2621", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Day", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Tick.isAnchored"}, "pandas.tseries.offsets.Day.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 421, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L421", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Day", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Tick.onOffset"}, "pandas.tseries.offsets.Hour": {"type": "type", "docstring": "dummy class to mix into tseries.offsets.Tick so that in tslibs.period we\ncan do isinstance checks on _Tick and avoid importing tseries.offsets", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2653, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2653", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Hour", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.Hour.delta": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2587, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2587", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Hour", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Day.delta"}, "pandas.tseries.offsets.Hour.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Hour", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Day.copy"}, "pandas.tseries.offsets.Hour.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Hour", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Hour.freqstr"}, "pandas.tseries.offsets.Hour.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Hour", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Day.name"}, "pandas.tseries.offsets.Hour.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2591, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2591", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Hour", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Day.nanos"}, "pandas.tseries.offsets.Hour.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Hour", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Hour.kwds"}, "pandas.tseries.offsets.Hour.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Hour", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Day.rule_code"}, "pandas.tseries.offsets.Hour.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Hour", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Hour.normalize"}, "pandas.tseries.offsets.Hour.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2621, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2621", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Hour", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Day.isAnchored"}, "pandas.tseries.offsets.Hour.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 421, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L421", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Hour", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Day.onOffset"}, "pandas.tseries.offsets.Minute": {"type": "type", "docstring": "dummy class to mix into tseries.offsets.Tick so that in tslibs.period we\ncan do isinstance checks on _Tick and avoid importing tseries.offsets", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2658, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2658", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Minute", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.Minute.delta": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2587, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2587", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Minute", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Hour.delta"}, "pandas.tseries.offsets.Minute.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Minute", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Hour.copy"}, "pandas.tseries.offsets.Minute.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Minute", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Minute.freqstr"}, "pandas.tseries.offsets.Minute.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Minute", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Hour.name"}, "pandas.tseries.offsets.Minute.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2591, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2591", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Minute", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Hour.nanos"}, "pandas.tseries.offsets.Minute.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Minute", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Minute.kwds"}, "pandas.tseries.offsets.Minute.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Minute", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Hour.rule_code"}, "pandas.tseries.offsets.Minute.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Minute", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Minute.normalize"}, "pandas.tseries.offsets.Minute.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2621, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2621", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Minute", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Hour.isAnchored"}, "pandas.tseries.offsets.Minute.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 421, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L421", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Minute", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Hour.onOffset"}, "pandas.tseries.offsets.Second": {"type": "type", "docstring": "dummy class to mix into tseries.offsets.Tick so that in tslibs.period we\ncan do isinstance checks on _Tick and avoid importing tseries.offsets", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2663, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2663", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Second", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.Second.delta": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2587, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2587", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Second", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Minute.delta"}, "pandas.tseries.offsets.Second.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Second", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Minute.copy"}, "pandas.tseries.offsets.Second.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Second", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Second.freqstr"}, "pandas.tseries.offsets.Second.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Second", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Minute.name"}, "pandas.tseries.offsets.Second.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2591, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2591", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Second", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Minute.nanos"}, "pandas.tseries.offsets.Second.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Second", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Second.kwds"}, "pandas.tseries.offsets.Second.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Second", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Minute.rule_code"}, "pandas.tseries.offsets.Second.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Second", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Second.normalize"}, "pandas.tseries.offsets.Second.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2621, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2621", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Second", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Minute.isAnchored"}, "pandas.tseries.offsets.Second.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 421, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L421", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Second", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Minute.onOffset"}, "pandas.tseries.offsets.Milli": {"type": "type", "docstring": "dummy class to mix into tseries.offsets.Tick so that in tslibs.period we\ncan do isinstance checks on _Tick and avoid importing tseries.offsets", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2668, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2668", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Milli", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.Milli.delta": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2587, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2587", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Milli", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Second.delta"}, "pandas.tseries.offsets.Milli.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Milli", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Second.copy"}, "pandas.tseries.offsets.Milli.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Milli", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Milli.freqstr"}, "pandas.tseries.offsets.Milli.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Milli", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Second.name"}, "pandas.tseries.offsets.Milli.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2591, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2591", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Milli", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Second.nanos"}, "pandas.tseries.offsets.Milli.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Milli", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Milli.kwds"}, "pandas.tseries.offsets.Milli.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Milli", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Second.rule_code"}, "pandas.tseries.offsets.Milli.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Milli", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Milli.normalize"}, "pandas.tseries.offsets.Milli.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2621, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2621", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Milli", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Second.isAnchored"}, "pandas.tseries.offsets.Milli.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 421, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L421", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Milli", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Second.onOffset"}, "pandas.tseries.offsets.Micro": {"type": "type", "docstring": "dummy class to mix into tseries.offsets.Tick so that in tslibs.period we\ncan do isinstance checks on _Tick and avoid importing tseries.offsets", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2673, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2673", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Micro", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.Micro.delta": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2587, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2587", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Micro", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Milli.delta"}, "pandas.tseries.offsets.Micro.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Micro", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Milli.copy"}, "pandas.tseries.offsets.Micro.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Micro", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Micro.freqstr"}, "pandas.tseries.offsets.Micro.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Micro", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Milli.name"}, "pandas.tseries.offsets.Micro.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2591, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2591", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Micro", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Milli.nanos"}, "pandas.tseries.offsets.Micro.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Micro", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Micro.kwds"}, "pandas.tseries.offsets.Micro.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Micro", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Milli.rule_code"}, "pandas.tseries.offsets.Micro.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Micro", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Micro.normalize"}, "pandas.tseries.offsets.Micro.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2621, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2621", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Micro", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Milli.isAnchored"}, "pandas.tseries.offsets.Micro.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 421, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L421", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Micro", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Milli.onOffset"}, "pandas.tseries.offsets.Nano": {"type": "type", "docstring": "dummy class to mix into tseries.offsets.Tick so that in tslibs.period we\ncan do isinstance checks on _Tick and avoid importing tseries.offsets", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2678, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2678", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Nano", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.Nano.delta": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2587, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2587", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Nano", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Micro.delta"}, "pandas.tseries.offsets.Nano.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Nano", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Micro.copy"}, "pandas.tseries.offsets.Nano.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Nano", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Nano.freqstr"}, "pandas.tseries.offsets.Nano.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Nano", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Micro.name"}, "pandas.tseries.offsets.Nano.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2591, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2591", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Nano", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Micro.nanos"}, "pandas.tseries.offsets.Nano.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Nano", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Nano.kwds"}, "pandas.tseries.offsets.Nano.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Nano", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Micro.rule_code"}, "pandas.tseries.offsets.Nano.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Nano", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Nano.normalize"}, "pandas.tseries.offsets.Nano.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 2621, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L2621", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Nano", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Micro.isAnchored"}, "pandas.tseries.offsets.Nano.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 421, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L421", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Nano", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Micro.onOffset"}, "pandas.tseries.offsets.BDay": {"type": "type", "docstring": "DateOffset subclass representing possibly n business days.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 525, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L525", "errors": [["PR01", "Parameters {normalize, n, offset} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BDay", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BusinessDay"}, "pandas.tseries.offsets.BDay.base": {"type": "property", "docstring": "Returns a copy of the calling offset object with n=1 and all other\nattributes equal.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Nano.copy"}, "pandas.tseries.offsets.BDay.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BDay.base"}, "pandas.tseries.offsets.BDay.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BDay.freqstr"}, "pandas.tseries.offsets.BDay.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Nano.name"}, "pandas.tseries.offsets.BDay.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Easter.nanos"}, "pandas.tseries.offsets.BDay.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BDay.kwds"}, "pandas.tseries.offsets.BDay.offset": {"type": "property", "docstring": "Alias for self._offset.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 506, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L506", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BDay", "subsection": "Properties", "shared_code_with": ""}, "pandas.tseries.offsets.BDay.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.Nano.rule_code"}, "pandas.tseries.offsets.BDay.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 569, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L569", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BDay", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BusinessDay.apply"}, "pandas.tseries.offsets.BDay.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BDay", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BDay.normalize"}, "pandas.tseries.offsets.BDay.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BDay", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BDay.apply_index"}, "pandas.tseries.offsets.BDay.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BDay", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Easter.isAnchored"}, "pandas.tseries.offsets.BDay.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 634, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L634", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BDay", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BusinessDay.onOffset"}, "pandas.tseries.offsets.BDay.rollback": {"type": "function", "docstring": "Roll provided date backward to next offset only if not on offset.\n\nReturns\n-------\nTimeStamp\n    Rolled timestamp if not on offset, otherwise unchanged timestamp.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 393, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L393", "errors": [["PR01", "Parameters {dt} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BDay", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.BDay.rollforward": {"type": "function", "docstring": "Roll provided date forward to next offset only if not on offset.\n\nReturns\n-------\nTimeStamp\n    Rolled timestamp if not on offset, otherwise unchanged timestamp.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 407, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L407", "errors": [["PR01", "Parameters {dt} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BDay", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.BMonthEnd": {"type": "type", "docstring": "DateOffset increments between business EOM dates.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1159, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1159", "errors": [["PR01", "Parameters {normalize, n} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BusinessMonthEnd"}, "pandas.tseries.offsets.BMonthEnd.base": {"type": "property", "docstring": "Returns a copy of the calling offset object with n=1 and all other\nattributes equal.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BDay.copy"}, "pandas.tseries.offsets.BMonthEnd.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BMonthEnd.base"}, "pandas.tseries.offsets.BMonthEnd.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BMonthEnd.freqstr"}, "pandas.tseries.offsets.BMonthEnd.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1114, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1114", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthBegin.name"}, "pandas.tseries.offsets.BMonthEnd.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BDay.nanos"}, "pandas.tseries.offsets.BMonthEnd.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BMonthEnd.kwds"}, "pandas.tseries.offsets.BMonthEnd.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BDay.rule_code"}, "pandas.tseries.offsets.BMonthEnd.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1127, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1127", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BusinessMonthBegin.apply"}, "pandas.tseries.offsets.BMonthEnd.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BMonthEnd.normalize"}, "pandas.tseries.offsets.BMonthEnd.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BMonthEnd.apply_index"}, "pandas.tseries.offsets.BMonthEnd.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BDay.isAnchored"}, "pandas.tseries.offsets.BMonthEnd.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1122, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1122", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BusinessMonthBegin.onOffset"}, "pandas.tseries.offsets.BMonthEnd.rollback": {"type": "function", "docstring": "Roll provided date backward to next offset only if not on offset.\n\nReturns\n-------\nTimeStamp\n    Rolled timestamp if not on offset, otherwise unchanged timestamp.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 393, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L393", "errors": [["PR01", "Parameters {dt} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BDay.rollback"}, "pandas.tseries.offsets.BMonthEnd.rollforward": {"type": "function", "docstring": "Roll provided date forward to next offset only if not on offset.\n\nReturns\n-------\nTimeStamp\n    Rolled timestamp if not on offset, otherwise unchanged timestamp.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 407, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L407", "errors": [["PR01", "Parameters {dt} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BDay.rollforward"}, "pandas.tseries.offsets.BMonthBegin": {"type": "type", "docstring": "DateOffset of one business month at beginning.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1168, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1168", "errors": [["PR01", "Parameters {normalize, n} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BusinessMonthBegin"}, "pandas.tseries.offsets.BMonthBegin.base": {"type": "property", "docstring": "Returns a copy of the calling offset object with n=1 and all other\nattributes equal.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BMonthEnd.copy"}, "pandas.tseries.offsets.BMonthBegin.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BMonthBegin.base"}, "pandas.tseries.offsets.BMonthBegin.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BMonthBegin.freqstr"}, "pandas.tseries.offsets.BMonthBegin.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1114, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1114", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BMonthEnd.name"}, "pandas.tseries.offsets.BMonthBegin.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BMonthEnd.nanos"}, "pandas.tseries.offsets.BMonthBegin.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BMonthBegin.kwds"}, "pandas.tseries.offsets.BMonthBegin.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BMonthEnd.rule_code"}, "pandas.tseries.offsets.BMonthBegin.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1127, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1127", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BMonthEnd.apply"}, "pandas.tseries.offsets.BMonthBegin.apply_index": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BMonthBegin.normalize"}, "pandas.tseries.offsets.BMonthBegin.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BMonthBegin.apply_index"}, "pandas.tseries.offsets.BMonthBegin.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BMonthEnd.isAnchored"}, "pandas.tseries.offsets.BMonthBegin.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1122, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1122", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "BMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BMonthEnd.onOffset"}, "pandas.tseries.offsets.BMonthBegin.rollback": {"type": "function", "docstring": "Roll provided date backward to next offset only if not on offset.\n\nReturns\n-------\nTimeStamp\n    Rolled timestamp if not on offset, otherwise unchanged timestamp.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 393, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L393", "errors": [["PR01", "Parameters {dt} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BMonthEnd.rollback"}, "pandas.tseries.offsets.BMonthBegin.rollforward": {"type": "function", "docstring": "Roll provided date forward to next offset only if not on offset.\n\nReturns\n-------\nTimeStamp\n    Rolled timestamp if not on offset, otherwise unchanged timestamp.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 407, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L407", "errors": [["PR01", "Parameters {dt} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "BMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BMonthEnd.rollforward"}, "pandas.tseries.offsets.CBMonthEnd": {"type": "type", "docstring": "DateOffset subclass representing custom business month(s).\n\nIncrements between end of month dates.\n\nParameters\n----------\nn : int, default 1\n    The number of months represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nweekmask : str, Default 'Mon Tue Wed Thu Fri'\n    Weekmask of valid business days, passed to ``numpy.busdaycalendar``.\nholidays : list\n    List/array of dates to exclude from the set of valid business days,\n    passed to ``numpy.busdaycalendar``.\ncalendar : pd.HolidayCalendar or np.busdaycalendar\n    Calendar to integrate.\noffset : timedelta, default timedelta(0)\n    Time offset to apply.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1275, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1275", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CBMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthEnd"}, "pandas.tseries.offsets.CBMonthEnd.base": {"type": "property", "docstring": "Returns a copy of the calling offset object with n=1 and all other\nattributes equal.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CBMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BMonthBegin.copy"}, "pandas.tseries.offsets.CBMonthEnd.cbday_roll": {"type": "CachedProperty", "docstring": "Define default roll function to be called in apply method.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CBMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CBMonthEnd.base"}, "pandas.tseries.offsets.CBMonthEnd.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CBMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CBMonthEnd.cbday_roll"}, "pandas.tseries.offsets.CBMonthEnd.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CBMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CBMonthEnd.freqstr"}, "pandas.tseries.offsets.CBMonthEnd.m_offset": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CBMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CBMonthEnd.kwds"}, "pandas.tseries.offsets.CBMonthEnd.month_roll": {"type": "CachedProperty", "docstring": "Define default roll function to be called in apply method.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CBMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CBMonthEnd.m_offset"}, "pandas.tseries.offsets.CBMonthEnd.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1114, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1114", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CBMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BMonthBegin.name"}, "pandas.tseries.offsets.CBMonthEnd.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CBMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BMonthBegin.nanos"}, "pandas.tseries.offsets.CBMonthEnd.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CBMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CBMonthEnd.month_roll"}, "pandas.tseries.offsets.CBMonthEnd.offset": {"type": "property", "docstring": "Alias for self._offset.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 506, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L506", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CBMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BDay.offset"}, "pandas.tseries.offsets.CBMonthEnd.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CBMonthEnd", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BMonthBegin.rule_code"}, "pandas.tseries.offsets.CBMonthEnd.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1259, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1259", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CBMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthBegin.apply"}, "pandas.tseries.offsets.CBMonthEnd.apply_index": {"type": "cython_function_or_method", "docstring": "Vectorized apply of DateOffset to DatetimeIndex,\nraises NotImplentedError for offsets without a\nvectorized implementation.\n\nParameters\n----------\ni : DatetimeIndex\n\nReturns\n-------\ny : DatetimeIndex", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {other} not documented"], ["PR02", "Unknown parameters {i}"], ["PR07", "Parameter \"i\" has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CBMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CBMonthEnd.normalize"}, "pandas.tseries.offsets.CBMonthEnd.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CBMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CBMonthEnd.apply_index"}, "pandas.tseries.offsets.CBMonthEnd.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CBMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BMonthBegin.isAnchored"}, "pandas.tseries.offsets.CBMonthEnd.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 421, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L421", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CBMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.Nano.onOffset"}, "pandas.tseries.offsets.CBMonthEnd.rollback": {"type": "function", "docstring": "Roll provided date backward to next offset only if not on offset.\n\nReturns\n-------\nTimeStamp\n    Rolled timestamp if not on offset, otherwise unchanged timestamp.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 393, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L393", "errors": [["PR01", "Parameters {dt} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CBMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BMonthBegin.rollback"}, "pandas.tseries.offsets.CBMonthEnd.rollforward": {"type": "function", "docstring": "Roll provided date forward to next offset only if not on offset.\n\nReturns\n-------\nTimeStamp\n    Rolled timestamp if not on offset, otherwise unchanged timestamp.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 407, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L407", "errors": [["PR01", "Parameters {dt} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CBMonthEnd", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.BMonthBegin.rollforward"}, "pandas.tseries.offsets.CBMonthBegin": {"type": "type", "docstring": "DateOffset subclass representing custom business month(s).\n\nIncrements between beginning of month dates.\n\nParameters\n----------\nn : int, default 1\n    The number of months represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nweekmask : str, Default 'Mon Tue Wed Thu Fri'\n    Weekmask of valid business days, passed to ``numpy.busdaycalendar``.\nholidays : list\n    List/array of dates to exclude from the set of valid business days,\n    passed to ``numpy.busdaycalendar``.\ncalendar : pd.HolidayCalendar or np.busdaycalendar\n    Calendar to integrate.\noffset : timedelta, default timedelta(0)\n    Time offset to apply.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1281, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1281", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CBMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CustomBusinessMonthBegin"}, "pandas.tseries.offsets.CBMonthBegin.base": {"type": "property", "docstring": "Returns a copy of the calling offset object with n=1 and all other\nattributes equal.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CBMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CBMonthEnd.copy"}, "pandas.tseries.offsets.CBMonthBegin.cbday_roll": {"type": "CachedProperty", "docstring": "Define default roll function to be called in apply method.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CBMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CBMonthBegin.base"}, "pandas.tseries.offsets.CBMonthBegin.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CBMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CBMonthBegin.cbday_roll"}, "pandas.tseries.offsets.CBMonthBegin.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CBMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CBMonthBegin.freqstr"}, "pandas.tseries.offsets.CBMonthBegin.m_offset": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CBMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CBMonthBegin.kwds"}, "pandas.tseries.offsets.CBMonthBegin.month_roll": {"type": "CachedProperty", "docstring": "Define default roll function to be called in apply method.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CBMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CBMonthBegin.m_offset"}, "pandas.tseries.offsets.CBMonthBegin.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1114, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1114", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CBMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CBMonthEnd.name"}, "pandas.tseries.offsets.CBMonthBegin.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CBMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CBMonthEnd.nanos"}, "pandas.tseries.offsets.CBMonthBegin.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CBMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CBMonthBegin.month_roll"}, "pandas.tseries.offsets.CBMonthBegin.offset": {"type": "property", "docstring": "Alias for self._offset.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 506, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L506", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CBMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CBMonthEnd.offset"}, "pandas.tseries.offsets.CBMonthBegin.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CBMonthBegin", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CBMonthEnd.rule_code"}, "pandas.tseries.offsets.CBMonthBegin.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1259, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1259", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CBMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CBMonthEnd.apply"}, "pandas.tseries.offsets.CBMonthBegin.apply_index": {"type": "cython_function_or_method", "docstring": "Vectorized apply of DateOffset to DatetimeIndex,\nraises NotImplentedError for offsets without a\nvectorized implementation.\n\nParameters\n----------\ni : DatetimeIndex\n\nReturns\n-------\ny : DatetimeIndex", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {other} not documented"], ["PR02", "Unknown parameters {i}"], ["PR07", "Parameter \"i\" has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CBMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CBMonthBegin.normalize"}, "pandas.tseries.offsets.CBMonthBegin.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CBMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CBMonthBegin.apply_index"}, "pandas.tseries.offsets.CBMonthBegin.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CBMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CBMonthEnd.isAnchored"}, "pandas.tseries.offsets.CBMonthBegin.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 421, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L421", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CBMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CBMonthEnd.onOffset"}, "pandas.tseries.offsets.CBMonthBegin.rollback": {"type": "function", "docstring": "Roll provided date backward to next offset only if not on offset.\n\nReturns\n-------\nTimeStamp\n    Rolled timestamp if not on offset, otherwise unchanged timestamp.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 393, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L393", "errors": [["PR01", "Parameters {dt} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CBMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CBMonthEnd.rollback"}, "pandas.tseries.offsets.CBMonthBegin.rollforward": {"type": "function", "docstring": "Roll provided date forward to next offset only if not on offset.\n\nReturns\n-------\nTimeStamp\n    Rolled timestamp if not on offset, otherwise unchanged timestamp.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 407, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L407", "errors": [["PR01", "Parameters {dt} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CBMonthBegin", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CBMonthEnd.rollforward"}, "pandas.tseries.offsets.CDay": {"type": "type", "docstring": "DateOffset subclass representing possibly n custom business days,\nexcluding holidays.\n\nParameters\n----------\nn : int, default 1\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range\nweekmask : str, Default 'Mon Tue Wed Thu Fri'\n    weekmask of valid business days, passed to ``numpy.busdaycalendar``\nholidays : list\n    list/array of dates to exclude from the set of valid business days,\n    passed to ``numpy.busdaycalendar``\ncalendar : pd.HolidayCalendar or np.busdaycalendar\noffset : timedelta, default timedelta(0)", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 997, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L997", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"n\" has no description"], ["PR09", "Parameter \"normalize\" description should finish with \".\""], ["PR08", "Parameter \"weekmask\" description should start with a capital letter"], ["PR09", "Parameter \"weekmask\" description should finish with \".\""], ["PR08", "Parameter \"holidays\" description should start with a capital letter"], ["PR09", "Parameter \"holidays\" description should finish with \".\""], ["PR07", "Parameter \"calendar\" has no description"], ["PR07", "Parameter \"offset\" has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CDay", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CustomBusinessDay"}, "pandas.tseries.offsets.CDay.base": {"type": "property", "docstring": "Returns a copy of the calling offset object with n=1 and all other\nattributes equal.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CBMonthBegin.copy"}, "pandas.tseries.offsets.CDay.freqstr": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CDay.base"}, "pandas.tseries.offsets.CDay.kwds": {"type": "property", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CDay.freqstr"}, "pandas.tseries.offsets.CDay.name": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 389, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L389", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.BDay.name"}, "pandas.tseries.offsets.CDay.nanos": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 468, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L468", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CBMonthBegin.nanos"}, "pandas.tseries.offsets.CDay.normalize": {"type": "bool", "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CDay.kwds"}, "pandas.tseries.offsets.CDay.offset": {"type": "property", "docstring": "Alias for self._offset.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 506, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L506", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CBMonthBegin.offset"}, "pandas.tseries.offsets.CDay.rule_code": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 440, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L440", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CDay", "subsection": "Properties", "shared_code_with": "pandas.tseries.offsets.CBMonthBegin.rule_code"}, "pandas.tseries.offsets.CDay.apply": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1035, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1035", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CDay", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CustomBusinessDay.apply"}, "pandas.tseries.offsets.CDay.apply_index": {"type": "function", "docstring": "Vectorized apply of DateOffset to DatetimeIndex,\nraises NotImplentedError for offsets without a\nvectorized implementation.\n\nParameters\n----------\ni : DatetimeIndex\n\nReturns\n-------\ny : DatetimeIndex", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1065, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1065", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CDay", "subsection": "Methods", "shared_code_with": ""}, "pandas.tseries.offsets.CDay.copy": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CDay", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CDay.normalize"}, "pandas.tseries.offsets.CDay.isAnchored": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L366", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CDay", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CBMonthBegin.isAnchored"}, "pandas.tseries.offsets.CDay.onOffset": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 1068, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L1068", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CDay", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CustomBusinessDay.onOffset"}, "pandas.tseries.offsets.CDay.rollback": {"type": "function", "docstring": "Roll provided date backward to next offset only if not on offset.\n\nReturns\n-------\nTimeStamp\n    Rolled timestamp if not on offset, otherwise unchanged timestamp.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 393, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L393", "errors": [["PR01", "Parameters {dt} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CDay", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CBMonthBegin.rollback"}, "pandas.tseries.offsets.CDay.rollforward": {"type": "function", "docstring": "Roll provided date forward to next offset only if not on offset.\n\nReturns\n-------\nTimeStamp\n    Rolled timestamp if not on offset, otherwise unchanged timestamp.", "deprecated": false, "file": "pandas/tseries/offsets.py", "file_line": 407, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/offsets.py#L407", "errors": [["PR01", "Parameters {dt} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CDay", "subsection": "Methods", "shared_code_with": "pandas.tseries.offsets.CBMonthBegin.rollforward"}, "pandas.tseries.frequencies.to_offset": {"type": "function", "docstring": "Return DateOffset object from string or tuple representation\nor datetime.timedelta object\n\nParameters\n----------\nfreq : str, tuple, datetime.timedelta, DateOffset or None\n\nReturns\n-------\nDateOffset\n    None if freq is None.\n\nRaises\n------\nValueError\n    If freq is an invalid frequency\n\nSee Also\n--------\nDateOffset\n\nExamples\n--------\n>>> to_offset('5min')\n<5 * Minutes>\n\n>>> to_offset('1D1H')\n<25 * Hours>\n\n>>> to_offset(('W', 2))\n<2 * Weeks: weekday=6>\n\n>>> to_offset((2, 'B'))\n<2 * BusinessDays>\n\n>>> to_offset(datetime.timedelta(days=1))\n<Day>\n\n>>> to_offset(Hour())\n<Hour>", "deprecated": false, "file": "pandas/tseries/frequencies.py", "file_line": 71, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/frequencies.py#L71", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"freq\" has no description"], ["SA04", "Missing description for See Also \"DateOffset\" reference"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 25, in pandas.tseries.frequencies.to_offset\nFailed example:\n    to_offset('5min')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.tseries.frequencies.to_offset[0]>\", line 1, in <module>\n        to_offset('5min')\n    NameError: name 'to_offset' is not defined\n**********************************************************************\nLine 28, in pandas.tseries.frequencies.to_offset\nFailed example:\n    to_offset('1D1H')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.tseries.frequencies.to_offset[1]>\", line 1, in <module>\n        to_offset('1D1H')\n    NameError: name 'to_offset' is not defined\n**********************************************************************\nLine 31, in pandas.tseries.frequencies.to_offset\nFailed example:\n    to_offset(('W', 2))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.tseries.frequencies.to_offset[2]>\", line 1, in <module>\n        to_offset(('W', 2))\n    NameError: name 'to_offset' is not defined\n**********************************************************************\nLine 34, in pandas.tseries.frequencies.to_offset\nFailed example:\n    to_offset((2, 'B'))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.tseries.frequencies.to_offset[3]>\", line 1, in <module>\n        to_offset((2, 'B'))\n    NameError: name 'to_offset' is not defined\n**********************************************************************\nLine 37, in pandas.tseries.frequencies.to_offset\nFailed example:\n    to_offset(datetime.timedelta(days=1))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.tseries.frequencies.to_offset[4]>\", line 1, in <module>\n        to_offset(datetime.timedelta(days=1))\n    NameError: name 'to_offset' is not defined\n**********************************************************************\nLine 40, in pandas.tseries.frequencies.to_offset\nFailed example:\n    to_offset(Hour())\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.tseries.frequencies.to_offset[5]>\", line 1, in <module>\n        to_offset(Hour())\n    NameError: name 'to_offset' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'to_offset' (8 times)"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 25, in pandas.tseries.frequencies.to_offset\nFailed example:\n    to_offset('5min')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.tseries.frequencies.to_offset[0]>\", line 1, in <module>\n        to_offset('5min')\n    NameError: name 'to_offset' is not defined\n**********************************************************************\nLine 28, in pandas.tseries.frequencies.to_offset\nFailed example:\n    to_offset('1D1H')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.tseries.frequencies.to_offset[1]>\", line 1, in <module>\n        to_offset('1D1H')\n    NameError: name 'to_offset' is not defined\n**********************************************************************\nLine 31, in pandas.tseries.frequencies.to_offset\nFailed example:\n    to_offset(('W', 2))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.tseries.frequencies.to_offset[2]>\", line 1, in <module>\n        to_offset(('W', 2))\n    NameError: name 'to_offset' is not defined\n**********************************************************************\nLine 34, in pandas.tseries.frequencies.to_offset\nFailed example:\n    to_offset((2, 'B'))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.tseries.frequencies.to_offset[3]>\", line 1, in <module>\n        to_offset((2, 'B'))\n    NameError: name 'to_offset' is not defined\n**********************************************************************\nLine 37, in pandas.tseries.frequencies.to_offset\nFailed example:\n    to_offset(datetime.timedelta(days=1))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.tseries.frequencies.to_offset[4]>\", line 1, in <module>\n        to_offset(datetime.timedelta(days=1))\n    NameError: name 'to_offset' is not defined\n**********************************************************************\nLine 40, in pandas.tseries.frequencies.to_offset\nFailed example:\n    to_offset(Hour())\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.tseries.frequencies.to_offset[5]>\", line 1, in <module>\n        to_offset(Hour())\n    NameError: name 'to_offset' is not defined\n", "in_api": true, "section": "CDay", "subsection": "Methods", "shared_code_with": ""}, "pandas.Series": {"type": "type", "docstring": "One-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, *, **) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series.\n\n    .. versionchanged:: 0.23.0\n       If data is a dict, argument order is maintained for Python 3.6\n       and later.\n\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If both a dict and index\n    sequence are used, the index will override the keys found in the\n    dict.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\ncopy : bool, default False\n    Copy input data.", "deprecated": false, "file": "pandas/core/series.py", "file_line": 140, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L140", "errors": [["PR01", "Parameters {fastpath, name} not documented"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Constructor", "subsection": "", "shared_code_with": ""}, "pandas.Series.index": {"type": "AxisProperty", "docstring": "The index (axis labels) of the Series.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": "pandas.tseries.offsets.CDay.copy"}, "pandas.Series.array": {"type": "property", "docstring": "The ExtensionArray of the data backing this Series or Index.\n\n.. versionadded:: 0.24.0\n\nReturns\n-------\nExtensionArray\n    An ExtensionArray of the values stored within. For extension\n    types, this is the actual array. For NumPy native types, this\n    is a thin (no copy) wrapper around :class:`numpy.ndarray`.\n\n    ``.array`` differs ``.values`` which may require converting the\n    data to a different form.\n\nSee Also\n--------\nIndex.to_numpy : Similar method that always returns a NumPy array.\nSeries.to_numpy : Similar method that always returns a NumPy array.\n\nNotes\n-----\nThis table lays out the different array types for each extension\ndtype within pandas.\n\n================== =============================\ndtype              array type\n================== =============================\ncategory           Categorical\nperiod             PeriodArray\ninterval           IntervalArray\nIntegerNA          IntegerArray\ndatetime64[ns, tz] DatetimeArray\n================== =============================\n\nFor any 3rd-party extension types, the array type will be an\nExtensionArray.\n\nFor all remaining dtypes ``.array`` will be a\n:class:`arrays.NumpyExtensionArray` wrapping the actual ndarray\nstored within. If you absolutely need a NumPy array (possibly with\ncopying / coercing data), then use :meth:`Series.to_numpy` instead.\n\nExamples\n--------\n\nFor regular NumPy types like int, and float, a PandasArray\nis returned.\n\n>>> pd.Series([1, 2, 3]).array\n<PandasArray>\n[1, 2, 3]\nLength: 3, dtype: int64\n\nFor extension types, like Categorical, the actual ExtensionArray\nis returned\n\n>>> ser = pd.Series(pd.Categorical(['a', 'b', 'a']))\n>>> ser.array\n[a, b, a]\nCategories (2, object): [a, b]", "deprecated": false, "file": "pandas/core/base.py", "file_line": 808, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L808", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": ""}, "pandas.Series.values": {"type": "property", "docstring": "Return Series as ndarray or ndarray-like depending on the dtype.\n\n.. warning::\n\n   We recommend using :attr:`Series.array` or\n   :meth:`Series.to_numpy`, depending on whether you need\n   a reference to the underlying data or a NumPy array.\n\nReturns\n-------\nnumpy.ndarray or ndarray-like\n\nSee Also\n--------\nSeries.array : Reference to the underlying data.\nSeries.to_numpy : A NumPy array representing the underlying data.\n\nExamples\n--------\n>>> pd.Series([1, 2, 3]).values\narray([1, 2, 3])\n\n>>> pd.Series(list('aabc')).values\narray(['a', 'a', 'b', 'c'], dtype=object)\n\n>>> pd.Series(list('aabc')).astype('category').values\n[a, a, b, c]\nCategories (3, object): [a, b, c]\n\nTimezone aware datetime data is converted to UTC:\n\n>>> pd.Series(pd.date_range('20130101', periods=3,\n...                         tz='US/Eastern')).values\narray(['2013-01-01T05:00:00.000000000',\n       '2013-01-02T05:00:00.000000000',\n       '2013-01-03T05:00:00.000000000'], dtype='datetime64[ns]')", "deprecated": false, "file": "pandas/core/series.py", "file_line": 516, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L516", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": ""}, "pandas.Series.dtype": {"type": "property", "docstring": "Return the dtype object of the underlying data.", "deprecated": false, "file": "pandas/core/series.py", "file_line": 466, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L466", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": ""}, "pandas.Series.ftype": {"type": "property", "docstring": "Return if the data is sparse|dense.\n\n.. deprecated:: 0.25.0\n   Use :func:`dtype` instead.", "deprecated": true, "file": "pandas/core/series.py", "file_line": 480, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L480", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": ""}, "pandas.Series.shape": {"type": "property", "docstring": "Return a tuple of the shape of the underlying data.", "deprecated": false, "file": "pandas/core/base.py", "file_line": 687, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L687", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": ""}, "pandas.Series.nbytes": {"type": "property", "docstring": "Return the number of bytes in the underlying data.", "deprecated": false, "file": "pandas/core/base.py", "file_line": 749, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L749", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": ""}, "pandas.Series.ndim": {"type": "property", "docstring": "Number of dimensions of the underlying data, by definition 1.", "deprecated": false, "file": "pandas/core/base.py", "file_line": 694, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L694", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": ""}, "pandas.Series.size": {"type": "property", "docstring": "Return the number of elements in the underlying data.", "deprecated": false, "file": "pandas/core/base.py", "file_line": 771, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L771", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": ""}, "pandas.Series.strides": {"type": "property", "docstring": "Return the strides of the underlying data.\n\n.. deprecated:: 0.23.0", "deprecated": true, "file": "pandas/core/base.py", "file_line": 756, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L756", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": ""}, "pandas.Series.itemsize": {"type": "property", "docstring": "Return the size of the dtype of the item of the underlying data.\n\n.. deprecated:: 0.23.0", "deprecated": true, "file": "pandas/core/base.py", "file_line": 734, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L734", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": ""}, "pandas.Series.base": {"type": "property", "docstring": "Return the base object if the memory of the underlying data is shared.\n\n.. deprecated:: 0.23.0", "deprecated": true, "file": "pandas/core/base.py", "file_line": 793, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L793", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": ""}, "pandas.Series.T": {"type": "property", "docstring": "Return the transpose, which is by definition self.", "deprecated": false, "file": "pandas/core/base.py", "file_line": 653, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L653", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": ""}, "pandas.Series.memory_usage": {"type": "function", "docstring": "Return the memory usage of the Series.\n\nThe memory usage can optionally include the contribution of\nthe index and of elements of `object` dtype.\n\nParameters\n----------\nindex : bool, default True\n    Specifies whether to include the memory usage of the Series index.\ndeep : bool, default False\n    If True, introspect the data deeply by interrogating\n    `object` dtypes for system-level memory consumption, and include\n    it in the returned value.\n\nReturns\n-------\nint\n    Bytes of memory consumed.\n\nSee Also\n--------\nnumpy.ndarray.nbytes : Total bytes consumed by the elements of the\n    array.\nDataFrame.memory_usage : Bytes consumed by a DataFrame.\n\nExamples\n--------\n>>> s = pd.Series(range(3))\n>>> s.memory_usage()\n152\n\nNot including the index gives the size of the rest of the data, which\nis necessarily smaller:\n\n>>> s.memory_usage(index=False)\n24\n\nThe memory footprint of `object` values is ignored by default:\n\n>>> s = pd.Series([\"a\", \"b\"])\n>>> s.values\narray(['a', 'b'], dtype=object)\n>>> s.memory_usage()\n144\n>>> s.memory_usage(deep=True)\n260", "deprecated": false, "file": "pandas/core/series.py", "file_line": 4333, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L4333", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": ""}, "pandas.Series.hasnans": {"type": "property", "docstring": "Return if I have any nans; enables various perf speedups.", "deprecated": false, "file": "pandas/core/base.py", "file_line": 1182, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L1182", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": ""}, "pandas.Series.flags": {"type": "property", "docstring": "Return the ndarray.flags for the underlying data.\n\n.. deprecated:: 0.23.0", "deprecated": true, "file": "pandas/core/base.py", "file_line": 778, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L778", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": ""}, "pandas.Series.empty": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/core/base.py", "file_line": 1006, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L1006", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": ""}, "pandas.Series.dtypes": {"type": "property", "docstring": "Return the dtype object of the underlying data.", "deprecated": false, "file": "pandas/core/series.py", "file_line": 473, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L473", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": ""}, "pandas.Series.ftypes": {"type": "property", "docstring": "Return if the data is sparse|dense.\n\n.. deprecated:: 0.25.0\n   Use :func:`dtypes` instead.", "deprecated": true, "file": "pandas/core/series.py", "file_line": 498, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L498", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": ""}, "pandas.Series.data": {"type": "property", "docstring": "Return the data pointer of the underlying data.\n\n.. deprecated:: 0.23.0", "deprecated": true, "file": "pandas/core/base.py", "file_line": 719, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L719", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": ""}, "pandas.Series.is_copy": {"type": "property", "docstring": "Return the copy.", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 206, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L206", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": ""}, "pandas.Series.name": {"type": "property", "docstring": "Return name of the Series.", "deprecated": false, "file": "pandas/core/series.py", "file_line": 452, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L452", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": ""}, "pandas.Series.put": {"type": "function", "docstring": "Apply the `put` method to its `values` attribute if it has one.\n\n.. deprecated:: 0.25.0\n\nSee Also\n--------\nnumpy.ndarray.put", "deprecated": true, "file": "pandas/core/series.py", "file_line": 695, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L695", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["SA04", "Missing description for See Also \"numpy.ndarray.put\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Attributes", "subsection": "", "shared_code_with": ""}, "pandas.Series.astype": {"type": "function", "docstring": "Cast a pandas object to a specified dtype ``dtype``.\n\nParameters\n----------\ndtype : data type, or dict of column name -> data type\n    Use a numpy.dtype or Python type to cast entire pandas object to\n    the same type. Alternatively, use {col: dtype, ...}, where col is a\n    column label and dtype is a numpy.dtype or Python type to cast one\n    or more of the DataFrame's columns to column-specific types.\ncopy : bool, default True\n    Return a copy when ``copy=True`` (be very careful setting\n    ``copy=False`` as changes to values then may propagate to other\n    pandas objects).\nerrors : {'raise', 'ignore'}, default 'raise'\n    Control raising of exceptions on invalid data for provided dtype.\n\n    - ``raise`` : allow exceptions to be raised\n    - ``ignore`` : suppress exceptions. On error return original object\n\n    .. versionadded:: 0.20.0\n\nkwargs : keyword arguments to pass on to the constructor\n\nReturns\n-------\ncasted : same type as caller\n\nSee Also\n--------\nto_datetime : Convert argument to datetime.\nto_timedelta : Convert argument to timedelta.\nto_numeric : Convert argument to a numeric type.\nnumpy.ndarray.astype : Cast a numpy array to a specified type.\n\nExamples\n--------\nCreate a DataFrame:\n\n>>> d = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df = pd.DataFrame(data=d)\n>>> df.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n\nCast all columns to int32:\n\n>>> df.astype('int32').dtypes\ncol1    int32\ncol2    int32\ndtype: object\n\nCast col1 to int32 using a dictionary:\n\n>>> df.astype({'col1': 'int32'}).dtypes\ncol1    int32\ncol2    int64\ndtype: object\n\nCreate a series:\n\n>>> ser = pd.Series([1, 2], dtype='int32')\n>>> ser\n0    1\n1    2\ndtype: int32\n>>> ser.astype('int64')\n0    1\n1    2\ndtype: int64\n\nConvert to categorical type:\n\n>>> ser.astype('category')\n0    1\n1    2\ndtype: category\nCategories (2, int64): [1, 2]\n\nConvert to ordered categorical type with custom ordering:\n\n>>> cat_dtype = pd.api.types.CategoricalDtype(\n...                     categories=[2, 1], ordered=True)\n>>> ser.astype(cat_dtype)\n0    1\n1    2\ndtype: category\nCategories (2, int64): [2 < 1]\n\nNote that using ``copy=False`` and changing data on a new\npandas object may propagate changes:\n\n>>> s1 = pd.Series([1,2])\n>>> s2 = s1.astype('int64', copy=False)\n>>> s2[0] = 10\n>>> s1  # note that s1[0] has changed too\n0    10\n1     2\ndtype: int64", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 5717, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L5717", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {kwargs}"], ["PR09", "Parameter \"errors\" description should finish with \".\""], ["PR07", "Parameter \"kwargs\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["EX03", "flake8 error: E126 continuation line over-indented for hanging indent"], ["EX03", "flake8 error: E231 missing whitespace after ','"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Conversion", "subsection": "", "shared_code_with": ""}, "pandas.Series.infer_objects": {"type": "function", "docstring": "Attempt to infer better dtypes for object columns.\n\nAttempts soft conversion of object-dtyped\ncolumns, leaving non-object and unconvertible\ncolumns unchanged. The inference rules are the\nsame as during normal Series/DataFrame construction.\n\n.. versionadded:: 0.21.0\n\nReturns\n-------\nconverted : same type as input object\n\nSee Also\n--------\nto_datetime : Convert argument to datetime.\nto_timedelta : Convert argument to timedelta.\nto_numeric : Convert argument to numeric type.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"A\": [\"a\", 1, 2, 3]})\n>>> df = df.iloc[1:]\n>>> df\n   A\n1  1\n2  2\n3  3\n\n>>> df.dtypes\nA    object\ndtype: object\n\n>>> df.infer_objects().dtypes\nA    int64\ndtype: object", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 6030, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L6030", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Conversion", "subsection": "", "shared_code_with": ""}, "pandas.Series.copy": {"type": "function", "docstring": "Make a copy of this object's indices and data.\n\nWhen ``deep=True`` (default), a new object will be created with a\ncopy of the calling object's data and indices. Modifications to\nthe data or indices of the copy will not be reflected in the\noriginal object (see notes below).\n\nWhen ``deep=False``, a new object will be created without copying\nthe calling object's data or index (only references to the data\nand index are copied). Any changes to the data of the original\nwill be reflected in the shallow copy (and vice versa).\n\nParameters\n----------\ndeep : bool, default True\n    Make a deep copy, including a copy of the data and the indices.\n    With ``deep=False`` neither the indices nor the data are copied.\n\nReturns\n-------\ncopy : Series or DataFrame\n    Object type matches caller.\n\nNotes\n-----\nWhen ``deep=True``, data is copied but actual Python objects\nwill not be copied recursively, only the reference to the object.\nThis is in contrast to `copy.deepcopy` in the Standard Library,\nwhich recursively copies object data (see examples below).\n\nWhile ``Index`` objects are copied when ``deep=True``, the underlying\nnumpy array is not copied for performance reasons. Since ``Index`` is\nimmutable, the underlying data can be safely shared and a copy\nis not needed.\n\nExamples\n--------\n>>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n>>> s\na    1\nb    2\ndtype: int64\n\n>>> s_copy = s.copy()\n>>> s_copy\na    1\nb    2\ndtype: int64\n\n**Shallow copy versus default (deep) copy:**\n\n>>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n>>> deep = s.copy()\n>>> shallow = s.copy(deep=False)\n\nShallow copy shares data and index with original.\n\n>>> s is shallow\nFalse\n>>> s.values is shallow.values and s.index is shallow.index\nTrue\n\nDeep copy has own copy of data and index.\n\n>>> s is deep\nFalse\n>>> s.values is deep.values or s.index is deep.index\nFalse\n\nUpdates to the data shared by shallow copy and original is reflected\nin both; deep copy remains unchanged.\n\n>>> s[0] = 3\n>>> shallow[1] = 4\n>>> s\na    3\nb    4\ndtype: int64\n>>> shallow\na    3\nb    4\ndtype: int64\n>>> deep\na    1\nb    2\ndtype: int64\n\nNote that when copying an object containing Python objects, a deep copy\nwill copy the data, but will not do so recursively. Updating a nested\ndata object will be reflected in the deep copy.\n\n>>> s = pd.Series([[1, 2], [3, 4]])\n>>> deep = s.copy()\n>>> s[0][0] = 10\n>>> s\n0    [10, 2]\n1     [3, 4]\ndtype: object\n>>> deep\n0    [10, 2]\n1     [3, 4]\ndtype: object", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 5866, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L5866", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Conversion", "subsection": "", "shared_code_with": ""}, "pandas.Series.bool": {"type": "function", "docstring": "Return the bool of a single element PandasObject.\n\nThis must be a boolean scalar value, either True or False.  Raise a\nValueError if the PandasObject does not have exactly 1 element, or that\nelement is not boolean\n\nReturns\n-------\nbool\n    Same single boolean value converted to bool type.", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 1536, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L1536", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Conversion", "subsection": "", "shared_code_with": ""}, "pandas.Series.to_numpy": {"type": "function", "docstring": "A NumPy ndarray representing the values in this Series or Index.\n\n.. versionadded:: 0.24.0\n\nParameters\n----------\ndtype : str or numpy.dtype, optional\n    The dtype to pass to :meth:`numpy.asarray`\ncopy : bool, default False\n    Whether to ensure that the returned value is a not a view on\n    another array. Note that ``copy=False`` does not *ensure* that\n    ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that\n    a copy is made, even if not strictly necessary.\n\nReturns\n-------\nnumpy.ndarray\n\nSee Also\n--------\nSeries.array : Get the actual data stored within.\nIndex.array : Get the actual data stored within.\nDataFrame.to_numpy : Similar method for DataFrame.\n\nNotes\n-----\nThe returned array will be the same up to equality (values equal\nin `self` will be equal in the returned array; likewise for values\nthat are not equal). When `self` contains an ExtensionArray, the\ndtype may be different. For example, for a category-dtype Series,\n``to_numpy()`` will return a NumPy array and the categorical dtype\nwill be lost.\n\nFor NumPy dtypes, this will be a reference to the actual data stored\nin this Series or Index (assuming ``copy=False``). Modifying the result\nin place will modify the data stored in the Series or Index (not that\nwe recommend doing that).\n\nFor extension types, ``to_numpy()`` *may* require copying data and\ncoercing the result to a NumPy type (possibly object), which may be\nexpensive. When you need a no-copy reference to the underlying data,\n:attr:`Series.array` should be used instead.\n\nThis table lays out the different dtypes and default return types of\n``to_numpy()`` for various dtypes within pandas.\n\n================== ================================\ndtype              array type\n================== ================================\ncategory[T]        ndarray[T] (same dtype as input)\nperiod             ndarray[object] (Periods)\ninterval           ndarray[object] (Intervals)\nIntegerNA          ndarray[object]\ndatetime64[ns]     datetime64[ns]\ndatetime64[ns, tz] ndarray[object] (Timestamps)\n================== ================================\n\nExamples\n--------\n>>> ser = pd.Series(pd.Categorical(['a', 'b', 'a']))\n>>> ser.to_numpy()\narray(['a', 'b', 'a'], dtype=object)\n\nSpecify the `dtype` to control how datetime-aware data is represented.\nUse ``dtype=object`` to return an ndarray of pandas :class:`Timestamp`\nobjects, each with the correct ``tz``.\n\n>>> ser = pd.Series(pd.date_range('2000', periods=2, tz=\"CET\"))\n>>> ser.to_numpy(dtype=object)\narray([Timestamp('2000-01-01 00:00:00+0100', tz='CET', freq='D'),\n       Timestamp('2000-01-02 00:00:00+0100', tz='CET', freq='D')],\n      dtype=object)\n\nOr ``dtype='datetime64[ns]'`` to return an ndarray of native\ndatetime64 values. The values are converted to UTC and the timezone\ninfo is dropped.\n\n>>> ser.to_numpy(dtype=\"datetime64[ns]\")\n... # doctest: +ELLIPSIS\narray(['1999-12-31T23:00:00.000000000', '2000-01-01T23:00:00...'],\n      dtype='datetime64[ns]')", "deprecated": false, "file": "pandas/core/base.py", "file_line": 893, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L893", "errors": [["PR09", "Parameter \"dtype\" description should finish with \".\""], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Conversion", "subsection": "", "shared_code_with": ""}, "pandas.Series.to_period": {"type": "function", "docstring": "Convert Series from DatetimeIndex to PeriodIndex with desired\nfrequency (inferred from index if not passed).\n\nParameters\n----------\nfreq : str, default None\n    Frequency associated with the PeriodIndex.\ncopy : bool, default True\n    Whether or not to return a copy.\n\nReturns\n-------\nSeries\n    Series with index converted to PeriodIndex.", "deprecated": false, "file": "pandas/core/series.py", "file_line": 4771, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L4771", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Conversion", "subsection": "", "shared_code_with": ""}, "pandas.Series.to_timestamp": {"type": "function", "docstring": "Cast to DatetimeIndex of Timestamps, at *beginning* of period.\n\nParameters\n----------\nfreq : str, default frequency of PeriodIndex\n    Desired frequency.\nhow : {'s', 'e', 'start', 'end'}\n    Convention for converting period to timestamp; start of period\n    vs. end.\ncopy : bool, default True\n    Whether or not to return a copy.\n\nReturns\n-------\nSeries with DatetimeIndex", "deprecated": false, "file": "pandas/core/series.py", "file_line": 4746, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L4746", "errors": [["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Conversion", "subsection": "", "shared_code_with": ""}, "pandas.Series.to_list": {"type": "function", "docstring": "Return a list of the values.\n\nThese are each a scalar type, which is a Python scalar\n(for str, int, float) or a pandas scalar\n(for Timestamp/Timedelta/Interval/Period)\n\nReturns\n-------\nlist\n\nSee Also\n--------\nnumpy.ndarray.tolist", "deprecated": false, "file": "pandas/core/base.py", "file_line": 1137, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L1137", "errors": [["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"numpy.ndarray.tolist\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Conversion", "subsection": "", "shared_code_with": ""}, "pandas.Series.get_values": {"type": "function", "docstring": "Same as values (but handles sparseness conversions); is a view.\n\n.. deprecated:: 0.25.0\n    Use :meth:`Series.to_numpy` or :attr:`Series.array` instead.\n\nReturns\n-------\nnumpy.ndarray\n    Data of the Series.", "deprecated": true, "file": "pandas/core/series.py", "file_line": 565, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L565", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Conversion", "subsection": "", "shared_code_with": ""}, "pandas.Series.__array__": {"type": "function", "docstring": "Return the values as a NumPy array.\n\nUsers should not call this directly. Rather, it is invoked by\n:func:`numpy.array` and :func:`numpy.asarray`.\n\nParameters\n----------\ndtype : str or numpy.dtype, optional\n    The dtype to use for the resulting NumPy array. By default,\n    the dtype is inferred from the data.\n\nReturns\n-------\nnumpy.ndarray\n    The values in the series converted to a :class:`numpy.ndarary`\n    with the specified `dtype`.\n\nSee Also\n--------\narray : Create a new array from data.\nSeries.array : Zero-copy view to the array backing the Series.\nSeries.to_numpy : Series method for similar behavior.\n\nExamples\n--------\n>>> ser = pd.Series([1, 2, 3])\n>>> np.asarray(ser)\narray([1, 2, 3])\n\nFor timezone-aware data, the timezones may be retained with\n``dtype='object'``\n\n>>> tzser = pd.Series(pd.date_range('2000', periods=2, tz=\"CET\"))\n>>> np.asarray(tzser, dtype=\"object\")\narray([Timestamp('2000-01-01 00:00:00+0100', tz='CET', freq='D'),\n       Timestamp('2000-01-02 00:00:00+0100', tz='CET', freq='D')],\n      dtype=object)\n\nOr the values may be localized to UTC and the tzinfo discared with\n``dtype='datetime64[ns]'``\n\n>>> np.asarray(tzser, dtype=\"datetime64[ns]\")  # doctest: +ELLIPSIS\narray(['1999-12-31T23:00:00.000000000', ...],\n      dtype='datetime64[ns]')", "deprecated": false, "file": "pandas/core/series.py", "file_line": 876, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L876", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Conversion", "subsection": "", "shared_code_with": ""}, "pandas.Series.get": {"type": "function", "docstring": "Get item from object for given key (ex: DataFrame column).\n\nReturns default value if not found.\n\nParameters\n----------\nkey : object\n\nReturns\n-------\nvalue : same type as items contained in object", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 3733, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L3733", "errors": [["PR01", "Parameters {default} not documented"], ["PR07", "Parameter \"key\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Indexing, iteration", "subsection": "", "shared_code_with": ""}, "pandas.Series.at": {"type": "property", "docstring": "Access a single value for a row/column label pair.\n\nSimilar to ``loc``, in that both provide label-based lookups. Use\n``at`` if you only need to get or set a single value in a DataFrame\nor Series.\n\nRaises\n------\nKeyError\n    When label does not exist in DataFrame\n\nSee Also\n--------\nDataFrame.iat : Access a single value for a row/column pair by integer\n    position.\nDataFrame.loc : Access a group of rows and columns by label(s).\nSeries.at : Access a single value using a label.\n\nExamples\n--------\n>>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],\n...                   index=[4, 5, 6], columns=['A', 'B', 'C'])\n>>> df\n    A   B   C\n4   0   2   3\n5   0   4   1\n6  10  20  30\n\nGet value at specified row/column pair\n\n>>> df.at[4, 'B']\n2\n\nSet value at specified row/column pair\n\n>>> df.at[4, 'B'] = 10\n>>> df.at[4, 'B']\n10\n\nGet value within a Series\n\n>>> df.loc[5].at['B']\n4", "deprecated": false, "file": "pandas/core/indexing.py", "file_line": 2196, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexing.py#L2196", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Indexing, iteration", "subsection": "", "shared_code_with": ""}, "pandas.Series.iat": {"type": "property", "docstring": "Access a single value for a row/column pair by integer position.\n\nSimilar to ``iloc``, in that both provide integer-based lookups. Use\n``iat`` if you only need to get or set a single value in a DataFrame\nor Series.\n\nRaises\n------\nIndexError\n    When integer position is out of bounds\n\nSee Also\n--------\nDataFrame.at : Access a single value for a row/column label pair.\nDataFrame.loc : Access a group of rows and columns by label(s).\nDataFrame.iloc : Access a group of rows and columns by integer position(s).\n\nExamples\n--------\n>>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],\n...                   columns=['A', 'B', 'C'])\n>>> df\n    A   B   C\n0   0   2   3\n1   0   4   1\n2  10  20  30\n\nGet value at specified row/column pair\n\n>>> df.iat[1, 2]\n1\n\nSet value at specified row/column pair\n\n>>> df.iat[1, 2] = 10\n>>> df.iat[1, 2]\n10\n\nGet value within a series\n\n>>> df.loc[0].iat[1]\n2", "deprecated": false, "file": "pandas/core/indexing.py", "file_line": 2271, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexing.py#L2271", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Indexing, iteration", "subsection": "", "shared_code_with": ""}, "pandas.Series.loc": {"type": "property", "docstring": "Access a group of rows and columns by label(s) or a boolean array.\n\n``.loc[]`` is primarily label based, but may also be used with a\nboolean array.\n\nAllowed inputs are:\n\n- A single label, e.g. ``5`` or ``'a'``, (note that ``5`` is\n  interpreted as a *label* of the index, and **never** as an\n  integer position along the index).\n- A list or array of labels, e.g. ``['a', 'b', 'c']``.\n- A slice object with labels, e.g. ``'a':'f'``.\n\n  .. warning:: Note that contrary to usual python slices, **both** the\n      start and the stop are included\n\n- A boolean array of the same length as the axis being sliced,\n  e.g. ``[True, False, True]``.\n- A ``callable`` function with one argument (the calling Series or\n  DataFrame) and that returns valid output for indexing (one of the above)\n\nSee more at :ref:`Selection by Label <indexing.label>`\n\nRaises\n------\nKeyError:\n    when any items are not found\n\nSee Also\n--------\nDataFrame.at : Access a single value for a row/column label pair.\nDataFrame.iloc : Access group of rows and columns by integer position(s).\nDataFrame.xs : Returns a cross-section (row(s) or column(s)) from the\n    Series/DataFrame.\nSeries.loc : Access group of values using labels.\n\nExamples\n--------\n**Getting values**\n\n>>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n...      index=['cobra', 'viper', 'sidewinder'],\n...      columns=['max_speed', 'shield'])\n>>> df\n            max_speed  shield\ncobra               1       2\nviper               4       5\nsidewinder          7       8\n\nSingle label. Note this returns the row as a Series.\n\n>>> df.loc['viper']\nmax_speed    4\nshield       5\nName: viper, dtype: int64\n\nList of labels. Note using ``[[]]`` returns a DataFrame.\n\n>>> df.loc[['viper', 'sidewinder']]\n            max_speed  shield\nviper               4       5\nsidewinder          7       8\n\nSingle label for row and column\n\n>>> df.loc['cobra', 'shield']\n2\n\nSlice with labels for row and single label for column. As mentioned\nabove, note that both the start and stop of the slice are included.\n\n>>> df.loc['cobra':'viper', 'max_speed']\ncobra    1\nviper    4\nName: max_speed, dtype: int64\n\nBoolean list with the same length as the row axis\n\n>>> df.loc[[False, False, True]]\n            max_speed  shield\nsidewinder          7       8\n\nConditional that returns a boolean Series\n\n>>> df.loc[df['shield'] > 6]\n            max_speed  shield\nsidewinder          7       8\n\nConditional that returns a boolean Series with column labels specified\n\n>>> df.loc[df['shield'] > 6, ['max_speed']]\n            max_speed\nsidewinder          7\n\nCallable that returns a boolean Series\n\n>>> df.loc[lambda df: df['shield'] == 8]\n            max_speed  shield\nsidewinder          7       8\n\n**Setting values**\n\nSet value for all items matching the list of labels\n\n>>> df.loc[['viper', 'sidewinder'], ['shield']] = 50\n>>> df\n            max_speed  shield\ncobra               1       2\nviper               4      50\nsidewinder          7      50\n\nSet value for an entire row\n\n>>> df.loc['cobra'] = 10\n>>> df\n            max_speed  shield\ncobra              10      10\nviper               4      50\nsidewinder          7      50\n\nSet value for an entire column\n\n>>> df.loc[:, 'max_speed'] = 30\n>>> df\n            max_speed  shield\ncobra              30      10\nviper              30      50\nsidewinder         30      50\n\nSet value for rows matching callable condition\n\n>>> df.loc[df['shield'] > 35] = 0\n>>> df\n            max_speed  shield\ncobra              30      10\nviper               0       0\nsidewinder          0       0\n\n**Getting values on a DataFrame with an index that has integer labels**\n\nAnother example using integers for the index\n\n>>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n...      index=[7, 8, 9], columns=['max_speed', 'shield'])\n>>> df\n   max_speed  shield\n7          1       2\n8          4       5\n9          7       8\n\nSlice with integer labels for rows. As mentioned above, note that both\nthe start and stop of the slice are included.\n\n>>> df.loc[7:9]\n   max_speed  shield\n7          1       2\n8          4       5\n9          7       8\n\n**Getting values with a MultiIndex**\n\nA number of examples using a DataFrame with a MultiIndex\n\n>>> tuples = [\n...    ('cobra', 'mark i'), ('cobra', 'mark ii'),\n...    ('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n...    ('viper', 'mark ii'), ('viper', 'mark iii')\n... ]\n>>> index = pd.MultiIndex.from_tuples(tuples)\n>>> values = [[12, 2], [0, 4], [10, 20],\n...         [1, 4], [7, 1], [16, 36]]\n>>> df = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\n>>> df\n                     max_speed  shield\ncobra      mark i           12       2\n           mark ii           0       4\nsidewinder mark i           10      20\n           mark ii           1       4\nviper      mark ii           7       1\n           mark iii         16      36\n\nSingle label. Note this returns a DataFrame with a single index.\n\n>>> df.loc['cobra']\n         max_speed  shield\nmark i          12       2\nmark ii          0       4\n\nSingle index tuple. Note this returns a Series.\n\n>>> df.loc[('cobra', 'mark ii')]\nmax_speed    0\nshield       4\nName: (cobra, mark ii), dtype: int64\n\nSingle label for row and column. Similar to passing in a tuple, this\nreturns a Series.\n\n>>> df.loc['cobra', 'mark i']\nmax_speed    12\nshield        2\nName: (cobra, mark i), dtype: int64\n\nSingle tuple. Note using ``[[]]`` returns a DataFrame.\n\n>>> df.loc[[('cobra', 'mark ii')]]\n               max_speed  shield\ncobra mark ii          0       4\n\nSingle tuple for the index with a single label for the column\n\n>>> df.loc[('cobra', 'mark i'), 'shield']\n2\n\nSlice from index tuple to single label\n\n>>> df.loc[('cobra', 'mark i'):'viper']\n                     max_speed  shield\ncobra      mark i           12       2\n           mark ii           0       4\nsidewinder mark i           10      20\n           mark ii           1       4\nviper      mark ii           7       1\n           mark iii         16      36\n\nSlice from index tuple to index tuple\n\n>>> df.loc[('cobra', 'mark i'):('viper', 'mark ii')]\n                    max_speed  shield\ncobra      mark i          12       2\n           mark ii          0       4\nsidewinder mark i          10      20\n           mark ii          1       4\nviper      mark ii          7       1", "deprecated": false, "file": "pandas/core/indexing.py", "file_line": 1443, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexing.py#L1443", "errors": [["EX03", "flake8 error: E121 continuation line under-indented for hanging indent"], ["EX03", "flake8 error: E126 continuation line over-indented for hanging indent"], ["EX03", "flake8 error: E128 continuation line under-indented for visual indent (3 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Indexing, iteration", "subsection": "", "shared_code_with": ""}, "pandas.Series.iloc": {"type": "property", "docstring": "Purely integer-location based indexing for selection by position.\n\n``.iloc[]`` is primarily integer position based (from ``0`` to\n``length-1`` of the axis), but may also be used with a boolean\narray.\n\nAllowed inputs are:\n\n- An integer, e.g. ``5``.\n- A list or array of integers, e.g. ``[4, 3, 0]``.\n- A slice object with ints, e.g. ``1:7``.\n- A boolean array.\n- A ``callable`` function with one argument (the calling Series or\n  DataFrame) and that returns valid output for indexing (one of the above).\n  This is useful in method chains, when you don't have a reference to the\n  calling object, but would like to base your selection on some value.\n\n``.iloc`` will raise ``IndexError`` if a requested indexer is\nout-of-bounds, except *slice* indexers which allow out-of-bounds\nindexing (this conforms with python/numpy *slice* semantics).\n\nSee more at :ref:`Selection by Position <indexing.integer>`.\n\nSee Also\n--------\nDataFrame.iat : Fast integer location scalar accessor.\nDataFrame.loc : Purely label-location based indexer for selection by label.\nSeries.iloc : Purely integer-location based indexing for\n               selection by position.\n\nExamples\n--------\n\n>>> mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},\n...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},\n...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000 }]\n>>> df = pd.DataFrame(mydict)\n>>> df\n      a     b     c     d\n0     1     2     3     4\n1   100   200   300   400\n2  1000  2000  3000  4000\n\n**Indexing just the rows**\n\nWith a scalar integer.\n\n>>> type(df.iloc[0])\n<class 'pandas.core.series.Series'>\n>>> df.iloc[0]\na    1\nb    2\nc    3\nd    4\nName: 0, dtype: int64\n\nWith a list of integers.\n\n>>> df.iloc[[0]]\n   a  b  c  d\n0  1  2  3  4\n>>> type(df.iloc[[0]])\n<class 'pandas.core.frame.DataFrame'>\n\n>>> df.iloc[[0, 1]]\n     a    b    c    d\n0    1    2    3    4\n1  100  200  300  400\n\nWith a `slice` object.\n\n>>> df.iloc[:3]\n      a     b     c     d\n0     1     2     3     4\n1   100   200   300   400\n2  1000  2000  3000  4000\n\nWith a boolean mask the same length as the index.\n\n>>> df.iloc[[True, False, True]]\n      a     b     c     d\n0     1     2     3     4\n2  1000  2000  3000  4000\n\nWith a callable, useful in method chains. The `x` passed\nto the ``lambda`` is the DataFrame being sliced. This selects\nthe rows whose index label even.\n\n>>> df.iloc[lambda x: x.index % 2 == 0]\n      a     b     c     d\n0     1     2     3     4\n2  1000  2000  3000  4000\n\n**Indexing both axes**\n\nYou can mix the indexer types for the index and columns. Use ``:`` to\nselect the entire axis.\n\nWith scalar integers.\n\n>>> df.iloc[0, 1]\n2\n\nWith lists of integers.\n\n>>> df.iloc[[0, 2], [1, 3]]\n      b     d\n0     2     4\n2  2000  4000\n\nWith `slice` objects.\n\n>>> df.iloc[1:3, 0:3]\n      a     b     c\n1   100   200   300\n2  1000  2000  3000\n\nWith a boolean array whose length matches the columns.\n\n>>> df.iloc[:, [True, False, True, False]]\n      a     c\n0     1     3\n1   100   300\n2  1000  3000\n\nWith a callable function that expects the Series or DataFrame.\n\n>>> df.iloc[:, lambda df: [0, 2]]\n      a     c\n0     1     3\n1   100   300\n2  1000  3000", "deprecated": false, "file": "pandas/core/indexing.py", "file_line": 1831, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexing.py#L1831", "errors": [["EX03", "flake8 error: E202 whitespace before '}'"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Indexing, iteration", "subsection": "", "shared_code_with": ""}, "pandas.Series.__iter__": {"type": "function", "docstring": "Return an iterator of the values.\n\nThese are each a scalar type, which is a Python scalar\n(for str, int, float) or a pandas scalar\n(for Timestamp/Timedelta/Interval/Period)\n\nReturns\n-------\niterator", "deprecated": false, "file": "pandas/core/base.py", "file_line": 1162, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L1162", "errors": [["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Indexing, iteration", "subsection": "", "shared_code_with": ""}, "pandas.Series.items": {"type": "function", "docstring": "Lazily iterate over (index, value) tuples.\n\nThis method returns an iterable tuple (index, value). This is\nconvenient if you want to create a lazy iterator.\n\nReturns\n-------\niterable\n    Iterable of tuples containing the (index, value) pairs from a\n    Series.\n\nSee Also\n--------\nDataFrame.items : Iterate over (column name, Series) pairs.\nDataFrame.iterrows : Iterate over DataFrame rows as (index, Series) pairs.\n\nExamples\n--------\n>>> s = pd.Series(['A', 'B', 'C'])\n>>> for index, value in s.items():\n...     print(\"Index : {}, Value : {}\".format(index, value))\nIndex : 0, Value : A\nIndex : 1, Value : B\nIndex : 2, Value : C", "deprecated": false, "file": "pandas/core/series.py", "file_line": 1669, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L1669", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Indexing, iteration", "subsection": "", "shared_code_with": ""}, "pandas.Series.iteritems": {"type": "function", "docstring": "Lazily iterate over (index, value) tuples.\n\nThis method returns an iterable tuple (index, value). This is\nconvenient if you want to create a lazy iterator.\n\nReturns\n-------\niterable\n    Iterable of tuples containing the (index, value) pairs from a\n    Series.\n\nSee Also\n--------\nDataFrame.items : Iterate over (column name, Series) pairs.\nDataFrame.iterrows : Iterate over DataFrame rows as (index, Series) pairs.\n\nExamples\n--------\n>>> s = pd.Series(['A', 'B', 'C'])\n>>> for index, value in s.items():\n...     print(\"Index : {}, Value : {}\".format(index, value))\nIndex : 0, Value : A\nIndex : 1, Value : B\nIndex : 2, Value : C", "deprecated": false, "file": "pandas/core/series.py", "file_line": 1698, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L1698", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Indexing, iteration", "subsection": "", "shared_code_with": ""}, "pandas.Series.keys": {"type": "function", "docstring": "Return alias for index.\n\nReturns\n-------\nIndex\n    Index of the Series.", "deprecated": false, "file": "pandas/core/series.py", "file_line": 1705, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L1705", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Indexing, iteration", "subsection": "", "shared_code_with": ""}, "pandas.Series.pop": {"type": "function", "docstring": "Return item and drop from frame. Raise KeyError if not found.\n\nParameters\n----------\nitem : str\n    Label of column to be popped.\n\nReturns\n-------\nSeries\n\nExamples\n--------\n>>> df = pd.DataFrame([('falcon', 'bird', 389.0),\n...                    ('parrot', 'bird', 24.0),\n...                    ('lion', 'mammal', 80.5),\n...                    ('monkey','mammal', np.nan)],\n...                   columns=('name', 'class', 'max_speed'))\n>>> df\n     name   class  max_speed\n0  falcon    bird      389.0\n1  parrot    bird       24.0\n2    lion  mammal       80.5\n3  monkey  mammal        NaN\n\n>>> df.pop('class')\n0      bird\n1      bird\n2    mammal\n3    mammal\nName: class, dtype: object\n\n>>> df\n     name  max_speed\n0  falcon      389.0\n1  parrot       24.0\n2    lion       80.5\n3  monkey        NaN", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 801, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L801", "errors": [["RT03", "Return value has no description"], ["EX03", "flake8 error: E231 missing whitespace after ','"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Indexing, iteration", "subsection": "", "shared_code_with": ""}, "pandas.Series.item": {"type": "function", "docstring": "Return the first element of the underlying data as a python scalar.\n\n.. deprecated:: 0.25.0\n\nReturns\n-------\nscalar\n    The first element of %(klass)s.", "deprecated": true, "file": "pandas/core/base.py", "file_line": 701, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L701", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Indexing, iteration", "subsection": "", "shared_code_with": ""}, "pandas.Series.xs": {"type": "function", "docstring": "Return cross-section from the Series/DataFrame.\n\nThis method takes a `key` argument to select data at a particular\nlevel of a MultiIndex.\n\nParameters\n----------\nkey : label or tuple of label\n    Label contained in the index, or partially in a MultiIndex.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Axis to retrieve cross-section on.\nlevel : object, defaults to first n levels (n=1 or len(key))\n    In case of a key partially contained in a MultiIndex, indicate\n    which levels are used. Levels can be referred by label or position.\ndrop_level : bool, default True\n    If False, returns object with same levels as self.\n\nReturns\n-------\nSeries or DataFrame\n    Cross-section from the original Series or DataFrame\n    corresponding to the selected index levels.\n\nSee Also\n--------\nDataFrame.loc : Access a group of rows and columns\n    by label(s) or a boolean array.\nDataFrame.iloc : Purely integer-location based indexing\n    for selection by position.\n\nNotes\n-----\n`xs` can not be used to set values.\n\nMultiIndex Slicers is a generic way to get/set values on\nany level or levels.\nIt is a superset of `xs` functionality, see\n:ref:`MultiIndex Slicers <advanced.mi_slicers>`.\n\nExamples\n--------\n>>> d = {'num_legs': [4, 4, 2, 2],\n...      'num_wings': [0, 0, 2, 2],\n...      'class': ['mammal', 'mammal', 'mammal', 'bird'],\n...      'animal': ['cat', 'dog', 'bat', 'penguin'],\n...      'locomotion': ['walks', 'walks', 'flies', 'walks']}\n>>> df = pd.DataFrame(data=d)\n>>> df = df.set_index(['class', 'animal', 'locomotion'])\n>>> df\n                           num_legs  num_wings\nclass  animal  locomotion\nmammal cat     walks              4          0\n       dog     walks              4          0\n       bat     flies              2          2\nbird   penguin walks              2          2\n\nGet values at specified index\n\n>>> df.xs('mammal')\n                   num_legs  num_wings\nanimal locomotion\ncat    walks              4          0\ndog    walks              4          0\nbat    flies              2          2\n\nGet values at several indexes\n\n>>> df.xs(('mammal', 'dog'))\n            num_legs  num_wings\nlocomotion\nwalks              4          0\n\nGet values at specified index and level\n\n>>> df.xs('cat', level=1)\n                   num_legs  num_wings\nclass  locomotion\nmammal walks              4          0\n\nGet values at several indexes and levels\n\n>>> df.xs(('bird', 'walks'),\n...       level=[0, 'locomotion'])\n         num_legs  num_wings\nanimal\npenguin         2          2\n\nGet values at specified column and axis\n\n>>> df.xs('num_wings', axis=1)\nclass   animal   locomotion\nmammal  cat      walks         0\n        dog      walks         0\n        bat      flies         2\nbird    penguin  walks         2\nName: num_wings, dtype: int64", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 3378, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L3378", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Indexing, iteration", "subsection": "", "shared_code_with": ""}, "pandas.Series.add": {"type": "function", "docstring": "Return Addition of series and other, element-wise (binary operator `add`).\n\nEquivalent to ``series + other``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.radd\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.add(b, fill_value=0)\na    2.0\nb    1.0\nc    1.0\nd    1.0\ne    NaN\ndtype: float64", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.radd\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": ""}, "pandas.Series.sub": {"type": "function", "docstring": "Return Subtraction of series and other, element-wise (binary operator `sub`).\n\nEquivalent to ``series - other``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.rsub\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.subtract(b, fill_value=0)\na    0.0\nb    1.0\nc    1.0\nd   -1.0\ne    NaN\ndtype: float64", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.rsub\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": "pandas.Series.add"}, "pandas.Series.mul": {"type": "function", "docstring": "Return Multiplication of series and other, element-wise (binary operator `mul`).\n\nEquivalent to ``series * other``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.rmul\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.multiply(b, fill_value=0)\na    1.0\nb    0.0\nc    0.0\nd    0.0\ne    NaN\ndtype: float64", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.rmul\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": "pandas.Series.sub"}, "pandas.Series.div": {"type": "function", "docstring": "Return Floating division of series and other, element-wise (binary operator `truediv`).\n\nEquivalent to ``series / other``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.rtruediv\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.divide(b, fill_value=0)\na    1.0\nb    inf\nc    inf\nd    0.0\ne    NaN\ndtype: float64", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.rtruediv\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": "pandas.Series.mul"}, "pandas.Series.truediv": {"type": "function", "docstring": "Return Floating division of series and other, element-wise (binary operator `truediv`).\n\nEquivalent to ``series / other``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.rtruediv\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.divide(b, fill_value=0)\na    1.0\nb    inf\nc    inf\nd    0.0\ne    NaN\ndtype: float64", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.rtruediv\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": "pandas.Series.div"}, "pandas.Series.floordiv": {"type": "function", "docstring": "Return Integer division of series and other, element-wise (binary operator `floordiv`).\n\nEquivalent to ``series // other``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.rfloordiv\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.floordiv(b, fill_value=0)\na    1.0\nb    NaN\nc    NaN\nd    0.0\ne    NaN\ndtype: float64", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.rfloordiv\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": "pandas.Series.truediv"}, "pandas.Series.mod": {"type": "function", "docstring": "Return Modulo of series and other, element-wise (binary operator `mod`).\n\nEquivalent to ``series % other``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.rmod\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.mod(b, fill_value=0)\na    0.0\nb    NaN\nc    NaN\nd    0.0\ne    NaN\ndtype: float64", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.rmod\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": "pandas.Series.floordiv"}, "pandas.Series.pow": {"type": "function", "docstring": "Return Exponential power of series and other, element-wise (binary operator `pow`).\n\nEquivalent to ``series ** other``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.rpow\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.pow(b, fill_value=0)\na    1.0\nb    1.0\nc    1.0\nd    0.0\ne    NaN\ndtype: float64", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.rpow\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": "pandas.Series.mod"}, "pandas.Series.radd": {"type": "function", "docstring": "Return Addition of series and other, element-wise (binary operator `radd`).\n\nEquivalent to ``other + series``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.add\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.add(b, fill_value=0)\na    2.0\nb    1.0\nc    1.0\nd    1.0\ne    NaN\ndtype: float64", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.add\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": "pandas.Series.pow"}, "pandas.Series.rsub": {"type": "function", "docstring": "Return Subtraction of series and other, element-wise (binary operator `rsub`).\n\nEquivalent to ``other - series``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.sub\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.subtract(b, fill_value=0)\na    0.0\nb    1.0\nc    1.0\nd   -1.0\ne    NaN\ndtype: float64", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.sub\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": "pandas.Series.radd"}, "pandas.Series.rmul": {"type": "function", "docstring": "Return Multiplication of series and other, element-wise (binary operator `rmul`).\n\nEquivalent to ``other * series``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.mul\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.multiply(b, fill_value=0)\na    1.0\nb    0.0\nc    0.0\nd    0.0\ne    NaN\ndtype: float64", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.mul\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": "pandas.Series.rsub"}, "pandas.Series.rdiv": {"type": "function", "docstring": "Return Floating division of series and other, element-wise (binary operator `rtruediv`).\n\nEquivalent to ``other / series``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.truediv\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.divide(b, fill_value=0)\na    1.0\nb    inf\nc    inf\nd    0.0\ne    NaN\ndtype: float64", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.truediv\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": "pandas.Series.rmul"}, "pandas.Series.rtruediv": {"type": "function", "docstring": "Return Floating division of series and other, element-wise (binary operator `rtruediv`).\n\nEquivalent to ``other / series``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.truediv\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.divide(b, fill_value=0)\na    1.0\nb    inf\nc    inf\nd    0.0\ne    NaN\ndtype: float64", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.truediv\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": "pandas.Series.rdiv"}, "pandas.Series.rfloordiv": {"type": "function", "docstring": "Return Integer division of series and other, element-wise (binary operator `rfloordiv`).\n\nEquivalent to ``other // series``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.floordiv\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.floordiv(b, fill_value=0)\na    1.0\nb    NaN\nc    NaN\nd    0.0\ne    NaN\ndtype: float64", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.floordiv\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": "pandas.Series.rtruediv"}, "pandas.Series.rmod": {"type": "function", "docstring": "Return Modulo of series and other, element-wise (binary operator `rmod`).\n\nEquivalent to ``other % series``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.mod\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.mod(b, fill_value=0)\na    0.0\nb    NaN\nc    NaN\nd    0.0\ne    NaN\ndtype: float64", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.mod\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": "pandas.Series.rfloordiv"}, "pandas.Series.rpow": {"type": "function", "docstring": "Return Exponential power of series and other, element-wise (binary operator `rpow`).\n\nEquivalent to ``other ** series``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.pow\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.pow(b, fill_value=0)\na    1.0\nb    1.0\nc    1.0\nd    0.0\ne    NaN\ndtype: float64", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.pow\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": "pandas.Series.rmod"}, "pandas.Series.combine": {"type": "function", "docstring": "Combine the Series with a Series or scalar according to `func`.\n\nCombine the Series and `other` using `func` to perform elementwise\nselection for combined Series.\n`fill_value` is assumed when value is missing at some index\nfrom one of the two objects being combined.\n\nParameters\n----------\nother : Series or scalar\n    The value(s) to be combined with the `Series`.\nfunc : function\n    Function that takes two scalars as inputs and returns an element.\nfill_value : scalar, optional\n    The value to assume when an index is missing from\n    one Series or the other. The default specifies to use the\n    appropriate NaN value for the underlying dtype of the Series.\n\nReturns\n-------\nSeries\n    The result of combining the Series with the other object.\n\nSee Also\n--------\nSeries.combine_first : Combine Series values, choosing the calling\n    Series' values first.\n\nExamples\n--------\nConsider 2 Datasets ``s1`` and ``s2`` containing\nhighest clocked speeds of different birds.\n\n>>> s1 = pd.Series({'falcon': 330.0, 'eagle': 160.0})\n>>> s1\nfalcon    330.0\neagle     160.0\ndtype: float64\n>>> s2 = pd.Series({'falcon': 345.0, 'eagle': 200.0, 'duck': 30.0})\n>>> s2\nfalcon    345.0\neagle     200.0\nduck       30.0\ndtype: float64\n\nNow, to combine the two datasets and view the highest speeds\nof the birds across the two datasets\n\n>>> s1.combine(s2, max)\nduck        NaN\neagle     200.0\nfalcon    345.0\ndtype: float64\n\nIn the previous example, the resulting value for duck is missing,\nbecause the maximum of a NaN and a float is a NaN.\nSo, in the example, we set ``fill_value=0``,\nso the maximum value returned will be the value from some dataset.\n\n>>> s1.combine(s2, max, fill_value=0)\nduck       30.0\neagle     200.0\nfalcon    345.0\ndtype: float64", "deprecated": false, "file": "pandas/core/series.py", "file_line": 2785, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L2785", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": ""}, "pandas.Series.combine_first": {"type": "function", "docstring": "Combine Series values, choosing the calling Series's values first.\n\nParameters\n----------\nother : Series\n    The value(s) to be combined with the `Series`.\n\nReturns\n-------\nSeries\n    The result of combining the Series with the other object.\n\nSee Also\n--------\nSeries.combine : Perform elementwise operation on two Series\n    using a given function.\n\nNotes\n-----\nResult index will be the union of the two indexes.\n\nExamples\n--------\n>>> s1 = pd.Series([1, np.nan])\n>>> s2 = pd.Series([3, 4])\n>>> s1.combine_first(s2)\n0    1.0\n1    4.0\ndtype: float64", "deprecated": false, "file": "pandas/core/series.py", "file_line": 2889, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L2889", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": ""}, "pandas.Series.round": {"type": "function", "docstring": "Round each value in a Series to the given number of decimals.\n\nParameters\n----------\ndecimals : int\n    Number of decimal places to round to (default: 0).\n    If decimals is negative, it specifies the number of\n    positions to the left of the decimal point.\n\nReturns\n-------\nSeries\n    Rounded values of the Series.\n\nSee Also\n--------\nnumpy.around : Round values of an np.array.\nDataFrame.round : Round values of a DataFrame.\n\nExamples\n--------\n>>> s = pd.Series([0.1, 1.3, 2.7])\n>>> s.round()\n0    0.0\n1    1.0\n2    3.0\ndtype: float64", "deprecated": false, "file": "pandas/core/series.py", "file_line": 2280, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L2280", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": ""}, "pandas.Series.lt": {"type": "function", "docstring": "Return Less than of series and other, element-wise (binary operator `lt`).\n\nEquivalent to ``series < other``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.None", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.None\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": "pandas.Series.rpow"}, "pandas.Series.gt": {"type": "function", "docstring": "Return Greater than of series and other, element-wise (binary operator `gt`).\n\nEquivalent to ``series > other``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.None", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.None\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": "pandas.Series.lt"}, "pandas.Series.le": {"type": "function", "docstring": "Return Less than or equal to of series and other, element-wise (binary operator `le`).\n\nEquivalent to ``series <= other``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.None", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.None\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": "pandas.Series.gt"}, "pandas.Series.ge": {"type": "function", "docstring": "Return Greater than or equal to of series and other, element-wise (binary operator `ge`).\n\nEquivalent to ``series >= other``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.None", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.None\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": "pandas.Series.le"}, "pandas.Series.ne": {"type": "function", "docstring": "Return Not equal to of series and other, element-wise (binary operator `ne`).\n\nEquivalent to ``series != other``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.None", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.None\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": "pandas.Series.ge"}, "pandas.Series.eq": {"type": "function", "docstring": "Return Equal to of series and other, element-wise (binary operator `eq`).\n\nEquivalent to ``series == other``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.None", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.None\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": "pandas.Series.ne"}, "pandas.Series.product": {"type": "function", "docstring": "Return the product of the values for the requested axis.\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a scalar.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\nmin_count : int, default 0\n    The required number of valid values to perform the operation. If fewer than\n    ``min_count`` non-NA values are present the result will be NA.\n\n    .. versionadded:: 0.22.0\n\n       Added with the default being 0. This means the sum of an all-NA\n       or empty Series is 0, and the product of an all-NA or empty\n       Series is 1.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or Series (if level specified)\n\nExamples\n--------\nBy default, the product of an empty or all-NA Series is ``1``\n\n>>> pd.Series([]).prod()\n1.0\n\nThis can be controlled with the ``min_count`` parameter\n\n>>> pd.Series([]).prod(min_count=1)\nnan\n\nThanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\nempty series identically.\n\n>>> pd.Series([np.nan]).prod()\n1.0\n\n>>> pd.Series([np.nan]).prod(min_count=1)\nnan", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11507, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11507", "errors": [["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": ""}, "pandas.Series.dot": {"type": "function", "docstring": "Compute the dot product between the Series and the columns of other.\n\nThis method computes the dot product between the Series and another\none, or the Series and each columns of a DataFrame, or the Series and\neach columns of an array.\n\nIt can also be called using `self @ other` in Python >= 3.5.\n\nParameters\n----------\nother : Series, DataFrame or array-like\n    The other object to compute the dot product with its columns.\n\nReturns\n-------\nscalar, Series or numpy.ndarray\n    Return the dot product of the Series and other if other is a\n    Series, the Series of the dot product of Series and each rows of\n    other if other is a DataFrame or a numpy.ndarray between the Series\n    and each columns of the numpy array.\n\nSee Also\n--------\nDataFrame.dot: Compute the matrix product with the DataFrame.\nSeries.mul: Multiplication of series and other, element-wise.\n\nNotes\n-----\nThe Series and other has to share the same index if other is a Series\nor a DataFrame.\n\nExamples\n--------\n>>> s = pd.Series([0, 1, 2, 3])\n>>> other = pd.Series([-1, 2, -3, 4])\n>>> s.dot(other)\n8\n>>> s @ other\n8\n>>> df = pd.DataFrame([[0, 1], [-2, 3], [4, -5], [6, 7]])\n>>> s.dot(df)\n0    24\n1    14\ndtype: int64\n>>> arr = np.array([[0, 1], [-2, 3], [4, -5], [6, 7]])\n>>> s.dot(arr)\narray([24, 14])", "deprecated": false, "file": "pandas/core/series.py", "file_line": 2565, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L2565", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Binary operator functions", "subsection": "", "shared_code_with": ""}, "pandas.Series.apply": {"type": "function", "docstring": "Invoke function on values of Series.\n\nCan be ufunc (a NumPy function that applies to the entire Series)\nor a Python function that only works on single values.\n\nParameters\n----------\nfunc : function\n    Python function or NumPy ufunc to apply.\nconvert_dtype : bool, default True\n    Try to find better dtype for elementwise function results. If\n    False, leave as dtype=object.\nargs : tuple\n    Positional arguments passed to func after the series value.\n**kwds\n    Additional keyword arguments passed to func.\n\nReturns\n-------\nSeries or DataFrame\n    If func returns a Series object the result will be a DataFrame.\n\nSee Also\n--------\nSeries.map: For element-wise operations.\nSeries.agg: Only perform aggregating type operations.\nSeries.transform: Only perform transforming type operations.\n\nExamples\n--------\nCreate a series with typical summer temperatures for each city.\n\n>>> s = pd.Series([20, 21, 12],\n...               index=['London', 'New York', 'Helsinki'])\n>>> s\nLondon      20\nNew York    21\nHelsinki    12\ndtype: int64\n\nSquare the values by defining a function and passing it as an\nargument to ``apply()``.\n\n>>> def square(x):\n...     return x ** 2\n>>> s.apply(square)\nLondon      400\nNew York    441\nHelsinki    144\ndtype: int64\n\nSquare the values by passing an anonymous function as an\nargument to ``apply()``.\n\n>>> s.apply(lambda x: x ** 2)\nLondon      400\nNew York    441\nHelsinki    144\ndtype: int64\n\nDefine a custom function that needs additional positional\narguments and pass these additional arguments using the\n``args`` keyword.\n\n>>> def subtract_custom_value(x, custom_value):\n...     return x - custom_value\n\n>>> s.apply(subtract_custom_value, args=(5,))\nLondon      15\nNew York    16\nHelsinki     7\ndtype: int64\n\nDefine a custom function that takes keyword arguments\nand pass these arguments to ``apply``.\n\n>>> def add_custom_values(x, **kwargs):\n...     for month in kwargs:\n...         x += kwargs[month]\n...     return x\n\n>>> s.apply(add_custom_values, june=30, july=20, august=25)\nLondon      95\nNew York    96\nHelsinki    87\ndtype: int64\n\nUse a function from the Numpy library.\n\n>>> s.apply(np.log)\nLondon      2.995732\nNew York    3.044522\nHelsinki    2.484907\ndtype: float64", "deprecated": false, "file": "pandas/core/series.py", "file_line": 3872, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L3872", "errors": [["EX03", "flake8 error: E302 expected 2 blank lines, found 0 (3 times)"], ["EX03", "flake8 error: E305 expected 2 blank lines after class or function definition, found 0 (3 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Function application, groupby & window", "subsection": "", "shared_code_with": ""}, "pandas.Series.agg": {"type": "function", "docstring": "Aggregate using one or more operations over the specified axis.\n\n.. versionadded:: 0.20.0\n\nParameters\n----------\nfunc : function, str, list or dict\n    Function to use for aggregating the data. If a function, must either\n    work when passed a Series or when passed to Series.apply.\n\n    Accepted combinations are:\n\n    - function\n    - string function name\n    - list of functions and/or function names, e.g. ``[np.sum, 'mean']``\n    - dict of axis labels -> functions, function names or list of such.\naxis : {0 or 'index'}\n        Parameter needed for compatibility with DataFrame.\n*args\n    Positional arguments to pass to `func`.\n**kwargs\n    Keyword arguments to pass to `func`.\n\nReturns\n-------\nscalar, Series or DataFrame\n\n    The return can be:\n\n    * scalar : when Series.agg is called with single function\n    * Series : when DataFrame.agg is called with a single function\n    * DataFrame : when DataFrame.agg is called with several functions\n\n    Return scalar, Series or DataFrame.\n\nSee Also\n--------\nSeries.apply : Invoke function on a Series.\nSeries.transform : Transform function producing a Series with like indexes.\n\nNotes\n-----\n`agg` is an alias for `aggregate`. Use the alias.\n\nA passed user-defined-function will be passed a Series for evaluation.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s\n0    1\n1    2\n2    3\n3    4\ndtype: int64\n\n>>> s.agg('min')\n1\n\n>>> s.agg(['min', 'max'])\nmin   1\nmax   4\ndtype: int64", "deprecated": false, "file": "pandas/core/series.py", "file_line": 3831, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L3831", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Function application, groupby & window", "subsection": "", "shared_code_with": ""}, "pandas.Series.aggregate": {"type": "function", "docstring": "Aggregate using one or more operations over the specified axis.\n\n.. versionadded:: 0.20.0\n\nParameters\n----------\nfunc : function, str, list or dict\n    Function to use for aggregating the data. If a function, must either\n    work when passed a Series or when passed to Series.apply.\n\n    Accepted combinations are:\n\n    - function\n    - string function name\n    - list of functions and/or function names, e.g. ``[np.sum, 'mean']``\n    - dict of axis labels -> functions, function names or list of such.\naxis : {0 or 'index'}\n        Parameter needed for compatibility with DataFrame.\n*args\n    Positional arguments to pass to `func`.\n**kwargs\n    Keyword arguments to pass to `func`.\n\nReturns\n-------\nscalar, Series or DataFrame\n\n    The return can be:\n\n    * scalar : when Series.agg is called with single function\n    * Series : when DataFrame.agg is called with a single function\n    * DataFrame : when DataFrame.agg is called with several functions\n\n    Return scalar, Series or DataFrame.\n\nSee Also\n--------\nSeries.apply : Invoke function on a Series.\nSeries.transform : Transform function producing a Series with like indexes.\n\nNotes\n-----\n`agg` is an alias for `aggregate`. Use the alias.\n\nA passed user-defined-function will be passed a Series for evaluation.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s\n0    1\n1    2\n2    3\n3    4\ndtype: int64\n\n>>> s.agg('min')\n1\n\n>>> s.agg(['min', 'max'])\nmin   1\nmax   4\ndtype: int64", "deprecated": false, "file": "pandas/core/series.py", "file_line": 3831, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L3831", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Function application, groupby & window", "subsection": "", "shared_code_with": "pandas.Series.agg"}, "pandas.Series.transform": {"type": "function", "docstring": "Call ``func`` on self producing a Series with transformed values\nand that has the same axis length as self.\n\n.. versionadded:: 0.20.0\n\nParameters\n----------\nfunc : function, str, list or dict\n    Function to use for transforming the data. If a function, must either\n    work when passed a Series or when passed to Series.apply.\n\n    Accepted combinations are:\n\n    - function\n    - string function name\n    - list of functions and/or function names, e.g. ``[np.exp. 'sqrt']``\n    - dict of axis labels -> functions, function names or list of such.\naxis : {0 or 'index'}\n    Parameter needed for compatibility with DataFrame.\n*args\n    Positional arguments to pass to `func`.\n**kwargs\n    Keyword arguments to pass to `func`.\n\nReturns\n-------\nSeries\n    A Series that must have the same length as self.\n\nRaises\n------\nValueError : If the returned Series has a different length than self.\n\nSee Also\n--------\nSeries.agg : Only perform aggregating type operations.\nSeries.apply : Invoke function on a Series.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': range(3), 'B': range(1, 4)})\n>>> df\n   A  B\n0  0  1\n1  1  2\n2  2  3\n>>> df.transform(lambda x: x + 1)\n   A  B\n0  1  2\n1  2  3\n2  3  4\n\nEven though the resulting Series must have the same length as the\ninput Series, it is possible to provide several input functions:\n\n>>> s = pd.Series(range(3))\n>>> s\n0    0\n1    1\n2    2\ndtype: int64\n>>> s.transform([np.sqrt, np.exp])\n       sqrt        exp\n0  0.000000   1.000000\n1  1.000000   2.718282\n2  1.414214   7.389056", "deprecated": false, "file": "pandas/core/series.py", "file_line": 3866, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L3866", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Function application, groupby & window", "subsection": "", "shared_code_with": ""}, "pandas.Series.map": {"type": "function", "docstring": "Map values of Series according to input correspondence.\n\nUsed for substituting each value in a Series with another value,\nthat may be derived from a function, a ``dict`` or\na :class:`Series`.\n\nParameters\n----------\narg : function, dict, or Series\n    Mapping correspondence.\nna_action : {None, 'ignore'}, default None\n    If 'ignore', propagate NaN values, without passing them to the\n    mapping correspondence.\n\nReturns\n-------\nSeries\n    Same index as caller.\n\nSee Also\n--------\nSeries.apply : For applying more complex functions on a Series.\nDataFrame.apply : Apply a function row-/column-wise.\nDataFrame.applymap : Apply a function elementwise on a whole DataFrame.\n\nNotes\n-----\nWhen ``arg`` is a dictionary, values in Series that are not in the\ndictionary (as keys) are converted to ``NaN``. However, if the\ndictionary is a ``dict`` subclass that defines ``__missing__`` (i.e.\nprovides a method for default values), then this default is used\nrather than ``NaN``.\n\nExamples\n--------\n>>> s = pd.Series(['cat', 'dog', np.nan, 'rabbit'])\n>>> s\n0      cat\n1      dog\n2      NaN\n3   rabbit\ndtype: object\n\n``map`` accepts a ``dict`` or a ``Series``. Values that are not found\nin the ``dict`` are converted to ``NaN``, unless the dict has a default\nvalue (e.g. ``defaultdict``):\n\n>>> s.map({'cat': 'kitten', 'dog': 'puppy'})\n0   kitten\n1    puppy\n2      NaN\n3      NaN\ndtype: object\n\nIt also accepts a function:\n\n>>> s.map('I am a {}'.format)\n0       I am a cat\n1       I am a dog\n2       I am a nan\n3    I am a rabbit\ndtype: object\n\nTo avoid applying the function to missing values (and keep them as\n``NaN``) ``na_action='ignore'`` can be used:\n\n>>> s.map('I am a {}'.format, na_action='ignore')\n0     I am a cat\n1     I am a dog\n2            NaN\n3  I am a rabbit\ndtype: object", "deprecated": false, "file": "pandas/core/series.py", "file_line": 3708, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L3708", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Function application, groupby & window", "subsection": "", "shared_code_with": ""}, "pandas.Series.groupby": {"type": "function", "docstring": "Group DataFrame or Series using a mapper or by a Series of columns.\n\nA groupby operation involves some combination of splitting the\nobject, applying a function, and combining the results. This can be\nused to group large amounts of data and compute operations on these\ngroups.\n\nParameters\n----------\nby : mapping, function, label, or list of labels\n    Used to determine the groups for the groupby.\n    If ``by`` is a function, it's called on each value of the object's\n    index. If a dict or Series is passed, the Series or dict VALUES\n    will be used to determine the groups (the Series' values are first\n    aligned; see ``.align()`` method). If an ndarray is passed, the\n    values are used as-is determine the groups. A label or list of\n    labels may be passed to group by the columns in ``self``. Notice\n    that a tuple is interpreted as a (single) key.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Split along rows (0) or columns (1).\nlevel : int, level name, or sequence of such, default None\n    If the axis is a MultiIndex (hierarchical), group by a particular\n    level or levels.\nas_index : bool, default True\n    For aggregated output, return object with group labels as the\n    index. Only relevant for DataFrame input. as_index=False is\n    effectively \"SQL-style\" grouped output.\nsort : bool, default True\n    Sort group keys. Get better performance by turning this off.\n    Note this does not influence the order of observations within each\n    group. Groupby preserves the order of rows within each group.\ngroup_keys : bool, default True\n    When calling apply, add group keys to index to identify pieces.\nsqueeze : bool, default False\n    Reduce the dimensionality of the return type if possible,\n    otherwise return a consistent type.\nobserved : bool, default False\n    This only applies if any of the groupers are Categoricals.\n    If True: only show observed values for categorical groupers.\n    If False: show all values for categorical groupers.\n\n    .. versionadded:: 0.23.0\n\n**kwargs\n    Optional, only accepts keyword argument 'mutated' and is passed\n    to groupby.\n\nReturns\n-------\nDataFrameGroupBy or SeriesGroupBy\n    Depends on the calling object and returns groupby object that\n    contains information about the groups.\n\nSee Also\n--------\nresample : Convenience method for frequency conversion and resampling\n    of time series.\n\nNotes\n-----\nSee the `user guide\n<http://pandas.pydata.org/pandas-docs/stable/groupby.html>`_ for more.\n\nExamples\n--------\n>>> df = pd.DataFrame({'Animal': ['Falcon', 'Falcon',\n...                               'Parrot', 'Parrot'],\n...                    'Max Speed': [380., 370., 24., 26.]})\n>>> df\n   Animal  Max Speed\n0  Falcon      380.0\n1  Falcon      370.0\n2  Parrot       24.0\n3  Parrot       26.0\n>>> df.groupby(['Animal']).mean()\n        Max Speed\nAnimal\nFalcon      375.0\nParrot       25.0\n\n**Hierarchical Indexes**\n\nWe can groupby different levels of a hierarchical index\nusing the `level` parameter:\n\n>>> arrays = [['Falcon', 'Falcon', 'Parrot', 'Parrot'],\n...           ['Captive', 'Wild', 'Captive', 'Wild']]\n>>> index = pd.MultiIndex.from_arrays(arrays, names=('Animal', 'Type'))\n>>> df = pd.DataFrame({'Max Speed': [390., 350., 30., 20.]},\n...                   index=index)\n>>> df\n                Max Speed\nAnimal Type\nFalcon Captive      390.0\n       Wild         350.0\nParrot Captive       30.0\n       Wild          20.0\n>>> df.groupby(level=0).mean()\n        Max Speed\nAnimal\nFalcon      370.0\nParrot       25.0\n>>> df.groupby(level=1).mean()\n         Max Speed\nType\nCaptive      210.0\nWild         185.0", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 7722, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L7722", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Function application, groupby & window", "subsection": "", "shared_code_with": ""}, "pandas.Series.rolling": {"type": "function", "docstring": "Provide rolling window calculations.\n\nParameters\n----------\nwindow : int, or offset\n    Size of the moving window. This is the number of observations used for\n    calculating the statistic. Each window will be a fixed size.\n\n    If its an offset then this will be the time period of each window. Each\n    window will be a variable sized based on the observations included in\n    the time-period. This is only valid for datetimelike indexes.\nmin_periods : int, default None\n    Minimum number of observations in window required to have a value\n    (otherwise result is NA). For a window that is specified by an offset,\n    `min_periods` will default to 1. Otherwise, `min_periods` will default\n    to the size of the window.\ncenter : bool, default False\n    Set the labels at the center of the window.\nwin_type : str, default None\n    Provide a window type. If ``None``, all points are evenly weighted.\n    See the notes below for further information.\non : str, optional\n    For a DataFrame, a datetime-like column on which to calculate the rolling\n    window, rather than the DataFrame's index. Provided integer column is\n    ignored and excluded from result since an integer index is not used to\n    calculate the rolling window.\naxis : int or str, default 0\nclosed : str, default None\n    Make the interval closed on the 'right', 'left', 'both' or\n    'neither' endpoints.\n    For offset-based windows, it defaults to 'right'.\n    For fixed windows, defaults to 'both'. Remaining cases not implemented\n    for fixed windows.\n\n    .. versionadded:: 0.20.0\n\nReturns\n-------\na Window or Rolling sub-classed for the particular operation\n\nSee Also\n--------\nexpanding : Provides expanding transformations.\newm : Provides exponential weighted functions.\n\nNotes\n-----\nBy default, the result is set to the right edge of the window. This can be\nchanged to the center of the window by setting ``center=True``.\n\nTo learn more about the offsets & frequency strings, please see `this link\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\nThe recognized win_types are:\n\n* ``boxcar``\n* ``triang``\n* ``blackman``\n* ``hamming``\n* ``bartlett``\n* ``parzen``\n* ``bohman``\n* ``blackmanharris``\n* ``nuttall``\n* ``barthann``\n* ``kaiser`` (needs beta)\n* ``gaussian`` (needs std)\n* ``general_gaussian`` (needs power, width)\n* ``slepian`` (needs width)\n* ``exponential`` (needs tau), center is set to None.\n\nIf ``win_type=None`` all points are evenly weighted. To learn more about\ndifferent window types see `scipy.signal window functions\n<https://docs.scipy.org/doc/scipy/reference/signal.html#window-functions>`__.\n\nExamples\n--------\n\n>>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})\n>>> df\n     B\n0  0.0\n1  1.0\n2  2.0\n3  NaN\n4  4.0\n\nRolling sum with a window length of 2, using the 'triang'\nwindow type.\n\n>>> df.rolling(2, win_type='triang').sum()\n     B\n0  NaN\n1  0.5\n2  1.5\n3  NaN\n4  NaN\n\nRolling sum with a window length of 2, min_periods defaults\nto the window length.\n\n>>> df.rolling(2).sum()\n     B\n0  NaN\n1  1.0\n2  3.0\n3  NaN\n4  NaN\n\nSame as above, but explicitly set the min_periods\n\n>>> df.rolling(2, min_periods=1).sum()\n     B\n0  0.0\n1  1.0\n2  3.0\n3  2.0\n4  4.0\n\nA ragged (meaning not-a-regular frequency), time-indexed DataFrame\n\n>>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]},\n...                   index = [pd.Timestamp('20130101 09:00:00'),\n...                            pd.Timestamp('20130101 09:00:02'),\n...                            pd.Timestamp('20130101 09:00:03'),\n...                            pd.Timestamp('20130101 09:00:05'),\n...                            pd.Timestamp('20130101 09:00:06')])\n\n>>> df\n                       B\n2013-01-01 09:00:00  0.0\n2013-01-01 09:00:02  1.0\n2013-01-01 09:00:03  2.0\n2013-01-01 09:00:05  NaN\n2013-01-01 09:00:06  4.0\n\nContrasting to an integer rolling window, this will roll a variable\nlength window corresponding to the time period.\nThe default for min_periods is 1.\n\n>>> df.rolling('2s').sum()\n                       B\n2013-01-01 09:00:00  0.0\n2013-01-01 09:00:02  1.0\n2013-01-01 09:00:03  3.0\n2013-01-01 09:00:05  NaN\n2013-01-01 09:00:06  4.0", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 10699, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L10699", "errors": [["PR07", "Parameter \"axis\" has no description"], ["RT03", "Return value has no description"], ["EX03", "flake8 error: E251 unexpected spaces around keyword / parameter equals (2 times)"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Function application, groupby & window", "subsection": "", "shared_code_with": ""}, "pandas.Series.expanding": {"type": "function", "docstring": "Provide expanding transformations.\n\nParameters\n----------\nmin_periods : int, default 1\n    Minimum number of observations in window required to have a value\n    (otherwise result is NA).\ncenter : bool, default False\n    Set the labels at the center of the window.\naxis : int or str, default 0\n\nReturns\n-------\na Window sub-classed for the particular operation\n\nSee Also\n--------\nrolling : Provides rolling window calculations.\newm : Provides exponential weighted functions.\n\nNotes\n-----\nBy default, the result is set to the right edge of the window. This can be\nchanged to the center of the window by setting ``center=True``.\n\nExamples\n--------\n\n>>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})\n     B\n0  0.0\n1  1.0\n2  2.0\n3  NaN\n4  4.0\n\n>>> df.expanding(2).sum()\n     B\n0  NaN\n1  1.0\n2  3.0\n3  3.0\n4  7.0", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 10737, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L10737", "errors": [["PR07", "Parameter \"axis\" has no description"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 30, in pandas.Series.expanding\nFailed example:\n    df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})\nExpected:\n         B\n    0  0.0\n    1  1.0\n    2  2.0\n    3  NaN\n    4  4.0\nGot nothing\n"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "**********************************************************************\nLine 30, in pandas.Series.expanding\nFailed example:\n    df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})\nExpected:\n         B\n    0  0.0\n    1  1.0\n    2  2.0\n    3  NaN\n    4  4.0\nGot nothing\n", "in_api": true, "section": "Function application, groupby & window", "subsection": "", "shared_code_with": ""}, "pandas.Series.ewm": {"type": "function", "docstring": "Provide exponential weighted functions.\n\nParameters\n----------\ncom : float, optional\n    Specify decay in terms of center of mass,\n    :math:`\\alpha = 1 / (1 + com),\\text{ for } com \\geq 0`.\nspan : float, optional\n    Specify decay in terms of span,\n    :math:`\\alpha = 2 / (span + 1),\\text{ for } span \\geq 1`.\nhalflife : float, optional\n    Specify decay in terms of half-life,\n    :math:`\\alpha = 1 - exp(log(0.5) / halflife),\\text{for} halflife > 0`.\nalpha : float, optional\n    Specify smoothing factor :math:`\\alpha` directly,\n    :math:`0 < \\alpha \\leq 1`.\nmin_periods : int, default 0\n    Minimum number of observations in window required to have a value\n    (otherwise result is NA).\nadjust : bool, default True\n    Divide by decaying adjustment factor in beginning periods to account\n    for imbalance in relative weightings\n    (viewing EWMA as a moving average).\nignore_na : bool, default False\n    Ignore missing values when calculating weights;\n    specify True to reproduce pre-0.15.0 behavior.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to use. The value 0 identifies the rows, and 1\n    identifies the columns.\n\nReturns\n-------\nDataFrame\n    A Window sub-classed for the particular operation.\n\nSee Also\n--------\nrolling : Provides rolling window calculations.\nexpanding : Provides expanding transformations.\n\nNotes\n-----\nExactly one of center of mass, span, half-life, and alpha must be provided.\nAllowed values and relationship between the parameters are specified in the\nparameter descriptions above; see the link at the end of this section for\na detailed explanation.\n\nWhen adjust is True (default), weighted averages are calculated using\nweights (1-alpha)**(n-1), (1-alpha)**(n-2), ..., 1-alpha, 1.\n\nWhen adjust is False, weighted averages are calculated recursively as:\n   weighted_average[0] = arg[0];\n   weighted_average[i] = (1-alpha)*weighted_average[i-1] + alpha*arg[i].\n\nWhen ignore_na is False (default), weights are based on absolute positions.\nFor example, the weights of x and y used in calculating the final weighted\naverage of [x, None, y] are (1-alpha)**2 and 1 (if adjust is True), and\n(1-alpha)**2 and alpha (if adjust is False).\n\nWhen ignore_na is True (reproducing pre-0.15.0 behavior), weights are based\non relative positions. For example, the weights of x and y used in\ncalculating the final weighted average of [x, None, y] are 1-alpha and 1\n(if adjust is True), and 1-alpha and alpha (if adjust is False).\n\nMore details can be found at\nhttp://pandas.pydata.org/pandas-docs/stable/user_guide/computation.html#exponentially-weighted-windows\n\nExamples\n--------\n\n>>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})\n>>> df\n     B\n0  0.0\n1  1.0\n2  2.0\n3  NaN\n4  4.0\n\n>>> df.ewm(com=0.5).mean()\n          B\n0  0.000000\n1  0.750000\n2  1.615385\n3  1.615385\n4  3.670213", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 10744, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L10744", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Function application, groupby & window", "subsection": "", "shared_code_with": ""}, "pandas.Series.pipe": {"type": "function", "docstring": "Apply func(self, \\*args, \\*\\*kwargs).\n\nParameters\n----------\nfunc : function\n    function to apply to the Series/DataFrame.\n    ``args``, and ``kwargs`` are passed into ``func``.\n    Alternatively a ``(callable, data_keyword)`` tuple where\n    ``data_keyword`` is a string indicating the keyword of\n    ``callable`` that expects the Series/DataFrame.\nargs : iterable, optional\n    positional arguments passed into ``func``.\nkwargs : mapping, optional\n    a dictionary of keyword arguments passed into ``func``.\n\nReturns\n-------\nobject : the return type of ``func``.\n\nSee Also\n--------\nDataFrame.apply\nDataFrame.applymap\nSeries.map\n\nNotes\n-----\n\nUse ``.pipe`` when chaining together functions that expect\nSeries, DataFrames or GroupBy objects. Instead of writing\n\n>>> f(g(h(df), arg1=a), arg2=b, arg3=c)\n\nYou can write\n\n>>> (df.pipe(h)\n...    .pipe(g, arg1=a)\n...    .pipe(f, arg2=b, arg3=c)\n... )\n\nIf you have a function that takes the data as (say) the second\nargument, pass a tuple indicating which keyword expects the\ndata. For example, suppose ``f`` takes its data as ``arg2``:\n\n>>> (df.pipe(h)\n...    .pipe(g, arg1=a)\n...    .pipe((f, 'arg2'), arg1=a, arg3=c)\n...  )", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 5000, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L5000", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {kwargs, args}"], ["PR08", "Parameter \"func\" description should start with a capital letter"], ["PR08", "Parameter \"args\" description should start with a capital letter"], ["PR08", "Parameter \"kwargs\" description should start with a capital letter"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"DataFrame.apply\" reference"], ["SA04", "Missing description for See Also \"DataFrame.applymap\" reference"], ["SA04", "Missing description for See Also \"Series.map\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Function application, groupby & window", "subsection": "", "shared_code_with": ""}, "pandas.Series.abs": {"type": "function", "docstring": "Return a Series/DataFrame with absolute numeric value of each element.\n\nThis function only applies to elements that are all numeric.\n\nReturns\n-------\nabs\n    Series/DataFrame containing the absolute value of each element.\n\nSee Also\n--------\nnumpy.absolute : Calculate the absolute value element-wise.\n\nNotes\n-----\nFor ``complex`` inputs, ``1.2 + 1j``, the absolute value is\n:math:`\\sqrt{ a^2 + b^2 }`.\n\nExamples\n--------\nAbsolute numeric values in a Series.\n\n>>> s = pd.Series([-1.10, 2, -3.33, 4])\n>>> s.abs()\n0    1.10\n1    2.00\n2    3.33\n3    4.00\ndtype: float64\n\nAbsolute numeric values in a Series with complex numbers.\n\n>>> s = pd.Series([1.2 + 1j])\n>>> s.abs()\n0    1.56205\ndtype: float64\n\nAbsolute numeric values in a Series with a Timedelta element.\n\n>>> s = pd.Series([pd.Timedelta('1 days')])\n>>> s.abs()\n0   1 days\ndtype: timedelta64[ns]\n\nSelect rows with data closest to certain value using argsort (from\n`StackOverflow <https://stackoverflow.com/a/17758115>`__).\n\n>>> df = pd.DataFrame({\n...     'a': [4, 5, 6, 7],\n...     'b': [10, 20, 30, 40],\n...     'c': [100, 50, -30, -50]\n... })\n>>> df\n     a    b    c\n0    4   10  100\n1    5   20   50\n2    6   30  -30\n3    7   40  -50\n>>> df.loc[(df.c - 43).abs().argsort()]\n     a    b    c\n1    5   20   50\n0    4   10  100\n2    6   30  -30\n3    7   40  -50", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 9825, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L9825", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.all": {"type": "function", "docstring": "Return whether all elements are True, potentially over an axis.\n\nReturns True unless there at least one element within a series or\nalong a Dataframe axis that is False or equivalent (e.g. zero or\nempty).\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns', None}, default 0\n    Indicate which axis or axes should be reduced.\n\n    * 0 / 'index' : reduce the index, return a Series whose index is the\n      original column labels.\n    * 1 / 'columns' : reduce the columns, return a Series whose index is the\n      original index.\n    * None : reduce all axes, return a scalar.\n\nbool_only : bool, default None\n    Include only boolean columns. If None, will attempt to use everything,\n    then use only boolean data. Not implemented for Series.\nskipna : bool, default True\n    Exclude NA/null values. If the entire row/column is NA and skipna is\n    True, then the result will be True, as for an empty row/column.\n    If skipna is False, then NA are treated as True, because these are not\n    equal to zero.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a scalar.\n**kwargs : any, default None\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nscalar or Series\n    If level is specified, then, Series is returned; otherwise, scalar\n    is returned.\n\nSee Also\n--------\nSeries.all : Return True if all elements are True.\nDataFrame.any : Return True if one (or more) elements are True.\n\nExamples\n--------\n**Series**\n\n>>> pd.Series([True, True]).all()\nTrue\n>>> pd.Series([True, False]).all()\nFalse\n>>> pd.Series([]).all()\nTrue\n>>> pd.Series([np.nan]).all()\nTrue\n>>> pd.Series([np.nan]).all(skipna=False)\nTrue\n\n**DataFrames**\n\nCreate a dataframe from a dictionary.\n\n>>> df = pd.DataFrame({'col1': [True, True], 'col2': [True, False]})\n>>> df\n   col1   col2\n0  True   True\n1  True  False\n\nDefault behaviour checks if column-wise values all return True.\n\n>>> df.all()\ncol1     True\ncol2    False\ndtype: bool\n\nSpecify ``axis='columns'`` to check if row-wise values all return True.\n\n>>> df.all(axis='columns')\n0     True\n1    False\ndtype: bool\n\nOr ``axis=None`` for whether every value is True.\n\n>>> df.all(axis=None)\nFalse", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11660, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11660", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.any": {"type": "function", "docstring": "Return whether any element is True, potentially over an axis.\n\nReturns False unless there at least one element within a series or\nalong a Dataframe axis that is True or equivalent (e.g. non-zero or\nnon-empty).\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns', None}, default 0\n    Indicate which axis or axes should be reduced.\n\n    * 0 / 'index' : reduce the index, return a Series whose index is the\n      original column labels.\n    * 1 / 'columns' : reduce the columns, return a Series whose index is the\n      original index.\n    * None : reduce all axes, return a scalar.\n\nbool_only : bool, default None\n    Include only boolean columns. If None, will attempt to use everything,\n    then use only boolean data. Not implemented for Series.\nskipna : bool, default True\n    Exclude NA/null values. If the entire row/column is NA and skipna is\n    True, then the result will be False, as for an empty row/column.\n    If skipna is False, then NA are treated as True, because these are not\n    equal to zero.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a scalar.\n**kwargs : any, default None\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nscalar or Series\n    If level is specified, then, Series is returned; otherwise, scalar\n    is returned.\n\nSee Also\n--------\nnumpy.any : Numpy version of this method.\nSeries.any : Return whether any element is True.\nSeries.all : Return whether all elements are True.\nDataFrame.any : Return whether any element is True over requested axis.\nDataFrame.all : Return whether all elements are True over requested axis.\n\nExamples\n--------\n**Series**\n\nFor Series input, the output is a scalar indicating whether any element\nis True.\n\n>>> pd.Series([False, False]).any()\nFalse\n>>> pd.Series([True, False]).any()\nTrue\n>>> pd.Series([]).any()\nFalse\n>>> pd.Series([np.nan]).any()\nFalse\n>>> pd.Series([np.nan]).any(skipna=False)\nTrue\n\n**DataFrame**\n\nWhether each column contains at least one True element (the default).\n\n>>> df = pd.DataFrame({\"A\": [1, 2], \"B\": [0, 2], \"C\": [0, 0]})\n>>> df\n   A  B  C\n0  1  0  0\n1  2  2  0\n\n>>> df.any()\nA     True\nB     True\nC    False\ndtype: bool\n\nAggregating over the columns.\n\n>>> df = pd.DataFrame({\"A\": [True, False], \"B\": [1, 2]})\n>>> df\n       A  B\n0   True  1\n1  False  2\n\n>>> df.any(axis='columns')\n0    True\n1    True\ndtype: bool\n\n>>> df = pd.DataFrame({\"A\": [True, False], \"B\": [1, 0]})\n>>> df\n       A  B\n0   True  1\n1  False  0\n\n>>> df.any(axis='columns')\n0    True\n1    False\ndtype: bool\n\nAggregating over the entire DataFrame with ``axis=None``.\n\n>>> df.any(axis=None)\nTrue\n\n`any` for an empty DataFrame is an empty Series.\n\n>>> pd.DataFrame([]).any()\nSeries([], dtype: bool)", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11660, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11660", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.Series.all"}, "pandas.Series.autocorr": {"type": "function", "docstring": "Compute the lag-N autocorrelation.\n\nThis method computes the Pearson correlation between\nthe Series and its shifted self.\n\nParameters\n----------\nlag : int, default 1\n    Number of lags to apply before performing autocorrelation.\n\nReturns\n-------\nfloat\n    The Pearson correlation between self and self.shift(lag).\n\nSee Also\n--------\nSeries.corr : Compute the correlation between two Series.\nSeries.shift : Shift index by desired number of periods.\nDataFrame.corr : Compute pairwise correlation of columns.\nDataFrame.corrwith : Compute pairwise correlation between rows or\n    columns of two DataFrame objects.\n\nNotes\n-----\nIf the Pearson correlation is not well defined return 'NaN'.\n\nExamples\n--------\n>>> s = pd.Series([0.25, 0.5, 0.2, -0.05])\n>>> s.autocorr()  # doctest: +ELLIPSIS\n0.10355...\n>>> s.autocorr(lag=2)  # doctest: +ELLIPSIS\n-0.99999...\n\nIf the Pearson correlation is not well defined, then 'NaN' is returned.\n\n>>> s = pd.Series([1, 0, 0, 0])\n>>> s.autocorr()\nnan", "deprecated": false, "file": "pandas/core/series.py", "file_line": 2520, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L2520", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.between": {"type": "function", "docstring": "Return boolean Series equivalent to left <= series <= right.\n\nThis function returns a boolean vector containing `True` wherever the\ncorresponding Series element is between the boundary values `left` and\n`right`. NA values are treated as `False`.\n\nParameters\n----------\nleft : scalar\n    Left boundary.\nright : scalar\n    Right boundary.\ninclusive : bool, default True\n    Include boundaries.\n\nReturns\n-------\nSeries\n    Series representing whether each element is between left and\n    right (inclusive).\n\nSee Also\n--------\nSeries.gt : Greater than of series and other.\nSeries.lt : Less than of series and other.\n\nNotes\n-----\nThis function is equivalent to ``(left <= ser) & (ser <= right)``\n\nExamples\n--------\n>>> s = pd.Series([2, 0, 4, 8, np.nan])\n\nBoundary values are included by default:\n\n>>> s.between(1, 4)\n0     True\n1    False\n2     True\n3    False\n4    False\ndtype: bool\n\nWith `inclusive` set to ``False`` boundary values are excluded:\n\n>>> s.between(1, 4, inclusive=False)\n0     True\n1    False\n2    False\n3    False\n4    False\ndtype: bool\n\n`left` and `right` can be any scalar value:\n\n>>> s = pd.Series(['Alice', 'Bob', 'Carol', 'Eve'])\n>>> s.between('Anna', 'Daniel')\n0    False\n1     True\n2     True\n3    False\ndtype: bool", "deprecated": false, "file": "pandas/core/series.py", "file_line": 4443, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L4443", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.clip": {"type": "function", "docstring": "Trim values at input threshold(s).\n\nAssigns values outside boundary to boundary values. Thresholds\ncan be singular values or array like, and in the latter case\nthe clipping is performed element-wise in the specified axis.\n\nParameters\n----------\nlower : float or array_like, default None\n    Minimum threshold value. All values below this\n    threshold will be set to it.\nupper : float or array_like, default None\n    Maximum threshold value. All values above this\n    threshold will be set to it.\naxis : int or str axis name, optional\n    Align object with lower and upper along the given axis.\ninplace : bool, default False\n    Whether to perform the operation in place on the data.\n\n    .. versionadded:: 0.21.0\n*args, **kwargs\n    Additional keywords have no effect but might be accepted\n    for compatibility with numpy.\n\nReturns\n-------\nSeries or DataFrame\n    Same type as calling object with the values outside the\n    clip boundaries replaced.\n\nExamples\n--------\n>>> data = {'col_0': [9, -3, 0, -1, 5], 'col_1': [-2, -7, 6, 8, -5]}\n>>> df = pd.DataFrame(data)\n>>> df\n   col_0  col_1\n0      9     -2\n1     -3     -7\n2      0      6\n3     -1      8\n4      5     -5\n\nClips per column using lower and upper thresholds:\n\n>>> df.clip(-4, 6)\n   col_0  col_1\n0      6     -2\n1     -3     -4\n2      0      6\n3     -1      6\n4      5     -4\n\nClips using specific lower and upper thresholds per column element:\n\n>>> t = pd.Series([2, -4, -1, 6, 3])\n>>> t\n0    2\n1   -4\n2   -1\n3    6\n4    3\ndtype: int64\n\n>>> df.clip(t, t + 4, axis=0)\n   col_0  col_1\n0      6      2\n1     -3     -4\n2      0      3\n3      6      8\n4      5      3", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 7406, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L7406", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs}"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.clip_lower": {"type": "function", "docstring": "Trim values below a given threshold.\n\n.. deprecated:: 0.24.0\n    Use clip(lower=threshold) instead.\n\nElements below the `threshold` will be changed to match the\n`threshold` value(s). Threshold can be a single value or an array,\nin the latter case it performs the truncation element-wise.\n\nParameters\n----------\nthreshold : numeric or array-like\n    Minimum value allowed. All values below threshold will be set to\n    this value.\n\n    * float : every value is compared to `threshold`.\n    * array-like : The shape of `threshold` should match the object\n      it's compared to. When `self` is a Series, `threshold` should be\n      the length. When `self` is a DataFrame, `threshold` should 2-D\n      and the same shape as `self` for ``axis=None``, or 1-D and the\n      same length as the axis being compared.\n\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Align `self` with `threshold` along the given axis.\n\ninplace : bool, default False\n    Whether to perform the operation in place on the data.\n\n    .. versionadded:: 0.21.0\n\nReturns\n-------\nSeries or DataFrame\n    Original data with values trimmed.\n\nSee Also\n--------\nSeries.clip : General purpose method to trim Series values to given\n    threshold(s).\nDataFrame.clip : General purpose method to trim DataFrame values to\n    given threshold(s).\n\nExamples\n--------\n\nSeries single threshold clipping:\n\n>>> s = pd.Series([5, 6, 7, 8, 9])\n>>> s.clip(lower=8)\n0    8\n1    8\n2    8\n3    8\n4    9\ndtype: int64\n\nSeries clipping element-wise using an array of thresholds. `threshold`\nshould be the same length as the Series.\n\n>>> elemwise_thresholds = [4, 8, 7, 2, 5]\n>>> s.clip(lower=elemwise_thresholds)\n0    5\n1    8\n2    7\n3    8\n4    9\ndtype: int64\n\nDataFrames can be compared to a scalar.\n\n>>> df = pd.DataFrame({\"A\": [1, 3, 5], \"B\": [2, 4, 6]})\n>>> df\n   A  B\n0  1  2\n1  3  4\n2  5  6\n\n>>> df.clip(lower=3)\n   A  B\n0  3  3\n1  3  4\n2  5  6\n\nOr to an array of values. By default, `threshold` should be the same\nshape as the DataFrame.\n\n>>> df.clip(lower=np.array([[3, 4], [2, 2], [6, 2]]))\n   A  B\n0  3  4\n1  3  4\n2  6  6\n\nControl how `threshold` is broadcast with `axis`. In this case\n`threshold` should be the same length as the axis specified by\n`axis`.\n\n>>> df.clip(lower=[3, 3, 5], axis='index')\n   A  B\n0  3  3\n1  3  4\n2  5  6\n\n>>> df.clip(lower=[4, 5], axis='columns')\n   A  B\n0  4  5\n1  4  5\n2  5  6", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 7603, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L7603", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.clip_upper": {"type": "function", "docstring": "Trim values above a given threshold.\n\n.. deprecated:: 0.24.0\n    Use clip(upper=threshold) instead.\n\nElements above the `threshold` will be changed to match the\n`threshold` value(s). Threshold can be a single value or an array,\nin the latter case it performs the truncation element-wise.\n\nParameters\n----------\nthreshold : numeric or array-like\n    Maximum value allowed. All values above threshold will be set to\n    this value.\n\n    * float : every value is compared to `threshold`.\n    * array-like : The shape of `threshold` should match the object\n      it's compared to. When `self` is a Series, `threshold` should be\n      the length. When `self` is a DataFrame, `threshold` should 2-D\n      and the same shape as `self` for ``axis=None``, or 1-D and the\n      same length as the axis being compared.\n\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Align object with `threshold` along the given axis.\ninplace : bool, default False\n    Whether to perform the operation in place on the data.\n\n    .. versionadded:: 0.21.0\n\nReturns\n-------\nSeries or DataFrame\n    Original data with values trimmed.\n\nSee Also\n--------\nSeries.clip : General purpose method to trim Series values to given\n    threshold(s).\nDataFrame.clip : General purpose method to trim DataFrame values to\n    given threshold(s).\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4, 5])\n>>> s\n0    1\n1    2\n2    3\n3    4\n4    5\ndtype: int64\n\n>>> s.clip(upper=3)\n0    1\n1    2\n2    3\n3    3\n4    3\ndtype: int64\n\n>>> elemwise_thresholds = [5, 4, 3, 2, 1]\n>>> elemwise_thresholds\n[5, 4, 3, 2, 1]\n\n>>> s.clip(upper=elemwise_thresholds)\n0    1\n1    2\n2    3\n3    2\n4    1\ndtype: int64", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 7520, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L7520", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.corr": {"type": "function", "docstring": "Compute correlation with `other` Series, excluding missing values.\n\nParameters\n----------\nother : Series\n    Series with which to compute the correlation.\nmethod : {'pearson', 'kendall', 'spearman'} or callable\n    * pearson : standard correlation coefficient\n    * kendall : Kendall Tau correlation coefficient\n    * spearman : Spearman rank correlation\n    * callable: callable with input two 1d ndarrays\n        and returning a float. Note that the returned matrix from corr\n        will have 1 along the diagonals and will be symmetric\n        regardless of the callable's behavior\n        .. versionadded:: 0.24.0\n\nmin_periods : int, optional\n    Minimum number of observations needed to have a valid result.\n\nReturns\n-------\nfloat\n    Correlation with other.\n\nExamples\n--------\n>>> def histogram_intersection(a, b):\n...     v = np.minimum(a, b).sum().round(decimals=1)\n...     return v\n>>> s1 = pd.Series([.2, .0, .6, .2])\n>>> s2 = pd.Series([.3, .6, .0, .1])\n>>> s1.corr(s2, method=histogram_intersection)\n0.3", "deprecated": false, "file": "pandas/core/series.py", "file_line": 2376, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L2376", "errors": [["PR08", "Parameter \"method\" description should start with a capital letter"], ["PR09", "Parameter \"method\" description should finish with \".\""], ["EX03", "flake8 error: E302 expected 2 blank lines, found 0"], ["EX03", "flake8 error: E305 expected 2 blank lines after class or function definition, found 0"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.count": {"type": "function", "docstring": "Return number of non-NA/null observations in the Series.\n\nParameters\n----------\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a smaller Series.\n\nReturns\n-------\nint or Series (if level specified)\n    Number of non-null values in the Series.\n\nExamples\n--------\n>>> s = pd.Series([0.0, 1.0, np.nan])\n>>> s.count()\n2", "deprecated": false, "file": "pandas/core/series.py", "file_line": 1835, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L1835", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.cov": {"type": "function", "docstring": "Compute covariance with Series, excluding missing values.\n\nParameters\n----------\nother : Series\n    Series with which to compute the covariance.\nmin_periods : int, optional\n    Minimum number of observations needed to have a valid result.\n\nReturns\n-------\nfloat\n    Covariance between Series and other normalized by N-1\n    (unbiased estimator).\n\nExamples\n--------\n>>> s1 = pd.Series([0.90010907, 0.13484424, 0.62036035])\n>>> s2 = pd.Series([0.12528585, 0.26962463, 0.51111198])\n>>> s1.cov(s2)\n-0.01685762652715874", "deprecated": false, "file": "pandas/core/series.py", "file_line": 2427, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L2427", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.cummax": {"type": "function", "docstring": "Return cumulative maximum over a DataFrame or Series axis.\n\nReturns a DataFrame or Series of the same size containing the cumulative\nmaximum.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The index or the name of the axis. 0 is equivalent to None or 'index'.\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\n*args, **kwargs :\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nscalar or Series\n\nSee Also\n--------\ncore.window.Expanding.max : Similar functionality\n    but ignores ``NaN`` values.\nSeries.max : Return the maximum over\n    Series axis.\nSeries.cummax : Return cumulative maximum over Series axis.\nSeries.cummin : Return cumulative minimum over Series axis.\nSeries.cumsum : Return cumulative sum over Series axis.\nSeries.cumprod : Return cumulative product over Series axis.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cummax()\n0    2.0\n1    NaN\n2    5.0\n3    5.0\n4    5.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cummax(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                    columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the maximum\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cummax()\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  3.0  1.0\n\nTo iterate over columns and find the maximum in each row,\nuse ``axis=1``\n\n>>> df.cummax(axis=1)\n     A    B\n0  2.0  2.0\n1  3.0  NaN\n2  1.0  1.0", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11620, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11620", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs :}"], ["RT03", "Return value has no description"], ["EX03", "flake8 error: E127 continuation line over-indented for visual indent"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.cummin": {"type": "function", "docstring": "Return cumulative minimum over a DataFrame or Series axis.\n\nReturns a DataFrame or Series of the same size containing the cumulative\nminimum.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The index or the name of the axis. 0 is equivalent to None or 'index'.\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\n*args, **kwargs :\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nscalar or Series\n\nSee Also\n--------\ncore.window.Expanding.min : Similar functionality\n    but ignores ``NaN`` values.\nSeries.min : Return the minimum over\n    Series axis.\nSeries.cummax : Return cumulative maximum over Series axis.\nSeries.cummin : Return cumulative minimum over Series axis.\nSeries.cumsum : Return cumulative sum over Series axis.\nSeries.cumprod : Return cumulative product over Series axis.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cummin()\n0    2.0\n1    NaN\n2    2.0\n3   -1.0\n4   -1.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cummin(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                    columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the minimum\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cummin()\n     A    B\n0  2.0  1.0\n1  2.0  NaN\n2  1.0  0.0\n\nTo iterate over columns and find the minimum in each row,\nuse ``axis=1``\n\n>>> df.cummin(axis=1)\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11620, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11620", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs :}"], ["RT03", "Return value has no description"], ["EX03", "flake8 error: E127 continuation line over-indented for visual indent"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.Series.cummax"}, "pandas.Series.cumprod": {"type": "function", "docstring": "Return cumulative product over a DataFrame or Series axis.\n\nReturns a DataFrame or Series of the same size containing the cumulative\nproduct.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The index or the name of the axis. 0 is equivalent to None or 'index'.\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\n*args, **kwargs :\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nscalar or Series\n\nSee Also\n--------\ncore.window.Expanding.prod : Similar functionality\n    but ignores ``NaN`` values.\nSeries.prod : Return the product over\n    Series axis.\nSeries.cummax : Return cumulative maximum over Series axis.\nSeries.cummin : Return cumulative minimum over Series axis.\nSeries.cumsum : Return cumulative sum over Series axis.\nSeries.cumprod : Return cumulative product over Series axis.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cumprod()\n0     2.0\n1     NaN\n2    10.0\n3   -10.0\n4    -0.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cumprod(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                    columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the product\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cumprod()\n     A    B\n0  2.0  1.0\n1  6.0  NaN\n2  6.0  0.0\n\nTo iterate over columns and find the product in each row,\nuse ``axis=1``\n\n>>> df.cumprod(axis=1)\n     A    B\n0  2.0  2.0\n1  3.0  NaN\n2  1.0  0.0", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11620, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11620", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs :}"], ["RT03", "Return value has no description"], ["EX03", "flake8 error: E127 continuation line over-indented for visual indent"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.Series.cummin"}, "pandas.Series.cumsum": {"type": "function", "docstring": "Return cumulative sum over a DataFrame or Series axis.\n\nReturns a DataFrame or Series of the same size containing the cumulative\nsum.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The index or the name of the axis. 0 is equivalent to None or 'index'.\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\n*args, **kwargs :\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nscalar or Series\n\nSee Also\n--------\ncore.window.Expanding.sum : Similar functionality\n    but ignores ``NaN`` values.\nSeries.sum : Return the sum over\n    Series axis.\nSeries.cummax : Return cumulative maximum over Series axis.\nSeries.cummin : Return cumulative minimum over Series axis.\nSeries.cumsum : Return cumulative sum over Series axis.\nSeries.cumprod : Return cumulative product over Series axis.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cumsum()\n0    2.0\n1    NaN\n2    7.0\n3    6.0\n4    6.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cumsum(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                    columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the sum\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cumsum()\n     A    B\n0  2.0  1.0\n1  5.0  NaN\n2  6.0  1.0\n\nTo iterate over columns and find the sum in each row,\nuse ``axis=1``\n\n>>> df.cumsum(axis=1)\n     A    B\n0  2.0  3.0\n1  3.0  NaN\n2  1.0  1.0", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11620, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11620", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs :}"], ["RT03", "Return value has no description"], ["EX03", "flake8 error: E127 continuation line over-indented for visual indent"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.Series.cumprod"}, "pandas.Series.describe": {"type": "function", "docstring": "Generate descriptive statistics that summarize the central tendency,\ndispersion and shape of a dataset's distribution, excluding\n``NaN`` values.\n\nAnalyzes both numeric and object series, as well\nas ``DataFrame`` column sets of mixed data types. The output\nwill vary depending on what is provided. Refer to the notes\nbelow for more detail.\n\nParameters\n----------\npercentiles : list-like of numbers, optional\n    The percentiles to include in the output. All should\n    fall between 0 and 1. The default is\n    ``[.25, .5, .75]``, which returns the 25th, 50th, and\n    75th percentiles.\ninclude : 'all', list-like of dtypes or None (default), optional\n    A white list of data types to include in the result. Ignored\n    for ``Series``. Here are the options:\n\n    - 'all' : All columns of the input will be included in the output.\n    - A list-like of dtypes : Limits the results to the\n      provided data types.\n      To limit the result to numeric types submit\n      ``numpy.number``. To limit it instead to object columns submit\n      the ``numpy.object`` data type. Strings\n      can also be used in the style of\n      ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n      select pandas categorical columns, use ``'category'``\n    - None (default) : The result will include all numeric columns.\nexclude : list-like of dtypes or None (default), optional,\n    A black list of data types to omit from the result. Ignored\n    for ``Series``. Here are the options:\n\n    - A list-like of dtypes : Excludes the provided data types\n      from the result. To exclude numeric types submit\n      ``numpy.number``. To exclude object columns submit the data\n      type ``numpy.object``. Strings can also be used in the style of\n      ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n      exclude pandas categorical columns, use ``'category'``\n    - None (default) : The result will exclude nothing.\n\nReturns\n-------\nSeries or DataFrame\n    Summary statistics of the Series or Dataframe provided.\n\nSee Also\n--------\nDataFrame.count: Count number of non-NA/null observations.\nDataFrame.max: Maximum of the values in the object.\nDataFrame.min: Minimum of the values in the object.\nDataFrame.mean: Mean of the values.\nDataFrame.std: Standard deviation of the observations.\nDataFrame.select_dtypes: Subset of a DataFrame including/excluding\n    columns based on their dtype.\n\nNotes\n-----\nFor numeric data, the result's index will include ``count``,\n``mean``, ``std``, ``min``, ``max`` as well as lower, ``50`` and\nupper percentiles. By default the lower percentile is ``25`` and the\nupper percentile is ``75``. The ``50`` percentile is the\nsame as the median.\n\nFor object data (e.g. strings or timestamps), the result's index\nwill include ``count``, ``unique``, ``top``, and ``freq``. The ``top``\nis the most common value. The ``freq`` is the most common value's\nfrequency. Timestamps also include the ``first`` and ``last`` items.\n\nIf multiple object values have the highest count, then the\n``count`` and ``top`` results will be arbitrarily chosen from\namong those with the highest count.\n\nFor mixed data types provided via a ``DataFrame``, the default is to\nreturn only an analysis of numeric columns. If the dataframe consists\nonly of object and categorical data without any numeric columns, the\ndefault is to return an analysis of both the object and categorical\ncolumns. If ``include='all'`` is provided as an option, the result\nwill include a union of attributes of each type.\n\nThe `include` and `exclude` parameters can be used to limit\nwhich columns in a ``DataFrame`` are analyzed for the output.\nThe parameters are ignored when analyzing a ``Series``.\n\nExamples\n--------\nDescribing a numeric ``Series``.\n\n>>> s = pd.Series([1, 2, 3])\n>>> s.describe()\ncount    3.0\nmean     2.0\nstd      1.0\nmin      1.0\n25%      1.5\n50%      2.0\n75%      2.5\nmax      3.0\ndtype: float64\n\nDescribing a categorical ``Series``.\n\n>>> s = pd.Series(['a', 'a', 'b', 'c'])\n>>> s.describe()\ncount     4\nunique    3\ntop       a\nfreq      2\ndtype: object\n\nDescribing a timestamp ``Series``.\n\n>>> s = pd.Series([\n...   np.datetime64(\"2000-01-01\"),\n...   np.datetime64(\"2010-01-01\"),\n...   np.datetime64(\"2010-01-01\")\n... ])\n>>> s.describe()\ncount                       3\nunique                      2\ntop       2010-01-01 00:00:00\nfreq                        2\nfirst     2000-01-01 00:00:00\nlast      2010-01-01 00:00:00\ndtype: object\n\nDescribing a ``DataFrame``. By default only numeric fields\nare returned.\n\n>>> df = pd.DataFrame({'categorical': pd.Categorical(['d','e','f']),\n...                    'numeric': [1, 2, 3],\n...                    'object': ['a', 'b', 'c']\n...                   })\n>>> df.describe()\n       numeric\ncount      3.0\nmean       2.0\nstd        1.0\nmin        1.0\n25%        1.5\n50%        2.0\n75%        2.5\nmax        3.0\n\nDescribing all columns of a ``DataFrame`` regardless of data type.\n\n>>> df.describe(include='all')\n        categorical  numeric object\ncount            3      3.0      3\nunique           3      NaN      3\ntop              f      NaN      c\nfreq             1      NaN      1\nmean           NaN      2.0    NaN\nstd            NaN      1.0    NaN\nmin            NaN      1.0    NaN\n25%            NaN      1.5    NaN\n50%            NaN      2.0    NaN\n75%            NaN      2.5    NaN\nmax            NaN      3.0    NaN\n\nDescribing a column from a ``DataFrame`` by accessing it as\nan attribute.\n\n>>> df.numeric.describe()\ncount    3.0\nmean     2.0\nstd      1.0\nmin      1.0\n25%      1.5\n50%      2.0\n75%      2.5\nmax      3.0\nName: numeric, dtype: float64\n\nIncluding only numeric columns in a ``DataFrame`` description.\n\n>>> df.describe(include=[np.number])\n       numeric\ncount      3.0\nmean       2.0\nstd        1.0\nmin        1.0\n25%        1.5\n50%        2.0\n75%        2.5\nmax        3.0\n\nIncluding only string columns in a ``DataFrame`` description.\n\n>>> df.describe(include=[np.object])\n       object\ncount       3\nunique      3\ntop         c\nfreq        1\n\nIncluding only categorical columns from a ``DataFrame`` description.\n\n>>> df.describe(include=['category'])\n       categorical\ncount            3\nunique           3\ntop              f\nfreq             1\n\nExcluding numeric columns from a ``DataFrame`` description.\n\n>>> df.describe(exclude=[np.number])\n       categorical object\ncount            3      3\nunique           3      3\ntop              f      c\nfreq             1      1\n\nExcluding object columns from a ``DataFrame`` description.\n\n>>> df.describe(exclude=[np.object])\n       categorical  numeric\ncount            3      3.0\nunique           3      NaN\ntop              f      NaN\nfreq             1      NaN\nmean           NaN      2.0\nstd            NaN      1.0\nmin            NaN      1.0\n25%            NaN      1.5\n50%            NaN      2.0\n75%            NaN      2.5\nmax            NaN      3.0", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 9894, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L9894", "errors": [["SS06", "Summary should fit in a single line"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 149, in pandas.Series.describe\nFailed example:\n    df.describe(include='all')\nExpected:\n            categorical  numeric object\n    count            3      3.0      3\n    unique           3      NaN      3\n    top              f      NaN      c\n    freq             1      NaN      1\n    mean           NaN      2.0    NaN\n    std            NaN      1.0    NaN\n    min            NaN      1.0    NaN\n    25%            NaN      1.5    NaN\n    50%            NaN      2.0    NaN\n    75%            NaN      2.5    NaN\n    max            NaN      3.0    NaN\nGot:\n           categorical  numeric object\n    count            3      3.0      3\n    unique           3      NaN      3\n    top              f      NaN      b\n    freq             1      NaN      1\n    mean           NaN      2.0    NaN\n    std            NaN      1.0    NaN\n    min            NaN      1.0    NaN\n    25%            NaN      1.5    NaN\n    50%            NaN      2.0    NaN\n    75%            NaN      2.5    NaN\n    max            NaN      3.0    NaN\n**********************************************************************\nLine 192, in pandas.Series.describe\nFailed example:\n    df.describe(include=[np.object])\nExpected:\n           object\n    count       3\n    unique      3\n    top         c\n    freq        1\nGot:\n           object\n    count       3\n    unique      3\n    top         b\n    freq        1\n**********************************************************************\nLine 210, in pandas.Series.describe\nFailed example:\n    df.describe(exclude=[np.number])\nExpected:\n           categorical object\n    count            3      3\n    unique           3      3\n    top              f      c\n    freq             1      1\nGot:\n           categorical object\n    count            3      3\n    unique           3      3\n    top              f      b\n    freq             1      1\n"], ["EX03", "flake8 error: E121 continuation line under-indented for hanging indent"], ["EX03", "flake8 error: E124 closing bracket does not match visual indentation"], ["EX03", "flake8 error: E231 missing whitespace after ',' (2 times)"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 149, in pandas.Series.describe\nFailed example:\n    df.describe(include='all')\nExpected:\n            categorical  numeric object\n    count            3      3.0      3\n    unique           3      NaN      3\n    top              f      NaN      c\n    freq             1      NaN      1\n    mean           NaN      2.0    NaN\n    std            NaN      1.0    NaN\n    min            NaN      1.0    NaN\n    25%            NaN      1.5    NaN\n    50%            NaN      2.0    NaN\n    75%            NaN      2.5    NaN\n    max            NaN      3.0    NaN\nGot:\n           categorical  numeric object\n    count            3      3.0      3\n    unique           3      NaN      3\n    top              f      NaN      b\n    freq             1      NaN      1\n    mean           NaN      2.0    NaN\n    std            NaN      1.0    NaN\n    min            NaN      1.0    NaN\n    25%            NaN      1.5    NaN\n    50%            NaN      2.0    NaN\n    75%            NaN      2.5    NaN\n    max            NaN      3.0    NaN\n**********************************************************************\nLine 192, in pandas.Series.describe\nFailed example:\n    df.describe(include=[np.object])\nExpected:\n           object\n    count       3\n    unique      3\n    top         c\n    freq        1\nGot:\n           object\n    count       3\n    unique      3\n    top         b\n    freq        1\n**********************************************************************\nLine 210, in pandas.Series.describe\nFailed example:\n    df.describe(exclude=[np.number])\nExpected:\n           categorical object\n    count            3      3\n    unique           3      3\n    top              f      c\n    freq             1      1\nGot:\n           categorical object\n    count            3      3\n    unique           3      3\n    top              f      b\n    freq             1      1\n", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.diff": {"type": "function", "docstring": "First discrete difference of element.\n\nCalculates the difference of a Series element compared with another\nelement in the Series (default is element in previous row).\n\nParameters\n----------\nperiods : int, default 1\n    Periods to shift for calculating difference, accepts negative\n    values.\n\nReturns\n-------\nSeries\n    First differences of the Series.\n\nSee Also\n--------\nSeries.pct_change: Percent change over given number of periods.\nSeries.shift: Shift index by desired number of periods with an\n    optional time freq.\nDataFrame.diff: First discrete difference of object.\n\nExamples\n--------\nDifference with previous row\n\n>>> s = pd.Series([1, 1, 2, 3, 5, 8])\n>>> s.diff()\n0    NaN\n1    0.0\n2    1.0\n3    1.0\n4    2.0\n5    3.0\ndtype: float64\n\nDifference with 3rd previous row\n\n>>> s.diff(periods=3)\n0    NaN\n1    NaN\n2    NaN\n3    2.0\n4    4.0\n5    6.0\ndtype: float64\n\nDifference with following row\n\n>>> s.diff(periods=-1)\n0    0.0\n1   -1.0\n2   -1.0\n3   -2.0\n4   -3.0\n5    NaN\ndtype: float64", "deprecated": false, "file": "pandas/core/series.py", "file_line": 2456, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L2456", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.factorize": {"type": "function", "docstring": "Encode the object as an enumerated type or categorical variable.\n\nThis method is useful for obtaining a numeric representation of an\narray when all that matters is identifying distinct values. `factorize`\nis available as both a top-level function :func:`pandas.factorize`,\nand as a method :meth:`Series.factorize` and :meth:`Index.factorize`.\n\nParameters\n----------\nsort : boolean, default False\n    Sort `uniques` and shuffle `labels` to maintain the\n    relationship.\n\nna_sentinel : int, default -1\n    Value to mark \"not found\".\n\nReturns\n-------\nlabels : ndarray\n    An integer ndarray that's an indexer into `uniques`.\n    ``uniques.take(labels)`` will have the same values as `values`.\nuniques : ndarray, Index, or Categorical\n    The unique valid values. When `values` is Categorical, `uniques`\n    is a Categorical. When `values` is some other pandas object, an\n    `Index` is returned. Otherwise, a 1-D ndarray is returned.\n\n    .. note ::\n\n       Even if there's a missing value in `values`, `uniques` will\n       *not* contain an entry for it.\n\nSee Also\n--------\ncut : Discretize continuous-valued array.\nunique : Find the unique value in an array.\n\nExamples\n--------\nThese examples all show factorize as a top-level method like\n``pd.factorize(values)``. The results are identical for methods like\n:meth:`Series.factorize`.\n\n>>> labels, uniques = pd.factorize(['b', 'b', 'a', 'c', 'b'])\n>>> labels\narray([0, 0, 1, 2, 0])\n>>> uniques\narray(['b', 'a', 'c'], dtype=object)\n\nWith ``sort=True``, the `uniques` will be sorted, and `labels` will be\nshuffled so that the relationship is the maintained.\n\n>>> labels, uniques = pd.factorize(['b', 'b', 'a', 'c', 'b'], sort=True)\n>>> labels\narray([1, 1, 0, 2, 1])\n>>> uniques\narray(['a', 'b', 'c'], dtype=object)\n\nMissing values are indicated in `labels` with `na_sentinel`\n(``-1`` by default). Note that missing values are never\nincluded in `uniques`.\n\n>>> labels, uniques = pd.factorize(['b', None, 'a', 'c', 'b'])\n>>> labels\narray([ 0, -1,  1,  2,  0])\n>>> uniques\narray(['b', 'a', 'c'], dtype=object)\n\nThus far, we've only factorized lists (which are internally coerced to\nNumPy arrays). When factorizing pandas objects, the type of `uniques`\nwill differ. For Categoricals, a `Categorical` is returned.\n\n>>> cat = pd.Categorical(['a', 'a', 'c'], categories=['a', 'b', 'c'])\n>>> labels, uniques = pd.factorize(cat)\n>>> labels\narray([0, 0, 1])\n>>> uniques\n[a, c]\nCategories (3, object): [a, b, c]\n\nNotice that ``'b'`` is in ``uniques.categories``, despite not being\npresent in ``cat.values``.\n\nFor all other pandas objects, an Index of the appropriate type is\nreturned.\n\n>>> cat = pd.Series(['a', 'a', 'c'])\n>>> labels, uniques = pd.factorize(cat)\n>>> labels\narray([0, 0, 1])\n>>> uniques\nIndex(['a', 'c'], dtype='object')", "deprecated": false, "file": "pandas/core/base.py", "file_line": 1494, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L1494", "errors": [["PR06", "Parameter \"sort\" type should use \"bool\" instead of \"boolean\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.kurt": {"type": "function", "docstring": "Return unbiased kurtosis over requested axis using Fisher's definition of\nkurtosis (kurtosis of normal == 0.0). Normalized by N-1.\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a scalar.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or Series (if level specified)", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11555, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11555", "errors": [["SS06", "Summary should fit in a single line"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.mad": {"type": "function", "docstring": "Return the mean absolute deviation of the values for the requested axis.\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a scalar.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or Series (if level specified)", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 10431, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L10431", "errors": [["PR02", "Unknown parameters {**kwargs, numeric_only}"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.max": {"type": "function", "docstring": "Return the maximum of the values for the requested axis.\n\n            If you want the *index* of the maximum, use ``idxmax``. This is\n            the equivalent of the ``numpy.ndarray`` method ``argmax``.\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a scalar.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or Series (if level specified)\n\nSee Also\n--------\nSeries.sum : Return the sum.\nSeries.min : Return the minimum.\nSeries.max : Return the maximum.\nSeries.idxmin : Return the index of the minimum.\nSeries.idxmax : Return the index of the maximum.\nDataFrame.sum : Return the sum over the requested axis.\nDataFrame.min : Return the minimum over the requested axis.\nDataFrame.max : Return the maximum over the requested axis.\nDataFrame.idxmin : Return the index of the minimum over the requested axis.\nDataFrame.idxmax : Return the index of the maximum over the requested axis.\n\nExamples\n--------\n>>> idx = pd.MultiIndex.from_arrays([\n...     ['warm', 'warm', 'cold', 'cold'],\n...     ['dog', 'falcon', 'fish', 'spider']],\n...     names=['blooded', 'animal'])\n>>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n>>> s\nblooded  animal\nwarm     dog       4\n         falcon    2\ncold     fish      0\n         spider    8\nName: legs, dtype: int64\n\n>>> s.max()\n8\n\nMax using level names, as well as indices.\n\n>>> s.max(level='blooded')\nblooded\nwarm    4\ncold    8\nName: legs, dtype: int64\n\n>>> s.max(level=0)\nblooded\nwarm    4\ncold    8\nName: legs, dtype: int64", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11555, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11555", "errors": [["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.Series.kurt"}, "pandas.Series.mean": {"type": "function", "docstring": "Return the mean of the values for the requested axis.\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a scalar.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or Series (if level specified)", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11555, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11555", "errors": [["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.Series.max"}, "pandas.Series.median": {"type": "function", "docstring": "Return the median of the values for the requested axis.\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a scalar.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or Series (if level specified)", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11555, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11555", "errors": [["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.Series.mean"}, "pandas.Series.min": {"type": "function", "docstring": "Return the minimum of the values for the requested axis.\n\n            If you want the *index* of the minimum, use ``idxmin``. This is\n            the equivalent of the ``numpy.ndarray`` method ``argmin``.\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a scalar.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or Series (if level specified)\n\nSee Also\n--------\nSeries.sum : Return the sum.\nSeries.min : Return the minimum.\nSeries.max : Return the maximum.\nSeries.idxmin : Return the index of the minimum.\nSeries.idxmax : Return the index of the maximum.\nDataFrame.sum : Return the sum over the requested axis.\nDataFrame.min : Return the minimum over the requested axis.\nDataFrame.max : Return the maximum over the requested axis.\nDataFrame.idxmin : Return the index of the minimum over the requested axis.\nDataFrame.idxmax : Return the index of the maximum over the requested axis.\n\nExamples\n--------\n>>> idx = pd.MultiIndex.from_arrays([\n...     ['warm', 'warm', 'cold', 'cold'],\n...     ['dog', 'falcon', 'fish', 'spider']],\n...     names=['blooded', 'animal'])\n>>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n>>> s\nblooded  animal\nwarm     dog       4\n         falcon    2\ncold     fish      0\n         spider    8\nName: legs, dtype: int64\n\n>>> s.min()\n0\n\nMin using level names, as well as indices.\n\n>>> s.min(level='blooded')\nblooded\nwarm    2\ncold    0\nName: legs, dtype: int64\n\n>>> s.min(level=0)\nblooded\nwarm    2\ncold    0\nName: legs, dtype: int64", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11555, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11555", "errors": [["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.Series.median"}, "pandas.Series.mode": {"type": "function", "docstring": "Return the mode(s) of the dataset.\n\nAlways returns Series even if only one value is returned.\n\nParameters\n----------\ndropna : bool, default True\n    Don't consider counts of NaN/NaT.\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nSeries\n    Modes of the Series in sorted order.", "deprecated": false, "file": "pandas/core/series.py", "file_line": 1874, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L1874", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.nlargest": {"type": "function", "docstring": "Return the largest `n` elements.\n\nParameters\n----------\nn : int, default 5\n    Return this many descending sorted values.\nkeep : {'first', 'last', 'all'}, default 'first'\n    When there are duplicate values that cannot all fit in a\n    Series of `n` elements:\n\n    - ``first`` : return the first `n` occurrences in order\n        of appearance.\n    - ``last`` : return the last `n` occurrences in reverse\n        order of appearance.\n    - ``all`` : keep all occurrences. This can result in a Series of\n        size larger than `n`.\n\nReturns\n-------\nSeries\n    The `n` largest values in the Series, sorted in decreasing order.\n\nSee Also\n--------\nSeries.nsmallest: Get the `n` smallest elements.\nSeries.sort_values: Sort Series by values.\nSeries.head: Return the first `n` rows.\n\nNotes\n-----\nFaster than ``.sort_values(ascending=False).head(n)`` for small `n`\nrelative to the size of the ``Series`` object.\n\nExamples\n--------\n>>> countries_population = {\"Italy\": 59000000, \"France\": 65000000,\n...                         \"Malta\": 434000, \"Maldives\": 434000,\n...                         \"Brunei\": 434000, \"Iceland\": 337000,\n...                         \"Nauru\": 11300, \"Tuvalu\": 11300,\n...                         \"Anguilla\": 11300, \"Monserat\": 5200}\n>>> s = pd.Series(countries_population)\n>>> s\nItaly       59000000\nFrance      65000000\nMalta         434000\nMaldives      434000\nBrunei        434000\nIceland       337000\nNauru          11300\nTuvalu         11300\nAnguilla       11300\nMonserat        5200\ndtype: int64\n\nThe `n` largest elements where ``n=5`` by default.\n\n>>> s.nlargest()\nFrance      65000000\nItaly       59000000\nMalta         434000\nMaldives      434000\nBrunei        434000\ndtype: int64\n\nThe `n` largest elements where ``n=3``. Default `keep` value is 'first'\nso Malta will be kept.\n\n>>> s.nlargest(3)\nFrance    65000000\nItaly     59000000\nMalta       434000\ndtype: int64\n\nThe `n` largest elements where ``n=3`` and keeping the last duplicates.\nBrunei will be kept since it is the last with value 434000 based on\nthe index order.\n\n>>> s.nlargest(3, keep='last')\nFrance      65000000\nItaly       59000000\nBrunei        434000\ndtype: int64\n\nThe `n` largest elements where ``n=3`` with all duplicates kept. Note\nthat the returned Series has five elements due to the three duplicates.\n\n>>> s.nlargest(3, keep='all')\nFrance      65000000\nItaly       59000000\nMalta         434000\nMaldives      434000\nBrunei        434000\ndtype: int64", "deprecated": false, "file": "pandas/core/series.py", "file_line": 3366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L3366", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.nsmallest": {"type": "function", "docstring": "Return the smallest `n` elements.\n\nParameters\n----------\nn : int, default 5\n    Return this many ascending sorted values.\nkeep : {'first', 'last', 'all'}, default 'first'\n    When there are duplicate values that cannot all fit in a\n    Series of `n` elements:\n\n    - ``first`` : return the first `n` occurrences in order\n        of appearance.\n    - ``last`` : return the last `n` occurrences in reverse\n        order of appearance.\n    - ``all`` : keep all occurrences. This can result in a Series of\n        size larger than `n`.\n\nReturns\n-------\nSeries\n    The `n` smallest values in the Series, sorted in increasing order.\n\nSee Also\n--------\nSeries.nlargest: Get the `n` largest elements.\nSeries.sort_values: Sort Series by values.\nSeries.head: Return the first `n` rows.\n\nNotes\n-----\nFaster than ``.sort_values().head(n)`` for small `n` relative to\nthe size of the ``Series`` object.\n\nExamples\n--------\n>>> countries_population = {\"Italy\": 59000000, \"France\": 65000000,\n...                         \"Brunei\": 434000, \"Malta\": 434000,\n...                         \"Maldives\": 434000, \"Iceland\": 337000,\n...                         \"Nauru\": 11300, \"Tuvalu\": 11300,\n...                         \"Anguilla\": 11300, \"Monserat\": 5200}\n>>> s = pd.Series(countries_population)\n>>> s\nItaly       59000000\nFrance      65000000\nBrunei        434000\nMalta         434000\nMaldives      434000\nIceland       337000\nNauru          11300\nTuvalu         11300\nAnguilla       11300\nMonserat        5200\ndtype: int64\n\nThe `n` smallest elements where ``n=5`` by default.\n\n>>> s.nsmallest()\nMonserat      5200\nNauru        11300\nTuvalu       11300\nAnguilla     11300\nIceland     337000\ndtype: int64\n\nThe `n` smallest elements where ``n=3``. Default `keep` value is\n'first' so Nauru and Tuvalu will be kept.\n\n>>> s.nsmallest(3)\nMonserat     5200\nNauru       11300\nTuvalu      11300\ndtype: int64\n\nThe `n` smallest elements where ``n=3`` and keeping the last\nduplicates. Anguilla and Tuvalu will be kept since they are the last\nwith value 11300 based on the index order.\n\n>>> s.nsmallest(3, keep='last')\nMonserat     5200\nAnguilla    11300\nTuvalu      11300\ndtype: int64\n\nThe `n` smallest elements where ``n=3`` with all duplicates kept. Note\nthat the returned Series has four elements due to the three duplicates.\n\n>>> s.nsmallest(3, keep='all')\nMonserat     5200\nNauru       11300\nTuvalu      11300\nAnguilla    11300\ndtype: int64", "deprecated": false, "file": "pandas/core/series.py", "file_line": 3464, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L3464", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.pct_change": {"type": "function", "docstring": "Percentage change between the current and a prior element.\n\nComputes the percentage change from the immediately previous row by\ndefault. This is useful in comparing the percentage of change in a time\nseries of elements.\n\nParameters\n----------\nperiods : int, default 1\n    Periods to shift for forming percent change.\nfill_method : str, default 'pad'\n    How to handle NAs before computing percent changes.\nlimit : int, default None\n    The number of consecutive NAs to fill before stopping.\nfreq : DateOffset, timedelta, or offset alias string, optional\n    Increment to use from time series API (e.g. 'M' or BDay()).\n**kwargs\n    Additional keyword arguments are passed into\n    `DataFrame.shift` or `Series.shift`.\n\nReturns\n-------\nchg : Series or DataFrame\n    The same type as the calling object.\n\nSee Also\n--------\nSeries.diff : Compute the difference of two elements in a Series.\nDataFrame.diff : Compute the difference of two elements in a DataFrame.\nSeries.shift : Shift the index by some number of periods.\nDataFrame.shift : Shift the index by some number of periods.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([90, 91, 85])\n>>> s\n0    90\n1    91\n2    85\ndtype: int64\n\n>>> s.pct_change()\n0         NaN\n1    0.011111\n2   -0.065934\ndtype: float64\n\n>>> s.pct_change(periods=2)\n0         NaN\n1         NaN\n2   -0.055556\ndtype: float64\n\nSee the percentage change in a Series where filling NAs with last\nvalid observation forward to next valid.\n\n>>> s = pd.Series([90, 91, None, 85])\n>>> s\n0    90.0\n1    91.0\n2     NaN\n3    85.0\ndtype: float64\n\n>>> s.pct_change(fill_method='ffill')\n0         NaN\n1    0.011111\n2    0.000000\n3   -0.065934\ndtype: float64\n\n**DataFrame**\n\nPercentage change in French franc, Deutsche Mark, and Italian lira from\n1980-01-01 to 1980-03-01.\n\n>>> df = pd.DataFrame({\n...     'FR': [4.0405, 4.0963, 4.3149],\n...     'GR': [1.7246, 1.7482, 1.8519],\n...     'IT': [804.74, 810.01, 860.13]},\n...     index=['1980-01-01', '1980-02-01', '1980-03-01'])\n>>> df\n                FR      GR      IT\n1980-01-01  4.0405  1.7246  804.74\n1980-02-01  4.0963  1.7482  810.01\n1980-03-01  4.3149  1.8519  860.13\n\n>>> df.pct_change()\n                  FR        GR        IT\n1980-01-01       NaN       NaN       NaN\n1980-02-01  0.013810  0.013684  0.006549\n1980-03-01  0.053365  0.059318  0.061876\n\nPercentage of change in GOOG and APPL stock volume. Shows computing\nthe percentage change between columns.\n\n>>> df = pd.DataFrame({\n...     '2016': [1769950, 30586265],\n...     '2015': [1500923, 40912316],\n...     '2014': [1371819, 41403351]},\n...     index=['GOOG', 'APPL'])\n>>> df\n          2016      2015      2014\nGOOG   1769950   1500923   1371819\nAPPL  30586265  40912316  41403351\n\n>>> df.pct_change(axis='columns')\n      2016      2015      2014\nGOOG   NaN -0.151997 -0.086016\nAPPL   NaN  0.337604  0.012002", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 10371, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L10371", "errors": [["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.prod": {"type": "function", "docstring": "Return the product of the values for the requested axis.\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a scalar.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\nmin_count : int, default 0\n    The required number of valid values to perform the operation. If fewer than\n    ``min_count`` non-NA values are present the result will be NA.\n\n    .. versionadded:: 0.22.0\n\n       Added with the default being 0. This means the sum of an all-NA\n       or empty Series is 0, and the product of an all-NA or empty\n       Series is 1.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or Series (if level specified)\n\nExamples\n--------\nBy default, the product of an empty or all-NA Series is ``1``\n\n>>> pd.Series([]).prod()\n1.0\n\nThis can be controlled with the ``min_count`` parameter\n\n>>> pd.Series([]).prod(min_count=1)\nnan\n\nThanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\nempty series identically.\n\n>>> pd.Series([np.nan]).prod()\n1.0\n\n>>> pd.Series([np.nan]).prod(min_count=1)\nnan", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11507, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11507", "errors": [["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.Series.product"}, "pandas.Series.quantile": {"type": "function", "docstring": "Return value at the given quantile.\n\nParameters\n----------\nq : float or array-like, default 0.5 (50% quantile)\n    0 <= q <= 1, the quantile(s) to compute.\ninterpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n    This optional parameter specifies the interpolation method to use,\n    when the desired quantile lies between two data points `i` and `j`:\n\n        * linear: `i + (j - i) * fraction`, where `fraction` is the\n          fractional part of the index surrounded by `i` and `j`.\n        * lower: `i`.\n        * higher: `j`.\n        * nearest: `i` or `j` whichever is nearest.\n        * midpoint: (`i` + `j`) / 2.\n\nReturns\n-------\nfloat or Series\n    If ``q`` is an array, a Series will be returned where the\n    index is ``q`` and the values are the quantiles, otherwise\n    a float will be returned.\n\nSee Also\n--------\ncore.window.Rolling.quantile\nnumpy.percentile\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s.quantile(.5)\n2.5\n>>> s.quantile([.25, .5, .75])\n0.25    1.75\n0.50    2.50\n0.75    3.25\ndtype: float64", "deprecated": false, "file": "pandas/core/series.py", "file_line": 2316, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L2316", "errors": [["PR08", "Parameter \"q\" description should start with a capital letter"], ["SA04", "Missing description for See Also \"core.window.Rolling.quantile\" reference"], ["SA04", "Missing description for See Also \"numpy.percentile\" reference"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.rank": {"type": "function", "docstring": "Compute numerical data ranks (1 through n) along axis.\n\nBy default, equal values are assigned a rank that is the average of the\nranks of those values.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Index to direct ranking.\nmethod : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n    How to rank the group of records that have the same value\n    (i.e. ties):\n\n    * average: average rank of the group\n    * min: lowest rank in the group\n    * max: highest rank in the group\n    * first: ranks assigned in order they appear in the array\n    * dense: like 'min', but rank always increases by 1 between groups\nnumeric_only : bool, optional\n    For DataFrame objects, rank only numeric columns if set to True.\nna_option : {'keep', 'top', 'bottom'}, default 'keep'\n    How to rank NaN values:\n\n    * keep: assign NaN rank to NaN values\n    * top: assign smallest rank to NaN values if ascending\n    * bottom: assign highest rank to NaN values if ascending\nascending : bool, default True\n    Whether or not the elements should be ranked in ascending order.\npct : bool, default False\n    Whether or not to display the returned rankings in percentile\n    form.\n\nReturns\n-------\nsame type as caller\n    Return a Series or DataFrame with data ranks as values.\n\nSee Also\n--------\ncore.groupby.GroupBy.rank : Rank of values within each group.\n\nExamples\n--------\n\n>>> df = pd.DataFrame(data={'Animal': ['cat', 'penguin', 'dog',\n...                                    'spider', 'snake'],\n...                         'Number_legs': [4, 2, 4, 8, np.nan]})\n>>> df\n    Animal  Number_legs\n0      cat          4.0\n1  penguin          2.0\n2      dog          4.0\n3   spider          8.0\n4    snake          NaN\n\nThe following example shows how the method behaves with the above\nparameters:\n\n* default_rank: this is the default behaviour obtained without using\n  any parameter.\n* max_rank: setting ``method = 'max'`` the records that have the\n  same values are ranked using the highest rank (e.g.: since 'cat'\n  and 'dog' are both in the 2nd and 3rd position, rank 3 is assigned.)\n* NA_bottom: choosing ``na_option = 'bottom'``, if there are records\n  with NaN values they are placed at the bottom of the ranking.\n* pct_rank: when setting ``pct = True``, the ranking is expressed as\n  percentile rank.\n\n>>> df['default_rank'] = df['Number_legs'].rank()\n>>> df['max_rank'] = df['Number_legs'].rank(method='max')\n>>> df['NA_bottom'] = df['Number_legs'].rank(na_option='bottom')\n>>> df['pct_rank'] = df['Number_legs'].rank(pct=True)\n>>> df\n    Animal  Number_legs  default_rank  max_rank  NA_bottom  pct_rank\n0      cat          4.0           2.5       3.0        2.5     0.625\n1  penguin          2.0           1.0       1.0        1.0     0.250\n2      dog          4.0           2.5       3.0        2.5     0.625\n3   spider          8.0           4.0       4.0        4.0     1.000\n4    snake          NaN           NaN       NaN        5.0       NaN", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 8536, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L8536", "errors": [["PR09", "Parameter \"method\" description should finish with \".\""], ["PR09", "Parameter \"na_option\" description should finish with \".\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.sem": {"type": "function", "docstring": "Return unbiased standard error of the mean over requested axis.\n\nNormalized by N-1 by default. This can be changed using the ddof argument\n\nParameters\n----------\naxis : {index (0)}\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a scalar\nddof : int, default 1\n    Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n    where N represents the number of elements.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n\nReturns\n-------\nscalar or Series (if level specified)", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11586, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11586", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR07", "Parameter \"axis\" has no description"], ["PR09", "Parameter \"skipna\" description should finish with \".\""], ["PR09", "Parameter \"level\" description should finish with \".\""], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.skew": {"type": "function", "docstring": "Return unbiased skew over requested axis\nNormalized by N-1.\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a scalar.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or Series (if level specified)", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11555, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11555", "errors": [["SS06", "Summary should fit in a single line"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.Series.min"}, "pandas.Series.std": {"type": "function", "docstring": "Return sample standard deviation over requested axis.\n\nNormalized by N-1 by default. This can be changed using the ddof argument\n\nParameters\n----------\naxis : {index (0)}\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a scalar\nddof : int, default 1\n    Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n    where N represents the number of elements.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n\nReturns\n-------\nscalar or Series (if level specified)", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11586, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11586", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR07", "Parameter \"axis\" has no description"], ["PR09", "Parameter \"skipna\" description should finish with \".\""], ["PR09", "Parameter \"level\" description should finish with \".\""], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.Series.sem"}, "pandas.Series.sum": {"type": "function", "docstring": "Return the sum of the values for the requested axis.\n\n            This is equivalent to the method ``numpy.sum``.\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a scalar.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\nmin_count : int, default 0\n    The required number of valid values to perform the operation. If fewer than\n    ``min_count`` non-NA values are present the result will be NA.\n\n    .. versionadded:: 0.22.0\n\n       Added with the default being 0. This means the sum of an all-NA\n       or empty Series is 0, and the product of an all-NA or empty\n       Series is 1.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or Series (if level specified)\n\nSee Also\n--------\nSeries.sum : Return the sum.\nSeries.min : Return the minimum.\nSeries.max : Return the maximum.\nSeries.idxmin : Return the index of the minimum.\nSeries.idxmax : Return the index of the maximum.\nDataFrame.sum : Return the sum over the requested axis.\nDataFrame.min : Return the minimum over the requested axis.\nDataFrame.max : Return the maximum over the requested axis.\nDataFrame.idxmin : Return the index of the minimum over the requested axis.\nDataFrame.idxmax : Return the index of the maximum over the requested axis.\n\nExamples\n--------\n>>> idx = pd.MultiIndex.from_arrays([\n...     ['warm', 'warm', 'cold', 'cold'],\n...     ['dog', 'falcon', 'fish', 'spider']],\n...     names=['blooded', 'animal'])\n>>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n>>> s\nblooded  animal\nwarm     dog       4\n         falcon    2\ncold     fish      0\n         spider    8\nName: legs, dtype: int64\n\n>>> s.sum()\n14\n\nSum using level names, as well as indices.\n\n>>> s.sum(level='blooded')\nblooded\nwarm    6\ncold    8\nName: legs, dtype: int64\n\n>>> s.sum(level=0)\nblooded\nwarm    6\ncold    8\nName: legs, dtype: int64\n\nBy default, the sum of an empty or all-NA Series is ``0``.\n\n>>> pd.Series([]).sum()  # min_count=0 is the default\n0.0\n\nThis can be controlled with the ``min_count`` parameter. For example, if\nyou'd like the sum of an empty series to be NaN, pass ``min_count=1``.\n\n>>> pd.Series([]).sum(min_count=1)\nnan\n\nThanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\nempty series identically.\n\n>>> pd.Series([np.nan]).sum()\n0.0\n\n>>> pd.Series([np.nan]).sum(min_count=1)\nnan", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11507, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11507", "errors": [["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.Series.prod"}, "pandas.Series.var": {"type": "function", "docstring": "Return unbiased variance over requested axis.\n\nNormalized by N-1 by default. This can be changed using the ddof argument\n\nParameters\n----------\naxis : {index (0)}\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a scalar\nddof : int, default 1\n    Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n    where N represents the number of elements.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n\nReturns\n-------\nscalar or Series (if level specified)", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11586, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11586", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR07", "Parameter \"axis\" has no description"], ["PR09", "Parameter \"skipna\" description should finish with \".\""], ["PR09", "Parameter \"level\" description should finish with \".\""], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.Series.std"}, "pandas.Series.kurtosis": {"type": "function", "docstring": "Return unbiased kurtosis over requested axis using Fisher's definition of\nkurtosis (kurtosis of normal == 0.0). Normalized by N-1.\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a scalar.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or Series (if level specified)", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11555, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11555", "errors": [["SS06", "Summary should fit in a single line"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.Series.skew"}, "pandas.Series.unique": {"type": "function", "docstring": "Return unique values of Series object.\n\nUniques are returned in order of appearance. Hash table-based unique,\ntherefore does NOT sort.\n\nReturns\n-------\nndarray or ExtensionArray\n    The unique values returned as a NumPy array. See Notes.\n\nSee Also\n--------\nunique : Top-level unique method for any 1-d array-like object.\nIndex.unique : Return Index with unique values from an Index object.\n\nNotes\n-----\nReturns the unique values as a NumPy array. In case of an\nextension-array backed Series, a new\n:class:`~api.extensions.ExtensionArray` of that type with just\nthe unique values is returned. This includes\n\n    * Categorical\n    * Period\n    * Datetime with Timezone\n    * Interval\n    * Sparse\n    * IntegerNA\n\nSee Examples section.\n\nExamples\n--------\n>>> pd.Series([2, 1, 3, 3], name='A').unique()\narray([2, 1, 3])\n\n>>> pd.Series([pd.Timestamp('2016-01-01') for _ in range(3)]).unique()\narray(['2016-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\n>>> pd.Series([pd.Timestamp('2016-01-01', tz='US/Eastern')\n...            for _ in range(3)]).unique()\n<DatetimeArray>\n['2016-01-01 00:00:00-05:00']\nLength: 1, dtype: datetime64[ns, US/Eastern]\n\nAn unordered Categorical will return categories in the order of\nappearance.\n\n>>> pd.Series(pd.Categorical(list('baabc'))).unique()\n[b, a, c]\nCategories (3, object): [b, a, c]\n\nAn ordered Categorical preserves the category ordering.\n\n>>> pd.Series(pd.Categorical(list('baabc'), categories=list('abc'),\n...                          ordered=True)).unique()\n[b, a, c]\nCategories (3, object): [a < b < c]", "deprecated": false, "file": "pandas/core/series.py", "file_line": 1895, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L1895", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.nunique": {"type": "function", "docstring": "Return number of unique elements in the object.\n\nExcludes NA values by default.\n\nParameters\n----------\ndropna : bool, default True\n    Don't include NaN in the count.\n\nReturns\n-------\nint\n\nSee Also\n--------\nDataFrame.nunique: Method nunique for DataFrame.\nSeries.count: Count non-NA/null observations in the Series.\n\nExamples\n--------\n>>> s = pd.Series([1, 3, 5, 7, 7])\n>>> s\n0    1\n1    3\n2    5\n3    7\n4    7\ndtype: int64\n\n>>> s.nunique()\n4", "deprecated": false, "file": "pandas/core/base.py", "file_line": 1382, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L1382", "errors": [["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.is_unique": {"type": "property", "docstring": "Return boolean if values in the object are unique.\n\nReturns\n-------\nbool", "deprecated": false, "file": "pandas/core/base.py", "file_line": 1422, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L1422", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.is_monotonic": {"type": "property", "docstring": "Return boolean if values in the object are\nmonotonic_increasing.\n\nReturns\n-------\nbool", "deprecated": false, "file": "pandas/core/base.py", "file_line": 1433, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L1433", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.is_monotonic_increasing": {"type": "property", "docstring": "Return boolean if values in the object are\nmonotonic_increasing.\n\nReturns\n-------\nbool", "deprecated": false, "file": "pandas/core/base.py", "file_line": 1433, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L1433", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.Series.is_monotonic"}, "pandas.Series.is_monotonic_decreasing": {"type": "property", "docstring": "Return boolean if values in the object are\nmonotonic_decreasing.\n\nReturns\n-------\nbool", "deprecated": false, "file": "pandas/core/base.py", "file_line": 1449, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L1449", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.value_counts": {"type": "function", "docstring": "Return a Series containing counts of unique values.\n\nThe resulting object will be in descending order so that the\nfirst element is the most frequently-occurring element.\nExcludes NA values by default.\n\nParameters\n----------\nnormalize : boolean, default False\n    If True then the object returned will contain the relative\n    frequencies of the unique values.\nsort : boolean, default True\n    Sort by frequencies.\nascending : boolean, default False\n    Sort in ascending order.\nbins : integer, optional\n    Rather than count values, group them into half-open bins,\n    a convenience for ``pd.cut``, only works with numeric data.\ndropna : boolean, default True\n    Don't include counts of NaN.\n\nReturns\n-------\nSeries\n\nSee Also\n--------\nSeries.count: Number of non-NA elements in a Series.\nDataFrame.count: Number of non-NA elements in a DataFrame.\n\nExamples\n--------\n>>> index = pd.Index([3, 1, 2, 3, 4, np.nan])\n>>> index.value_counts()\n3.0    2\n4.0    1\n2.0    1\n1.0    1\ndtype: int64\n\nWith `normalize` set to `True`, returns the relative frequency by\ndividing all values by the sum of values.\n\n>>> s = pd.Series([3, 1, 2, 3, 4, np.nan])\n>>> s.value_counts(normalize=True)\n3.0    0.4\n4.0    0.2\n2.0    0.2\n1.0    0.2\ndtype: float64\n\n**bins**\n\nBins can be useful for going from a continuous variable to a\ncategorical variable; instead of counting unique\napparitions of values, divide the index in the specified\nnumber of half-open bins.\n\n>>> s.value_counts(bins=3)\n(2.0, 3.0]      2\n(0.996, 2.0]    2\n(3.0, 4.0]      1\ndtype: int64\n\n**dropna**\n\nWith `dropna` set to `False` we can also see NaN index values.\n\n>>> s.value_counts(dropna=False)\n3.0    2\nNaN    1\n4.0    1\n2.0    1\n1.0    1\ndtype: int64", "deprecated": false, "file": "pandas/core/base.py", "file_line": 1281, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L1281", "errors": [["PR06", "Parameter \"normalize\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"sort\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"ascending\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"bins\" type should use \"int\" instead of \"integer\""], ["PR06", "Parameter \"dropna\" type should use \"bool\" instead of \"boolean\""], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.compound": {"type": "function", "docstring": "Return the compound percentage of the values for the requested axis.\n\n.. deprecated:: 0.25.0\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a scalar.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or Series (if level specified)", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 10492, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L10492", "errors": [["PR02", "Unknown parameters {**kwargs, numeric_only}"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.Series.align": {"type": "function", "docstring": "Align two objects on their axes with the\nspecified join method for each axis Index.\n\nParameters\n----------\nother : DataFrame or Series\njoin : {'outer', 'inner', 'left', 'right'}, default 'outer'\naxis : allowed axis of the other object, default None\n    Align on index (0), columns (1), or both (None)\nlevel : int or level name, default None\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level\ncopy : bool, default True\n    Always returns new objects. If copy=False and no reindexing is\n    required then original objects are returned.\nfill_value : scalar, default np.NaN\n    Value to use for missing values. Defaults to NaN, but can be any\n    \"compatible\" value\nmethod : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n    Method to use for filling holes in reindexed Series\n    pad / ffill: propagate last valid observation forward to next valid\n    backfill / bfill: use NEXT valid observation to fill gap\nlimit : int, default None\n    If method is specified, this is the maximum number of consecutive\n    NaN values to forward/backward fill. In other words, if there is\n    a gap with more than this number of consecutive NaNs, it will only\n    be partially filled. If method is not specified, this is the\n    maximum number of entries along the entire axis where NaNs will be\n    filled. Must be greater than 0 if not None.\nfill_axis : {0 or 'index'}, default 0\n    Filling axis, method and limit\nbroadcast_axis : {0 or 'index'}, default None\n    Broadcast values along this axis, if aligning two objects of\n    different dimensions\n\nReturns\n-------\n(left, right) : (Series, type of other)\n    Aligned objects.", "deprecated": false, "file": "pandas/core/series.py", "file_line": 4078, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L4078", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"other\" has no description"], ["PR07", "Parameter \"join\" has no description"], ["PR09", "Parameter \"axis\" description should finish with \".\""], ["PR09", "Parameter \"level\" description should finish with \".\""], ["PR09", "Parameter \"fill_value\" description should finish with \".\""], ["PR09", "Parameter \"method\" description should finish with \".\""], ["PR09", "Parameter \"fill_axis\" description should finish with \".\""], ["PR09", "Parameter \"broadcast_axis\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.drop": {"type": "function", "docstring": "Return Series with specified index labels removed.\n\nRemove elements of a Series based on specifying the index labels.\nWhen using a multi-index, labels on different levels can be removed\nby specifying the level.\n\nParameters\n----------\nlabels : single label or list-like\n    Index labels to drop.\naxis : 0, default 0\n    Redundant for application on Series.\nindex, columns : None\n    Redundant for application on Series, but index can be used instead\n    of labels.\n\n    .. versionadded:: 0.21.0\nlevel : int or level name, optional\n    For MultiIndex, level for which the labels will be removed.\ninplace : bool, default False\n    If True, do operation inplace and return None.\nerrors : {'ignore', 'raise'}, default 'raise'\n    If 'ignore', suppress error and only existing labels are dropped.\n\nReturns\n-------\nSeries\n    Series with specified index labels removed.\n\nRaises\n------\nKeyError\n    If none of the labels are found in the index.\n\nSee Also\n--------\nSeries.reindex : Return only specified index labels of Series.\nSeries.dropna : Return series without null values.\nSeries.drop_duplicates : Return Series with duplicate values removed.\nDataFrame.drop : Drop specified labels from rows or columns.\n\nExamples\n--------\n>>> s = pd.Series(data=np.arange(3), index=['A', 'B', 'C'])\n>>> s\nA  0\nB  1\nC  2\ndtype: int64\n\nDrop labels B en C\n\n>>> s.drop(labels=['B', 'C'])\nA  0\ndtype: int64\n\nDrop 2nd level label in MultiIndex Series\n\n>>> midx = pd.MultiIndex(levels=[['lama', 'cow', 'falcon'],\n...                              ['speed', 'weight', 'length']],\n...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n>>> s = pd.Series([45, 200, 1.2, 30, 250, 1.5, 320, 1, 0.3],\n...               index=midx)\n>>> s\nlama    speed      45.0\n        weight    200.0\n        length      1.2\ncow     speed      30.0\n        weight    250.0\n        length      1.5\nfalcon  speed     320.0\n        weight      1.0\n        length      0.3\ndtype: float64\n\n>>> s.drop(labels='weight', level=1)\nlama    speed      45.0\n        length      1.2\ncow     speed      30.0\n        length      1.5\nfalcon  speed     320.0\n        length      0.3\ndtype: float64", "deprecated": false, "file": "pandas/core/series.py", "file_line": 4180, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L4180", "errors": [["PR01", "Parameters {columns, index} not documented"], ["PR02", "Unknown parameters {index, columns}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.droplevel": {"type": "function", "docstring": "Return DataFrame with requested index / column level(s) removed.\n\n.. versionadded:: 0.24.0\n\nParameters\n----------\nlevel : int, str, or list-like\n    If a string is given, must be the name of a level\n    If list-like, elements must be names or positional indexes\n    of levels.\n\naxis : {0 or 'index', 1 or 'columns'}, default 0\n\nReturns\n-------\nDataFrame.droplevel()\n\nExamples\n--------\n>>> df = pd.DataFrame([\n...     [1, 2, 3, 4],\n...     [5, 6, 7, 8],\n...     [9, 10, 11, 12]\n... ]).set_index([0, 1]).rename_axis(['a', 'b'])\n\n>>> df.columns = pd.MultiIndex.from_tuples([\n...    ('c', 'e'), ('d', 'f')\n... ], names=['level_1', 'level_2'])\n\n>>> df\nlevel_1   c   d\nlevel_2   e   f\na b\n1 2      3   4\n5 6      7   8\n9 10    11  12\n\n>>> df.droplevel('a')\nlevel_1   c   d\nlevel_2   e   f\nb\n2        3   4\n6        7   8\n10      11  12\n\n>>> df.droplevel('level2', axis=1)\nlevel_1   c   d\na b\n1 2      3   4\n5 6      7   8\n9 10    11  12", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 742, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L742", "errors": [["PR07", "Parameter \"axis\" has no description"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 47, in pandas.Series.droplevel\nFailed example:\n    df.droplevel('level2', axis=1)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/indexes/multi.py\", line 1301, in _get_level_number\n        level = self.names.index(level)\n    ValueError: 'level2' is not in list\n\n    During handling of the above exception, another exception occurred:\n\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.droplevel[4]>\", line 1, in <module>\n        df.droplevel('level2', axis=1)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/generic.py\", line 797, in droplevel\n        new_labels = labels.droplevel(level)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/indexes/base.py\", line 1600, in droplevel\n        levnums = sorted(self._get_level_number(lev) for lev in level)[::-1]\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/indexes/base.py\", line 1600, in <genexpr>\n        levnums = sorted(self._get_level_number(lev) for lev in level)[::-1]\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/indexes/multi.py\", line 1304, in _get_level_number\n        raise KeyError(\"Level %s not found\" % str(level))\n    KeyError: 'Level level2 not found'\n"], ["EX03", "flake8 error: E121 continuation line under-indented for hanging indent"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 47, in pandas.Series.droplevel\nFailed example:\n    df.droplevel('level2', axis=1)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/indexes/multi.py\", line 1301, in _get_level_number\n        level = self.names.index(level)\n    ValueError: 'level2' is not in list\n\n    During handling of the above exception, another exception occurred:\n\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.droplevel[4]>\", line 1, in <module>\n        df.droplevel('level2', axis=1)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/generic.py\", line 797, in droplevel\n        new_labels = labels.droplevel(level)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/indexes/base.py\", line 1600, in droplevel\n        levnums = sorted(self._get_level_number(lev) for lev in level)[::-1]\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/indexes/base.py\", line 1600, in <genexpr>\n        levnums = sorted(self._get_level_number(lev) for lev in level)[::-1]\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/indexes/multi.py\", line 1304, in _get_level_number\n        raise KeyError(\"Level %s not found\" % str(level))\n    KeyError: 'Level level2 not found'\n", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.drop_duplicates": {"type": "function", "docstring": "Return Series with duplicate values removed.\n\nParameters\n----------\nkeep : {'first', 'last', ``False``}, default 'first'\n    - 'first' : Drop duplicates except for the first occurrence.\n    - 'last' : Drop duplicates except for the last occurrence.\n    - ``False`` : Drop all duplicates.\ninplace : bool, default ``False``\n    If ``True``, performs operation inplace and returns None.\n\nReturns\n-------\nSeries\n    Series with duplicates dropped.\n\nSee Also\n--------\nIndex.drop_duplicates : Equivalent method on Index.\nDataFrame.drop_duplicates : Equivalent method on DataFrame.\nSeries.duplicated : Related method on Series, indicating duplicate\n    Series values.\n\nExamples\n--------\nGenerate a Series with duplicated entries.\n\n>>> s = pd.Series(['lama', 'cow', 'lama', 'beetle', 'lama', 'hippo'],\n...               name='animal')\n>>> s\n0      lama\n1       cow\n2      lama\n3    beetle\n4      lama\n5     hippo\nName: animal, dtype: object\n\nWith the 'keep' parameter, the selection behaviour of duplicated values\ncan be changed. The value 'first' keeps the first occurrence for each\nset of duplicated entries. The default value of keep is 'first'.\n\n>>> s.drop_duplicates()\n0      lama\n1       cow\n3    beetle\n5     hippo\nName: animal, dtype: object\n\nThe value 'last' for parameter 'keep' keeps the last occurrence for\neach set of duplicated entries.\n\n>>> s.drop_duplicates(keep='last')\n1       cow\n3    beetle\n4      lama\n5     hippo\nName: animal, dtype: object\n\nThe value ``False`` for parameter 'keep' discards all sets of\nduplicated entries. Setting the value of 'inplace' to ``True`` performs\nthe operation inplace and returns ``None``.\n\n>>> s.drop_duplicates(keep=False, inplace=True)\n>>> s\n1       cow\n3    beetle\n5     hippo\nName: animal, dtype: object", "deprecated": false, "file": "pandas/core/series.py", "file_line": 1959, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L1959", "errors": [["PR08", "Parameter \"keep\" description should start with a capital letter"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.duplicated": {"type": "function", "docstring": "Indicate duplicate Series values.\n\nDuplicated values are indicated as ``True`` values in the resulting\nSeries. Either all duplicates, all except the first or all except the\nlast occurrence of duplicates can be indicated.\n\nParameters\n----------\nkeep : {'first', 'last', False}, default 'first'\n    - 'first' : Mark duplicates as ``True`` except for the first\n      occurrence.\n    - 'last' : Mark duplicates as ``True`` except for the last\n      occurrence.\n    - ``False`` : Mark all duplicates as ``True``.\n\nReturns\n-------\nSeries\n    Series indicating whether each value has occurred in the\n    preceding values.\n\nSee Also\n--------\nIndex.duplicated : Equivalent method on pandas.Index.\nDataFrame.duplicated : Equivalent method on pandas.DataFrame.\nSeries.drop_duplicates : Remove duplicate values from Series.\n\nExamples\n--------\nBy default, for each set of duplicated values, the first occurrence is\nset on False and all others on True:\n\n>>> animals = pd.Series(['lama', 'cow', 'lama', 'beetle', 'lama'])\n>>> animals.duplicated()\n0    False\n1    False\n2     True\n3    False\n4     True\ndtype: bool\n\nwhich is equivalent to\n\n>>> animals.duplicated(keep='first')\n0    False\n1    False\n2     True\n3    False\n4     True\ndtype: bool\n\nBy using 'last', the last occurrence of each set of duplicated values\nis set on False and all others on True:\n\n>>> animals.duplicated(keep='last')\n0     True\n1    False\n2     True\n3    False\n4    False\ndtype: bool\n\nBy setting keep on ``False``, all duplicates are True:\n\n>>> animals.duplicated(keep=False)\n0     True\n1    False\n2     True\n3    False\n4     True\ndtype: bool", "deprecated": false, "file": "pandas/core/series.py", "file_line": 2033, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L2033", "errors": [["PR08", "Parameter \"keep\" description should start with a capital letter"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.equals": {"type": "function", "docstring": "Test whether two objects contain the same elements.\n\nThis function allows two Series or DataFrames to be compared against\neach other to see if they have the same shape and elements. NaNs in\nthe same location are considered equal. The column headers do not\nneed to have the same type, but the elements within the columns must\nbe the same dtype.\n\nParameters\n----------\nother : Series or DataFrame\n    The other Series or DataFrame to be compared with the first.\n\nReturns\n-------\nbool\n    True if all elements are the same in both objects, False\n    otherwise.\n\nSee Also\n--------\nSeries.eq : Compare two Series objects of the same length\n    and return a Series where each element is True if the element\n    in each Series is equal, False otherwise.\nDataFrame.eq : Compare two DataFrame objects of the same shape and\n    return a DataFrame where each element is True if the respective\n    element in each DataFrame is equal, False otherwise.\nassert_series_equal : Return True if left and right Series are equal,\n    False otherwise.\nassert_frame_equal : Return True if left and right DataFrames are\n    equal, False otherwise.\nnumpy.array_equal : Return True if two arrays have the same shape\n    and elements, False otherwise.\n\nNotes\n-----\nThis function requires that the elements have the same dtype as their\nrespective elements in the other Series or DataFrame. However, the\ncolumn labels do not need to have the same type, as long as they are\nstill considered equal.\n\nExamples\n--------\n>>> df = pd.DataFrame({1: [10], 2: [20]})\n>>> df\n    1   2\n0  10  20\n\nDataFrames df and exactly_equal have the same types and values for\ntheir elements and column labels, which will return True.\n\n>>> exactly_equal = pd.DataFrame({1: [10], 2: [20]})\n>>> exactly_equal\n    1   2\n0  10  20\n>>> df.equals(exactly_equal)\nTrue\n\nDataFrames df and different_column_type have the same element\ntypes and values, but have different types for the column labels,\nwhich will still return True.\n\n>>> different_column_type = pd.DataFrame({1.0: [10], 2.0: [20]})\n>>> different_column_type\n   1.0  2.0\n0   10   20\n>>> df.equals(different_column_type)\nTrue\n\nDataFrames df and different_data_type have different types for the\nsame values for their elements, and will return False even though\ntheir column labels are the same values and types.\n\n>>> different_data_type = pd.DataFrame({1: [10.0], 2: [20.0]})\n>>> different_data_type\n      1     2\n0  10.0  20.0\n>>> df.equals(different_data_type)\nFalse", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 1393, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L1393", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.first": {"type": "function", "docstring": "Convenience method for subsetting initial periods of time series data\nbased on a date offset.\n\nParameters\n----------\noffset : string, DateOffset, dateutil.relativedelta\n\nReturns\n-------\nsubset : same type as caller\n\nRaises\n------\nTypeError\n    If the index is not  a :class:`DatetimeIndex`\n\nSee Also\n--------\nlast : Select final periods of time series based on a date offset.\nat_time : Select values at a particular time of the day.\nbetween_time : Select values between particular times of the day.\n\nExamples\n--------\n>>> i = pd.date_range('2018-04-09', periods=4, freq='2D')\n>>> ts = pd.DataFrame({'A': [1,2,3,4]}, index=i)\n>>> ts\n            A\n2018-04-09  1\n2018-04-11  2\n2018-04-13  3\n2018-04-15  4\n\nGet the rows for the first 3 days:\n\n>>> ts.first('3D')\n            A\n2018-04-09  1\n2018-04-11  2\n\nNotice the data for 3 first calender days were returned, not the first\n3 days observed in the dataset, and therefore data for 2018-04-13 was\nnot returned.", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 8415, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L8415", "errors": [["SS06", "Summary should fit in a single line"], ["PR06", "Parameter \"offset\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"offset\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["EX03", "flake8 error: E231 missing whitespace after ',' (3 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.head": {"type": "function", "docstring": "Return the first `n` rows.\n\nThis function returns the first `n` rows for the object based\non position. It is useful for quickly testing if your object\nhas the right type of data in it.\n\nParameters\n----------\nn : int, default 5\n    Number of rows to select.\n\nReturns\n-------\nobj_head : same type as caller\n    The first `n` rows of the caller object.\n\nSee Also\n--------\nDataFrame.tail: Returns the last `n` rows.\n\nExamples\n--------\n>>> df = pd.DataFrame({'animal':['alligator', 'bee', 'falcon', 'lion',\n...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n>>> df\n      animal\n0  alligator\n1        bee\n2     falcon\n3       lion\n4     monkey\n5     parrot\n6      shark\n7      whale\n8      zebra\n\nViewing the first 5 lines\n\n>>> df.head()\n      animal\n0  alligator\n1        bee\n2     falcon\n3       lion\n4     monkey\n\nViewing the first `n` lines (three in this case)\n\n>>> df.head(3)\n      animal\n0  alligator\n1        bee\n2     falcon", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 4652, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L4652", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["EX03", "flake8 error: E231 missing whitespace after ':'"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.idxmax": {"type": "function", "docstring": "Return the row label of the maximum value.\n\nIf multiple values equal the maximum, the first row label with that\nvalue is returned.\n\nParameters\n----------\nskipna : bool, default True\n    Exclude NA/null values. If the entire Series is NA, the result\n    will be NA.\naxis : int, default 0\n    For compatibility with DataFrame.idxmax. Redundant for application\n    on Series.\n*args, **kwargs\n    Additional keywords have no effect but might be accepted\n    for compatibility with NumPy.\n\nReturns\n-------\nIndex\n    Label of the maximum value.\n\nRaises\n------\nValueError\n    If the Series is empty.\n\nSee Also\n--------\nnumpy.argmax : Return indices of the maximum values\n    along the given axis.\nDataFrame.idxmax : Return index of first occurrence of maximum\n    over requested axis.\nSeries.idxmin : Return index *label* of the first occurrence\n    of minimum of values.\n\nNotes\n-----\nThis method is the Series version of ``ndarray.argmax``. This method\nreturns the label of the maximum, while ``ndarray.argmax`` returns\nthe position. To get the position, use ``series.values.argmax()``.\n\nExamples\n--------\n>>> s = pd.Series(data=[1, None, 4, 3, 4],\n...               index=['A', 'B', 'C', 'D', 'E'])\n>>> s\nA    1.0\nB    NaN\nC    4.0\nD    3.0\nE    4.0\ndtype: float64\n\n>>> s.idxmax()\n'C'\n\nIf `skipna` is False and there is an NA value in the data,\nthe function returns ``nan``.\n\n>>> s.idxmax(skipna=False)\nnan", "deprecated": false, "file": "pandas/core/series.py", "file_line": 2179, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L2179", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.idxmin": {"type": "function", "docstring": "Return the row label of the minimum value.\n\nIf multiple values equal the minimum, the first row label with that\nvalue is returned.\n\nParameters\n----------\nskipna : bool, default True\n    Exclude NA/null values. If the entire Series is NA, the result\n    will be NA.\naxis : int, default 0\n    For compatibility with DataFrame.idxmin. Redundant for application\n    on Series.\n*args, **kwargs\n    Additional keywords have no effect but might be accepted\n    for compatibility with NumPy.\n\nReturns\n-------\nIndex\n    Label of the minimum value.\n\nRaises\n------\nValueError\n    If the Series is empty.\n\nSee Also\n--------\nnumpy.argmin : Return indices of the minimum values\n    along the given axis.\nDataFrame.idxmin : Return index of first occurrence of minimum\n    over requested axis.\nSeries.idxmax : Return index *label* of the first occurrence\n    of maximum of values.\n\nNotes\n-----\nThis method is the Series version of ``ndarray.argmin``. This method\nreturns the label of the minimum, while ``ndarray.argmin`` returns\nthe position. To get the position, use ``series.values.argmin()``.\n\nExamples\n--------\n>>> s = pd.Series(data=[1, None, 4, 1],\n...               index=['A', 'B', 'C', 'D'])\n>>> s\nA    1.0\nB    NaN\nC    4.0\nD    1.0\ndtype: float64\n\n>>> s.idxmin()\n'A'\n\nIf `skipna` is False and there is an NA value in the data,\nthe function returns ``nan``.\n\n>>> s.idxmin(skipna=False)\nnan", "deprecated": false, "file": "pandas/core/series.py", "file_line": 2109, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L2109", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.isin": {"type": "function", "docstring": "Check whether `values` are contained in Series.\n\nReturn a boolean Series showing whether each element in the Series\nmatches an element in the passed sequence of `values` exactly.\n\nParameters\n----------\nvalues : set or list-like\n    The sequence of values to test. Passing in a single string will\n    raise a ``TypeError``. Instead, turn a single string into a\n    list of one element.\n\nReturns\n-------\nSeries\n    Series of booleans indicating if each element is in values.\n\nRaises\n------\nTypeError\n  * If `values` is a string\n\nSee Also\n--------\nDataFrame.isin : Equivalent method on DataFrame.\n\nExamples\n--------\n>>> s = pd.Series(['lama', 'cow', 'lama', 'beetle', 'lama',\n...                'hippo'], name='animal')\n>>> s.isin(['cow', 'lama'])\n0     True\n1     True\n2     True\n3    False\n4     True\n5    False\nName: animal, dtype: bool\n\nPassing a single string as ``s.isin('lama')`` will raise an error. Use\na list of one element instead:\n\n>>> s.isin(['lama'])\n0     True\n1    False\n2     True\n3    False\n4     True\n5    False\nName: animal, dtype: bool", "deprecated": false, "file": "pandas/core/series.py", "file_line": 4387, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L4387", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.last": {"type": "function", "docstring": "Convenience method for subsetting final periods of time series data\nbased on a date offset.\n\nParameters\n----------\noffset : string, DateOffset, dateutil.relativedelta\n\nReturns\n-------\nsubset : same type as caller\n\nRaises\n------\nTypeError\n    If the index is not  a :class:`DatetimeIndex`\n\nSee Also\n--------\nfirst : Select initial periods of time series based on a date offset.\nat_time : Select values at a particular time of the day.\nbetween_time : Select values between particular times of the day.\n\nExamples\n--------\n>>> i = pd.date_range('2018-04-09', periods=4, freq='2D')\n>>> ts = pd.DataFrame({'A': [1,2,3,4]}, index=i)\n>>> ts\n            A\n2018-04-09  1\n2018-04-11  2\n2018-04-13  3\n2018-04-15  4\n\nGet the rows for the last 3 days:\n\n>>> ts.last('3D')\n            A\n2018-04-13  3\n2018-04-15  4\n\nNotice the data for 3 last calender days were returned, not the last\n3 observed days in the dataset, and therefore data for 2018-04-11 was\nnot returned.", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 8478, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L8478", "errors": [["SS06", "Summary should fit in a single line"], ["PR06", "Parameter \"offset\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"offset\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["EX03", "flake8 error: E231 missing whitespace after ',' (3 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.reindex": {"type": "function", "docstring": "Conform Series to new index with optional filling logic, placing\nNA/NaN in locations having no value in the previous index. A new object\nis produced unless the new index is equivalent to the current one and\n``copy=False``.\n\nParameters\n----------\n\nindex : array-like, optional\n    New labels / index to conform to, should be specified using\n    keywords. Preferably an Index object to avoid duplicating data\n\nmethod : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n    Method to use for filling holes in reindexed DataFrame.\n    Please note: this is only applicable to DataFrames/Series with a\n    monotonically increasing/decreasing index.\n\n    * None (default): don't fill gaps\n    * pad / ffill: propagate last valid observation forward to next\n      valid\n    * backfill / bfill: use next valid observation to fill gap\n    * nearest: use nearest valid observations to fill gap\n\ncopy : bool, default True\n    Return a new object, even if the passed indexes are the same.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : scalar, default np.NaN\n    Value to use for missing values. Defaults to NaN, but can be any\n    \"compatible\" value.\nlimit : int, default None\n    Maximum number of consecutive elements to forward or backward fill.\ntolerance : optional\n    Maximum distance between original and new labels for inexact\n    matches. The values of the index at the matching locations most\n    satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n    Tolerance may be a scalar value, which applies the same tolerance\n    to all values, or list-like, which applies variable tolerance per\n    element. List-like includes list, tuple, array, Series, and must be\n    the same size as the index and its dtype must exactly match the\n    index's type.\n\n    .. versionadded:: 0.21.0 (list-like tolerance)\n\nReturns\n-------\nSeries with changed index.\n\nSee Also\n--------\nDataFrame.set_index : Set row labels.\nDataFrame.reset_index : Remove row labels or move them to new columns.\nDataFrame.reindex_like : Change to same indices as other DataFrame.\n\nExamples\n--------\n\n``DataFrame.reindex`` supports two calling conventions\n\n* ``(index=index_labels, columns=column_labels, ...)``\n* ``(labels, axis={'index', 'columns'}, ...)``\n\nWe *highly* recommend using keyword arguments to clarify your\nintent.\n\nCreate a dataframe with some fictional data.\n\n>>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n>>> df = pd.DataFrame({\n...      'http_status': [200,200,404,404,301],\n...      'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},\n...       index=index)\n>>> df\n           http_status  response_time\nFirefox            200           0.04\nChrome             200           0.02\nSafari             404           0.07\nIE10               404           0.08\nKonqueror          301           1.00\n\nCreate a new index and reindex the dataframe. By default\nvalues in the new index that do not have corresponding\nrecords in the dataframe are assigned ``NaN``.\n\n>>> new_index= ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',\n...             'Chrome']\n>>> df.reindex(new_index)\n               http_status  response_time\nSafari               404.0           0.07\nIceweasel              NaN            NaN\nComodo Dragon          NaN            NaN\nIE10                 404.0           0.08\nChrome               200.0           0.02\n\nWe can fill in the missing values by passing a value to\nthe keyword ``fill_value``. Because the index is not monotonically\nincreasing or decreasing, we cannot use arguments to the keyword\n``method`` to fill the ``NaN`` values.\n\n>>> df.reindex(new_index, fill_value=0)\n               http_status  response_time\nSafari                 404           0.07\nIceweasel                0           0.00\nComodo Dragon            0           0.00\nIE10                   404           0.08\nChrome                 200           0.02\n\n>>> df.reindex(new_index, fill_value='missing')\n              http_status response_time\nSafari                404          0.07\nIceweasel         missing       missing\nComodo Dragon     missing       missing\nIE10                  404          0.08\nChrome                200          0.02\n\nWe can also reindex the columns.\n\n>>> df.reindex(columns=['http_status', 'user_agent'])\n           http_status  user_agent\nFirefox            200         NaN\nChrome             200         NaN\nSafari             404         NaN\nIE10               404         NaN\nKonqueror          301         NaN\n\nOr we can use \"axis-style\" keyword arguments\n\n>>> df.reindex(['http_status', 'user_agent'], axis=\"columns\")\n           http_status  user_agent\nFirefox            200         NaN\nChrome             200         NaN\nSafari             404         NaN\nIE10               404         NaN\nKonqueror          301         NaN\n\nTo further illustrate the filling functionality in\n``reindex``, we will create a dataframe with a\nmonotonically increasing index (for example, a sequence\nof dates).\n\n>>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')\n>>> df2 = pd.DataFrame({\"prices\": [100, 101, np.nan, 100, 89, 88]},\n...                    index=date_index)\n>>> df2\n            prices\n2010-01-01   100.0\n2010-01-02   101.0\n2010-01-03     NaN\n2010-01-04   100.0\n2010-01-05    89.0\n2010-01-06    88.0\n\nSuppose we decide to expand the dataframe to cover a wider\ndate range.\n\n>>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')\n>>> df2.reindex(date_index2)\n            prices\n2009-12-29     NaN\n2009-12-30     NaN\n2009-12-31     NaN\n2010-01-01   100.0\n2010-01-02   101.0\n2010-01-03     NaN\n2010-01-04   100.0\n2010-01-05    89.0\n2010-01-06    88.0\n2010-01-07     NaN\n\nThe index entries that did not have a value in the original data frame\n(for example, '2009-12-29') are by default filled with ``NaN``.\nIf desired, we can fill in the missing values using one of several\noptions.\n\nFor example, to back-propagate the last valid value to fill the ``NaN``\nvalues, pass ``bfill`` as an argument to the ``method`` keyword.\n\n>>> df2.reindex(date_index2, method='bfill')\n            prices\n2009-12-29   100.0\n2009-12-30   100.0\n2009-12-31   100.0\n2010-01-01   100.0\n2010-01-02   101.0\n2010-01-03     NaN\n2010-01-04   100.0\n2010-01-05    89.0\n2010-01-06    88.0\n2010-01-07     NaN\n\nPlease note that the ``NaN`` value present in the original dataframe\n(at index value 2010-01-03) will not be filled by any of the\nvalue propagation schemes. This is because filling while reindexing\ndoes not look at dataframe values, but only compares the original and\ndesired indexes. If you do want to fill in the ``NaN`` values present\nin the original dataframe, use the ``fillna()`` method.\n\nSee the :ref:`user guide <basics.reindexing>` for more.", "deprecated": false, "file": "pandas/core/series.py", "file_line": 4175, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L4175", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {copy, fill_value, limit, method, level, tolerance}"], ["PR09", "Parameter \"index\" description should finish with \".\""], ["PR09", "Parameter \"method\" description should finish with \".\""], ["RT03", "Return value has no description"], ["EX03", "flake8 error: E126 continuation line over-indented for hanging indent (2 times)"], ["EX03", "flake8 error: E225 missing whitespace around operator"], ["EX03", "flake8 error: E231 missing whitespace after ',' (4 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.reindex_like": {"type": "function", "docstring": "Return an object with matching indices as other object.\n\nConform the object to the same index on all axes. Optional\nfilling logic, placing NaN in locations having no value\nin the previous index. A new object is produced unless the\nnew index is equivalent to the current one and copy=False.\n\nParameters\n----------\nother : Object of the same data type\n    Its row and column indices are used to define the new indices\n    of this object.\nmethod : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n    Method to use for filling holes in reindexed DataFrame.\n    Please note: this is only applicable to DataFrames/Series with a\n    monotonically increasing/decreasing index.\n\n    * None (default): don't fill gaps\n    * pad / ffill: propagate last valid observation forward to next\n      valid\n    * backfill / bfill: use next valid observation to fill gap\n    * nearest: use nearest valid observations to fill gap\n\ncopy : bool, default True\n    Return a new object, even if the passed indexes are the same.\nlimit : int, default None\n    Maximum number of consecutive labels to fill for inexact matches.\ntolerance : optional\n    Maximum distance between original and new labels for inexact\n    matches. The values of the index at the matching locations most\n    satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n    Tolerance may be a scalar value, which applies the same tolerance\n    to all values, or list-like, which applies variable tolerance per\n    element. List-like includes list, tuple, array, Series, and must be\n    the same size as the index and its dtype must exactly match the\n    index's type.\n\n    .. versionadded:: 0.21.0 (list-like tolerance)\n\nReturns\n-------\nSeries or DataFrame\n    Same type as caller, but with changed indices on each axis.\n\nSee Also\n--------\nDataFrame.set_index : Set row labels.\nDataFrame.reset_index : Remove row labels or move them to new columns.\nDataFrame.reindex : Change to new indices or expand indices.\n\nNotes\n-----\nSame as calling\n``.reindex(index=other.index, columns=other.columns,...)``.\n\nExamples\n--------\n>>> df1 = pd.DataFrame([[24.3, 75.7, 'high'],\n...                     [31, 87.8, 'high'],\n...                     [22, 71.6, 'medium'],\n...                     [35, 95, 'medium']],\n...     columns=['temp_celsius', 'temp_fahrenheit', 'windspeed'],\n...     index=pd.date_range(start='2014-02-12',\n...                         end='2014-02-15', freq='D'))\n\n>>> df1\n            temp_celsius  temp_fahrenheit windspeed\n2014-02-12          24.3             75.7      high\n2014-02-13          31.0             87.8      high\n2014-02-14          22.0             71.6    medium\n2014-02-15          35.0             95.0    medium\n\n>>> df2 = pd.DataFrame([[28, 'low'],\n...                     [30, 'low'],\n...                     [35.1, 'medium']],\n...     columns=['temp_celsius', 'windspeed'],\n...     index=pd.DatetimeIndex(['2014-02-12', '2014-02-13',\n...                             '2014-02-15']))\n\n>>> df2\n            temp_celsius windspeed\n2014-02-12          28.0       low\n2014-02-13          30.0       low\n2014-02-15          35.1    medium\n\n>>> df2.reindex_like(df1)\n            temp_celsius  temp_fahrenheit windspeed\n2014-02-12          28.0              NaN       low\n2014-02-13          30.0              NaN       low\n2014-02-14           NaN              NaN       NaN\n2014-02-15          35.1              NaN    medium", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 3757, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L3757", "errors": [["PR09", "Parameter \"method\" description should finish with \".\""], ["EX03", "flake8 error: E128 continuation line under-indented for visual indent (2 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.rename": {"type": "function", "docstring": "Alter Series index labels or name.\n\nFunction / dict values must be unique (1-to-1). Labels not contained in\na dict / Series will be left as-is. Extra labels listed don't throw an\nerror.\n\nAlternatively, change ``Series.name`` with a scalar value.\n\nSee the :ref:`user guide <basics.rename>` for more.\n\nParameters\n----------\nindex : scalar, hashable sequence, dict-like or function, optional\n    dict-like or functions are transformations to apply to\n    the index.\n    Scalar or hashable sequence-like will alter the ``Series.name``\n    attribute.\ncopy : bool, default True\n    Whether to copy underlying data.\ninplace : bool, default False\n    Whether to return a new Series. If True then value of copy is\n    ignored.\nlevel : int or level name, default None\n    In case of a MultiIndex, only rename labels in the specified\n    level.\n\nReturns\n-------\nSeries\n    Series with index labels or name altered.\n\nSee Also\n--------\nSeries.rename_axis : Set the name of the axis.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3])\n>>> s\n0    1\n1    2\n2    3\ndtype: int64\n>>> s.rename(\"my_name\")  # scalar, changes Series.name\n0    1\n1    2\n2    3\nName: my_name, dtype: int64\n>>> s.rename(lambda x: x ** 2)  # function, changes labels\n0    1\n1    2\n4    3\ndtype: int64\n>>> s.rename({1: 3, 2: 5})  # mapping, changes labels\n0    1\n3    2\n5    3\ndtype: int64", "deprecated": false, "file": "pandas/core/series.py", "file_line": 4105, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L4105", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {inplace, level, copy}"], ["PR08", "Parameter \"index\" description should start with a capital letter"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.rename_axis": {"type": "function", "docstring": "Set the name of the axis for the index or columns.\n\nParameters\n----------\nmapper : scalar, list-like, optional\n    Value to set the axis name attribute.\nindex, columns : scalar, list-like, dict-like or function, optional\n    A scalar, list-like, dict-like or functions transformations to\n    apply to that axis' values.\n\n    Use either ``mapper`` and ``axis`` to\n    specify the axis to target with ``mapper``, or ``index``\n    and/or ``columns``.\n\n    .. versionchanged:: 0.24.0\n\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to rename.\ncopy : bool, default True\n    Also copy underlying data.\ninplace : bool, default False\n    Modifies the object directly, instead of creating a new Series\n    or DataFrame.\n\nReturns\n-------\nSeries, DataFrame, or None\n    The same type as the caller or None if `inplace` is True.\n\nSee Also\n--------\nSeries.rename : Alter Series index labels or name.\nDataFrame.rename : Alter DataFrame index labels or name.\nIndex.rename : Set new names on index.\n\nNotes\n-----\n``DataFrame.rename_axis`` supports two calling conventions\n\n* ``(index=index_mapper, columns=columns_mapper, ...)``\n* ``(mapper, axis={'index', 'columns'}, ...)``\n\nThe first calling convention will only modify the names of\nthe index and/or the names of the Index object that is the columns.\nIn this case, the parameter ``copy`` is ignored.\n\nThe second calling convention will modify the names of the\nthe corresponding index if mapper is a list or a scalar.\nHowever, if mapper is dict-like or a function, it will use the\ndeprecated behavior of modifying the axis *labels*.\n\nWe *highly* recommend using keyword arguments to clarify your\nintent.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([\"dog\", \"cat\", \"monkey\"])\n>>> s\n0       dog\n1       cat\n2    monkey\ndtype: object\n>>> s.rename_axis(\"animal\")\nanimal\n0    dog\n1    cat\n2    monkey\ndtype: object\n\n**DataFrame**\n\n>>> df = pd.DataFrame({\"num_legs\": [4, 4, 2],\n...                    \"num_arms\": [0, 0, 2]},\n...                   [\"dog\", \"cat\", \"monkey\"])\n>>> df\n        num_legs  num_arms\ndog            4         0\ncat            4         0\nmonkey         2         2\n>>> df = df.rename_axis(\"animal\")\n>>> df\n        num_legs  num_arms\nanimal\ndog            4         0\ncat            4         0\nmonkey         2         2\n>>> df = df.rename_axis(\"limbs\", axis=\"columns\")\n>>> df\nlimbs   num_legs  num_arms\nanimal\ndog            4         0\ncat            4         0\nmonkey         2         2\n\n**MultiIndex**\n\n>>> df.index = pd.MultiIndex.from_product([['mammal'],\n...                                        ['dog', 'cat', 'monkey']],\n...                                       names=['type', 'name'])\n>>> df\nlimbs          num_legs  num_arms\ntype   name\nmammal dog            4         0\n       cat            4         0\n       monkey         2         2\n\n>>> df.rename_axis(index={'type': 'class'})\nlimbs          num_legs  num_arms\nclass  name\nmammal dog            4         0\n       cat            4         0\n       monkey         2         2\n\n>>> df.rename_axis(columns=str.upper)\nLIMBS          num_legs  num_arms\ntype   name\nmammal dog            4         0\n       cat            4         0\n       monkey         2         2", "deprecated": false, "file": "pandas/util/_decorators.py", "file_line": 1153, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/_decorators.py#L1153", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {axis, copy, index, columns, mapper, inplace}"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.reset_index": {"type": "function", "docstring": "Generate a new DataFrame or Series with the index reset.\n\nThis is useful when the index needs to be treated as a column, or\nwhen the index is meaningless and needs to be reset to the default\nbefore another operation.\n\nParameters\n----------\nlevel : int, str, tuple, or list, default optional\n    For a Series with a MultiIndex, only remove the specified levels\n    from the index. Removes all levels by default.\ndrop : bool, default False\n    Just reset the index, without inserting it as a column in\n    the new DataFrame.\nname : object, optional\n    The name to use for the column containing the original Series\n    values. Uses ``self.name`` by default. This argument is ignored\n    when `drop` is True.\ninplace : bool, default False\n    Modify the Series in place (do not create a new object).\n\nReturns\n-------\nSeries or DataFrame\n    When `drop` is False (the default), a DataFrame is returned.\n    The newly created columns will come first in the DataFrame,\n    followed by the original Series values.\n    When `drop` is True, a `Series` is returned.\n    In either case, if ``inplace=True``, no value is returned.\n\nSee Also\n--------\nDataFrame.reset_index: Analogous function for DataFrame.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4], name='foo',\n...               index=pd.Index(['a', 'b', 'c', 'd'], name='idx'))\n\nGenerate a DataFrame with default index.\n\n>>> s.reset_index()\n  idx  foo\n0   a    1\n1   b    2\n2   c    3\n3   d    4\n\nTo specify the name of the new column use `name`.\n\n>>> s.reset_index(name='values')\n  idx  values\n0   a       1\n1   b       2\n2   c       3\n3   d       4\n\nTo generate a new Series with the default set `drop` to True.\n\n>>> s.reset_index(drop=True)\n0    1\n1    2\n2    3\n3    4\nName: foo, dtype: int64\n\nTo update the Series in place, without generating a new one\nset `inplace` to True. Note that it also requires ``drop=True``.\n\n>>> s.reset_index(inplace=True, drop=True)\n>>> s\n0    1\n1    2\n2    3\n3    4\nName: foo, dtype: int64\n\nThe `level` parameter is interesting for Series with a multi-level\nindex.\n\n>>> arrays = [np.array(['bar', 'bar', 'baz', 'baz']),\n...           np.array(['one', 'two', 'one', 'two'])]\n>>> s2 = pd.Series(\n...     range(4), name='foo',\n...     index=pd.MultiIndex.from_arrays(arrays,\n...                                     names=['a', 'b']))\n\nTo remove a specific level from the Index, use `level`.\n\n>>> s2.reset_index(level='a')\n       a  foo\nb\none  bar    0\ntwo  bar    1\none  baz    2\ntwo  baz    3\n\nIf `level` is not set, all levels are removed from the Index.\n\n>>> s2.reset_index()\n     a    b  foo\n0  bar  one    0\n1  bar  two    1\n2  baz  one    2\n3  baz  two    3", "deprecated": false, "file": "pandas/core/series.py", "file_line": 1421, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L1421", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.sample": {"type": "function", "docstring": "Return a random sample of items from an axis of object.\n\nYou can use `random_state` for reproducibility.\n\nParameters\n----------\nn : int, optional\n    Number of items from axis to return. Cannot be used with `frac`.\n    Default = 1 if `frac` = None.\nfrac : float, optional\n    Fraction of axis items to return. Cannot be used with `n`.\nreplace : bool, default False\n    Allow or disallow sampling of the same row more than once.\nweights : str or ndarray-like, optional\n    Default 'None' results in equal probability weighting.\n    If passed a Series, will align with target object on index. Index\n    values in weights not found in sampled object will be ignored and\n    index values in sampled object not in weights will be assigned\n    weights of zero.\n    If called on a DataFrame, will accept the name of a column\n    when axis = 0.\n    Unless weights are a Series, weights must be same length as axis\n    being sampled.\n    If weights do not sum to 1, they will be normalized to sum to 1.\n    Missing values in the weights column will be treated as zero.\n    Infinite values not allowed.\nrandom_state : int or numpy.random.RandomState, optional\n    Seed for the random number generator (if int), or numpy RandomState\n    object.\naxis : int or string, optional\n    Axis to sample. Accepts axis number or name. Default is stat axis\n    for given data type (0 for Series and DataFrames).\n\nReturns\n-------\nSeries or DataFrame\n    A new object of same type as caller containing `n` items randomly\n    sampled from the caller object.\n\nSee Also\n--------\nnumpy.random.choice: Generates a random sample from a given 1-D numpy\n    array.\n\nExamples\n--------\n>>> df = pd.DataFrame({'num_legs': [2, 4, 8, 0],\n...                    'num_wings': [2, 0, 0, 0],\n...                    'num_specimen_seen': [10, 2, 1, 8]},\n...                   index=['falcon', 'dog', 'spider', 'fish'])\n>>> df\n        num_legs  num_wings  num_specimen_seen\nfalcon         2          2                 10\ndog            4          0                  2\nspider         8          0                  1\nfish           0          0                  8\n\nExtract 3 random elements from the ``Series`` ``df['num_legs']``:\nNote that we use `random_state` to ensure the reproducibility of\nthe examples.\n\n>>> df['num_legs'].sample(n=3, random_state=1)\nfish      0\nspider    8\nfalcon    2\nName: num_legs, dtype: int64\n\nA random 50% sample of the ``DataFrame`` with replacement:\n\n>>> df.sample(frac=0.5, replace=True, random_state=1)\n      num_legs  num_wings  num_specimen_seen\ndog          4          0                  2\nfish         0          0                  8\n\nUsing a DataFrame column as weights. Rows with larger value in the\n`num_specimen_seen` column are more likely to be sampled.\n\n>>> df.sample(n=2, weights='num_specimen_seen', random_state=1)\n        num_legs  num_wings  num_specimen_seen\nfalcon         2          2                 10\nfish           0          0                  8", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 4772, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L4772", "errors": [["PR06", "Parameter \"axis\" type should use \"str\" instead of \"string\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.set_axis": {"type": "function", "docstring": "Assign desired index to given axis.\n\nIndexes for column or row labels can be changed by assigning\na list-like or Index.\n\n.. versionchanged:: 0.21.0\n\n   The signature is now `labels` and `axis`, consistent with\n   the rest of pandas API. Previously, the `axis` and `labels`\n   arguments were respectively the first and second positional\n   arguments.\n\nParameters\n----------\nlabels : list-like, Index\n    The values for the new index.\n\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to update. The value 0 identifies the rows, and 1\n    identifies the columns.\n\ninplace : bool, default False\n    Whether to return a new %(klass)s instance.\n\nReturns\n-------\nrenamed : %(klass)s or None\n    An object of same type as caller if inplace=False, None otherwise.\n\nSee Also\n--------\nDataFrame.rename_axis : Alter the name of the index or columns.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([1, 2, 3])\n>>> s\n0    1\n1    2\n2    3\ndtype: int64\n\n>>> s.set_axis(['a', 'b', 'c'], axis=0)\na    1\nb    2\nc    3\ndtype: int64\n\n**DataFrame**\n\n>>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n\nChange the row labels.\n\n>>> df.set_axis(['a', 'b', 'c'], axis='index')\n   A  B\na  1  4\nb  2  5\nc  3  6\n\nChange the column labels.\n\n>>> df.set_axis(['I', 'II'], axis='columns')\n   I  II\n0  1   4\n1  2   5\n2  3   6\n\nNow, update the labels inplace.\n\n>>> df.set_axis(['i', 'ii'], axis='columns', inplace=True)\n>>> df\n   i  ii\n0  1   4\n1  2   5\n2  3   6", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 570, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L570", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.take": {"type": "function", "docstring": "Return the elements in the given *positional* indices along an axis.\n\nThis means that we are not indexing according to actual values in\nthe index attribute of the object. We are indexing according to the\nactual position of the element in the object.\n\nParameters\n----------\nindices : array-like\n    An array of ints indicating which positions to take.\naxis : {0 or 'index', 1 or 'columns', None}, default 0\n    The axis on which to select elements. ``0`` means that we are\n    selecting rows, ``1`` means that we are selecting columns.\nis_copy : bool, default True\n    Whether to return a copy of the original object or not.\n**kwargs\n    For compatibility with :meth:`numpy.take`. Has no effect on the\n    output.\n\nReturns\n-------\ntaken : same type as caller\n    An array-like containing the elements taken from the object.\n\nSee Also\n--------\nDataFrame.loc : Select a subset of a DataFrame by labels.\nDataFrame.iloc : Select a subset of a DataFrame by positions.\nnumpy.take : Take elements from an array along an axis.\n\nExamples\n--------\n>>> df = pd.DataFrame([('falcon', 'bird',    389.0),\n...                    ('parrot', 'bird',     24.0),\n...                    ('lion',   'mammal',   80.5),\n...                    ('monkey', 'mammal', np.nan)],\n...                    columns=['name', 'class', 'max_speed'],\n...                    index=[0, 2, 3, 1])\n>>> df\n     name   class  max_speed\n0  falcon    bird      389.0\n2  parrot    bird       24.0\n3    lion  mammal       80.5\n1  monkey  mammal        NaN\n\nTake elements at positions 0 and 3 along the axis 0 (default).\n\nNote how the actual indices selected (0 and 1) do not correspond to\nour selected indices 0 and 3. That's because we are selecting the 0th\nand 3rd rows, not rows whose indices equal 0 and 3.\n\n>>> df.take([0, 3])\n     name   class  max_speed\n0  falcon    bird      389.0\n1  monkey  mammal        NaN\n\nTake elements at indices 1 and 2 along the axis 1 (column selection).\n\n>>> df.take([1, 2], axis=1)\n    class  max_speed\n0    bird      389.0\n2    bird       24.0\n3  mammal       80.5\n1  mammal        NaN\n\nWe may take elements using negative integers for positive indices,\nstarting from the end of the object, just like with Python lists.\n\n>>> df.take([-1, -2])\n     name   class  max_speed\n1  monkey  mammal        NaN\n3    lion  mammal       80.5", "deprecated": false, "file": "pandas/core/series.py", "file_line": 1030, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L1030", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["EX03", "flake8 error: E127 continuation line over-indented for visual indent (2 times)"], ["EX03", "flake8 error: E241 multiple spaces after ',' (4 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.tail": {"type": "function", "docstring": "Return the last `n` rows.\n\nThis function returns last `n` rows from the object based on\nposition. It is useful for quickly verifying data, for example,\nafter sorting or appending rows.\n\nParameters\n----------\nn : int, default 5\n    Number of rows to select.\n\nReturns\n-------\ntype of caller\n    The last `n` rows of the caller object.\n\nSee Also\n--------\nDataFrame.head : The first `n` rows of the caller object.\n\nExamples\n--------\n>>> df = pd.DataFrame({'animal':['alligator', 'bee', 'falcon', 'lion',\n...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n>>> df\n      animal\n0  alligator\n1        bee\n2     falcon\n3       lion\n4     monkey\n5     parrot\n6      shark\n7      whale\n8      zebra\n\nViewing the last 5 lines\n\n>>> df.tail()\n   animal\n4  monkey\n5  parrot\n6   shark\n7   whale\n8   zebra\n\nViewing the last `n` lines (three in this case)\n\n>>> df.tail(3)\n  animal\n6  shark\n7  whale\n8  zebra", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 4711, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L4711", "errors": [["EX03", "flake8 error: E231 missing whitespace after ':'"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.truncate": {"type": "function", "docstring": "Truncate a Series or DataFrame before and after some index value.\n\nThis is a useful shorthand for boolean indexing based on index\nvalues above or below certain thresholds.\n\nParameters\n----------\nbefore : date, string, int\n    Truncate all rows before this index value.\nafter : date, string, int\n    Truncate all rows after this index value.\naxis : {0 or 'index', 1 or 'columns'}, optional\n    Axis to truncate. Truncates the index (rows) by default.\ncopy : bool, default is True,\n    Return a copy of the truncated section.\n\nReturns\n-------\ntype of caller\n    The truncated Series or DataFrame.\n\nSee Also\n--------\nDataFrame.loc : Select a subset of a DataFrame by label.\nDataFrame.iloc : Select a subset of a DataFrame by position.\n\nNotes\n-----\nIf the index being truncated contains only datetime values,\n`before` and `after` may be specified as strings instead of\nTimestamps.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': ['a', 'b', 'c', 'd', 'e'],\n...                    'B': ['f', 'g', 'h', 'i', 'j'],\n...                    'C': ['k', 'l', 'm', 'n', 'o']},\n...                    index=[1, 2, 3, 4, 5])\n>>> df\n   A  B  C\n1  a  f  k\n2  b  g  l\n3  c  h  m\n4  d  i  n\n5  e  j  o\n\n>>> df.truncate(before=2, after=4)\n   A  B  C\n2  b  g  l\n3  c  h  m\n4  d  i  n\n\nThe columns of a DataFrame can be truncated.\n\n>>> df.truncate(before=\"A\", after=\"B\", axis=\"columns\")\n   A  B\n1  a  f\n2  b  g\n3  c  h\n4  d  i\n5  e  j\n\nFor Series, only rows can be truncated.\n\n>>> df['A'].truncate(before=2, after=4)\n2    b\n3    c\n4    d\nName: A, dtype: object\n\nThe index values in ``truncate`` can be datetimes or string\ndates.\n\n>>> dates = pd.date_range('2016-01-01', '2016-02-01', freq='s')\n>>> df = pd.DataFrame(index=dates, data={'A': 1})\n>>> df.tail()\n                     A\n2016-01-31 23:59:56  1\n2016-01-31 23:59:57  1\n2016-01-31 23:59:58  1\n2016-01-31 23:59:59  1\n2016-02-01 00:00:00  1\n\n>>> df.truncate(before=pd.Timestamp('2016-01-05'),\n...             after=pd.Timestamp('2016-01-10')).tail()\n                     A\n2016-01-09 23:59:56  1\n2016-01-09 23:59:57  1\n2016-01-09 23:59:58  1\n2016-01-09 23:59:59  1\n2016-01-10 00:00:00  1\n\nBecause the index is a DatetimeIndex containing only dates, we can\nspecify `before` and `after` as strings. They will be coerced to\nTimestamps before truncation.\n\n>>> df.truncate('2016-01-05', '2016-01-10').tail()\n                     A\n2016-01-09 23:59:56  1\n2016-01-09 23:59:57  1\n2016-01-09 23:59:58  1\n2016-01-09 23:59:59  1\n2016-01-10 00:00:00  1\n\nNote that ``truncate`` assumes a 0 value for any unspecified time\ncomponent (midnight). This differs from partial string slicing, which\nreturns any partially matching dates.\n\n>>> df.loc['2016-01-05':'2016-01-10', :].tail()\n                     A\n2016-01-10 23:59:55  1\n2016-01-10 23:59:56  1\n2016-01-10 23:59:57  1\n2016-01-10 23:59:58  1\n2016-01-10 23:59:59  1", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 9451, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L9451", "errors": [["PR06", "Parameter \"before\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"after\" type should use \"str\" instead of \"string\""], ["EX03", "flake8 error: E127 continuation line over-indented for visual indent"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.where": {"type": "function", "docstring": "Replace values where the condition is False.\n\nParameters\n----------\ncond : boolean Series/DataFrame, array-like, or callable\n    Where `cond` is True, keep the original value. Where\n    False, replace with corresponding value from `other`.\n    If `cond` is callable, it is computed on the Series/DataFrame and\n    should return boolean Series/DataFrame or array. The callable must\n    not change input Series/DataFrame (though pandas doesn't check it).\nother : scalar, Series/DataFrame, or callable\n    Entries where `cond` is False are replaced with\n    corresponding value from `other`.\n    If other is callable, it is computed on the Series/DataFrame and\n    should return scalar or Series/DataFrame. The callable must not\n    change input Series/DataFrame (though pandas doesn't check it).\ninplace : bool, default False\n    Whether to perform the operation in place on the data.\naxis : int, default None\n    Alignment axis if needed.\nlevel : int, default None\n    Alignment level if needed.\nerrors : str, {'raise', 'ignore'}, default 'raise'\n    Note that currently this parameter won't affect\n    the results and will always coerce to a suitable dtype.\n\n    - 'raise' : allow exceptions to be raised.\n    - 'ignore' : suppress exceptions. On error return original object.\n\ntry_cast : bool, default False\n    Try to cast the result back to the input type (if possible).\n\nReturns\n-------\nSame type as caller\n\nSee Also\n--------\n:func:`DataFrame.mask` : Return an object of same shape as\n    self.\n\nNotes\n-----\nThe where method is an application of the if-then idiom. For each\nelement in the calling DataFrame, if ``cond`` is ``True`` the\nelement is used; otherwise the corresponding element from the DataFrame\n``other`` is used.\n\nThe signature for :func:`DataFrame.where` differs from\n:func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to\n``np.where(m, df1, df2)``.\n\nFor further details and examples see the ``where`` documentation in\n:ref:`indexing <indexing.where_mask>`.\n\nExamples\n--------\n>>> s = pd.Series(range(5))\n>>> s.where(s > 0)\n0    NaN\n1    1.0\n2    2.0\n3    3.0\n4    4.0\ndtype: float64\n\n>>> s.mask(s > 0)\n0    0.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n>>> s.where(s > 1, 10)\n0    10\n1    10\n2    2\n3    3\n4    4\ndtype: int64\n\n>>> df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])\n>>> df\n   A  B\n0  0  1\n1  2  3\n2  4  5\n3  6  7\n4  8  9\n>>> m = df % 3 == 0\n>>> df.where(m, -df)\n   A  B\n0  0 -1\n1 -2  3\n2 -4 -5\n3  6 -7\n4 -8  9\n>>> df.where(m, -df) == np.where(m, df, -df)\n      A     B\n0  True  True\n1  True  True\n2  True  True\n3  True  True\n4  True  True\n>>> df.where(m, -df) == df.mask(~m, -df)\n      A     B\n0  True  True\n1  True  True\n2  True  True\n3  True  True\n4  True  True", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 9203, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L9203", "errors": [["PR06", "Parameter \"cond\" type should use \"bool\" instead of \"boolean\""], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.mask": {"type": "function", "docstring": "Replace values where the condition is True.\n\nParameters\n----------\ncond : boolean Series/DataFrame, array-like, or callable\n    Where `cond` is False, keep the original value. Where\n    True, replace with corresponding value from `other`.\n    If `cond` is callable, it is computed on the Series/DataFrame and\n    should return boolean Series/DataFrame or array. The callable must\n    not change input Series/DataFrame (though pandas doesn't check it).\nother : scalar, Series/DataFrame, or callable\n    Entries where `cond` is True are replaced with\n    corresponding value from `other`.\n    If other is callable, it is computed on the Series/DataFrame and\n    should return scalar or Series/DataFrame. The callable must not\n    change input Series/DataFrame (though pandas doesn't check it).\ninplace : bool, default False\n    Whether to perform the operation in place on the data.\naxis : int, default None\n    Alignment axis if needed.\nlevel : int, default None\n    Alignment level if needed.\nerrors : str, {'raise', 'ignore'}, default 'raise'\n    Note that currently this parameter won't affect\n    the results and will always coerce to a suitable dtype.\n\n    - 'raise' : allow exceptions to be raised.\n    - 'ignore' : suppress exceptions. On error return original object.\n\ntry_cast : bool, default False\n    Try to cast the result back to the input type (if possible).\n\nReturns\n-------\nSame type as caller\n\nSee Also\n--------\n:func:`DataFrame.where` : Return an object of same shape as\n    self.\n\nNotes\n-----\nThe mask method is an application of the if-then idiom. For each\nelement in the calling DataFrame, if ``cond`` is ``False`` the\nelement is used; otherwise the corresponding element from the DataFrame\n``other`` is used.\n\nThe signature for :func:`DataFrame.where` differs from\n:func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to\n``np.where(m, df1, df2)``.\n\nFor further details and examples see the ``mask`` documentation in\n:ref:`indexing <indexing.where_mask>`.\n\nExamples\n--------\n>>> s = pd.Series(range(5))\n>>> s.where(s > 0)\n0    NaN\n1    1.0\n2    2.0\n3    3.0\n4    4.0\ndtype: float64\n\n>>> s.mask(s > 0)\n0    0.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n>>> s.where(s > 1, 10)\n0    10\n1    10\n2    2\n3    3\n4    4\ndtype: int64\n\n>>> df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])\n>>> df\n   A  B\n0  0  1\n1  2  3\n2  4  5\n3  6  7\n4  8  9\n>>> m = df % 3 == 0\n>>> df.where(m, -df)\n   A  B\n0  0 -1\n1 -2  3\n2 -4 -5\n3  6 -7\n4 -8  9\n>>> df.where(m, -df) == np.where(m, df, -df)\n      A     B\n0  True  True\n1  True  True\n2  True  True\n3  True  True\n4  True  True\n>>> df.where(m, -df) == df.mask(~m, -df)\n      A     B\n0  True  True\n1  True  True\n2  True  True\n3  True  True\n4  True  True", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 9229, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L9229", "errors": [["PR06", "Parameter \"cond\" type should use \"bool\" instead of \"boolean\""], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.add_prefix": {"type": "function", "docstring": "Prefix labels with string `prefix`.\n\nFor Series, the row labels are prefixed.\nFor DataFrame, the column labels are prefixed.\n\nParameters\n----------\nprefix : str\n    The string to add before each label.\n\nReturns\n-------\nSeries or DataFrame\n    New Series or DataFrame with updated labels.\n\nSee Also\n--------\nSeries.add_suffix: Suffix row labels with string `suffix`.\nDataFrame.add_suffix: Suffix column labels with string `suffix`.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s\n0    1\n1    2\n2    3\n3    4\ndtype: int64\n\n>>> s.add_prefix('item_')\nitem_0    1\nitem_1    2\nitem_2    3\nitem_3    4\ndtype: int64\n\n>>> df = pd.DataFrame({'A': [1, 2, 3, 4],  'B': [3, 4, 5, 6]})\n>>> df\n   A  B\n0  1  3\n1  2  4\n2  3  5\n3  4  6\n\n>>> df.add_prefix('col_')\n     col_A  col_B\n0       1       3\n1       2       4\n2       3       5\n3       4       6", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 3968, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L3968", "errors": [["EX03", "flake8 error: E241 multiple spaces after ','"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.add_suffix": {"type": "function", "docstring": "Suffix labels with string `suffix`.\n\nFor Series, the row labels are suffixed.\nFor DataFrame, the column labels are suffixed.\n\nParameters\n----------\nsuffix : str\n    The string to add after each label.\n\nReturns\n-------\nSeries or DataFrame\n    New Series or DataFrame with updated labels.\n\nSee Also\n--------\nSeries.add_prefix: Prefix row labels with string `prefix`.\nDataFrame.add_prefix: Prefix column labels with string `prefix`.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s\n0    1\n1    2\n2    3\n3    4\ndtype: int64\n\n>>> s.add_suffix('_item')\n0_item    1\n1_item    2\n2_item    3\n3_item    4\ndtype: int64\n\n>>> df = pd.DataFrame({'A': [1, 2, 3, 4],  'B': [3, 4, 5, 6]})\n>>> df\n   A  B\n0  1  3\n1  2  4\n2  3  5\n3  4  6\n\n>>> df.add_suffix('_col')\n     A_col  B_col\n0       1       3\n1       2       4\n2       3       5\n3       4       6", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 4027, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L4027", "errors": [["EX03", "flake8 error: E241 multiple spaces after ','"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.filter": {"type": "function", "docstring": "Subset rows or columns of dataframe according to labels in\nthe specified index.\n\nNote that this routine does not filter a dataframe on its\ncontents. The filter is applied to the labels of the index.\n\nParameters\n----------\nitems : list-like\n    Keep labels from axis which are in items.\nlike : str\n    Keep labels from axis for which \"like in label == True\".\nregex : str (regular expression)\n    Keep labels from axis for which re.search(regex, label) == True.\naxis : int or string axis name\n    The axis to filter on.  By default this is the info axis,\n    'index' for Series, 'columns' for DataFrame.\n\nReturns\n-------\nsame type as input object\n\nSee Also\n--------\nDataFrame.loc\n\nNotes\n-----\nThe ``items``, ``like``, and ``regex`` parameters are\nenforced to be mutually exclusive.\n\n``axis`` defaults to the info axis that is used when indexing\nwith ``[]``.\n\nExamples\n--------\n>>> df = pd.DataFrame(np.array(([1, 2, 3], [4, 5, 6])),\n...                   index=['mouse', 'rabbit'],\n...                   columns=['one', 'two', 'three'])\n\n>>> # select columns by name\n>>> df.filter(items=['one', 'three'])\n         one  three\nmouse     1      3\nrabbit    4      6\n\n>>> # select columns by regular expression\n>>> df.filter(regex='e$', axis=1)\n         one  three\nmouse     1      3\nrabbit    4      6\n\n>>> # select rows containing 'bbi'\n>>> df.filter(like='bbi', axis=0)\n         one  two  three\nrabbit    4    5      6", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 4561, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L4561", "errors": [["SS06", "Summary should fit in a single line"], ["PR06", "Parameter \"axis\" type should use \"str\" instead of \"string\""], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"DataFrame.loc\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reindexing / selection / label manipulation", "subsection": "", "shared_code_with": ""}, "pandas.Series.isna": {"type": "function", "docstring": "Detect missing values.\n\nReturn a boolean same-sized object indicating if the values are NA.\nNA values, such as None or :attr:`numpy.NaN`, gets mapped to True\nvalues.\nEverything else gets mapped to False values. Characters such as empty\nstrings ``''`` or :attr:`numpy.inf` are not considered NA values\n(unless you set ``pandas.options.mode.use_inf_as_na = True``).\n\nReturns\n-------\nSeries\n    Mask of bool values for each element in Series that\n    indicates whether an element is not an NA value.\n\nSee Also\n--------\nSeries.isnull : Alias of isna.\nSeries.notna : Boolean inverse of isna.\nSeries.dropna : Omit axes labels with missing values.\nisna : Top-level isna.\n\nExamples\n--------\nShow which entries in a DataFrame are NA.\n\n>>> df = pd.DataFrame({'age': [5, 6, np.NaN],\n...                    'born': [pd.NaT, pd.Timestamp('1939-05-27'),\n...                             pd.Timestamp('1940-04-25')],\n...                    'name': ['Alfred', 'Batman', ''],\n...                    'toy': [None, 'Batmobile', 'Joker']})\n>>> df\n   age       born    name        toy\n0  5.0        NaT  Alfred       None\n1  6.0 1939-05-27  Batman  Batmobile\n2  NaN 1940-04-25              Joker\n\n>>> df.isna()\n     age   born   name    toy\n0  False   True  False   True\n1  False  False  False  False\n2   True  False  False  False\n\nShow which entries in a Series are NA.\n\n>>> ser = pd.Series([5, 6, np.NaN])\n>>> ser\n0    5.0\n1    6.0\n2    NaN\ndtype: float64\n\n>>> ser.isna()\n0    False\n1    False\n2     True\ndtype: bool", "deprecated": false, "file": "pandas/core/series.py", "file_line": 4613, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L4613", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Missing data handling", "subsection": "", "shared_code_with": ""}, "pandas.Series.notna": {"type": "function", "docstring": "Detect existing (non-missing) values.\n\nReturn a boolean same-sized object indicating if the values are not NA.\nNon-missing values get mapped to True. Characters such as empty\nstrings ``''`` or :attr:`numpy.inf` are not considered NA values\n(unless you set ``pandas.options.mode.use_inf_as_na = True``).\nNA values, such as None or :attr:`numpy.NaN`, get mapped to False\nvalues.\n\nReturns\n-------\nSeries\n    Mask of bool values for each element in Series that\n    indicates whether an element is not an NA value.\n\nSee Also\n--------\nSeries.notnull : Alias of notna.\nSeries.isna : Boolean inverse of notna.\nSeries.dropna : Omit axes labels with missing values.\nnotna : Top-level notna.\n\nExamples\n--------\nShow which entries in a DataFrame are not NA.\n\n>>> df = pd.DataFrame({'age': [5, 6, np.NaN],\n...                    'born': [pd.NaT, pd.Timestamp('1939-05-27'),\n...                             pd.Timestamp('1940-04-25')],\n...                    'name': ['Alfred', 'Batman', ''],\n...                    'toy': [None, 'Batmobile', 'Joker']})\n>>> df\n   age       born    name        toy\n0  5.0        NaT  Alfred       None\n1  6.0 1939-05-27  Batman  Batmobile\n2  NaN 1940-04-25              Joker\n\n>>> df.notna()\n     age   born  name    toy\n0   True  False  True  False\n1   True   True  True   True\n2  False   True  True   True\n\nShow which entries in a Series are not NA.\n\n>>> ser = pd.Series([5, 6, np.NaN])\n>>> ser\n0    5.0\n1    6.0\n2    NaN\ndtype: float64\n\n>>> ser.notna()\n0     True\n1     True\n2    False\ndtype: bool", "deprecated": false, "file": "pandas/core/series.py", "file_line": 4621, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L4621", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Missing data handling", "subsection": "", "shared_code_with": ""}, "pandas.Series.dropna": {"type": "function", "docstring": "Return a new Series with missing values removed.\n\nSee the :ref:`User Guide <missing_data>` for more on which values are\nconsidered missing, and how to work with missing data.\n\nParameters\n----------\naxis : {0 or 'index'}, default 0\n    There is only one axis to drop values from.\ninplace : bool, default False\n    If True, do operation inplace and return None.\n**kwargs\n    Not in use.\n\nReturns\n-------\nSeries\n    Series with NA entries dropped from it.\n\nSee Also\n--------\nSeries.isna: Indicate missing values.\nSeries.notna : Indicate existing (non-missing) values.\nSeries.fillna : Replace missing values.\nDataFrame.dropna : Drop rows or columns which contain NA values.\nIndex.dropna : Drop missing indices.\n\nExamples\n--------\n>>> ser = pd.Series([1., 2., np.nan])\n>>> ser\n0    1.0\n1    2.0\n2    NaN\ndtype: float64\n\nDrop NA values from a Series.\n\n>>> ser.dropna()\n0    1.0\n1    2.0\ndtype: float64\n\nKeep the Series with valid entries in the same variable.\n\n>>> ser.dropna(inplace=True)\n>>> ser\n0    1.0\n1    2.0\ndtype: float64\n\nEmpty strings are not considered NA values. ``None`` is considered an\nNA value.\n\n>>> ser = pd.Series([np.NaN, 2, pd.NaT, '', None, 'I stay'])\n>>> ser\n0       NaN\n1         2\n2       NaT\n3\n4      None\n5    I stay\ndtype: object\n>>> ser.dropna()\n1         2\n3\n5    I stay\ndtype: object", "deprecated": false, "file": "pandas/core/series.py", "file_line": 4629, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L4629", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Missing data handling", "subsection": "", "shared_code_with": ""}, "pandas.Series.fillna": {"type": "function", "docstring": "Fill NA/NaN values using the specified method.\n\nParameters\n----------\nvalue : scalar, dict, Series, or DataFrame\n    Value to use to fill holes (e.g. 0), alternately a\n    dict/Series/DataFrame of values specifying which value to use for\n    each index (for a Series) or column (for a DataFrame).  Values not\n    in the dict/Series/DataFrame will not be filled. This value cannot\n    be a list.\nmethod : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n    Method to use for filling holes in reindexed Series\n    pad / ffill: propagate last valid observation forward to next valid\n    backfill / bfill: use next valid observation to fill gap.\naxis : {0 or 'index'}\n    Axis along which to fill missing values.\ninplace : bool, default False\n    If True, fill in-place. Note: this will modify any\n    other views on this object (e.g., a no-copy slice for a column in a\n    DataFrame).\nlimit : int, default None\n    If method is specified, this is the maximum number of consecutive\n    NaN values to forward/backward fill. In other words, if there is\n    a gap with more than this number of consecutive NaNs, it will only\n    be partially filled. If method is not specified, this is the\n    maximum number of entries along the entire axis where NaNs will be\n    filled. Must be greater than 0 if not None.\ndowncast : dict, default is None\n    A dict of item->dtype of what to downcast if possible,\n    or the string 'infer' which will try to downcast to an appropriate\n    equal type (e.g. float64 to int64 if possible).\n\nReturns\n-------\nSeries\n    Object with missing values filled.\n\nSee Also\n--------\ninterpolate : Fill NaN values using interpolation.\nreindex : Conform object to new index.\nasfreq : Convert TimeSeries to specified frequency.\n\nExamples\n--------\n>>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n...                    [3, 4, np.nan, 1],\n...                    [np.nan, np.nan, np.nan, 5],\n...                    [np.nan, 3, np.nan, 4]],\n...                   columns=list('ABCD'))\n>>> df\n     A    B   C  D\n0  NaN  2.0 NaN  0\n1  3.0  4.0 NaN  1\n2  NaN  NaN NaN  5\n3  NaN  3.0 NaN  4\n\nReplace all NaN elements with 0s.\n\n>>> df.fillna(0)\n    A   B   C   D\n0   0.0 2.0 0.0 0\n1   3.0 4.0 0.0 1\n2   0.0 0.0 0.0 5\n3   0.0 3.0 0.0 4\n\nWe can also propagate non-null values forward or backward.\n\n>>> df.fillna(method='ffill')\n    A   B   C   D\n0   NaN 2.0 NaN 0\n1   3.0 4.0 NaN 1\n2   3.0 4.0 NaN 5\n3   3.0 3.0 NaN 4\n\nReplace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,\n2, and 3 respectively.\n\n>>> values = {'A': 0, 'B': 1, 'C': 2, 'D': 3}\n>>> df.fillna(value=values)\n    A   B   C   D\n0   0.0 2.0 2.0 0\n1   3.0 4.0 2.0 1\n2   0.0 1.0 2.0 5\n3   0.0 3.0 2.0 4\n\nOnly replace the first NaN element.\n\n>>> df.fillna(value=values, limit=1)\n    A   B   C   D\n0   0.0 2.0 2.0 0\n1   3.0 4.0 NaN 1\n2   NaN 1.0 NaN 5\n3   NaN 3.0 NaN 4", "deprecated": false, "file": "pandas/core/series.py", "file_line": 4286, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L4286", "errors": [["PR01", "Parameters {**kwargs} not documented"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Missing data handling", "subsection": "", "shared_code_with": ""}, "pandas.Series.interpolate": {"type": "function", "docstring": "Interpolate values according to different methods.\n\nPlease note that only ``method='linear'`` is supported for\nDataFrame/Series with a MultiIndex.\n\nParameters\n----------\nmethod : str, default 'linear'\n    Interpolation technique to use. One of:\n\n    * 'linear': Ignore the index and treat the values as equally\n      spaced. This is the only method supported on MultiIndexes.\n    * 'time': Works on daily and higher resolution data to interpolate\n      given length of interval.\n    * 'index', 'values': use the actual numerical values of the index.\n    * 'pad': Fill in NaNs using existing values.\n    * 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'spline',\n      'barycentric', 'polynomial': Passed to\n      `scipy.interpolate.interp1d`. These methods use the numerical\n      values of the index.  Both 'polynomial' and 'spline' require that\n      you also specify an `order` (int), e.g.\n      ``df.interpolate(method='polynomial', order=5)``.\n    * 'krogh', 'piecewise_polynomial', 'spline', 'pchip', 'akima':\n      Wrappers around the SciPy interpolation methods of similar\n      names. See `Notes`.\n    * 'from_derivatives': Refers to\n      `scipy.interpolate.BPoly.from_derivatives` which\n      replaces 'piecewise_polynomial' interpolation method in\n      scipy 0.18.\naxis : {0 or 'index', 1 or 'columns', None}, default None\n    Axis to interpolate along.\nlimit : int, optional\n    Maximum number of consecutive NaNs to fill. Must be greater than\n    0.\ninplace : bool, default False\n    Update the data in place if possible.\nlimit_direction : {'forward', 'backward', 'both'}, default 'forward'\n    If limit is specified, consecutive NaNs will be filled in this\n    direction.\nlimit_area : {`None`, 'inside', 'outside'}, default None\n    If limit is specified, consecutive NaNs will be filled with this\n    restriction.\n\n    * ``None``: No fill restriction.\n    * 'inside': Only fill NaNs surrounded by valid values\n      (interpolate).\n    * 'outside': Only fill NaNs outside valid values (extrapolate).\n\n    .. versionadded:: 0.23.0\n\ndowncast : optional, 'infer' or None, defaults to None\n    Downcast dtypes if possible.\n**kwargs\n    Keyword arguments to pass on to the interpolating function.\n\nReturns\n-------\nSeries or DataFrame\n    Returns the same object type as the caller, interpolated at\n    some or all ``NaN`` values.\n\nSee Also\n--------\nfillna : Fill missing values using different methods.\nscipy.interpolate.Akima1DInterpolator : Piecewise cubic polynomials\n    (Akima interpolator).\nscipy.interpolate.BPoly.from_derivatives : Piecewise polynomial in the\n    Bernstein basis.\nscipy.interpolate.interp1d : Interpolate a 1-D function.\nscipy.interpolate.KroghInterpolator : Interpolate polynomial (Krogh\n    interpolator).\nscipy.interpolate.PchipInterpolator : PCHIP 1-d monotonic cubic\n    interpolation.\nscipy.interpolate.CubicSpline : Cubic spline data interpolator.\n\nNotes\n-----\nThe 'krogh', 'piecewise_polynomial', 'spline', 'pchip' and 'akima'\nmethods are wrappers around the respective SciPy implementations of\nsimilar names. These use the actual numerical values of the index.\nFor more information on their behavior, see the\n`SciPy documentation\n<http://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation>`__\nand `SciPy tutorial\n<http://docs.scipy.org/doc/scipy/reference/tutorial/interpolate.html>`__.\n\nExamples\n--------\nFilling in ``NaN`` in a :class:`~pandas.Series` via linear\ninterpolation.\n\n>>> s = pd.Series([0, 1, np.nan, 3])\n>>> s\n0    0.0\n1    1.0\n2    NaN\n3    3.0\ndtype: float64\n>>> s.interpolate()\n0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float64\n\nFilling in ``NaN`` in a Series by padding, but filling at most two\nconsecutive ``NaN`` at a time.\n\n>>> s = pd.Series([np.nan, \"single_one\", np.nan,\n...                \"fill_two_more\", np.nan, np.nan, np.nan,\n...                4.71, np.nan])\n>>> s\n0              NaN\n1       single_one\n2              NaN\n3    fill_two_more\n4              NaN\n5              NaN\n6              NaN\n7             4.71\n8              NaN\ndtype: object\n>>> s.interpolate(method='pad', limit=2)\n0              NaN\n1       single_one\n2       single_one\n3    fill_two_more\n4    fill_two_more\n5    fill_two_more\n6              NaN\n7             4.71\n8             4.71\ndtype: object\n\nFilling in ``NaN`` in a Series via polynomial interpolation or splines:\nBoth 'polynomial' and 'spline' methods require that you also specify\nan ``order`` (int).\n\n>>> s = pd.Series([0, 2, np.nan, 8])\n>>> s.interpolate(method='polynomial', order=2)\n0    0.000000\n1    2.000000\n2    4.666667\n3    8.000000\ndtype: float64\n\nFill the DataFrame forward (that is, going down) along each column\nusing linear interpolation.\n\nNote how the last entry in column 'a' is interpolated differently,\nbecause there is no entry after it to use for interpolation.\nNote how the first entry in column 'b' remains ``NaN``, because there\nis no entry before it to use for interpolation.\n\n>>> df = pd.DataFrame([(0.0, np.nan, -1.0, 1.0),\n...                    (np.nan, 2.0, np.nan, np.nan),\n...                    (2.0, 3.0, np.nan, 9.0),\n...                    (np.nan, 4.0, -4.0, 16.0)],\n...                   columns=list('abcd'))\n>>> df\n     a    b    c     d\n0  0.0  NaN -1.0   1.0\n1  NaN  2.0  NaN   NaN\n2  2.0  3.0  NaN   9.0\n3  NaN  4.0 -4.0  16.0\n>>> df.interpolate(method='linear', limit_direction='forward', axis=0)\n     a    b    c     d\n0  0.0  NaN -1.0   1.0\n1  1.0  2.0 -2.0   5.0\n2  2.0  3.0 -3.0   9.0\n3  2.0  4.0 -4.0  16.0\n\nUsing polynomial interpolation.\n\n>>> df['d'].interpolate(method='polynomial', order=2)\n0     1.0\n1     4.0\n2     9.0\n3    16.0\nName: d, dtype: float64", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 6949, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L6949", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Missing data handling", "subsection": "", "shared_code_with": ""}, "pandas.Series.argsort": {"type": "function", "docstring": "Override ndarray.argsort. Argsorts the value, omitting NA/null values,\nand places the result in the same locations as the non-NA values.\n\nParameters\n----------\naxis : int\n    Has no effect but is accepted for compatibility with numpy.\nkind : {'mergesort', 'quicksort', 'heapsort'}, default 'quicksort'\n    Choice of sorting algorithm. See np.sort for more\n    information. 'mergesort' is the only stable algorithm\norder : None\n    Has no effect but is accepted for compatibility with numpy.\n\nReturns\n-------\nSeries\n    Positions of values within the sort order with -1 indicating\n    nan values.\n\nSee Also\n--------\nnumpy.ndarray.argsort", "deprecated": false, "file": "pandas/core/series.py", "file_line": 3328, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L3328", "errors": [["SS06", "Summary should fit in a single line"], ["PR09", "Parameter \"kind\" description should finish with \".\""], ["SA04", "Missing description for See Also \"numpy.ndarray.argsort\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Reshaping, sorting", "subsection": "", "shared_code_with": ""}, "pandas.Series.argmin": {"type": "function", "docstring": "Return the row label of the minimum value.\n\n.. deprecated:: 0.21.0\n    \nThe current behaviour of 'Series.argmin' is deprecated, use 'idxmin'\ninstead.\nThe behavior of 'argmin' will be corrected to return the positional\nminimum in the future. For now, use 'series.values.argmin' or\n'np.argmin(np.array(values))' to get the position of the minimum\nrow.\n\nIf multiple values equal the minimum, the first row label with that\nvalue is returned.\n\nParameters\n----------\nskipna : bool, default True\n    Exclude NA/null values. If the entire Series is NA, the result\n    will be NA.\naxis : int, default 0\n    For compatibility with DataFrame.idxmin. Redundant for application\n    on Series.\n*args, **kwargs\n    Additional keywords have no effect but might be accepted\n    for compatibility with NumPy.\n\nReturns\n-------\nIndex\n    Label of the minimum value.\n\nRaises\n------\nValueError\n    If the Series is empty.\n\nSee Also\n--------\nnumpy.argmin : Return indices of the minimum values\n    along the given axis.\nDataFrame.idxmin : Return index of first occurrence of minimum\n    over requested axis.\nSeries.idxmax : Return index *label* of the first occurrence\n    of maximum of values.\n\nNotes\n-----\nThis method is the Series version of ``ndarray.argmin``. This method\nreturns the label of the minimum, while ``ndarray.argmin`` returns\nthe position. To get the position, use ``series.values.argmin()``.\n\nExamples\n--------\n>>> s = pd.Series(data=[1, None, 4, 1],\n...               index=['A', 'B', 'C', 'D'])\n>>> s\nA    1.0\nB    NaN\nC    4.0\nD    1.0\ndtype: float64\n\n>>> s.idxmin()\n'A'\n\nIf `skipna` is False and there is an NA value in the data,\nthe function returns ``nan``.\n\n>>> s.idxmin(skipna=False)\nnan", "deprecated": true, "file": "pandas/util/_decorators.py", "file_line": 2109, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/_decorators.py#L2109", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {axis, *args, **kwargs, skipna}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reshaping, sorting", "subsection": "", "shared_code_with": ""}, "pandas.Series.argmax": {"type": "function", "docstring": "Return the row label of the maximum value.\n\n.. deprecated:: 0.21.0\n    \nThe current behaviour of 'Series.argmax' is deprecated, use 'idxmax'\ninstead.\nThe behavior of 'argmax' will be corrected to return the positional\nmaximum in the future. For now, use 'series.values.argmax' or\n'np.argmax(np.array(values))' to get the position of the maximum\nrow.\n\nIf multiple values equal the maximum, the first row label with that\nvalue is returned.\n\nParameters\n----------\nskipna : bool, default True\n    Exclude NA/null values. If the entire Series is NA, the result\n    will be NA.\naxis : int, default 0\n    For compatibility with DataFrame.idxmax. Redundant for application\n    on Series.\n*args, **kwargs\n    Additional keywords have no effect but might be accepted\n    for compatibility with NumPy.\n\nReturns\n-------\nIndex\n    Label of the maximum value.\n\nRaises\n------\nValueError\n    If the Series is empty.\n\nSee Also\n--------\nnumpy.argmax : Return indices of the maximum values\n    along the given axis.\nDataFrame.idxmax : Return index of first occurrence of maximum\n    over requested axis.\nSeries.idxmin : Return index *label* of the first occurrence\n    of minimum of values.\n\nNotes\n-----\nThis method is the Series version of ``ndarray.argmax``. This method\nreturns the label of the maximum, while ``ndarray.argmax`` returns\nthe position. To get the position, use ``series.values.argmax()``.\n\nExamples\n--------\n>>> s = pd.Series(data=[1, None, 4, 3, 4],\n...               index=['A', 'B', 'C', 'D', 'E'])\n>>> s\nA    1.0\nB    NaN\nC    4.0\nD    3.0\nE    4.0\ndtype: float64\n\n>>> s.idxmax()\n'C'\n\nIf `skipna` is False and there is an NA value in the data,\nthe function returns ``nan``.\n\n>>> s.idxmax(skipna=False)\nnan", "deprecated": true, "file": "pandas/util/_decorators.py", "file_line": 2179, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/_decorators.py#L2179", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {axis, *args, **kwargs, skipna}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reshaping, sorting", "subsection": "", "shared_code_with": ""}, "pandas.Series.reorder_levels": {"type": "function", "docstring": "Rearrange index levels using input order.\n\nMay not drop or duplicate levels.\n\nParameters\n----------\norder : list of int representing new level order\n       (reference level by number or key)\n\nReturns\n-------\ntype of caller (new object)", "deprecated": false, "file": "pandas/core/series.py", "file_line": 3584, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L3584", "errors": [["PR08", "Parameter \"order\" description should start with a capital letter"], ["PR09", "Parameter \"order\" description should finish with \".\""], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Reshaping, sorting", "subsection": "", "shared_code_with": ""}, "pandas.Series.sort_values": {"type": "function", "docstring": "Sort by the values.\n\nSort a Series in ascending or descending order by some\ncriterion.\n\nParameters\n----------\naxis : {0 or 'index'}, default 0\n    Axis to direct sorting. The value 'index' is accepted for\n    compatibility with DataFrame.sort_values.\nascending : bool, default True\n    If True, sort values in ascending order, otherwise descending.\ninplace : bool, default False\n    If True, perform operation in-place.\nkind : {'quicksort', 'mergesort' or 'heapsort'}, default 'quicksort'\n    Choice of sorting algorithm. See also :func:`numpy.sort` for more\n    information. 'mergesort' is the only stable  algorithm.\nna_position : {'first' or 'last'}, default 'last'\n    Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at\n    the end.\n\nReturns\n-------\nSeries\n    Series ordered by values.\n\nSee Also\n--------\nSeries.sort_index : Sort by the Series indices.\nDataFrame.sort_values : Sort DataFrame by the values along either axis.\nDataFrame.sort_index : Sort DataFrame by indices.\n\nExamples\n--------\n>>> s = pd.Series([np.nan, 1, 3, 10, 5])\n>>> s\n0     NaN\n1     1.0\n2     3.0\n3     10.0\n4     5.0\ndtype: float64\n\nSort values ascending order (default behaviour)\n\n>>> s.sort_values(ascending=True)\n1     1.0\n2     3.0\n4     5.0\n3    10.0\n0     NaN\ndtype: float64\n\nSort values descending order\n\n>>> s.sort_values(ascending=False)\n3    10.0\n4     5.0\n2     3.0\n1     1.0\n0     NaN\ndtype: float64\n\nSort values inplace\n\n>>> s.sort_values(ascending=False, inplace=True)\n>>> s\n3    10.0\n4     5.0\n2     3.0\n1     1.0\n0     NaN\ndtype: float64\n\nSort values putting NAs first\n\n>>> s.sort_values(na_position='first')\n0     NaN\n1     1.0\n2     3.0\n4     5.0\n3    10.0\ndtype: float64\n\nSort a series of strings\n\n>>> s = pd.Series(['z', 'b', 'd', 'a', 'c'])\n>>> s\n0    z\n1    b\n2    d\n3    a\n4    c\ndtype: object\n\n>>> s.sort_values()\n3    a\n1    b\n4    c\n2    d\n0    z\ndtype: object", "deprecated": false, "file": "pandas/core/series.py", "file_line": 2984, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L2984", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reshaping, sorting", "subsection": "", "shared_code_with": ""}, "pandas.Series.sort_index": {"type": "function", "docstring": "Sort Series by index labels.\n\nReturns a new Series sorted by label if `inplace` argument is\n``False``, otherwise updates the original series and returns None.\n\nParameters\n----------\naxis : int, default 0\n    Axis to direct sorting. This can only be 0 for Series.\nlevel : int, optional\n    If not None, sort on values in specified index level(s).\nascending : bool, default true\n    Sort ascending vs. descending.\ninplace : bool, default False\n    If True, perform operation in-place.\nkind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n    Choice of sorting algorithm. See also :func:`numpy.sort` for more\n    information.  'mergesort' is the only stable algorithm. For\n    DataFrames, this option is only applied when sorting on a single\n    column or label.\nna_position : {'first', 'last'}, default 'last'\n    If 'first' puts NaNs at the beginning, 'last' puts NaNs at the end.\n    Not implemented for MultiIndex.\nsort_remaining : bool, default True\n    If True and sorting by level and index is multilevel, sort by other\n    levels too (in order) after sorting by specified level.\n\nReturns\n-------\nSeries\n    The original Series sorted by the labels.\n\nSee Also\n--------\nDataFrame.sort_index: Sort DataFrame by the index.\nDataFrame.sort_values: Sort DataFrame by the value.\nSeries.sort_values : Sort Series by the value.\n\nExamples\n--------\n>>> s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, 4])\n>>> s.sort_index()\n1    c\n2    b\n3    a\n4    d\ndtype: object\n\nSort Descending\n\n>>> s.sort_index(ascending=False)\n4    d\n3    a\n2    b\n1    c\ndtype: object\n\nSort Inplace\n\n>>> s.sort_index(inplace=True)\n>>> s\n1    c\n2    b\n3    a\n4    d\ndtype: object\n\nBy default NaNs are put at the end, but use `na_position` to place\nthem at the beginning\n\n>>> s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, np.nan])\n>>> s.sort_index(na_position='first')\nNaN     d\n 1.0    c\n 2.0    b\n 3.0    a\ndtype: object\n\nSpecify index level to sort\n\n>>> arrays = [np.array(['qux', 'qux', 'foo', 'foo',\n...                     'baz', 'baz', 'bar', 'bar']),\n...           np.array(['two', 'one', 'two', 'one',\n...                     'two', 'one', 'two', 'one'])]\n>>> s = pd.Series([1, 2, 3, 4, 5, 6, 7, 8], index=arrays)\n>>> s.sort_index(level=1)\nbar  one    8\nbaz  one    6\nfoo  one    4\nqux  one    2\nbar  two    7\nbaz  two    5\nfoo  two    3\nqux  two    1\ndtype: int64\n\nDoes not sort by remaining levels when sorting by levels\n\n>>> s.sort_index(level=1, sort_remaining=False)\nqux  one    2\nfoo  one    4\nbaz  one    6\nbar  one    8\nqux  two    1\nfoo  two    3\nbaz  two    5\nbar  two    7\ndtype: int64", "deprecated": false, "file": "pandas/core/series.py", "file_line": 3159, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L3159", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reshaping, sorting", "subsection": "", "shared_code_with": ""}, "pandas.Series.swaplevel": {"type": "function", "docstring": "Swap levels i and j in a :class:`MultiIndex`.\n\nDefault is to swap the two innermost levels of the index.\n\nParameters\n----------\ni, j : int, str (can be mixed)\n    Level of index to be swapped. Can pass level name as string.\ncopy : bool, default True\n    Whether to copy underlying data.\n\nReturns\n-------\nSeries\n    Series with levels swapped in MultiIndex.", "deprecated": false, "file": "pandas/core/series.py", "file_line": 3561, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L3561", "errors": [["PR01", "Parameters {j, i} not documented"], ["PR02", "Unknown parameters {i, j}"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Reshaping, sorting", "subsection": "", "shared_code_with": ""}, "pandas.Series.unstack": {"type": "function", "docstring": "Unstack, a.k.a. pivot, Series with MultiIndex to produce DataFrame.\nThe level involved will automatically get sorted.\n\nParameters\n----------\nlevel : int, str, or list of these, default last level\n    Level(s) to unstack, can pass level name.\nfill_value : scalar value, default None\n    Value to use when replacing NaN values.\n\nReturns\n-------\nDataFrame\n    Unstacked Series.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4],\n...               index=pd.MultiIndex.from_product([['one', 'two'],\n...                                                 ['a', 'b']]))\n>>> s\none  a    1\n     b    2\ntwo  a    3\n     b    4\ndtype: int64\n\n>>> s.unstack(level=-1)\n     a  b\none  1  2\ntwo  3  4\n\n>>> s.unstack(level=0)\n   one  two\na    1    3\nb    2    4", "deprecated": false, "file": "pandas/core/series.py", "file_line": 3662, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L3662", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Reshaping, sorting", "subsection": "", "shared_code_with": ""}, "pandas.Series.explode": {"type": "function", "docstring": "Transform each element of a list-like to a row, replicating the\nindex values.\n\n.. versionadded:: 0.25.0\n\nReturns\n-------\nSeries\n    Exploded lists to rows; index will be duplicated for these rows.\n\nSee Also\n--------\nSeries.str.split : Split string values on specified separator.\nSeries.unstack : Unstack, a.k.a. pivot, Series with MultiIndex\n    to produce DataFrame.\nDataFrame.melt : Unpivot a DataFrame from wide format to long format\nDataFrame.explode : Explode a DataFrame from list-like\n    columns to long format.\n\nNotes\n-----\nThis routine will explode list-likes including lists, tuples,\nSeries, and np.ndarray. The result dtype of the subset rows will\nbe object. Scalars will be returned unchanged. Empty list-likes will\nresult in a np.nan for that row.\n\nExamples\n--------\n>>> s = pd.Series([[1, 2, 3], 'foo', [], [3, 4]])\n>>> s\n0    [1, 2, 3]\n1          foo\n2           []\n3       [3, 4]\ndtype: object\n\n>>> s.explode()\n0      1\n0      2\n0      3\n1    foo\n2    NaN\n3      3\n3      4\ndtype: object", "deprecated": false, "file": "pandas/core/series.py", "file_line": 3606, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L3606", "errors": [["SS06", "Summary should fit in a single line"], ["SA02", "Missing period at end of description for See Also \"DataFrame.melt\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reshaping, sorting", "subsection": "", "shared_code_with": ""}, "pandas.Series.searchsorted": {"type": "function", "docstring": "Find indices where elements should be inserted to maintain order.\n\nFind the indices into a sorted Series `self` such that, if the\ncorresponding elements in `value` were inserted before the indices,\nthe order of `self` would be preserved.\n\nParameters\n----------\nvalue : array_like\n    Values to insert into `self`.\nside : {'left', 'right'}, optional\n    If 'left', the index of the first suitable location found is given.\n    If 'right', return the last such index.  If there is no suitable\n    index, return either 0 or N (where N is the length of `self`).\nsorter : 1-D array_like, optional\n    Optional array of integer indices that sort `self` into ascending\n    order. They are typically the result of ``np.argsort``.\n\nReturns\n-------\nint or array of int\n    A scalar or array of insertion points with the\n    same shape as `value`.\n\n    .. versionchanged:: 0.24.0\n        If `value` is a scalar, an int is now always returned.\n        Previously, scalar inputs returned an 1-item array for\n        :class:`Series` and :class:`Categorical`.\n\nSee Also\n--------\nnumpy.searchsorted\n\nNotes\n-----\nBinary search is used to find the required insertion points.\n\nExamples\n--------\n\n>>> x = pd.Series([1, 2, 3])\n>>> x\n0    1\n1    2\n2    3\ndtype: int64\n\n>>> x.searchsorted(4)\n3\n\n>>> x.searchsorted([0, 4])\narray([0, 3])\n\n>>> x.searchsorted([1, 3], side='left')\narray([0, 2])\n\n>>> x.searchsorted([1, 3], side='right')\narray([1, 3])\n\n>>> x = pd.Categorical(['apple', 'bread', 'bread',\n                        'cheese', 'milk'], ordered=True)\n[apple, bread, bread, cheese, milk]\nCategories (4, object): [apple < bread < cheese < milk]\n\n>>> x.searchsorted('bread')\n1\n\n>>> x.searchsorted(['bread'], side='right')\narray([3])", "deprecated": false, "file": "pandas/core/series.py", "file_line": 2655, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L2655", "errors": [["SA04", "Missing description for See Also \"numpy.searchsorted\" reference"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 61, in pandas.Series.searchsorted\nFailed example:\n    x = pd.Categorical(['apple', 'bread', 'bread',\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.searchsorted[6]>\", line 1\n        x = pd.Categorical(['apple', 'bread', 'bread',\n                                                     ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 66, in pandas.Series.searchsorted\nFailed example:\n    x.searchsorted('bread')\nExpected:\n    1\nGot:\n    3\n"], ["EX03", "flake8 error: E902 TokenError: EOF in multi-line statement"], ["EX03", "flake8 error: E999 SyntaxError: invalid syntax"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 61, in pandas.Series.searchsorted\nFailed example:\n    x = pd.Categorical(['apple', 'bread', 'bread',\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.searchsorted[6]>\", line 1\n        x = pd.Categorical(['apple', 'bread', 'bread',\n                                                     ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 66, in pandas.Series.searchsorted\nFailed example:\n    x.searchsorted('bread')\nExpected:\n    1\nGot:\n    3\n", "in_api": true, "section": "Reshaping, sorting", "subsection": "", "shared_code_with": ""}, "pandas.Series.ravel": {"type": "function", "docstring": "Return the flattened underlying data as an ndarray.\n\nReturns\n-------\nnumpy.ndarray or ndarray-like\n    Flattened data of the Series.\n\nSee Also\n--------\nnumpy.ndarray.ravel", "deprecated": false, "file": "pandas/core/series.py", "file_line": 607, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L607", "errors": [["PR01", "Parameters {order} not documented"], ["SA04", "Missing description for See Also \"numpy.ndarray.ravel\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Reshaping, sorting", "subsection": "", "shared_code_with": ""}, "pandas.Series.repeat": {"type": "function", "docstring": "Repeat elements of a Series.\n\nReturns a new Series where each element of the current Series\nis repeated consecutively a given number of times.\n\nParameters\n----------\nrepeats : int or array of ints\n    The number of repetitions for each element. This should be a\n    non-negative integer. Repeating 0 times will return an empty\n    Series.\naxis : None\n    Must be ``None``. Has no effect but is accepted for compatibility\n    with numpy.\n\nReturns\n-------\nSeries\n    Newly created Series with repeated elements.\n\nSee Also\n--------\nIndex.repeat : Equivalent function for Index.\nnumpy.repeat : Similar method for :class:`numpy.ndarray`.\n\nExamples\n--------\n>>> s = pd.Series(['a', 'b', 'c'])\n>>> s\n0    a\n1    b\n2    c\ndtype: object\n>>> s.repeat(2)\n0    a\n0    a\n1    b\n1    b\n2    c\n2    c\ndtype: object\n>>> s.repeat([1, 2, 3])\n0    a\n1    b\n1    b\n2    c\n2    c\n2    c\ndtype: object", "deprecated": false, "file": "pandas/core/series.py", "file_line": 1364, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L1364", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reshaping, sorting", "subsection": "", "shared_code_with": ""}, "pandas.Series.squeeze": {"type": "function", "docstring": "Squeeze 1 dimensional axis objects into scalars.\n\nSeries or DataFrames with a single element are squeezed to a scalar.\nDataFrames with a single column or a single row are squeezed to a\nSeries. Otherwise the object is unchanged.\n\nThis method is most useful when you don't know if your\nobject is a Series or DataFrame, but you do know it has just a single\ncolumn. In that case you can safely call `squeeze` to ensure you have a\nSeries.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns', None}, default None\n    A specific axis to squeeze. By default, all length-1 axes are\n    squeezed.\n\n    .. versionadded:: 0.20.0\n\nReturns\n-------\nDataFrame, Series, or scalar\n    The projection after squeezing `axis` or all the axes.\n\nSee Also\n--------\nSeries.iloc : Integer-location based indexing for selecting scalars.\nDataFrame.iloc : Integer-location based indexing for selecting Series.\nSeries.to_frame : Inverse of DataFrame.squeeze for a\n    single-column DataFrame.\n\nExamples\n--------\n>>> primes = pd.Series([2, 3, 5, 7])\n\nSlicing might produce a Series with a single value:\n\n>>> even_primes = primes[primes % 2 == 0]\n>>> even_primes\n0    2\ndtype: int64\n\n>>> even_primes.squeeze()\n2\n\nSqueezing objects with more than one value in every axis does nothing:\n\n>>> odd_primes = primes[primes % 2 == 1]\n>>> odd_primes\n1    3\n2    5\n3    7\ndtype: int64\n\n>>> odd_primes.squeeze()\n1    3\n2    5\n3    7\ndtype: int64\n\nSqueezing is even more effective when used with DataFrames.\n\n>>> df = pd.DataFrame([[1, 2], [3, 4]], columns=['a', 'b'])\n>>> df\n   a  b\n0  1  2\n1  3  4\n\nSlicing a single column will produce a DataFrame with the columns\nhaving only one value:\n\n>>> df_a = df[['a']]\n>>> df_a\n   a\n0  1\n1  3\n\nSo the columns can be squeezed down, resulting in a Series:\n\n>>> df_a.squeeze('columns')\n0    1\n1    3\nName: a, dtype: int64\n\nSlicing a single row from a single column will produce a single\nscalar DataFrame:\n\n>>> df_0a = df.loc[df.index < 1, ['a']]\n>>> df_0a\n   a\n0  1\n\nSqueezing the rows produces a single scalar Series:\n\n>>> df_0a.squeeze('rows')\na    1\nName: 0, dtype: int64\n\nSqueezing all axes will project directly into a scalar:\n\n>>> df_0a.squeeze()\n1", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 851, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L851", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reshaping, sorting", "subsection": "", "shared_code_with": ""}, "pandas.Series.view": {"type": "function", "docstring": "Create a new view of the Series.\n\nThis function will return a new Series with a view of the same\nunderlying values in memory, optionally reinterpreted with a new data\ntype. The new data type must preserve the same size in bytes as to not\ncause index misalignment.\n\nParameters\n----------\ndtype : data type\n    Data type object or one of their string representations.\n\nReturns\n-------\nSeries\n    A new Series object as a view of the same data in memory.\n\nSee Also\n--------\nnumpy.ndarray.view : Equivalent numpy function to create a new view of\n    the same data in memory.\n\nNotes\n-----\nSeries are instantiated with ``dtype=float64`` by default. While\n``numpy.ndarray.view()`` will return a view with the same data type as\nthe original array, ``Series.view()`` (without specified dtype)\nwill try using ``float64`` and may fail if the original data type size\nin bytes is not the same.\n\nExamples\n--------\n>>> s = pd.Series([-2, -1, 0, 1, 2], dtype='int8')\n>>> s\n0   -2\n1   -1\n2    0\n3    1\n4    2\ndtype: int8\n\nThe 8 bit signed integer representation of `-1` is `0b11111111`, but\nthe same bytes represent 255 if read as an 8 bit unsigned integer:\n\n>>> us = s.view('uint8')\n>>> us\n0    254\n1    255\n2      0\n3      1\n4      2\ndtype: uint8\n\nThe views share the same underlying values:\n\n>>> us[0] = 128\n>>> s\n0   -128\n1     -1\n2      0\n3      1\n4      2\ndtype: int8", "deprecated": false, "file": "pandas/core/series.py", "file_line": 718, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L718", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Reshaping, sorting", "subsection": "", "shared_code_with": ""}, "pandas.Series.append": {"type": "function", "docstring": "Concatenate two or more Series.\n\nParameters\n----------\nto_append : Series or list/tuple of Series\n    Series to append with self.\nignore_index : bool, default False\n    If True, do not use the index labels.\nverify_integrity : bool, default False\n    If True, raise Exception on creating index with duplicates.\n\nReturns\n-------\nSeries\n    Concatenated Series.\n\nSee Also\n--------\nconcat : General function to concatenate DataFrame or Series objects.\n\nNotes\n-----\nIteratively appending to a Series can be more computationally intensive\nthan a single concatenate. A better solution is to append values to a\nlist and then concatenate the list with the original Series all at\nonce.\n\nExamples\n--------\n>>> s1 = pd.Series([1, 2, 3])\n>>> s2 = pd.Series([4, 5, 6])\n>>> s3 = pd.Series([4, 5, 6], index=[3, 4, 5])\n>>> s1.append(s2)\n0    1\n1    2\n2    3\n0    4\n1    5\n2    6\ndtype: int64\n\n>>> s1.append(s3)\n0    1\n1    2\n2    3\n3    4\n4    5\n5    6\ndtype: int64\n\nWith `ignore_index` set to True:\n\n>>> s1.append(s2, ignore_index=True)\n0    1\n1    2\n2    3\n3    4\n4    5\n5    6\ndtype: int64\n\nWith `verify_integrity` set to True:\n\n>>> s1.append(s2, verify_integrity=True)\nTraceback (most recent call last):\n...\nValueError: Indexes have overlapping values: [0, 1, 2]", "deprecated": false, "file": "pandas/core/series.py", "file_line": 2663, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L2663", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Combining / joining / merging", "subsection": "", "shared_code_with": ""}, "pandas.Series.replace": {"type": "function", "docstring": "Replace values given in `to_replace` with `value`.\n\nValues of the Series are replaced with other values dynamically.\nThis differs from updating with ``.loc`` or ``.iloc``, which require\nyou to specify a location to update with some value.\n\nParameters\n----------\nto_replace : str, regex, list, dict, Series, int, float, or None\n    How to find the values that will be replaced.\n\n    * numeric, str or regex:\n\n        - numeric: numeric values equal to `to_replace` will be\n          replaced with `value`\n        - str: string exactly matching `to_replace` will be replaced\n          with `value`\n        - regex: regexs matching `to_replace` will be replaced with\n          `value`\n\n    * list of str, regex, or numeric:\n\n        - First, if `to_replace` and `value` are both lists, they\n          **must** be the same length.\n        - Second, if ``regex=True`` then all of the strings in **both**\n          lists will be interpreted as regexs otherwise they will match\n          directly. This doesn't matter much for `value` since there\n          are only a few possible substitution regexes you can use.\n        - str, regex and numeric rules apply as above.\n\n    * dict:\n\n        - Dicts can be used to specify different replacement values\n          for different existing values. For example,\n          ``{'a': 'b', 'y': 'z'}`` replaces the value 'a' with 'b' and\n          'y' with 'z'. To use a dict in this way the `value`\n          parameter should be `None`.\n        - For a DataFrame a dict can specify that different values\n          should be replaced in different columns. For example,\n          ``{'a': 1, 'b': 'z'}`` looks for the value 1 in column 'a'\n          and the value 'z' in column 'b' and replaces these values\n          with whatever is specified in `value`. The `value` parameter\n          should not be ``None`` in this case. You can treat this as a\n          special case of passing two lists except that you are\n          specifying the column to search in.\n        - For a DataFrame nested dictionaries, e.g.,\n          ``{'a': {'b': np.nan}}``, are read as follows: look in column\n          'a' for the value 'b' and replace it with NaN. The `value`\n          parameter should be ``None`` to use a nested dict in this\n          way. You can nest regular expressions as well. Note that\n          column names (the top-level dictionary keys in a nested\n          dictionary) **cannot** be regular expressions.\n\n    * None:\n\n        - This means that the `regex` argument must be a string,\n          compiled regular expression, or list, dict, ndarray or\n          Series of such elements. If `value` is also ``None`` then\n          this **must** be a nested dictionary or Series.\n\n    See the examples section for examples of each of these.\nvalue : scalar, dict, list, str, regex, default None\n    Value to replace any values matching `to_replace` with.\n    For a DataFrame a dict of values can be used to specify which\n    value to use for each column (columns not in the dict will not be\n    filled). Regular expressions, strings and lists or dicts of such\n    objects are also allowed.\ninplace : bool, default False\n    If True, in place. Note: this will modify any\n    other views on this object (e.g. a column from a DataFrame).\n    Returns the caller if this is True.\nlimit : int, default None\n    Maximum size gap to forward or backward fill.\nregex : bool or same types as `to_replace`, default False\n    Whether to interpret `to_replace` and/or `value` as regular\n    expressions. If this is ``True`` then `to_replace` *must* be a\n    string. Alternatively, this could be a regular expression or a\n    list, dict, or array of regular expressions in which case\n    `to_replace` must be ``None``.\nmethod : {'pad', 'ffill', 'bfill', `None`}\n    The method to use when for replacement, when `to_replace` is a\n    scalar, list or tuple and `value` is ``None``.\n\n    .. versionchanged:: 0.23.0\n        Added to DataFrame.\n\nReturns\n-------\nSeries\n    Object after replacement.\n\nRaises\n------\nAssertionError\n    * If `regex` is not a ``bool`` and `to_replace` is not\n      ``None``.\nTypeError\n    * If `to_replace` is a ``dict`` and `value` is not a ``list``,\n      ``dict``, ``ndarray``, or ``Series``\n    * If `to_replace` is ``None`` and `regex` is not compilable\n      into a regular expression or is a list, dict, ndarray, or\n      Series.\n    * When replacing multiple ``bool`` or ``datetime64`` objects and\n      the arguments to `to_replace` does not match the type of the\n      value being replaced\nValueError\n    * If a ``list`` or an ``ndarray`` is passed to `to_replace` and\n      `value` but they are not the same length.\n\nSee Also\n--------\nSeries.fillna : Fill NA values.\nSeries.where : Replace values based on boolean condition.\nSeries.str.replace : Simple string replacement.\n\nNotes\n-----\n* Regex substitution is performed under the hood with ``re.sub``. The\n  rules for substitution for ``re.sub`` are the same.\n* Regular expressions will only substitute on strings, meaning you\n  cannot provide, for example, a regular expression matching floating\n  point numbers and expect the columns in your frame that have a\n  numeric dtype to be matched. However, if those floating point\n  numbers *are* strings, then you can do this.\n* This method has *a lot* of options. You are encouraged to experiment\n  and play with this method to gain intuition about how it works.\n* When dict is used as the `to_replace` value, it is like\n  key(s) in the dict are the to_replace part and\n  value(s) in the dict are the value parameter.\n\nExamples\n--------\n\n**Scalar `to_replace` and `value`**\n\n>>> s = pd.Series([0, 1, 2, 3, 4])\n>>> s.replace(0, 5)\n0    5\n1    1\n2    2\n3    3\n4    4\ndtype: int64\n\n>>> df = pd.DataFrame({'A': [0, 1, 2, 3, 4],\n...                    'B': [5, 6, 7, 8, 9],\n...                    'C': ['a', 'b', 'c', 'd', 'e']})\n>>> df.replace(0, 5)\n   A  B  C\n0  5  5  a\n1  1  6  b\n2  2  7  c\n3  3  8  d\n4  4  9  e\n\n**List-like `to_replace`**\n\n>>> df.replace([0, 1, 2, 3], 4)\n   A  B  C\n0  4  5  a\n1  4  6  b\n2  4  7  c\n3  4  8  d\n4  4  9  e\n\n>>> df.replace([0, 1, 2, 3], [4, 3, 2, 1])\n   A  B  C\n0  4  5  a\n1  3  6  b\n2  2  7  c\n3  1  8  d\n4  4  9  e\n\n>>> s.replace([1, 2], method='bfill')\n0    0\n1    3\n2    3\n3    3\n4    4\ndtype: int64\n\n**dict-like `to_replace`**\n\n>>> df.replace({0: 10, 1: 100})\n     A  B  C\n0   10  5  a\n1  100  6  b\n2    2  7  c\n3    3  8  d\n4    4  9  e\n\n>>> df.replace({'A': 0, 'B': 5}, 100)\n     A    B  C\n0  100  100  a\n1    1    6  b\n2    2    7  c\n3    3    8  d\n4    4    9  e\n\n>>> df.replace({'A': {0: 100, 4: 400}})\n     A  B  C\n0  100  5  a\n1    1  6  b\n2    2  7  c\n3    3  8  d\n4  400  9  e\n\n**Regular expression `to_replace`**\n\n>>> df = pd.DataFrame({'A': ['bat', 'foo', 'bait'],\n...                    'B': ['abc', 'bar', 'xyz']})\n>>> df.replace(to_replace=r'^ba.$', value='new', regex=True)\n      A    B\n0   new  abc\n1   foo  new\n2  bait  xyz\n\n>>> df.replace({'A': r'^ba.$'}, {'A': 'new'}, regex=True)\n      A    B\n0   new  abc\n1   foo  bar\n2  bait  xyz\n\n>>> df.replace(regex=r'^ba.$', value='new')\n      A    B\n0   new  abc\n1   foo  new\n2  bait  xyz\n\n>>> df.replace(regex={r'^ba.$': 'new', 'foo': 'xyz'})\n      A    B\n0   new  abc\n1   xyz  new\n2  bait  xyz\n\n>>> df.replace(regex=[r'^ba.$', 'foo'], value='new')\n      A    B\n0   new  abc\n1   new  new\n2  bait  xyz\n\nNote that when replacing multiple ``bool`` or ``datetime64`` objects,\nthe data types in the `to_replace` parameter must match the data\ntype of the value being replaced:\n\n>>> df = pd.DataFrame({'A': [True, False, True],\n...                    'B': [False, True, False]})\n>>> df.replace({'a string': 'new value', True: False})  # raises\nTraceback (most recent call last):\n    ...\nTypeError: Cannot compare types 'ndarray(dtype=bool)' and 'str'\n\nThis raises a ``TypeError`` because one of the ``dict`` keys is not of\nthe correct type for replacement.\n\nCompare the behavior of ``s.replace({'a': None})`` and\n``s.replace('a', None)`` to understand the peculiarities\nof the `to_replace` parameter:\n\n>>> s = pd.Series([10, 'a', 'a', 'b', 'a'])\n\nWhen one uses a dict as the `to_replace` value, it is like the\nvalue(s) in the dict are equal to the `value` parameter.\n``s.replace({'a': None})`` is equivalent to\n``s.replace(to_replace={'a': None}, value=None, method=None)``:\n\n>>> s.replace({'a': None})\n0      10\n1    None\n2    None\n3       b\n4    None\ndtype: object\n\nWhen ``value=None`` and `to_replace` is a scalar, list or\ntuple, `replace` uses the method parameter (default 'pad') to do the\nreplacement. So this is why the 'a' values are being replaced by 10\nin rows 1 and 2 and 'b' in row 4 in this case.\nThe command ``s.replace('a', None)`` is actually equivalent to\n``s.replace(to_replace='a', value=None, method='pad')``:\n\n>>> s.replace('a', None)\n0    10\n1    10\n2    10\n3     b\n4     b\ndtype: object", "deprecated": false, "file": "pandas/core/series.py", "file_line": 4308, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L4308", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Combining / joining / merging", "subsection": "", "shared_code_with": ""}, "pandas.Series.update": {"type": "function", "docstring": "Modify Series in place using non-NA values from passed\nSeries. Aligns on index.\n\nParameters\n----------\nother : Series\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3])\n>>> s.update(pd.Series([4, 5, 6]))\n>>> s\n0    4\n1    5\n2    6\ndtype: int64\n\n>>> s = pd.Series(['a', 'b', 'c'])\n>>> s.update(pd.Series(['d', 'e'], index=[0, 2]))\n>>> s\n0    d\n1    b\n2    e\ndtype: object\n\n>>> s = pd.Series([1, 2, 3])\n>>> s.update(pd.Series([4, 5, 6, 7, 8]))\n>>> s\n0    4\n1    5\n2    6\ndtype: int64\n\nIf ``other`` contains NaNs the corresponding values are not updated\nin the original Series.\n\n>>> s = pd.Series([1, 2, 3])\n>>> s.update(pd.Series([4, np.nan, 6]))\n>>> s\n0    4\n1    2\n2    6\ndtype: int64", "deprecated": false, "file": "pandas/core/series.py", "file_line": 2929, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L2929", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"other\" has no description"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Combining / joining / merging", "subsection": "", "shared_code_with": ""}, "pandas.Series.asfreq": {"type": "function", "docstring": "Convert TimeSeries to specified frequency.\n\nOptionally provide filling method to pad/backfill missing values.\n\nReturns the original data conformed to a new index with the specified\nfrequency. ``resample`` is more appropriate if an operation, such as\nsummarization, is necessary to represent the data at the new frequency.\n\nParameters\n----------\nfreq : DateOffset or str\nmethod : {'backfill'/'bfill', 'pad'/'ffill'}, default None\n    Method to use for filling holes in reindexed Series (note this\n    does not fill NaNs that already were present):\n\n    * 'pad' / 'ffill': propagate last valid observation forward to next\n      valid\n    * 'backfill' / 'bfill': use NEXT valid observation to fill\nhow : {'start', 'end'}, default end\n    For PeriodIndex only, see PeriodIndex.asfreq\nnormalize : bool, default False\n    Whether to reset output index to midnight\nfill_value : scalar, optional\n    Value to use for missing values, applied during upsampling (note\n    this does not fill NaNs that already were present).\n\n    .. versionadded:: 0.20.0\n\nReturns\n-------\nconverted : same type as caller\n\nSee Also\n--------\nreindex\n\nNotes\n-----\nTo learn more about the frequency strings, please see `this link\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\nExamples\n--------\n\nStart by creating a series with 4 one minute timestamps.\n\n>>> index = pd.date_range('1/1/2000', periods=4, freq='T')\n>>> series = pd.Series([0.0, None, 2.0, 3.0], index=index)\n>>> df = pd.DataFrame({'s':series})\n>>> df\n                       s\n2000-01-01 00:00:00    0.0\n2000-01-01 00:01:00    NaN\n2000-01-01 00:02:00    2.0\n2000-01-01 00:03:00    3.0\n\nUpsample the series into 30 second bins.\n\n>>> df.asfreq(freq='30S')\n                       s\n2000-01-01 00:00:00    0.0\n2000-01-01 00:00:30    NaN\n2000-01-01 00:01:00    NaN\n2000-01-01 00:01:30    NaN\n2000-01-01 00:02:00    2.0\n2000-01-01 00:02:30    NaN\n2000-01-01 00:03:00    3.0\n\nUpsample again, providing a ``fill value``.\n\n>>> df.asfreq(freq='30S', fill_value=9.0)\n                       s\n2000-01-01 00:00:00    0.0\n2000-01-01 00:00:30    9.0\n2000-01-01 00:01:00    NaN\n2000-01-01 00:01:30    9.0\n2000-01-01 00:02:00    2.0\n2000-01-01 00:02:30    9.0\n2000-01-01 00:03:00    3.0\n\nUpsample again, providing a ``method``.\n\n>>> df.asfreq(freq='30S', method='bfill')\n                       s\n2000-01-01 00:00:00    0.0\n2000-01-01 00:00:30    NaN\n2000-01-01 00:01:00    NaN\n2000-01-01 00:01:30    2.0\n2000-01-01 00:02:00    2.0\n2000-01-01 00:02:30    3.0\n2000-01-01 00:03:00    3.0", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 7861, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L7861", "errors": [["PR07", "Parameter \"freq\" has no description"], ["PR09", "Parameter \"method\" description should finish with \".\""], ["PR09", "Parameter \"how\" description should finish with \".\""], ["PR09", "Parameter \"normalize\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"reindex\" reference"], ["EX03", "flake8 error: E231 missing whitespace after ':'"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Time series-related", "subsection": "", "shared_code_with": ""}, "pandas.Series.asof": {"type": "function", "docstring": "Return the last row(s) without any NaNs before `where`.\n\nThe last row (for each element in `where`, if list) without any\nNaN is taken.\nIn case of a :class:`~pandas.DataFrame`, the last row without NaN\nconsidering only the subset of columns (if not `None`)\n\nIf there is no good value, NaN is returned for a Series or\na Series of NaN values for a DataFrame\n\nParameters\n----------\nwhere : date or array-like of dates\n    Date(s) before which the last row(s) are returned.\nsubset : str or array-like of str, default `None`\n    For DataFrame, if not `None`, only use these columns to\n    check for NaNs.\n\nReturns\n-------\nscalar, Series, or DataFrame\n\n    The return can be:\n\n    * scalar : when `self` is a Series and `where` is a scalar\n    * Series: when `self` is a Series and `where` is an array-like,\n      or when `self` is a DataFrame and `where` is a scalar\n    * DataFrame : when `self` is a DataFrame and `where` is an\n      array-like\n\n    Return scalar, Series, or DataFrame.\n\nSee Also\n--------\nmerge_asof : Perform an asof merge. Similar to left join.\n\nNotes\n-----\nDates are assumed to be sorted. Raises if this is not the case.\n\nExamples\n--------\nA Series and a scalar `where`.\n\n>>> s = pd.Series([1, 2, np.nan, 4], index=[10, 20, 30, 40])\n>>> s\n10    1.0\n20    2.0\n30    NaN\n40    4.0\ndtype: float64\n\n>>> s.asof(20)\n2.0\n\nFor a sequence `where`, a Series is returned. The first value is\nNaN, because the first element of `where` is before the first\nindex value.\n\n>>> s.asof([5, 20])\n5     NaN\n20    2.0\ndtype: float64\n\nMissing values are not considered. The following is ``2.0``, not\nNaN, even though NaN is at the index location for ``30``.\n\n>>> s.asof(30)\n2.0\n\nTake all columns into consideration\n\n>>> df = pd.DataFrame({'a': [10, 20, 30, 40, 50],\n...                    'b': [None, None, None, None, 500]},\n...                   index=pd.DatetimeIndex(['2018-02-27 09:01:00',\n...                                           '2018-02-27 09:02:00',\n...                                           '2018-02-27 09:03:00',\n...                                           '2018-02-27 09:04:00',\n...                                           '2018-02-27 09:05:00']))\n>>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n...                           '2018-02-27 09:04:30']))\n                      a   b\n2018-02-27 09:03:30 NaN NaN\n2018-02-27 09:04:30 NaN NaN\n\nTake a single column into consideration\n\n>>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n...                           '2018-02-27 09:04:30']),\n...         subset=['a'])\n                         a   b\n2018-02-27 09:03:30   30.0 NaN\n2018-02-27 09:04:30   40.0 NaN", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 7048, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L7048", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Time series-related", "subsection": "", "shared_code_with": ""}, "pandas.Series.shift": {"type": "function", "docstring": "Shift index by desired number of periods with an optional time `freq`.\n\nWhen `freq` is not passed, shift the index without realigning the data.\nIf `freq` is passed (in this case, the index must be date or datetime,\nor it will raise a `NotImplementedError`), the index will be\nincreased using the periods and the `freq`.\n\nParameters\n----------\nperiods : int\n    Number of periods to shift. Can be positive or negative.\nfreq : DateOffset, tseries.offsets, timedelta, or str, optional\n    Offset to use from the tseries module or time rule (e.g. 'EOM').\n    If `freq` is specified then the index values are shifted but the\n    data is not realigned. That is, use `freq` if you would like to\n    extend the index when shifting and preserve the original data.\naxis : {0 or 'index', 1 or 'columns', None}, default None\n    Shift direction.\nfill_value : object, optional\n    The scalar value to use for newly introduced missing values.\n    the default depends on the dtype of `self`.\n    For numeric data, ``np.nan`` is used.\n    For datetime, timedelta, or period data, etc. :attr:`NaT` is used.\n    For extension dtypes, ``self.dtype.na_value`` is used.\n\n    .. versionchanged:: 0.24.0\n\nReturns\n-------\nSeries\n    Copy of input object, shifted.\n\nSee Also\n--------\nIndex.shift : Shift values of Index.\nDatetimeIndex.shift : Shift values of DatetimeIndex.\nPeriodIndex.shift : Shift values of PeriodIndex.\ntshift : Shift the time index, using the index's frequency if\n    available.\n\nExamples\n--------\n>>> df = pd.DataFrame({'Col1': [10, 20, 15, 30, 45],\n...                    'Col2': [13, 23, 18, 33, 48],\n...                    'Col3': [17, 27, 22, 37, 52]})\n\n>>> df.shift(periods=3)\n   Col1  Col2  Col3\n0   NaN   NaN   NaN\n1   NaN   NaN   NaN\n2   NaN   NaN   NaN\n3  10.0  13.0  17.0\n4  20.0  23.0  27.0\n\n>>> df.shift(periods=1, axis='columns')\n   Col1  Col2  Col3\n0   NaN  10.0  13.0\n1   NaN  20.0  23.0\n2   NaN  15.0  18.0\n3   NaN  30.0  33.0\n4   NaN  45.0  48.0\n\n>>> df.shift(periods=3, fill_value=0)\n   Col1  Col2  Col3\n0     0     0     0\n1     0     0     0\n2     0     0     0\n3    10    13    17\n4    20    23    27", "deprecated": false, "file": "pandas/core/series.py", "file_line": 4327, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L4327", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Time series-related", "subsection": "", "shared_code_with": ""}, "pandas.Series.first_valid_index": {"type": "function", "docstring": "Return index for first non-NA/null value.\n\nReturns\n-------\nscalar : type of index\n\nNotes\n-----\nIf all elements are non-NA/null, returns None.\nAlso returns None for empty Series/DataFrame.", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 10832, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L10832", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Time series-related", "subsection": "", "shared_code_with": ""}, "pandas.Series.last_valid_index": {"type": "function", "docstring": "Return index for last non-NA/null value.\n\nReturns\n-------\nscalar : type of index\n\nNotes\n-----\nIf all elements are non-NA/null, returns None.\nAlso returns None for empty Series/DataFrame.", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 10838, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L10838", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Time series-related", "subsection": "", "shared_code_with": ""}, "pandas.Series.resample": {"type": "function", "docstring": "Resample time-series data.\n\nConvenience method for frequency conversion and resampling of time\nseries. Object must have a datetime-like index (`DatetimeIndex`,\n`PeriodIndex`, or `TimedeltaIndex`), or pass datetime-like values\nto the `on` or `level` keyword.\n\nParameters\n----------\nrule : DateOffset, Timedelta or str\n    The offset string or object representing target conversion.\nhow : str\n    Method for down/re-sampling, default to 'mean' for downsampling.\n\n    .. deprecated:: 0.18.0\n       The new syntax is ``.resample(...).mean()``, or\n       ``.resample(...).apply(<func>)``\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Which axis to use for up- or down-sampling. For `Series` this\n    will default to 0, i.e. along the rows. Must be\n    `DatetimeIndex`, `TimedeltaIndex` or `PeriodIndex`.\nfill_method : str, default None\n    Filling method for upsampling.\n\n    .. deprecated:: 0.18.0\n       The new syntax is ``.resample(...).<func>()``,\n       e.g. ``.resample(...).pad()``\nclosed : {'right', 'left'}, default None\n    Which side of bin interval is closed. The default is 'left'\n    for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n    'BA', 'BQ', and 'W' which all have a default of 'right'.\nlabel : {'right', 'left'}, default None\n    Which bin edge label to label bucket with. The default is 'left'\n    for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n    'BA', 'BQ', and 'W' which all have a default of 'right'.\nconvention : {'start', 'end', 's', 'e'}, default 'start'\n    For `PeriodIndex` only, controls whether to use the start or\n    end of `rule`.\nkind : {'timestamp', 'period'}, optional, default None\n    Pass 'timestamp' to convert the resulting index to a\n    `DateTimeIndex` or 'period' to convert it to a `PeriodIndex`.\n    By default the input representation is retained.\nloffset : timedelta, default None\n    Adjust the resampled time labels.\nlimit : int, default None\n    Maximum size gap when reindexing with `fill_method`.\n\n    .. deprecated:: 0.18.0\nbase : int, default 0\n    For frequencies that evenly subdivide 1 day, the \"origin\" of the\n    aggregated intervals. For example, for '5min' frequency, base could\n    range from 0 through 4. Defaults to 0.\non : str, optional\n    For a DataFrame, column to use instead of index for resampling.\n    Column must be datetime-like.\n\nlevel : str or int, optional\n    For a MultiIndex, level (name or number) to use for\n    resampling. `level` must be datetime-like.\n\nReturns\n-------\nResampler object\n\nSee Also\n--------\ngroupby : Group by mapping, function, label, or list of labels.\nSeries.resample : Resample a Series.\nDataFrame.resample: Resample a DataFrame.\n\nNotes\n-----\nSee the `user guide\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling>`_\nfor more.\n\nTo learn more about the offset strings, please see `this link\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`__.\n\nExamples\n--------\n\nStart by creating a series with 9 one minute timestamps.\n\n>>> index = pd.date_range('1/1/2000', periods=9, freq='T')\n>>> series = pd.Series(range(9), index=index)\n>>> series\n2000-01-01 00:00:00    0\n2000-01-01 00:01:00    1\n2000-01-01 00:02:00    2\n2000-01-01 00:03:00    3\n2000-01-01 00:04:00    4\n2000-01-01 00:05:00    5\n2000-01-01 00:06:00    6\n2000-01-01 00:07:00    7\n2000-01-01 00:08:00    8\nFreq: T, dtype: int64\n\nDownsample the series into 3 minute bins and sum the values\nof the timestamps falling into a bin.\n\n>>> series.resample('3T').sum()\n2000-01-01 00:00:00     3\n2000-01-01 00:03:00    12\n2000-01-01 00:06:00    21\nFreq: 3T, dtype: int64\n\nDownsample the series into 3 minute bins as above, but label each\nbin using the right edge instead of the left. Please note that the\nvalue in the bucket used as the label is not included in the bucket,\nwhich it labels. For example, in the original series the\nbucket ``2000-01-01 00:03:00`` contains the value 3, but the summed\nvalue in the resampled bucket with the label ``2000-01-01 00:03:00``\ndoes not include 3 (if it did, the summed value would be 6, not 3).\nTo include this value close the right side of the bin interval as\nillustrated in the example below this one.\n\n>>> series.resample('3T', label='right').sum()\n2000-01-01 00:03:00     3\n2000-01-01 00:06:00    12\n2000-01-01 00:09:00    21\nFreq: 3T, dtype: int64\n\nDownsample the series into 3 minute bins as above, but close the right\nside of the bin interval.\n\n>>> series.resample('3T', label='right', closed='right').sum()\n2000-01-01 00:00:00     0\n2000-01-01 00:03:00     6\n2000-01-01 00:06:00    15\n2000-01-01 00:09:00    15\nFreq: 3T, dtype: int64\n\nUpsample the series into 30 second bins.\n\n>>> series.resample('30S').asfreq()[0:5]   # Select first 5 rows\n2000-01-01 00:00:00   0.0\n2000-01-01 00:00:30   NaN\n2000-01-01 00:01:00   1.0\n2000-01-01 00:01:30   NaN\n2000-01-01 00:02:00   2.0\nFreq: 30S, dtype: float64\n\nUpsample the series into 30 second bins and fill the ``NaN``\nvalues using the ``pad`` method.\n\n>>> series.resample('30S').pad()[0:5]\n2000-01-01 00:00:00    0\n2000-01-01 00:00:30    0\n2000-01-01 00:01:00    1\n2000-01-01 00:01:30    1\n2000-01-01 00:02:00    2\nFreq: 30S, dtype: int64\n\nUpsample the series into 30 second bins and fill the\n``NaN`` values using the ``bfill`` method.\n\n>>> series.resample('30S').bfill()[0:5]\n2000-01-01 00:00:00    0\n2000-01-01 00:00:30    1\n2000-01-01 00:01:00    1\n2000-01-01 00:01:30    2\n2000-01-01 00:02:00    2\nFreq: 30S, dtype: int64\n\nPass a custom function via ``apply``\n\n>>> def custom_resampler(array_like):\n...     return np.sum(array_like) + 5\n...\n>>> series.resample('3T').apply(custom_resampler)\n2000-01-01 00:00:00     8\n2000-01-01 00:03:00    17\n2000-01-01 00:06:00    26\nFreq: 3T, dtype: int64\n\nFor a Series with a PeriodIndex, the keyword `convention` can be\nused to control whether to use the start or end of `rule`.\n\nResample a year by quarter using 'start' `convention`. Values are\nassigned to the first quarter of the period.\n\n>>> s = pd.Series([1, 2], index=pd.period_range('2012-01-01',\n...                                             freq='A',\n...                                             periods=2))\n>>> s\n2012    1\n2013    2\nFreq: A-DEC, dtype: int64\n>>> s.resample('Q', convention='start').asfreq()\n2012Q1    1.0\n2012Q2    NaN\n2012Q3    NaN\n2012Q4    NaN\n2013Q1    2.0\n2013Q2    NaN\n2013Q3    NaN\n2013Q4    NaN\nFreq: Q-DEC, dtype: float64\n\nResample quarters by month using 'end' `convention`. Values are\nassigned to the last month of the period.\n\n>>> q = pd.Series([1, 2, 3, 4], index=pd.period_range('2018-01-01',\n...                                                   freq='Q',\n...                                                   periods=4))\n>>> q\n2018Q1    1\n2018Q2    2\n2018Q3    3\n2018Q4    4\nFreq: Q-DEC, dtype: int64\n>>> q.resample('M', convention='end').asfreq()\n2018-03    1.0\n2018-04    NaN\n2018-05    NaN\n2018-06    2.0\n2018-07    NaN\n2018-08    NaN\n2018-09    3.0\n2018-10    NaN\n2018-11    NaN\n2018-12    4.0\nFreq: M, dtype: float64\n\nFor DataFrame objects, the keyword `on` can be used to specify the\ncolumn instead of the index for resampling.\n\n>>> d = dict({'price': [10, 11, 9, 13, 14, 18, 17, 19],\n...           'volume': [50, 60, 40, 100, 50, 100, 40, 50]})\n>>> df = pd.DataFrame(d)\n>>> df['week_starting'] = pd.date_range('01/01/2018',\n...                                     periods=8,\n...                                     freq='W')\n>>> df\n   price  volume week_starting\n0     10      50    2018-01-07\n1     11      60    2018-01-14\n2      9      40    2018-01-21\n3     13     100    2018-01-28\n4     14      50    2018-02-04\n5     18     100    2018-02-11\n6     17      40    2018-02-18\n7     19      50    2018-02-25\n>>> df.resample('M', on='week_starting').mean()\n               price  volume\nweek_starting\n2018-01-31     10.75    62.5\n2018-02-28     17.00    60.0\n\nFor a DataFrame with MultiIndex, the keyword `level` can be used to\nspecify on which level the resampling needs to take place.\n\n>>> days = pd.date_range('1/1/2000', periods=4, freq='D')\n>>> d2 = dict({'price': [10, 11, 9, 13, 14, 18, 17, 19],\n...            'volume': [50, 60, 40, 100, 50, 100, 40, 50]})\n>>> df2 = pd.DataFrame(d2,\n...                    index=pd.MultiIndex.from_product([days,\n...                                                     ['morning',\n...                                                      'afternoon']]\n...                                                     ))\n>>> df2\n                      price  volume\n2000-01-01 morning       10      50\n           afternoon     11      60\n2000-01-02 morning        9      40\n           afternoon     13     100\n2000-01-03 morning       14      50\n           afternoon     18     100\n2000-01-04 morning       17      40\n           afternoon     19      50\n>>> df2.resample('D', level=0).sum()\n            price  volume\n2000-01-01     21     110\n2000-01-02     22     140\n2000-01-03     32     150\n2000-01-04     36      90", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 8099, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L8099", "errors": [["RT03", "Return value has no description"], ["EX03", "flake8 error: E302 expected 2 blank lines, found 0"], ["EX03", "flake8 error: E305 expected 2 blank lines after class or function definition, found 0"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Time series-related", "subsection": "", "shared_code_with": ""}, "pandas.Series.tz_convert": {"type": "function", "docstring": "Convert tz-aware axis to target time zone.\n\nParameters\n----------\ntz : str or tzinfo object\naxis : the axis to convert\nlevel : int, str, default None\n    If axis is a MultiIndex, convert a specific level. Otherwise\n    must be None.\ncopy : bool, default True\n    Also make a copy of the underlying data.\n\nReturns\n-------\n%(klass)s\n    Object with time zone converted axis.\n\nRaises\n------\nTypeError\n    If the axis is tz-naive.", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 9604, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L9604", "errors": [["PR07", "Parameter \"tz\" has no description"], ["PR07", "Parameter \"axis\" has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Time series-related", "subsection": "", "shared_code_with": ""}, "pandas.Series.tz_localize": {"type": "function", "docstring": "Localize tz-naive index of a Series or DataFrame to target time zone.\n\nThis operation localizes the Index. To localize the values in a\ntimezone-naive Series, use :meth:`Series.dt.tz_localize`.\n\nParameters\n----------\ntz : str or tzinfo\naxis : the axis to localize\nlevel : int, str, default None\n    If axis ia a MultiIndex, localize a specific level. Otherwise\n    must be None\ncopy : bool, default True\n    Also make a copy of the underlying data\nambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n    When clocks moved backward due to DST, ambiguous times may arise.\n    For example in Central European Time (UTC+01), when going from\n    03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n    00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n    `ambiguous` parameter dictates how ambiguous times should be\n    handled.\n\n    - 'infer' will attempt to infer fall dst-transition hours based on\n      order\n    - bool-ndarray where True signifies a DST time, False designates\n      a non-DST time (note that this flag is only applicable for\n      ambiguous times)\n    - 'NaT' will return NaT where there are ambiguous times\n    - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n      times\nnonexistent : str, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST. Valid values are:\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nSeries or DataFrame\n    Same type as the input.\n\nRaises\n------\nTypeError\n    If the TimeSeries is tz-aware and tz is not None.\n\nExamples\n--------\n\nLocalize local times:\n\n>>> s = pd.Series([1],\n... index=pd.DatetimeIndex(['2018-09-15 01:30:00']))\n>>> s.tz_localize('CET')\n2018-09-15 01:30:00+02:00    1\ndtype: int64\n\nBe careful with DST changes. When there is sequential data, pandas\ncan infer the DST time:\n\n>>> s = pd.Series(range(7), index=pd.DatetimeIndex([\n... '2018-10-28 01:30:00',\n... '2018-10-28 02:00:00',\n... '2018-10-28 02:30:00',\n... '2018-10-28 02:00:00',\n... '2018-10-28 02:30:00',\n... '2018-10-28 03:00:00',\n... '2018-10-28 03:30:00']))\n>>> s.tz_localize('CET', ambiguous='infer')\n2018-10-28 01:30:00+02:00    0\n2018-10-28 02:00:00+02:00    1\n2018-10-28 02:30:00+02:00    2\n2018-10-28 02:00:00+01:00    3\n2018-10-28 02:30:00+01:00    4\n2018-10-28 03:00:00+01:00    5\n2018-10-28 03:30:00+01:00    6\ndtype: int64\n\nIn some cases, inferring the DST is impossible. In such cases, you can\npass an ndarray to the ambiguous parameter to set the DST explicitly\n\n>>> s = pd.Series(range(3), index=pd.DatetimeIndex([\n... '2018-10-28 01:20:00',\n... '2018-10-28 02:36:00',\n... '2018-10-28 03:46:00']))\n>>> s.tz_localize('CET', ambiguous=np.array([True, True, False]))\n2018-10-28 01:20:00+02:00    0\n2018-10-28 02:36:00+02:00    1\n2018-10-28 03:46:00+01:00    2\ndtype: int64\n\nIf the DST transition causes nonexistent times, you can shift these\ndates forward or backwards with a timedelta object or `'shift_forward'`\nor `'shift_backwards'`.\n>>> s = pd.Series(range(2), index=pd.DatetimeIndex([\n... '2015-03-29 02:30:00',\n... '2015-03-29 03:30:00']))\n>>> s.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\n2015-03-29 03:00:00+02:00    0\n2015-03-29 03:30:00+02:00    1\ndtype: int64\n>>> s.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\n2015-03-29 01:59:59.999999999+01:00    0\n2015-03-29 03:30:00+02:00              1\ndtype: int64\n>>> s.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1H'))\n2015-03-29 03:30:00+02:00    0\n2015-03-29 03:30:00+02:00    1\ndtype: int64", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 9659, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L9659", "errors": [["PR07", "Parameter \"tz\" has no description"], ["PR07", "Parameter \"axis\" has no description"], ["PR09", "Parameter \"level\" description should finish with \".\""], ["PR09", "Parameter \"copy\" description should finish with \".\""], ["PR09", "Parameter \"ambiguous\" description should finish with \".\""], ["PR09", "Parameter \"nonexistent\" description should finish with \".\""], ["EX03", "flake8 error: E122 continuation line missing indentation or outdented (12 times)"], ["EX03", "flake8 error: E128 continuation line under-indented for visual indent"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Time series-related", "subsection": "", "shared_code_with": ""}, "pandas.Series.at_time": {"type": "function", "docstring": "Select values at particular time of day (e.g. 9:30AM).\n\nParameters\n----------\ntime : datetime.time or str\naxis : {0 or 'index', 1 or 'columns'}, default 0\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nSeries or DataFrame\n\nRaises\n------\nTypeError\n    If the index is not  a :class:`DatetimeIndex`\n\nSee Also\n--------\nbetween_time : Select values between particular times of the day.\nfirst : Select initial periods of time series based on a date offset.\nlast : Select final periods of time series based on a date offset.\nDatetimeIndex.indexer_at_time : Get just the index locations for\n    values at particular time of the day.\n\nExamples\n--------\n>>> i = pd.date_range('2018-04-09', periods=4, freq='12H')\n>>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n>>> ts\n                     A\n2018-04-09 00:00:00  1\n2018-04-09 12:00:00  2\n2018-04-10 00:00:00  3\n2018-04-10 12:00:00  4\n\n>>> ts.at_time('12:00')\n                     A\n2018-04-09 12:00:00  2\n2018-04-10 12:00:00  4", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 7966, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L7966", "errors": [["PR01", "Parameters {asof} not documented"], ["PR07", "Parameter \"time\" has no description"], ["PR07", "Parameter \"axis\" has no description"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Time series-related", "subsection": "", "shared_code_with": ""}, "pandas.Series.between_time": {"type": "function", "docstring": "Select values between particular times of the day (e.g., 9:00-9:30 AM).\n\nBy setting ``start_time`` to be later than ``end_time``,\nyou can get the times that are *not* between the two times.\n\nParameters\n----------\nstart_time : datetime.time or str\nend_time : datetime.time or str\ninclude_start : bool, default True\ninclude_end : bool, default True\naxis : {0 or 'index', 1 or 'columns'}, default 0\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nSeries or DataFrame\n\nRaises\n------\nTypeError\n    If the index is not  a :class:`DatetimeIndex`\n\nSee Also\n--------\nat_time : Select values at a particular time of the day.\nfirst : Select initial periods of time series based on a date offset.\nlast : Select final periods of time series based on a date offset.\nDatetimeIndex.indexer_between_time : Get just the index locations for\n    values between particular times of the day.\n\nExamples\n--------\n>>> i = pd.date_range('2018-04-09', periods=4, freq='1D20min')\n>>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n>>> ts\n                     A\n2018-04-09 00:00:00  1\n2018-04-10 00:20:00  2\n2018-04-11 00:40:00  3\n2018-04-12 01:00:00  4\n\n>>> ts.between_time('0:15', '0:45')\n                     A\n2018-04-10 00:20:00  2\n2018-04-11 00:40:00  3\n\nYou get the times that are *not* between two times by setting\n``start_time`` later than ``end_time``:\n\n>>> ts.between_time('0:45', '0:15')\n                     A\n2018-04-09 00:00:00  1\n2018-04-12 01:00:00  4", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 8022, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L8022", "errors": [["PR07", "Parameter \"start_time\" has no description"], ["PR07", "Parameter \"end_time\" has no description"], ["PR07", "Parameter \"include_start\" has no description"], ["PR07", "Parameter \"include_end\" has no description"], ["PR07", "Parameter \"axis\" has no description"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Time series-related", "subsection": "", "shared_code_with": ""}, "pandas.Series.tshift": {"type": "function", "docstring": "Shift the time index, using the index's frequency if available.\n\nParameters\n----------\nperiods : int\n    Number of periods to move, can be positive or negative\nfreq : DateOffset, timedelta, or time rule string, default None\n    Increment to use from the tseries module or time rule (e.g. 'EOM')\naxis : int or basestring\n    Corresponds to the axis that contains the Index\n\nReturns\n-------\nshifted : Series/DataFrame\n\nNotes\n-----\nIf freq is not specified then tries to use the freq or inferred_freq\nattributes of the index. If neither of those attributes exist, a\nValueError is thrown", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 9392, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L9392", "errors": [["PR09", "Parameter \"periods\" description should finish with \".\""], ["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"freq\" description should finish with \".\""], ["PR06", "Parameter \"axis\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"axis\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Time series-related", "subsection": "", "shared_code_with": ""}, "pandas.Series.slice_shift": {"type": "function", "docstring": "Equivalent to `shift` without copying data. The shifted data will\nnot include the dropped periods and the shifted axis will be smaller\nthan the original.\n\nParameters\n----------\nperiods : int\n    Number of periods to move, can be positive or negative\n\nReturns\n-------\nshifted : same type as caller\n\nNotes\n-----\nWhile the `slice_shift` is faster than `shift`, you may pay for it\nlater during alignment.", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 9356, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L9356", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {axis} not documented"], ["PR09", "Parameter \"periods\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Time series-related", "subsection": "", "shared_code_with": ""}, "pandas.Series.dt.date": {"type": "property", "docstring": "Returns numpy array of python datetime.date objects (namely, the date\npart of Timestamps without timezone information).", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": ""}, "pandas.Series.dt.time": {"type": "property", "docstring": "Returns numpy array of datetime.time. The time part of the Timestamps.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.date"}, "pandas.Series.dt.timetz": {"type": "property", "docstring": "Returns numpy array of datetime.time also containing timezone\ninformation. The time part of the Timestamps.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.time"}, "pandas.Series.dt.year": {"type": "property", "docstring": "The year of the datetime.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.timetz"}, "pandas.Series.dt.month": {"type": "property", "docstring": "The month as January=1, December=12.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.year"}, "pandas.Series.dt.day": {"type": "property", "docstring": "The month as January=1, December=12.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.month"}, "pandas.Series.dt.hour": {"type": "property", "docstring": "The hours of the datetime.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.day"}, "pandas.Series.dt.minute": {"type": "property", "docstring": "The minutes of the datetime.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.hour"}, "pandas.Series.dt.second": {"type": "property", "docstring": "The seconds of the datetime.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.minute"}, "pandas.Series.dt.microsecond": {"type": "property", "docstring": "The microseconds of the datetime.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.second"}, "pandas.Series.dt.nanosecond": {"type": "property", "docstring": "The nanoseconds of the datetime.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.microsecond"}, "pandas.Series.dt.week": {"type": "property", "docstring": "The week ordinal of the year.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.nanosecond"}, "pandas.Series.dt.weekofyear": {"type": "property", "docstring": "The week ordinal of the year.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.week"}, "pandas.Series.dt.dayofweek": {"type": "property", "docstring": "The day of the week with Monday=0, Sunday=6.\n\nReturn the day of the week. It is assumed the week starts on\nMonday, which is denoted by 0 and ends on Sunday which is denoted\nby 6. This method is available on both Series with datetime\nvalues (using the `dt` accessor) or DatetimeIndex.\n\nReturns\n-------\nSeries or Index\n    Containing integers indicating the day number.\n\nSee Also\n--------\nSeries.dt.dayofweek : Alias.\nSeries.dt.weekday : Alias.\nSeries.dt.day_name : Returns the name of the day of the week.\n\nExamples\n--------\n>>> s = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\n>>> s.dt.dayofweek\n2016-12-31    5\n2017-01-01    6\n2017-01-02    0\n2017-01-03    1\n2017-01-04    2\n2017-01-05    3\n2017-01-06    4\n2017-01-07    5\n2017-01-08    6\nFreq: D, dtype: int64", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.weekofyear"}, "pandas.Series.dt.weekday": {"type": "property", "docstring": "The day of the week with Monday=0, Sunday=6.\n\nReturn the day of the week. It is assumed the week starts on\nMonday, which is denoted by 0 and ends on Sunday which is denoted\nby 6. This method is available on both Series with datetime\nvalues (using the `dt` accessor) or DatetimeIndex.\n\nReturns\n-------\nSeries or Index\n    Containing integers indicating the day number.\n\nSee Also\n--------\nSeries.dt.dayofweek : Alias.\nSeries.dt.weekday : Alias.\nSeries.dt.day_name : Returns the name of the day of the week.\n\nExamples\n--------\n>>> s = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\n>>> s.dt.dayofweek\n2016-12-31    5\n2017-01-01    6\n2017-01-02    0\n2017-01-03    1\n2017-01-04    2\n2017-01-05    3\n2017-01-06    4\n2017-01-07    5\n2017-01-08    6\nFreq: D, dtype: int64", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.dayofweek"}, "pandas.Series.dt.dayofyear": {"type": "property", "docstring": "The ordinal day of the year.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.weekday"}, "pandas.Series.dt.quarter": {"type": "property", "docstring": "The quarter of the date.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.dayofyear"}, "pandas.Series.dt.is_month_start": {"type": "property", "docstring": "Indicates whether the date is the first day of the month.\n\nReturns\n-------\nSeries or array\n    For Series, returns a Series with boolean values.\n    For DatetimeIndex, returns a boolean array.\n\nSee Also\n--------\nis_month_start : Return a boolean indicating whether the date\n    is the first day of the month.\nis_month_end : Return a boolean indicating whether the date\n    is the last day of the month.\n\nExamples\n--------\nThis method is available on Series with datetime values under\nthe ``.dt`` accessor, and directly on DatetimeIndex.\n\n>>> s = pd.Series(pd.date_range(\"2018-02-27\", periods=3))\n>>> s\n0   2018-02-27\n1   2018-02-28\n2   2018-03-01\ndtype: datetime64[ns]\n>>> s.dt.is_month_start\n0    False\n1    False\n2    True\ndtype: bool\n>>> s.dt.is_month_end\n0    False\n1    True\n2    False\ndtype: bool\n\n>>> idx = pd.date_range(\"2018-02-27\", periods=3)\n>>> idx.is_month_start\narray([False, False, True])\n>>> idx.is_month_end\narray([False, True, False])", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.quarter"}, "pandas.Series.dt.is_month_end": {"type": "property", "docstring": "Indicates whether the date is the last day of the month.\n\nReturns\n-------\nSeries or array\n    For Series, returns a Series with boolean values.\n    For DatetimeIndex, returns a boolean array.\n\nSee Also\n--------\nis_month_start : Return a boolean indicating whether the date\n    is the first day of the month.\nis_month_end : Return a boolean indicating whether the date\n    is the last day of the month.\n\nExamples\n--------\nThis method is available on Series with datetime values under\nthe ``.dt`` accessor, and directly on DatetimeIndex.\n\n>>> s = pd.Series(pd.date_range(\"2018-02-27\", periods=3))\n>>> s\n0   2018-02-27\n1   2018-02-28\n2   2018-03-01\ndtype: datetime64[ns]\n>>> s.dt.is_month_start\n0    False\n1    False\n2    True\ndtype: bool\n>>> s.dt.is_month_end\n0    False\n1    True\n2    False\ndtype: bool\n\n>>> idx = pd.date_range(\"2018-02-27\", periods=3)\n>>> idx.is_month_start\narray([False, False, True])\n>>> idx.is_month_end\narray([False, True, False])", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.is_month_start"}, "pandas.Series.dt.is_quarter_start": {"type": "property", "docstring": "Indicator for whether the date is the first day of a quarter.\n\nReturns\n-------\nis_quarter_start : Series or DatetimeIndex\n    The same type as the original data with boolean values. Series will\n    have the same name and index. DatetimeIndex will have the same\n    name.\n\nSee Also\n--------\nquarter : Return the quarter of the date.\nis_quarter_end : Similar property for indicating the quarter start.\n\nExamples\n--------\nThis method is available on Series with datetime values under\nthe ``.dt`` accessor, and directly on DatetimeIndex.\n\n>>> df = pd.DataFrame({'dates': pd.date_range(\"2017-03-30\",\n...                   periods=4)})\n>>> df.assign(quarter=df.dates.dt.quarter,\n...           is_quarter_start=df.dates.dt.is_quarter_start)\n       dates  quarter  is_quarter_start\n0 2017-03-30        1             False\n1 2017-03-31        1             False\n2 2017-04-01        2              True\n3 2017-04-02        2             False\n\n>>> idx = pd.date_range('2017-03-30', periods=4)\n>>> idx\nDatetimeIndex(['2017-03-30', '2017-03-31', '2017-04-01', '2017-04-02'],\n              dtype='datetime64[ns]', freq='D')\n\n>>> idx.is_quarter_start\narray([False, False,  True, False])", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.is_month_end"}, "pandas.Series.dt.is_quarter_end": {"type": "property", "docstring": "Indicator for whether the date is the last day of a quarter.\n\nReturns\n-------\nis_quarter_end : Series or DatetimeIndex\n    The same type as the original data with boolean values. Series will\n    have the same name and index. DatetimeIndex will have the same\n    name.\n\nSee Also\n--------\nquarter : Return the quarter of the date.\nis_quarter_start : Similar property indicating the quarter start.\n\nExamples\n--------\nThis method is available on Series with datetime values under\nthe ``.dt`` accessor, and directly on DatetimeIndex.\n\n>>> df = pd.DataFrame({'dates': pd.date_range(\"2017-03-30\",\n...                    periods=4)})\n>>> df.assign(quarter=df.dates.dt.quarter,\n...           is_quarter_end=df.dates.dt.is_quarter_end)\n       dates  quarter    is_quarter_end\n0 2017-03-30        1             False\n1 2017-03-31        1              True\n2 2017-04-01        2             False\n3 2017-04-02        2             False\n\n>>> idx = pd.date_range('2017-03-30', periods=4)\n>>> idx\nDatetimeIndex(['2017-03-30', '2017-03-31', '2017-04-01', '2017-04-02'],\n              dtype='datetime64[ns]', freq='D')\n\n>>> idx.is_quarter_end\narray([False,  True, False, False])", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.is_quarter_start"}, "pandas.Series.dt.is_year_start": {"type": "property", "docstring": "Indicate whether the date is the first day of a year.\n\nReturns\n-------\nSeries or DatetimeIndex\n    The same type as the original data with boolean values. Series will\n    have the same name and index. DatetimeIndex will have the same\n    name.\n\nSee Also\n--------\nis_year_end : Similar property indicating the last day of the year.\n\nExamples\n--------\nThis method is available on Series with datetime values under\nthe ``.dt`` accessor, and directly on DatetimeIndex.\n\n>>> dates = pd.Series(pd.date_range(\"2017-12-30\", periods=3))\n>>> dates\n0   2017-12-30\n1   2017-12-31\n2   2018-01-01\ndtype: datetime64[ns]\n\n>>> dates.dt.is_year_start\n0    False\n1    False\n2    True\ndtype: bool\n\n>>> idx = pd.date_range(\"2017-12-30\", periods=3)\n>>> idx\nDatetimeIndex(['2017-12-30', '2017-12-31', '2018-01-01'],\n              dtype='datetime64[ns]', freq='D')\n\n>>> idx.is_year_start\narray([False, False,  True])", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.is_quarter_end"}, "pandas.Series.dt.is_year_end": {"type": "property", "docstring": "Indicate whether the date is the last day of the year.\n\nReturns\n-------\nSeries or DatetimeIndex\n    The same type as the original data with boolean values. Series will\n    have the same name and index. DatetimeIndex will have the same\n    name.\n\nSee Also\n--------\nis_year_start : Similar property indicating the start of the year.\n\nExamples\n--------\nThis method is available on Series with datetime values under\nthe ``.dt`` accessor, and directly on DatetimeIndex.\n\n>>> dates = pd.Series(pd.date_range(\"2017-12-30\", periods=3))\n>>> dates\n0   2017-12-30\n1   2017-12-31\n2   2018-01-01\ndtype: datetime64[ns]\n\n>>> dates.dt.is_year_end\n0    False\n1     True\n2    False\ndtype: bool\n\n>>> idx = pd.date_range(\"2017-12-30\", periods=3)\n>>> idx\nDatetimeIndex(['2017-12-30', '2017-12-31', '2018-01-01'],\n              dtype='datetime64[ns]', freq='D')\n\n>>> idx.is_year_end\narray([False,  True, False])", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.is_year_start"}, "pandas.Series.dt.is_leap_year": {"type": "property", "docstring": "Boolean indicator if the date belongs to a leap year.\n\nA leap year is a year, which has 366 days (instead of 365) including\n29th of February as an intercalary day.\nLeap years are years which are multiples of four with the exception\nof years divisible by 100 but not by 400.\n\nReturns\n-------\nSeries or ndarray\n     Booleans indicating if dates belong to a leap year.\n\nExamples\n--------\nThis method is available on Series with datetime values under\nthe ``.dt`` accessor, and directly on DatetimeIndex.\n\n>>> idx = pd.date_range(\"2012-01-01\", \"2015-01-01\", freq=\"Y\")\n>>> idx\nDatetimeIndex(['2012-12-31', '2013-12-31', '2014-12-31'],\n              dtype='datetime64[ns]', freq='A-DEC')\n>>> idx.is_leap_year\narray([ True, False, False], dtype=bool)\n\n>>> dates = pd.Series(idx)\n>>> dates_series\n0   2012-12-31\n1   2013-12-31\n2   2014-12-31\ndtype: datetime64[ns]\n>>> dates_series.dt.is_leap_year\n0     True\n1    False\n2    False\ndtype: bool", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 23, in pandas.Series.dt.is_leap_year\nFailed example:\n    idx.is_leap_year\nExpected:\n    array([ True, False, False], dtype=bool)\nGot:\n    array([ True, False, False])\n**********************************************************************\nLine 27, in pandas.Series.dt.is_leap_year\nFailed example:\n    dates_series\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.dt.is_leap_year[4]>\", line 1, in <module>\n        dates_series\n    NameError: name 'dates_series' is not defined\n**********************************************************************\nLine 32, in pandas.Series.dt.is_leap_year\nFailed example:\n    dates_series.dt.is_leap_year\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.dt.is_leap_year[5]>\", line 1, in <module>\n        dates_series.dt.is_leap_year\n    NameError: name 'dates_series' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'dates_series' (2 times)"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 23, in pandas.Series.dt.is_leap_year\nFailed example:\n    idx.is_leap_year\nExpected:\n    array([ True, False, False], dtype=bool)\nGot:\n    array([ True, False, False])\n**********************************************************************\nLine 27, in pandas.Series.dt.is_leap_year\nFailed example:\n    dates_series\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.dt.is_leap_year[4]>\", line 1, in <module>\n        dates_series\n    NameError: name 'dates_series' is not defined\n**********************************************************************\nLine 32, in pandas.Series.dt.is_leap_year\nFailed example:\n    dates_series.dt.is_leap_year\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.dt.is_leap_year[5]>\", line 1, in <module>\n        dates_series.dt.is_leap_year\n    NameError: name 'dates_series' is not defined\n", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.is_year_end"}, "pandas.Series.dt.daysinmonth": {"type": "property", "docstring": "The number of days in the month.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.is_leap_year"}, "pandas.Series.dt.days_in_month": {"type": "property", "docstring": "The number of days in the month.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.daysinmonth"}, "pandas.Series.dt.tz": {"type": "property", "docstring": "Return timezone, if any.\n\nReturns\n-------\ndatetime.tzinfo, pytz.tzinfo.BaseTZInfo, dateutil.tz.tz.tzfile, or None\n    Returns None when the array is tz-naive.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.days_in_month"}, "pandas.Series.dt.freq": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/core/indexes/accessors.py", "file_line": 192, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/accessors.py#L192", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": ""}, "pandas.Series.dt.to_period": {"type": "function", "docstring": "Cast to PeriodArray/Index at a particular frequency.\n\nConverts DatetimeArray/Index to PeriodArray/Index.\n\nParameters\n----------\nfreq : str or Offset, optional\n    One of pandas' :ref:`offset strings <timeseries.offset_aliases>`\n    or an Offset object. Will be inferred by default.\n\nReturns\n-------\nPeriodArray/Index\n\nRaises\n------\nValueError\n    When converting a DatetimeArray/Index with non-regular values,\n    so that a frequency cannot be inferred.\n\nSee Also\n--------\nPeriodIndex: Immutable ndarray holding ordinal values.\nDatetimeIndex.to_pydatetime: Return DatetimeIndex as object.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"y\": [1, 2, 3]},\n...                   index=pd.to_datetime([\"2000-03-31 00:00:00\",\n...                                         \"2000-05-31 00:00:00\",\n...                                         \"2000-08-31 00:00:00\"]))\n>>> df.index.to_period(\"M\")\nPeriodIndex(['2000-03', '2000-05', '2000-08'],\n            dtype='period[M]', freq='M')\n\nInfer the daily frequency\n\n>>> idx = pd.date_range(\"2017-01-01\", periods=2)\n>>> idx.to_period()\nPeriodIndex(['2017-01-01', '2017-01-02'],\n            dtype='period[D]', freq='D')", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {freq}"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": ""}, "pandas.Series.dt.to_pydatetime": {"type": "function", "docstring": "Return the data as an array of native Python datetime objects.\n\nTimezone information is retained if present.\n\n.. warning::\n\n   Python's datetime uses microsecond resolution, which is lower than\n   pandas (nanosecond). The values are truncated.\n\nReturns\n-------\nnumpy.ndarray\n    Object dtype array containing native Python datetime objects.\n\nSee Also\n--------\ndatetime.datetime : Standard library value for a datetime.\n\nExamples\n--------\n>>> s = pd.Series(pd.date_range('20180310', periods=2))\n>>> s\n0   2018-03-10\n1   2018-03-11\ndtype: datetime64[ns]\n\n>>> s.dt.to_pydatetime()\narray([datetime.datetime(2018, 3, 10, 0, 0),\n       datetime.datetime(2018, 3, 11, 0, 0)], dtype=object)\n\npandas' nanosecond precision is truncated to microseconds.\n\n>>> s = pd.Series(pd.date_range('20180310', periods=2, freq='ns'))\n>>> s\n0   2018-03-10 00:00:00.000000000\n1   2018-03-10 00:00:00.000000001\ndtype: datetime64[ns]\n\n>>> s.dt.to_pydatetime()\narray([datetime.datetime(2018, 3, 10, 0, 0),\n       datetime.datetime(2018, 3, 10, 0, 0)], dtype=object)", "deprecated": false, "file": "pandas/core/indexes/accessors.py", "file_line": 146, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/accessors.py#L146", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": ""}, "pandas.Series.dt.tz_localize": {"type": "function", "docstring": "Localize tz-naive Datetime Array/Index to tz-aware\nDatetime Array/Index.\n\nThis method takes a time zone (tz) naive Datetime Array/Index object\nand makes this time zone aware. It does not move the time to another\ntime zone.\nTime zone localization helps to switch from time zone aware to time\nzone unaware objects.\n\nParameters\n----------\ntz : str, pytz.timezone, dateutil.tz.tzfile or None\n    Time zone to convert timestamps to. Passing ``None`` will\n    remove the time zone information preserving local time.\nambiguous : 'infer', 'NaT', bool array, default 'raise'\n    When clocks moved backward due to DST, ambiguous times may arise.\n    For example in Central European Time (UTC+01), when going from\n    03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n    00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n    `ambiguous` parameter dictates how ambiguous times should be\n    handled.\n\n    - 'infer' will attempt to infer fall dst-transition hours based on\n      order\n    - bool-ndarray where True signifies a DST time, False signifies a\n      non-DST time (note that this flag is only applicable for\n      ambiguous times)\n    - 'NaT' will return NaT where there are ambiguous times\n    - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n      times\n\nnonexistent : 'shift_forward', 'shift_backward, 'NaT', timedelta, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST.\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times\n\n    .. versionadded:: 0.24.0\n\nerrors : {'raise', 'coerce'}, default None\n\n    - 'raise' will raise a NonExistentTimeError if a timestamp is not\n      valid in the specified time zone (e.g. due to a transition from\n      or to DST time). Use ``nonexistent='raise'`` instead.\n    - 'coerce' will return NaT if the timestamp can not be converted\n      to the specified time zone. Use ``nonexistent='NaT'`` instead.\n\n    .. deprecated:: 0.24.0\n\nReturns\n-------\nSame type as self\n    Array/Index converted to the specified time zone.\n\nRaises\n------\nTypeError\n    If the Datetime Array/Index is tz-aware and tz is not None.\n\nSee Also\n--------\nDatetimeIndex.tz_convert : Convert tz-aware DatetimeIndex from\n    one time zone to another.\n\nExamples\n--------\n>>> tz_naive = pd.date_range('2018-03-01 09:00', periods=3)\n>>> tz_naive\nDatetimeIndex(['2018-03-01 09:00:00', '2018-03-02 09:00:00',\n               '2018-03-03 09:00:00'],\n              dtype='datetime64[ns]', freq='D')\n\nLocalize DatetimeIndex in US/Eastern time zone:\n\n>>> tz_aware = tz_naive.tz_localize(tz='US/Eastern')\n>>> tz_aware\nDatetimeIndex(['2018-03-01 09:00:00-05:00',\n               '2018-03-02 09:00:00-05:00',\n               '2018-03-03 09:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq='D')\n\nWith the ``tz=None``, we can remove the time zone information\nwhile keeping the local time (not converted to UTC):\n\n>>> tz_aware.tz_localize(None)\nDatetimeIndex(['2018-03-01 09:00:00', '2018-03-02 09:00:00',\n               '2018-03-03 09:00:00'],\n              dtype='datetime64[ns]', freq='D')\n\nBe careful with DST changes. When there is sequential data, pandas can\ninfer the DST time:\n>>> s = pd.to_datetime(pd.Series(['2018-10-28 01:30:00',\n...                               '2018-10-28 02:00:00',\n...                               '2018-10-28 02:30:00',\n...                               '2018-10-28 02:00:00',\n...                               '2018-10-28 02:30:00',\n...                               '2018-10-28 03:00:00',\n...                               '2018-10-28 03:30:00']))\n>>> s.dt.tz_localize('CET', ambiguous='infer')\n0   2018-10-28 01:30:00+02:00\n1   2018-10-28 02:00:00+02:00\n2   2018-10-28 02:30:00+02:00\n3   2018-10-28 02:00:00+01:00\n4   2018-10-28 02:30:00+01:00\n5   2018-10-28 03:00:00+01:00\n6   2018-10-28 03:30:00+01:00\ndtype: datetime64[ns, CET]\n\nIn some cases, inferring the DST is impossible. In such cases, you can\npass an ndarray to the ambiguous parameter to set the DST explicitly\n\n>>> s = pd.to_datetime(pd.Series(['2018-10-28 01:20:00',\n...                               '2018-10-28 02:36:00',\n...                               '2018-10-28 03:46:00']))\n>>> s.dt.tz_localize('CET', ambiguous=np.array([True, True, False]))\n0   2015-03-29 03:00:00+02:00\n1   2015-03-29 03:30:00+02:00\ndtype: datetime64[ns, Europe/Warsaw]\n\nIf the DST transition causes nonexistent times, you can shift these\ndates forward or backwards with a timedelta object or `'shift_forward'`\nor `'shift_backwards'`.\n>>> s = pd.to_datetime(pd.Series(['2015-03-29 02:30:00',\n...                               '2015-03-29 03:30:00']))\n>>> s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\n0   2015-03-29 03:00:00+02:00\n1   2015-03-29 03:30:00+02:00\ndtype: datetime64[ns, 'Europe/Warsaw']\n>>> s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\n0   2015-03-29 01:59:59.999999999+01:00\n1   2015-03-29 03:30:00+02:00\ndtype: datetime64[ns, 'Europe/Warsaw']\n>>> s.dt.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1H'))\n0   2015-03-29 03:30:00+02:00\n1   2015-03-29 03:30:00+02:00\ndtype: datetime64[ns, 'Europe/Warsaw']", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {tz, ambiguous, errors, nonexistent}"], ["PR09", "Parameter \"ambiguous\" description should finish with \".\""], ["PR09", "Parameter \"nonexistent\" description should finish with \".\""], ["PR08", "Parameter \"errors\" description should start with a capital letter"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 123, in pandas.Series.dt.tz_localize\nFailed example:\n    s.dt.tz_localize('CET', ambiguous=np.array([True, True, False]))\nExpected:\n    0   2015-03-29 03:00:00+02:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, Europe/Warsaw]\nGot:\n    0   2018-10-28 01:20:00+02:00\n    1   2018-10-28 02:36:00+02:00\n    2   2018-10-28 03:46:00+01:00\n    dtype: datetime64[ns, CET]\n**********************************************************************\nLine 133, in pandas.Series.dt.tz_localize\nFailed example:\n    s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\nExpected:\n    0   2015-03-29 03:00:00+02:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, 'Europe/Warsaw']\nGot:\n    0   2015-03-29 03:00:00+02:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, Europe/Warsaw]\n**********************************************************************\nLine 137, in pandas.Series.dt.tz_localize\nFailed example:\n    s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\nExpected:\n    0   2015-03-29 01:59:59.999999999+01:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, 'Europe/Warsaw']\nGot:\n    0   2015-03-29 01:59:59.999999999+01:00\n    1             2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, Europe/Warsaw]\n**********************************************************************\nLine 141, in pandas.Series.dt.tz_localize\nFailed example:\n    s.dt.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1H'))\nExpected:\n    0   2015-03-29 03:30:00+02:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, 'Europe/Warsaw']\nGot:\n    0   2015-03-29 03:30:00+02:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, Europe/Warsaw]\n"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 123, in pandas.Series.dt.tz_localize\nFailed example:\n    s.dt.tz_localize('CET', ambiguous=np.array([True, True, False]))\nExpected:\n    0   2015-03-29 03:00:00+02:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, Europe/Warsaw]\nGot:\n    0   2018-10-28 01:20:00+02:00\n    1   2018-10-28 02:36:00+02:00\n    2   2018-10-28 03:46:00+01:00\n    dtype: datetime64[ns, CET]\n**********************************************************************\nLine 133, in pandas.Series.dt.tz_localize\nFailed example:\n    s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\nExpected:\n    0   2015-03-29 03:00:00+02:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, 'Europe/Warsaw']\nGot:\n    0   2015-03-29 03:00:00+02:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, Europe/Warsaw]\n**********************************************************************\nLine 137, in pandas.Series.dt.tz_localize\nFailed example:\n    s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\nExpected:\n    0   2015-03-29 01:59:59.999999999+01:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, 'Europe/Warsaw']\nGot:\n    0   2015-03-29 01:59:59.999999999+01:00\n    1             2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, Europe/Warsaw]\n**********************************************************************\nLine 141, in pandas.Series.dt.tz_localize\nFailed example:\n    s.dt.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1H'))\nExpected:\n    0   2015-03-29 03:30:00+02:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, 'Europe/Warsaw']\nGot:\n    0   2015-03-29 03:30:00+02:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, Europe/Warsaw]\n", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.to_period"}, "pandas.Series.dt.tz_convert": {"type": "function", "docstring": "Convert tz-aware Datetime Array/Index from one time zone to another.\n\nParameters\n----------\ntz : str, pytz.timezone, dateutil.tz.tzfile or None\n    Time zone for time. Corresponding timestamps would be converted\n    to this time zone of the Datetime Array/Index. A `tz` of None will\n    convert to UTC and remove the timezone information.\n\nReturns\n-------\nArray or Index\n\nRaises\n------\nTypeError\n    If Datetime Array/Index is tz-naive.\n\nSee Also\n--------\nDatetimeIndex.tz : A timezone that has a variable offset from UTC.\nDatetimeIndex.tz_localize : Localize tz-naive DatetimeIndex to a\n    given time zone, or remove timezone from a tz-aware DatetimeIndex.\n\nExamples\n--------\nWith the `tz` parameter, we can change the DatetimeIndex\nto other time zones:\n\n>>> dti = pd.date_range(start='2014-08-01 09:00',\n...                     freq='H', periods=3, tz='Europe/Berlin')\n\n>>> dti\nDatetimeIndex(['2014-08-01 09:00:00+02:00',\n               '2014-08-01 10:00:00+02:00',\n               '2014-08-01 11:00:00+02:00'],\n              dtype='datetime64[ns, Europe/Berlin]', freq='H')\n\n>>> dti.tz_convert('US/Central')\nDatetimeIndex(['2014-08-01 02:00:00-05:00',\n               '2014-08-01 03:00:00-05:00',\n               '2014-08-01 04:00:00-05:00'],\n              dtype='datetime64[ns, US/Central]', freq='H')\n\nWith the ``tz=None``, we can remove the timezone (after converting\nto UTC if necessary):\n\n>>> dti = pd.date_range(start='2014-08-01 09:00', freq='H',\n...                     periods=3, tz='Europe/Berlin')\n\n>>> dti\nDatetimeIndex(['2014-08-01 09:00:00+02:00',\n               '2014-08-01 10:00:00+02:00',\n               '2014-08-01 11:00:00+02:00'],\n                dtype='datetime64[ns, Europe/Berlin]', freq='H')\n\n>>> dti.tz_convert(None)\nDatetimeIndex(['2014-08-01 07:00:00',\n               '2014-08-01 08:00:00',\n               '2014-08-01 09:00:00'],\n                dtype='datetime64[ns]', freq='H')", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {tz}"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.tz_localize"}, "pandas.Series.dt.normalize": {"type": "function", "docstring": "Convert times to midnight.\n\nThe time component of the date-time is converted to midnight i.e.\n00:00:00. This is useful in cases, when the time does not matter.\nLength is unaltered. The timezones are unaffected.\n\nThis method is available on Series with datetime values under\nthe ``.dt`` accessor, and directly on Datetime Array/Index.\n\nReturns\n-------\nDatetimeArray, DatetimeIndex or Series\n    The same type as the original data. Series will have the same\n    name and index. DatetimeIndex will have the same name.\n\nSee Also\n--------\nfloor : Floor the datetimes to the specified freq.\nceil : Ceil the datetimes to the specified freq.\nround : Round the datetimes to the specified freq.\n\nExamples\n--------\n>>> idx = pd.date_range(start='2014-08-01 10:00', freq='H',\n...                     periods=3, tz='Asia/Calcutta')\n>>> idx\nDatetimeIndex(['2014-08-01 10:00:00+05:30',\n               '2014-08-01 11:00:00+05:30',\n               '2014-08-01 12:00:00+05:30'],\n                dtype='datetime64[ns, Asia/Calcutta]', freq='H')\n>>> idx.normalize()\nDatetimeIndex(['2014-08-01 00:00:00+05:30',\n               '2014-08-01 00:00:00+05:30',\n               '2014-08-01 00:00:00+05:30'],\n               dtype='datetime64[ns, Asia/Calcutta]', freq=None)", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.tz_convert"}, "pandas.Series.dt.strftime": {"type": "function", "docstring": "Convert to Index using specified date_format.\n\nReturn an Index of formatted strings specified by date_format, which\nsupports the same string format as the python standard library. Details\nof the string format can be found in `python string format\ndoc <https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior>`__.\n\nParameters\n----------\ndate_format : str\n    Date format string (e.g. \"%Y-%m-%d\").\n\nReturns\n-------\nndarray\n    NumPy ndarray of formatted strings.\n\nSee Also\n--------\nto_datetime : Convert the given argument to datetime.\nDatetimeIndex.normalize : Return DatetimeIndex with times to midnight.\nDatetimeIndex.round : Round the DatetimeIndex to the specified freq.\nDatetimeIndex.floor : Floor the DatetimeIndex to the specified freq.\n\nExamples\n--------\n>>> rng = pd.date_range(pd.Timestamp(\"2018-03-10 09:00\"),\n...                     periods=3, freq='s')\n>>> rng.strftime('%B %d, %Y, %r')\nIndex(['March 10, 2018, 09:00:00 AM', 'March 10, 2018, 09:00:01 AM',\n       'March 10, 2018, 09:00:02 AM'],\n      dtype='object')", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {date_format}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.normalize"}, "pandas.Series.dt.round": {"type": "function", "docstring": "Perform round operation on the data to the specified `freq`.\n\nParameters\n----------\nfreq : str or Offset\n    The frequency level to round the index to. Must be a fixed\n    frequency like 'S' (second) not 'ME' (month end). See\n    :ref:`frequency aliases <timeseries.offset_aliases>` for\n    a list of possible `freq` values.\nambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n    Only relevant for DatetimeIndex:\n\n    - 'infer' will attempt to infer fall dst-transition hours based on\n      order\n    - bool-ndarray where True signifies a DST time, False designates\n      a non-DST time (note that this flag is only applicable for\n      ambiguous times)\n    - 'NaT' will return NaT where there are ambiguous times\n    - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n      times\n\n    .. versionadded:: 0.24.0\n\nnonexistent : 'shift_forward', 'shift_backward', 'NaT', timedelta, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST.\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nDatetimeIndex, TimedeltaIndex, or Series\n    Index of the same type for a DatetimeIndex or TimedeltaIndex,\n    or a Series with the same index for a Series.\n\nRaises\n------\nValueError if the `freq` cannot be converted.\n\nExamples\n--------\n**DatetimeIndex**\n\n>>> rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\n>>> rng\nDatetimeIndex(['2018-01-01 11:59:00', '2018-01-01 12:00:00',\n               '2018-01-01 12:01:00'],\n              dtype='datetime64[ns]', freq='T')\n>>> rng.round('H')\nDatetimeIndex(['2018-01-01 12:00:00', '2018-01-01 12:00:00',\n               '2018-01-01 12:00:00'],\n              dtype='datetime64[ns]', freq=None)\n\n**Series**\n\n>>> pd.Series(rng).dt.round(\"H\")\n0   2018-01-01 12:00:00\n1   2018-01-01 12:00:00\n2   2018-01-01 12:00:00\ndtype: datetime64[ns]", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {ambiguous, freq, nonexistent}"], ["PR09", "Parameter \"ambiguous\" description should finish with \".\""], ["PR09", "Parameter \"nonexistent\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.strftime"}, "pandas.Series.dt.floor": {"type": "function", "docstring": "Perform floor operation on the data to the specified `freq`.\n\nParameters\n----------\nfreq : str or Offset\n    The frequency level to floor the index to. Must be a fixed\n    frequency like 'S' (second) not 'ME' (month end). See\n    :ref:`frequency aliases <timeseries.offset_aliases>` for\n    a list of possible `freq` values.\nambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n    Only relevant for DatetimeIndex:\n\n    - 'infer' will attempt to infer fall dst-transition hours based on\n      order\n    - bool-ndarray where True signifies a DST time, False designates\n      a non-DST time (note that this flag is only applicable for\n      ambiguous times)\n    - 'NaT' will return NaT where there are ambiguous times\n    - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n      times\n\n    .. versionadded:: 0.24.0\n\nnonexistent : 'shift_forward', 'shift_backward', 'NaT', timedelta, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST.\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nDatetimeIndex, TimedeltaIndex, or Series\n    Index of the same type for a DatetimeIndex or TimedeltaIndex,\n    or a Series with the same index for a Series.\n\nRaises\n------\nValueError if the `freq` cannot be converted.\n\nExamples\n--------\n**DatetimeIndex**\n\n>>> rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\n>>> rng\nDatetimeIndex(['2018-01-01 11:59:00', '2018-01-01 12:00:00',\n               '2018-01-01 12:01:00'],\n              dtype='datetime64[ns]', freq='T')\n>>> rng.floor('H')\nDatetimeIndex(['2018-01-01 11:00:00', '2018-01-01 12:00:00',\n               '2018-01-01 12:00:00'],\n              dtype='datetime64[ns]', freq=None)\n\n**Series**\n\n>>> pd.Series(rng).dt.floor(\"H\")\n0   2018-01-01 11:00:00\n1   2018-01-01 12:00:00\n2   2018-01-01 12:00:00\ndtype: datetime64[ns]", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {ambiguous, freq, nonexistent}"], ["PR09", "Parameter \"ambiguous\" description should finish with \".\""], ["PR09", "Parameter \"nonexistent\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.round"}, "pandas.Series.dt.ceil": {"type": "function", "docstring": "Perform ceil operation on the data to the specified `freq`.\n\nParameters\n----------\nfreq : str or Offset\n    The frequency level to ceil the index to. Must be a fixed\n    frequency like 'S' (second) not 'ME' (month end). See\n    :ref:`frequency aliases <timeseries.offset_aliases>` for\n    a list of possible `freq` values.\nambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n    Only relevant for DatetimeIndex:\n\n    - 'infer' will attempt to infer fall dst-transition hours based on\n      order\n    - bool-ndarray where True signifies a DST time, False designates\n      a non-DST time (note that this flag is only applicable for\n      ambiguous times)\n    - 'NaT' will return NaT where there are ambiguous times\n    - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n      times\n\n    .. versionadded:: 0.24.0\n\nnonexistent : 'shift_forward', 'shift_backward', 'NaT', timedelta, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST.\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nDatetimeIndex, TimedeltaIndex, or Series\n    Index of the same type for a DatetimeIndex or TimedeltaIndex,\n    or a Series with the same index for a Series.\n\nRaises\n------\nValueError if the `freq` cannot be converted.\n\nExamples\n--------\n**DatetimeIndex**\n\n>>> rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\n>>> rng\nDatetimeIndex(['2018-01-01 11:59:00', '2018-01-01 12:00:00',\n               '2018-01-01 12:01:00'],\n              dtype='datetime64[ns]', freq='T')\n>>> rng.ceil('H')\nDatetimeIndex(['2018-01-01 12:00:00', '2018-01-01 12:00:00',\n               '2018-01-01 13:00:00'],\n              dtype='datetime64[ns]', freq=None)\n\n**Series**\n\n>>> pd.Series(rng).dt.ceil(\"H\")\n0   2018-01-01 12:00:00\n1   2018-01-01 12:00:00\n2   2018-01-01 13:00:00\ndtype: datetime64[ns]", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {ambiguous, freq, nonexistent}"], ["PR09", "Parameter \"ambiguous\" description should finish with \".\""], ["PR09", "Parameter \"nonexistent\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.floor"}, "pandas.Series.dt.month_name": {"type": "function", "docstring": "Return the month names of the DateTimeIndex with specified locale.\n\n.. versionadded:: 0.23.0\n\nParameters\n----------\nlocale : str, optional\n    Locale determining the language in which to return the month name.\n    Default is English locale.\n\nReturns\n-------\nIndex\n    Index of month names.\n\nExamples\n--------\n>>> idx = pd.date_range(start='2018-01', freq='M', periods=3)\n>>> idx\nDatetimeIndex(['2018-01-31', '2018-02-28', '2018-03-31'],\n              dtype='datetime64[ns]', freq='M')\n>>> idx.month_name()\nIndex(['January', 'February', 'March'], dtype='object')", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {locale}"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.ceil"}, "pandas.Series.dt.day_name": {"type": "function", "docstring": "Return the day names of the DateTimeIndex with specified locale.\n\n.. versionadded:: 0.23.0\n\nParameters\n----------\nlocale : str, optional\n    Locale determining the language in which to return the day name.\n    Default is English locale.\n\nReturns\n-------\nIndex\n    Index of day names.\n\nExamples\n--------\n>>> idx = pd.date_range(start='2018-01-01', freq='D', periods=3)\n>>> idx\nDatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03'],\n              dtype='datetime64[ns]', freq='D')\n>>> idx.day_name()\nIndex(['Monday', 'Tuesday', 'Wednesday'], dtype='object')", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {locale}"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.month_name"}, "pandas.Series.dt.qyear": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.tz"}, "pandas.Series.dt.start_time": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.qyear"}, "pandas.Series.dt.end_time": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.start_time"}, "pandas.Series.dt.days": {"type": "property", "docstring": "Number of days for each element.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.end_time"}, "pandas.Series.dt.seconds": {"type": "property", "docstring": "Number of seconds (>= 0 and less than 1 day) for each element.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.days"}, "pandas.Series.dt.microseconds": {"type": "property", "docstring": "Number of microseconds (>= 0 and less than 1 second) for each element.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.seconds"}, "pandas.Series.dt.nanoseconds": {"type": "property", "docstring": "Number of nanoseconds (>= 0 and less than 1 microsecond) for each element.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.microseconds"}, "pandas.Series.dt.components": {"type": "property", "docstring": "Return a Dataframe of the components of the Timedeltas.\n\nReturns\n-------\nDataFrame\n\nExamples\n--------\n>>> s = pd.Series(pd.to_timedelta(np.arange(5), unit='s'))\n>>> s\n0   00:00:00\n1   00:00:01\n2   00:00:02\n3   00:00:03\n4   00:00:04\ndtype: timedelta64[ns]\n>>> s.dt.components\n   days  hours  minutes  seconds  milliseconds  microseconds  nanoseconds\n0     0      0        0        0             0             0            0\n1     0      0        0        1             0             0            0\n2     0      0        0        2             0             0            0\n3     0      0        0        3             0             0            0\n4     0      0        0        4             0             0            0", "deprecated": false, "file": "pandas/core/indexes/accessors.py", "file_line": 254, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/accessors.py#L254", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": ""}, "pandas.Series.dt.to_pytimedelta": {"type": "function", "docstring": "Return an array of native `datetime.timedelta` objects.\n\nPython's standard `datetime` library uses a different representation\ntimedelta's. This method converts a Series of pandas Timedeltas\nto `datetime.timedelta` format with the same length as the original\nSeries.\n\nReturns\n-------\na : numpy.ndarray\n    Array of 1D containing data with `datetime.timedelta` type.\n\nSee Also\n--------\ndatetime.timedelta\n\nExamples\n--------\n>>> s = pd.Series(pd.to_timedelta(np.arange(5), unit='d'))\n>>> s\n0   0 days\n1   1 days\n2   2 days\n3   3 days\n4   4 days\ndtype: timedelta64[ns]\n\n>>> s.dt.to_pytimedelta()\narray([datetime.timedelta(0), datetime.timedelta(1),\n       datetime.timedelta(2), datetime.timedelta(3),\n       datetime.timedelta(4)], dtype=object)", "deprecated": false, "file": "pandas/core/indexes/accessors.py", "file_line": 218, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/accessors.py#L218", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["SA04", "Missing description for See Also \"datetime.timedelta\" reference"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 29, in pandas.Series.dt.to_pytimedelta\nFailed example:\n    s.dt.to_pytimedelta()\nExpected:\n    array([datetime.timedelta(0), datetime.timedelta(1),\n           datetime.timedelta(2), datetime.timedelta(3),\n           datetime.timedelta(4)], dtype=object)\nGot:\n    array([datetime.timedelta(0), datetime.timedelta(days=1),\n           datetime.timedelta(days=2), datetime.timedelta(days=3),\n           datetime.timedelta(days=4)], dtype=object)\n"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 29, in pandas.Series.dt.to_pytimedelta\nFailed example:\n    s.dt.to_pytimedelta()\nExpected:\n    array([datetime.timedelta(0), datetime.timedelta(1),\n           datetime.timedelta(2), datetime.timedelta(3),\n           datetime.timedelta(4)], dtype=object)\nGot:\n    array([datetime.timedelta(0), datetime.timedelta(days=1),\n           datetime.timedelta(days=2), datetime.timedelta(days=3),\n           datetime.timedelta(days=4)], dtype=object)\n", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": ""}, "pandas.Series.dt.total_seconds": {"type": "function", "docstring": "Return total duration of each element expressed in seconds.\n\nThis method is available directly on TimedeltaArray, TimedeltaIndex\nand on Series containing timedelta values under the ``.dt`` namespace.\n\nReturns\n-------\nseconds : [ndarray, Float64Index, Series]\n    When the calling object is a TimedeltaArray, the return type\n    is ndarray.  When the calling object is a TimedeltaIndex,\n    the return type is a Float64Index. When the calling object\n    is a Series, the return type is Series of type `float64` whose\n    index is the same as the original.\n\nSee Also\n--------\ndatetime.timedelta.total_seconds : Standard library version\n    of this method.\nTimedeltaIndex.components : Return a DataFrame with components of\n    each Timedelta.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series(pd.to_timedelta(np.arange(5), unit='d'))\n>>> s\n0   0 days\n1   1 days\n2   2 days\n3   3 days\n4   4 days\ndtype: timedelta64[ns]\n\n>>> s.dt.total_seconds()\n0         0.0\n1     86400.0\n2    172800.0\n3    259200.0\n4    345600.0\ndtype: float64\n\n**TimedeltaIndex**\n\n>>> idx = pd.to_timedelta(np.arange(5), unit='d')\n>>> idx\nTimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days'],\n               dtype='timedelta64[ns]', freq=None)\n\n>>> idx.total_seconds()\nFloat64Index([0.0, 86400.0, 172800.0, 259200.00000000003, 345600.0],\n             dtype='float64')", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Datetimelike properties", "shared_code_with": "pandas.Series.dt.day_name"}, "pandas.Series.str.capitalize": {"type": "function", "docstring": "Convert strings in the Series/Index to be capitalized.\n\nEquivalent to :meth:`str.capitalize`.\n\nReturns\n-------\nSeries/Index of objects\n\nSee Also\n--------\nSeries.str.lower : Converts all characters to lowercase.\nSeries.str.upper : Converts all characters to uppercase.\nSeries.str.title : Converts first character of each word to uppercase and\n    remaining to lowercase.\nSeries.str.capitalize : Converts first character to uppercase and\n    remaining to lowercase.\nSeries.str.swapcase : Converts uppercase to lowercase and lowercase to\n    uppercase.\nSeries.str.casefold: Removes all case distinctions in the string.\n\nExamples\n--------\n>>> s = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])\n>>> s\n0                 lower\n1              CAPITALS\n2    this is a sentence\n3              SwApCaSe\ndtype: object\n\n>>> s.str.lower()\n0                 lower\n1              capitals\n2    this is a sentence\n3              swapcase\ndtype: object\n\n>>> s.str.upper()\n0                 LOWER\n1              CAPITALS\n2    THIS IS A SENTENCE\n3              SWAPCASE\ndtype: object\n\n>>> s.str.title()\n0                 Lower\n1              Capitals\n2    This Is A Sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.capitalize()\n0                 Lower\n1              Capitals\n2    This is a sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.swapcase()\n0                 LOWER\n1              capitals\n2    THIS IS A SENTENCE\n3              sWaPcAsE\ndtype: object", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 1862, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L1862", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.casefold": {"type": "function", "docstring": "Convert strings in the Series/Index to be casefolded.\n\n.. versionadded:: 0.25.0\n\nEquivalent to :meth:`str.casefold`.\n\nReturns\n-------\nSeries/Index of objects\n\nSee Also\n--------\nSeries.str.lower : Converts all characters to lowercase.\nSeries.str.upper : Converts all characters to uppercase.\nSeries.str.title : Converts first character of each word to uppercase and\n    remaining to lowercase.\nSeries.str.capitalize : Converts first character to uppercase and\n    remaining to lowercase.\nSeries.str.swapcase : Converts uppercase to lowercase and lowercase to\n    uppercase.\nSeries.str.casefold: Removes all case distinctions in the string.\n\nExamples\n--------\n>>> s = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])\n>>> s\n0                 lower\n1              CAPITALS\n2    this is a sentence\n3              SwApCaSe\ndtype: object\n\n>>> s.str.lower()\n0                 lower\n1              capitals\n2    this is a sentence\n3              swapcase\ndtype: object\n\n>>> s.str.upper()\n0                 LOWER\n1              CAPITALS\n2    THIS IS A SENTENCE\n3              SWAPCASE\ndtype: object\n\n>>> s.str.title()\n0                 Lower\n1              Capitals\n2    This Is A Sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.capitalize()\n0                 Lower\n1              Capitals\n2    This is a sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.swapcase()\n0                 LOWER\n1              capitals\n2    THIS IS A SENTENCE\n3              sWaPcAsE\ndtype: object", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 1862, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L1862", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": "pandas.Series.str.capitalize"}, "pandas.Series.str.cat": {"type": "function", "docstring": "Concatenate strings in the Series/Index with given separator.\n\nIf `others` is specified, this function concatenates the Series/Index\nand elements of `others` element-wise.\nIf `others` is not passed, then all values in the Series/Index are\nconcatenated into a single string with a given `sep`.\n\nParameters\n----------\nothers : Series, Index, DataFrame, np.ndarray or list-like\n    Series, Index, DataFrame, np.ndarray (one- or two-dimensional) and\n    other list-likes of strings must have the same length as the\n    calling Series/Index, with the exception of indexed objects (i.e.\n    Series/Index/DataFrame) if `join` is not None.\n\n    If others is a list-like that contains a combination of Series,\n    Index or np.ndarray (1-dim), then all elements will be unpacked and\n    must satisfy the above criteria individually.\n\n    If others is None, the method returns the concatenation of all\n    strings in the calling Series/Index.\nsep : str, default ''\n    The separator between the different elements/columns. By default\n    the empty string `''` is used.\nna_rep : str or None, default None\n    Representation that is inserted for all missing values:\n\n    - If `na_rep` is None, and `others` is None, missing values in the\n      Series/Index are omitted from the result.\n    - If `na_rep` is None, and `others` is not None, a row containing a\n      missing value in any of the columns (before concatenation) will\n      have a missing value in the result.\njoin : {'left', 'right', 'outer', 'inner'}, default 'left'\n    Determines the join-style between the calling Series/Index and any\n    Series/Index/DataFrame in `others` (objects without an index need\n    to match the length of the calling Series/Index). To disable\n    alignment, use `.values` on any Series/Index/DataFrame in `others`.\n\n    .. versionadded:: 0.23.0\n    .. versionchanged:: 1.0.0\n        Changed default of `join` from None to `'left'`.\n\nReturns\n-------\nstr, Series or Index\n    If `others` is None, `str` is returned, otherwise a `Series/Index`\n    (same type as caller) of objects is returned.\n\nSee Also\n--------\nsplit : Split each string in the Series/Index.\njoin : Join lists contained as elements in the Series/Index.\n\nExamples\n--------\nWhen not passing `others`, all values are concatenated into a single\nstring:\n\n>>> s = pd.Series(['a', 'b', np.nan, 'd'])\n>>> s.str.cat(sep=' ')\n'a b d'\n\nBy default, NA values in the Series are ignored. Using `na_rep`, they\ncan be given a representation:\n\n>>> s.str.cat(sep=' ', na_rep='?')\n'a b ? d'\n\nIf `others` is specified, corresponding values are concatenated with\nthe separator. Result will be a Series of strings.\n\n>>> s.str.cat(['A', 'B', 'C', 'D'], sep=',')\n0    a,A\n1    b,B\n2    NaN\n3    d,D\ndtype: object\n\nMissing values will remain missing in the result, but can again be\nrepresented using `na_rep`\n\n>>> s.str.cat(['A', 'B', 'C', 'D'], sep=',', na_rep='-')\n0    a,A\n1    b,B\n2    -,C\n3    d,D\ndtype: object\n\nIf `sep` is not specified, the values are concatenated without\nseparation.\n\n>>> s.str.cat(['A', 'B', 'C', 'D'], na_rep='-')\n0    aA\n1    bB\n2    -C\n3    dD\ndtype: object\n\nSeries with different indexes can be aligned before concatenation. The\n`join`-keyword works as in other methods.\n\n>>> t = pd.Series(['d', 'a', 'e', 'c'], index=[3, 0, 4, 2])\n>>> s.str.cat(t, join='left', na_rep='-')\n0    aa\n1    b-\n2    -c\n3    dd\ndtype: object\n>>>\n>>> s.str.cat(t, join='outer', na_rep='-')\n0    aa\n1    b-\n2    -c\n3    dd\n4    -e\ndtype: object\n>>>\n>>> s.str.cat(t, join='inner', na_rep='-')\n0    aa\n2    -c\n3    dd\ndtype: object\n>>>\n>>> s.str.cat(t, join='right', na_rep='-')\n3    dd\n0    aa\n4    -e\n2    -c\ndtype: object\n\nFor more examples, see :ref:`here <text.concatenate>`.", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2134, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2134", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {na_rep, sep, others, join}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.center": {"type": "function", "docstring": "Filling left and right side of strings in the Series/Index with an\nadditional character. Equivalent to :meth:`str.center`.\n\nParameters\n----------\nwidth : int\n    Minimum width of resulting string; additional characters will be filled\n    with ``fillchar``\nfillchar : str\n    Additional character for filling, default is whitespace\n\nReturns\n-------\nfilled : Series/Index of objects", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2671, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2671", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {width, fillchar}"], ["PR09", "Parameter \"width\" description should finish with \".\""], ["PR09", "Parameter \"fillchar\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.contains": {"type": "function", "docstring": "Test if pattern or regex is contained within a string of a Series or Index.\n\nReturn boolean Series or Index based on whether a given pattern or regex is\ncontained within a string of a Series or Index.\n\nParameters\n----------\npat : str\n    Character sequence or regular expression.\ncase : bool, default True\n    If True, case sensitive.\nflags : int, default 0 (no flags)\n    Flags to pass through to the re module, e.g. re.IGNORECASE.\nna : default NaN\n    Fill value for missing values.\nregex : bool, default True\n    If True, assumes the pat is a regular expression.\n\n    If False, treats the pat as a literal string.\n\nReturns\n-------\nSeries or Index of boolean values\n    A Series or Index of boolean values indicating whether the\n    given pattern is contained within the string of each element\n    of the Series or Index.\n\nSee Also\n--------\nmatch : Analogous, but stricter, relying on re.match instead of re.search.\nSeries.str.startswith : Test if the start of each string element matches a\n    pattern.\nSeries.str.endswith : Same as startswith, but tests the end of string.\n\nExamples\n--------\n\nReturning a Series of booleans using only a literal pattern.\n\n>>> s1 = pd.Series(['Mouse', 'dog', 'house and parrot', '23', np.NaN])\n>>> s1.str.contains('og', regex=False)\n0    False\n1     True\n2    False\n3    False\n4      NaN\ndtype: object\n\nReturning an Index of booleans using only a literal pattern.\n\n>>> ind = pd.Index(['Mouse', 'dog', 'house and parrot', '23.0', np.NaN])\n>>> ind.str.contains('23', regex=False)\nIndex([False, False, False, True, nan], dtype='object')\n\nSpecifying case sensitivity using `case`.\n\n>>> s1.str.contains('oG', case=True, regex=True)\n0    False\n1    False\n2    False\n3    False\n4      NaN\ndtype: object\n\nSpecifying `na` to be `False` instead of `NaN` replaces NaN values\nwith `False`. If Series or Index does not contain NaN values\nthe resultant dtype will be `bool`, otherwise, an `object` dtype.\n\n>>> s1.str.contains('og', na=False, regex=True)\n0    False\n1     True\n2    False\n3    False\n4    False\ndtype: bool\n\nReturning 'house' or 'dog' when either expression occurs in a string.\n\n>>> s1.str.contains('house|dog', regex=True)\n0    False\n1     True\n2     True\n3    False\n4      NaN\ndtype: object\n\nIgnoring case sensitivity using `flags` with regex.\n\n>>> import re\n>>> s1.str.contains('PARROT', flags=re.IGNORECASE, regex=True)\n0    False\n1    False\n2     True\n3    False\n4      NaN\ndtype: object\n\nReturning any digit using regular expression.\n\n>>> s1.str.contains('\\d', regex=True)\n0    False\n1    False\n2    False\n3     True\n4      NaN\ndtype: object\n\nEnsure `pat` is a not a literal pattern when `regex` is set to True.\nNote in the following example one might expect only `s2[1]` and `s2[3]` to\nreturn `True`. However, '.0' as a regex matches any character\nfollowed by a 0.\n\n>>> s2 = pd.Series(['40', '40.0', '41', '41.0', '35'])\n>>> s2.str.contains('.0', regex=True)\n0     True\n1     True\n2    False\n3     True\n4    False\ndtype: bool", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2618, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2618", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {na, regex, pat, case, flags}"], ["EX03", "flake8 error: W605 invalid escape sequence '\\d'"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.count": {"type": "function", "docstring": "Count occurrences of pattern in each string of the Series/Index.\n\nThis function is used to count the number of times a particular regex\npattern is repeated in each of the string elements of the\n:class:`~pandas.Series`.\n\nParameters\n----------\npat : str\n    Valid regular expression.\nflags : int, default 0, meaning no flags\n    Flags for the `re` module. For a complete list, `see here\n    <https://docs.python.org/3/howto/regex.html#compilation-flags>`_.\n**kwargs\n    For compatibility with other string methods. Not used.\n\nReturns\n-------\nSeries or Index\n    Same type as the calling object containing the integer counts.\n\nSee Also\n--------\nre : Standard library module for regular expressions.\nstr.count : Standard library version, without regular expression support.\n\nNotes\n-----\nSome characters need to be escaped when passing in `pat`.\neg. ``'$'`` has a special meaning in regex and must be escaped when\nfinding this literal character.\n\nExamples\n--------\n>>> s = pd.Series(['A', 'B', 'Aaba', 'Baca', np.nan, 'CABA', 'cat'])\n>>> s.str.count('a')\n0    0.0\n1    0.0\n2    2.0\n3    2.0\n4    NaN\n5    0.0\n6    1.0\ndtype: float64\n\nEscape ``'$'`` to find the literal dollar sign.\n\n>>> s = pd.Series(['$', 'B', 'Aab$', '$$ca', 'C$B$', 'cat'])\n>>> s.str.count('\\$')\n0    1\n1    0\n2    1\n3    2\n4    2\n5    0\ndtype: int64\n\nThis is also available on Index\n\n>>> pd.Index(['A', 'A', 'Aaba', 'cat']).str.count('a')\nInt64Index([0, 0, 2, 1], dtype='int64')", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 1884, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L1884", "errors": [["PR01", "Parameters {*args} not documented"], ["PR02", "Unknown parameters {pat, flags}"], ["EX03", "flake8 error: W605 invalid escape sequence '\\$'"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.decode": {"type": "function", "docstring": "Decode character string in the Series/Index using indicated encoding.\nEquivalent to :meth:`str.decode` in python2 and :meth:`bytes.decode` in\npython3.\n\nParameters\n----------\nencoding : str\nerrors : str, optional\n\nReturns\n-------\nSeries or Index", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2761, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2761", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"encoding\" has no description"], ["PR07", "Parameter \"errors\" has no description"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.encode": {"type": "function", "docstring": "Encode character string in the Series/Index using indicated encoding.\nEquivalent to :meth:`str.encode`.\n\nParameters\n----------\nencoding : str\nerrors : str, optional\n\nReturns\n-------\nencoded : Series/Index of objects", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2767, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2767", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {encoding, errors}"], ["PR07", "Parameter \"encoding\" has no description"], ["PR07", "Parameter \"errors\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.endswith": {"type": "function", "docstring": "Test if the end of each string element matches a pattern.\n\nEquivalent to :meth:`str.endswith`.\n\nParameters\n----------\npat : str\n    Character sequence. Regular expressions are not accepted.\nna : object, default NaN\n    Object shown if element tested is not a string.\n\nReturns\n-------\nSeries or Index of bool\n    A Series of booleans indicating whether the given pattern matches\n    the end of each string element.\n\nSee Also\n--------\nstr.endswith : Python standard library string method.\nSeries.str.startswith : Same as endswith, but tests the start of string.\nSeries.str.contains : Tests if string element contains a pattern.\n\nExamples\n--------\n>>> s = pd.Series(['bat', 'bear', 'caT', np.nan])\n>>> s\n0     bat\n1    bear\n2     caT\n3     NaN\ndtype: object\n\n>>> s.str.endswith('t')\n0     True\n1    False\n2    False\n3      NaN\ndtype: object\n\nSpecifying `na` to be `False` instead of `NaN`.\n\n>>> s.str.endswith('t', na=False)\n0     True\n1    False\n2    False\n3    False\ndtype: bool", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 1889, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L1889", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {pat, na}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.extract": {"type": "function", "docstring": "Extract capture groups in the regex `pat` as columns in a DataFrame.\n\nFor each subject string in the Series, extract groups from the\nfirst match of regular expression `pat`.\n\nParameters\n----------\npat : str\n    Regular expression pattern with capturing groups.\nflags : int, default 0 (no flags)\n    Flags from the ``re`` module, e.g. ``re.IGNORECASE``, that\n    modify regular expression matching for things like case,\n    spaces, etc. For more details, see :mod:`re`.\nexpand : bool, default True\n    If True, return DataFrame with one column per capture group.\n    If False, return a Series/Index if there is one capture group\n    or DataFrame if there are multiple capture groups.\n\nReturns\n-------\nDataFrame or Series or Index\n    A DataFrame with one row for each subject string, and one\n    column for each group. Any capture group names in regular\n    expression pat will be used for column names; otherwise\n    capture group numbers will be used. The dtype of each result\n    column is always object, even when no match is found. If\n    ``expand=False`` and pat has only one capture group, then\n    return a Series (if subject is a Series) or Index (if subject\n    is an Index).\n\nSee Also\n--------\nextractall : Returns all matches (not just the first match).\n\nExamples\n--------\nA pattern with two groups will return a DataFrame with two columns.\nNon-matches will be NaN.\n\n>>> s = pd.Series(['a1', 'b2', 'c3'])\n>>> s.str.extract(r'([ab])(\\d)')\n     0    1\n0    a    1\n1    b    2\n2  NaN  NaN\n\nA pattern may contain optional groups.\n\n>>> s.str.extract(r'([ab])?(\\d)')\n     0  1\n0    a  1\n1    b  2\n2  NaN  3\n\nNamed groups will become column names in the result.\n\n>>> s.str.extract(r'(?P<letter>[ab])(?P<digit>\\d)')\n  letter digit\n0      a     1\n1      b     2\n2    NaN   NaN\n\nA pattern with one group will return a DataFrame with one column\nif expand=True.\n\n>>> s.str.extract(r'[ab](\\d)', expand=True)\n     0\n0    1\n1    2\n2  NaN\n\nA pattern with one group will return a Series if expand=False.\n\n>>> s.str.extract(r'[ab](\\d)', expand=False)\n0      1\n1      2\n2    NaN\ndtype: object", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2886, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2886", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {pat, flags, expand}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.extractall": {"type": "function", "docstring": "For each subject string in the Series, extract groups from all\nmatches of regular expression pat. When each subject string in the\nSeries has exactly one match, extractall(pat).xs(0, level='match')\nis the same as extract(pat).\n\nParameters\n----------\npat : str\n    Regular expression pattern with capturing groups.\nflags : int, default 0 (no flags)\n    A ``re`` module flag, for example ``re.IGNORECASE``. These allow\n    to modify regular expression matching for things like case, spaces,\n    etc. Multiple flags can be combined with the bitwise OR operator,\n    for example ``re.IGNORECASE | re.MULTILINE``.\n\nReturns\n-------\nDataFrame\n    A ``DataFrame`` with one row for each match, and one column for each\n    group. Its rows have a ``MultiIndex`` with first levels that come from\n    the subject ``Series``. The last level is named 'match' and indexes the\n    matches in each item of the ``Series``. Any capture group names in\n    regular expression pat will be used for column names; otherwise capture\n    group numbers will be used.\n\nSee Also\n--------\nextract : Returns first match only (not all matches).\n\nExamples\n--------\nA pattern with one group will return a DataFrame with one column.\nIndices with no matches will not appear in the result.\n\n>>> s = pd.Series([\"a1a2\", \"b1\", \"c1\"], index=[\"A\", \"B\", \"C\"])\n>>> s.str.extractall(r\"[ab](\\d)\")\n         0\n  match\nA 0      1\n  1      2\nB 0      1\n\nCapture group names are used for column names of the result.\n\n>>> s.str.extractall(r\"[ab](?P<digit>\\d)\")\n        digit\n  match\nA 0         1\n  1         2\nB 0         1\n\nA pattern with two groups will return a DataFrame with two columns.\n\n>>> s.str.extractall(r\"(?P<letter>[ab])(?P<digit>\\d)\")\n        letter digit\n  match\nA 0          a     1\n  1          a     2\nB 0          b     1\n\nOptional groups that do not match are NaN in the result.\n\n>>> s.str.extractall(r\"(?P<letter>[ab])?(?P<digit>\\d)\")\n        letter digit\n  match\nA 0          a     1\n  1          a     2\nB 0          b     1\nC 0        NaN     1", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2891, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2891", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {pat, flags}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.find": {"type": "function", "docstring": "Return lowest indexes in each strings in the Series/Index\nwhere the substring is fully contained between [start:end].\nReturn -1 on failure. Equivalent to standard :meth:`str.find`.\n\nParameters\n----------\nsub : str\n    Substring being searched\nstart : int\n    Left edge index\nend : int\n    Right edge index\n\nReturns\n-------\nfound : Series/Index of integer values\n\nSee Also\n--------\nrfind : Return highest indexes in each strings.", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2921, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2921", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {start, end, sub}"], ["PR09", "Parameter \"sub\" description should finish with \".\""], ["PR09", "Parameter \"start\" description should finish with \".\""], ["PR09", "Parameter \"end\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.findall": {"type": "function", "docstring": "Find all occurrences of pattern or regular expression in the Series/Index.\n\nEquivalent to applying :func:`re.findall` to all the elements in the\nSeries/Index.\n\nParameters\n----------\npat : str\n    Pattern or regular expression.\nflags : int, default 0\n    Flags from ``re`` module, e.g. `re.IGNORECASE` (default is 0, which\n    means no flags).\n\nReturns\n-------\nSeries/Index of lists of strings\n    All non-overlapping matches of pattern or regular expression in each\n    string of this Series/Index.\n\nSee Also\n--------\ncount : Count occurrences of pattern or regular expression in each string\n    of the Series/Index.\nextractall : For each string in the Series, extract groups from all matches\n    of regular expression and return a DataFrame with one row for each\n    match and one column for each group.\nre.findall : The equivalent ``re`` function to all non-overlapping matches\n    of pattern or regular expression in string, as a list of strings.\n\nExamples\n--------\n\n>>> s = pd.Series(['Lion', 'Monkey', 'Rabbit'])\n\nThe search for the pattern 'Monkey' returns one match:\n\n>>> s.str.findall('Monkey')\n0          []\n1    [Monkey]\n2          []\ndtype: object\n\nOn the other hand, the search for the pattern 'MONKEY' doesn't return any\nmatch:\n\n>>> s.str.findall('MONKEY')\n0    []\n1    []\n2    []\ndtype: object\n\nFlags can be added to the pattern or regular expression. For instance,\nto find the pattern 'MONKEY' ignoring the case:\n\n>>> import re\n>>> s.str.findall('MONKEY', flags=re.IGNORECASE)\n0          []\n1    [Monkey]\n2          []\ndtype: object\n\nWhen the pattern matches more than one string in the Series, all matches\nare returned:\n\n>>> s.str.findall('on')\n0    [on]\n1    [on]\n2      []\ndtype: object\n\nRegular expressions are supported too. For instance, the search for all the\nstrings ending with the word 'on' is shown next:\n\n>>> s.str.findall('on$')\n0    [on]\n1      []\n2      []\ndtype: object\n\nIf the pattern is found more than once in the same string, then a list of\nmultiple strings is returned:\n\n>>> s.str.findall('b')\n0        []\n1        []\n2    [b, b]\ndtype: object", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 1884, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L1884", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {pat, flags}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": "pandas.Series.str.count"}, "pandas.Series.str.get": {"type": "function", "docstring": "Extract element from each component at specified position.\n\nExtract element from lists, tuples, or strings in each element in the\nSeries/Index.\n\nParameters\n----------\ni : int\n    Position of element to extract.\n\nReturns\n-------\nSeries or Index\n\nExamples\n--------\n>>> s = pd.Series([\"String\",\n...               (1, 2, 3),\n...               [\"a\", \"b\", \"c\"],\n...               123,\n...               -456,\n...               {1: \"Hello\", \"2\": \"World\"}])\n>>> s\n0                        String\n1                     (1, 2, 3)\n2                     [a, b, c]\n3                           123\n4                          -456\n5    {1: 'Hello', '2': 'World'}\ndtype: object\n\n>>> s.str.get(1)\n0        t\n1        2\n2        b\n3      NaN\n4      NaN\n5    Hello\ndtype: object\n\n>>> s.str.get(-1)\n0      g\n1      3\n2      c\n3    NaN\n4    NaN\n5    None\ndtype: object", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2607, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2607", "errors": [["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.index": {"type": "function", "docstring": "Return lowest indexes in each strings where the substring is\nfully contained between [start:end]. This is the same as\n``str.find`` except instead of returning -1, it raises a ValueError\nwhen the substring is not found. Equivalent to standard ``str.index``.\n\nParameters\n----------\nsub : str\n    Substring being searched\nstart : int\n    Left edge index\nend : int\n    Right edge index\n\nReturns\n-------\nfound : Series/Index of objects\n\nSee Also\n--------\nrindex : Return highest indexes in each strings.", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2995, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2995", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {start, end, sub}"], ["PR09", "Parameter \"sub\" description should finish with \".\""], ["PR09", "Parameter \"start\" description should finish with \".\""], ["PR09", "Parameter \"end\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.join": {"type": "function", "docstring": "Join lists contained as elements in the Series/Index with passed delimiter.\n\nIf the elements of a Series are lists themselves, join the content of these\nlists using the delimiter passed to the function.\nThis function is an equivalent to :meth:`str.join`.\n\nParameters\n----------\nsep : str\n    Delimiter to use between list entries.\n\nReturns\n-------\nSeries/Index: object\n    The list entries concatenated by intervening occurrences of the\n    delimiter.\n\nRaises\n------\nAttributeError\n    If the supplied Series contains neither strings nor lists.\n\nSee Also\n--------\nstr.join : Standard library version of this method.\nSeries.str.split : Split strings around given separator/delimiter.\n\nNotes\n-----\nIf any of the list items is not a string object, the result of the join\nwill be `NaN`.\n\nExamples\n--------\nExample with a list that contains non-string elements.\n\n>>> s = pd.Series([['lion', 'elephant', 'zebra'],\n...                [1.1, 2.2, 3.3],\n...                ['cat', np.nan, 'dog'],\n...                ['cow', 4.5, 'goat'],\n...                ['duck', ['swan', 'fish'], 'guppy']])\n>>> s\n0        [lion, elephant, zebra]\n1                [1.1, 2.2, 3.3]\n2                [cat, nan, dog]\n3               [cow, 4.5, goat]\n4    [duck, [swan, fish], guppy]\ndtype: object\n\nJoin all lists using a '-'. The lists containing object(s) of types other\nthan str will produce a NaN.\n\n>>> s.str.join('-')\n0    lion-elephant-zebra\n1                    NaN\n2                    NaN\n3                    NaN\n4                    NaN\ndtype: object", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2612, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2612", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {sep}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.len": {"type": "function", "docstring": "Compute the length of each element in the Series/Index. The element may be\na sequence (such as a string, tuple or list) or a collection\n(such as a dictionary).\n\nReturns\n-------\nSeries or Index of int\n    A Series or Index of integer values indicating the length of each\n    element in the Series or Index.\n\nSee Also\n--------\nstr.len : Python built-in function returning the length of an object.\nSeries.size : Returns the length of the Series.\n\nExamples\n--------\nReturns the length (number of characters) in a string. Returns the\nnumber of entries for dictionaries, lists or tuples.\n\n>>> s = pd.Series(['dog',\n...                 '',\n...                 5,\n...                 {'foo' : 'bar'},\n...                 [2, 3, 5, 7],\n...                 ('one', 'two', 'three')])\n>>> s\n0                  dog\n1\n2                    5\n3       {'foo': 'bar'}\n4         [2, 3, 5, 7]\n5    (one, two, three)\ndtype: object\n>>> s.str.len()\n0    3.0\n1    0.0\n2    NaN\n3    1.0\n4    4.0\n5    3.0\ndtype: float64", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 1862, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L1862", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["EX03", "flake8 error: E127 continuation line over-indented for visual indent"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": "pandas.Series.str.casefold"}, "pandas.Series.str.ljust": {"type": "function", "docstring": "Filling right side of strings in the Series/Index with an\nadditional character. Equivalent to :meth:`str.ljust`.\n\nParameters\n----------\nwidth : int\n    Minimum width of resulting string; additional characters will be filled\n    with ``fillchar``\nfillchar : str\n    Additional character for filling, default is whitespace\n\nReturns\n-------\nfilled : Series/Index of objects", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2676, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2676", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {width, fillchar}"], ["PR09", "Parameter \"width\" description should finish with \".\""], ["PR09", "Parameter \"fillchar\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.lower": {"type": "function", "docstring": "Convert strings in the Series/Index to lowercase.\n\nEquivalent to :meth:`str.lower`.\n\nReturns\n-------\nSeries/Index of objects\n\nSee Also\n--------\nSeries.str.lower : Converts all characters to lowercase.\nSeries.str.upper : Converts all characters to uppercase.\nSeries.str.title : Converts first character of each word to uppercase and\n    remaining to lowercase.\nSeries.str.capitalize : Converts first character to uppercase and\n    remaining to lowercase.\nSeries.str.swapcase : Converts uppercase to lowercase and lowercase to\n    uppercase.\nSeries.str.casefold: Removes all case distinctions in the string.\n\nExamples\n--------\n>>> s = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])\n>>> s\n0                 lower\n1              CAPITALS\n2    this is a sentence\n3              SwApCaSe\ndtype: object\n\n>>> s.str.lower()\n0                 lower\n1              capitals\n2    this is a sentence\n3              swapcase\ndtype: object\n\n>>> s.str.upper()\n0                 LOWER\n1              CAPITALS\n2    THIS IS A SENTENCE\n3              SWAPCASE\ndtype: object\n\n>>> s.str.title()\n0                 Lower\n1              Capitals\n2    This Is A Sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.capitalize()\n0                 Lower\n1              Capitals\n2    This is a sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.swapcase()\n0                 LOWER\n1              capitals\n2    THIS IS A SENTENCE\n3              sWaPcAsE\ndtype: object", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 1862, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L1862", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": "pandas.Series.str.len"}, "pandas.Series.str.lstrip": {"type": "function", "docstring": "Remove leading and trailing characters.\n\nStrip whitespaces (including newlines) or a set of specified characters\nfrom each string in the Series/Index from left side.\nEquivalent to :meth:`str.lstrip`.\n\nParameters\n----------\nto_strip : str or None, default None\n    Specifying the set of characters to be removed.\n    All combinations of this set of characters will be stripped.\n    If None then whitespaces are removed.\n\nReturns\n-------\nSeries/Index of objects\n\nSee Also\n--------\nSeries.str.strip : Remove leading and trailing characters in Series/Index.\nSeries.str.lstrip : Remove leading characters in Series/Index.\nSeries.str.rstrip : Remove trailing characters in Series/Index.\n\nExamples\n--------\n>>> s = pd.Series(['1. Ant.  ', '2. Bee!\\n', '3. Cat?\\t', np.nan])\n>>> s\n0    1. Ant.\n1    2. Bee!\\n\n2    3. Cat?\\t\n3          NaN\ndtype: object\n\n>>> s.str.strip()\n0    1. Ant.\n1    2. Bee!\n2    3. Cat?\n3        NaN\ndtype: object\n\n>>> s.str.lstrip('123.')\n0    Ant.\n1    Bee!\\n\n2    Cat?\\t\n3       NaN\ndtype: object\n\n>>> s.str.rstrip('.!? \\n\\t')\n0    1. Ant\n1    2. Bee\n2    3. Cat\n3       NaN\ndtype: object\n\n>>> s.str.strip('123.!? \\n\\t')\n0    Ant\n1    Bee\n2    Cat\n3    NaN\ndtype: object", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2846, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2846", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {to_strip}"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.match": {"type": "function", "docstring": "Determine if each string matches a regular expression.\n\nParameters\n----------\npat : str\n    Character sequence or regular expression.\ncase : bool, default True\n    If True, case sensitive.\nflags : int, default 0 (no flags)\n    re module flags, e.g. re.IGNORECASE.\nna : default NaN\n    Fill value for missing values.\n\nReturns\n-------\nSeries/array of boolean values\n\nSee Also\n--------\ncontains : Analogous, but less strict, relying on re.search instead of\n    re.match.\nextract : Extract matched groups.", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2626, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2626", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {pat, na, case, flags}"], ["PR08", "Parameter \"flags\" description should start with a capital letter"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.normalize": {"type": "function", "docstring": "Return the Unicode normal form for the strings in the Series/Index.\nFor more information on the forms, see the\n:func:`unicodedata.normalize`.\n\nParameters\n----------\nform : {'NFC', 'NFKC', 'NFD', 'NFKD'}\n    Unicode form\n\nReturns\n-------\nnormalized : Series/Index of objects", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2947, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2947", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {form}"], ["PR09", "Parameter \"form\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.pad": {"type": "function", "docstring": "Pad strings in the Series/Index up to width.\n\nParameters\n----------\nwidth : int\n    Minimum width of resulting string; additional characters will be filled\n    with character defined in `fillchar`.\nside : {'left', 'right', 'both'}, default 'left'\n    Side from which to fill resulting string.\nfillchar : str, default ' '\n    Additional character for filling, default is whitespace.\n\nReturns\n-------\nSeries or Index of object\n    Returns Series or Index with minimum number of char in object.\n\nSee Also\n--------\nSeries.str.rjust : Fills the left side of strings with an arbitrary\n    character. Equivalent to ``Series.str.pad(side='left')``.\nSeries.str.ljust : Fills the right side of strings with an arbitrary\n    character. Equivalent to ``Series.str.pad(side='right')``.\nSeries.str.center : Fills boths sides of strings with an arbitrary\n    character. Equivalent to ``Series.str.pad(side='both')``.\nSeries.str.zfill :  Pad strings in the Series/Index by prepending '0'\n    character. Equivalent to ``Series.str.pad(side='left', fillchar='0')``.\n\nExamples\n--------\n>>> s = pd.Series([\"caribou\", \"tiger\"])\n>>> s\n0    caribou\n1      tiger\ndtype: object\n\n>>> s.str.pad(width=10)\n0       caribou\n1         tiger\ndtype: object\n\n>>> s.str.pad(width=10, side='right', fillchar='-')\n0    caribou---\n1    tiger-----\ndtype: object\n\n>>> s.str.pad(width=10, side='both', fillchar='-')\n0    -caribou--\n1    --tiger---\ndtype: object", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2646, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2646", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {width, fillchar, side}"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.partition": {"type": "function", "docstring": "Split the string at the first occurrence of `sep`.\n\nThis method splits the string at the first occurrence of `sep`,\nand returns 3 elements containing the part before the separator,\nthe separator itself, and the part after the separator.\nIf the separator is not found, return 3 elements containing the string itself, followed by two empty strings.\n\nParameters\n----------\nsep : str, default whitespace\n    String to split on.\npat : str, default whitespace\n    .. deprecated:: 0.24.0\n       Use ``sep`` instead\nexpand : bool, default True\n    If True, return DataFrame/MultiIndex expanding dimensionality.\n    If False, return Series/Index.\n\nReturns\n-------\nDataFrame/MultiIndex or Series/Index of objects\n\nSee Also\n--------\nrpartition : Split the string at the last occurrence of `sep`.\nSeries.str.split : Split strings around given separators.\nstr.partition : Standard library version.\n\nExamples\n--------\n\n>>> s = pd.Series(['Linda van der Berg', 'George Pitt-Rivers'])\n>>> s\n0    Linda van der Berg\n1    George Pitt-Rivers\ndtype: object\n\n>>> s.str.partition()\n        0  1             2\n0   Linda     van der Berg\n1  George      Pitt-Rivers\n\nTo partition by the last space instead of the first one:\n\n>>> s.str.rpartition()\n               0  1            2\n0  Linda van der            Berg\n1         George     Pitt-Rivers\n\nTo partition by something different than a space:\n\n>>> s.str.partition('-')\n                    0  1       2\n0  Linda van der Berg\n1         George Pitt  -  Rivers\n\nTo return a Series containing tuples instead of a DataFrame:\n\n>>> s.str.partition('-', expand=False)\n0    (Linda van der Berg, , )\n1    (George Pitt, -, Rivers)\ndtype: object\n\nAlso available on indices:\n\n>>> idx = pd.Index(['X 123', 'Y 999'])\n>>> idx\nIndex(['X 123', 'Y 999'], dtype='object')\n\nWhich will create a MultiIndex:\n\n>>> idx.str.partition()\nMultiIndex([('X', ' ', '123'),\n            ('Y', ' ', '999')],\n           dtype='object')\n\nOr an index with tuples with ``expand=False``:\n\n>>> idx.str.partition(expand=False)\nIndex([('X', ' ', '123'), ('Y', ' ', '999')], dtype='object')", "deprecated": false, "file": "pandas/util/_decorators.py", "file_line": 2575, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/_decorators.py#L2575", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {pat, sep, expand}"], ["PR07", "Parameter \"pat\" has no description"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 73, in pandas.Series.str.partition\nFailed example:\n    idx.str.partition()\nExpected:\n    MultiIndex([('X', ' ', '123'),\n                ('Y', ' ', '999')],\n               dtype='object')\nGot:\n    MultiIndex([('X', ' ', '123'),\n                ('Y', ' ', '999')],\n               )\n"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 73, in pandas.Series.str.partition\nFailed example:\n    idx.str.partition()\nExpected:\n    MultiIndex([('X', ' ', '123'),\n                ('Y', ' ', '999')],\n               dtype='object')\nGot:\n    MultiIndex([('X', ' ', '123'),\n                ('Y', ' ', '999')],\n               )\n", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.repeat": {"type": "function", "docstring": "Duplicate each string in the Series or Index.\n\nParameters\n----------\nrepeats : int or sequence of int\n    Same value for all (int) or different value per (sequence).\n\nReturns\n-------\nSeries or Index of object\n    Series or Index of repeated string objects specified by\n    input parameter repeats.\n\nExamples\n--------\n>>> s = pd.Series(['a', 'b', 'c'])\n>>> s\n0    a\n1    b\n2    c\ndtype: object\n\nSingle int repeats string in Series\n\n>>> s.str.repeat(repeats=2)\n0    aa\n1    bb\n2    cc\ndtype: object\n\nSequence of int repeats corresponding string in Series\n\n>>> s.str.repeat(repeats=[1, 2, 3])\n0      a\n1     bb\n2    ccc\ndtype: object", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2640, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2640", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {repeats}"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.replace": {"type": "function", "docstring": "Replace occurrences of pattern/regex in the Series/Index with\nsome other string. Equivalent to :meth:`str.replace` or\n:func:`re.sub`.\n\nParameters\n----------\npat : str or compiled regex\n    String can be a character sequence or regular expression.\n\n    .. versionadded:: 0.20.0\n        `pat` also accepts a compiled regex.\n\nrepl : str or callable\n    Replacement string or a callable. The callable is passed the regex\n    match object and must return a replacement string to be used.\n    See :func:`re.sub`.\n\n    .. versionadded:: 0.20.0\n        `repl` also accepts a callable.\n\nn : int, default -1 (all)\n    Number of replacements to make from start.\ncase : bool, default None\n    - If True, case sensitive (the default if `pat` is a string)\n    - Set to False for case insensitive\n    - Cannot be set if `pat` is a compiled regex\nflags : int, default 0 (no flags)\n    - re module flags, e.g. re.IGNORECASE\n    - Cannot be set if `pat` is a compiled regex\nregex : bool, default True\n    - If True, assumes the passed-in pattern is a regular expression.\n    - If False, treats the pattern as a literal string\n    - Cannot be set to False if `pat` is a compiled regex or `repl` is\n      a callable.\n\n    .. versionadded:: 0.23.0\n\nReturns\n-------\nSeries or Index of object\n    A copy of the object with all matching occurrences of `pat` replaced by\n    `repl`.\n\nRaises\n------\nValueError\n    * if `regex` is False and `repl` is a callable or `pat` is a compiled\n      regex\n    * if `pat` is a compiled regex and `case` or `flags` is set\n\nNotes\n-----\nWhen `pat` is a compiled regex, all flags should be included in the\ncompiled regex. Use of `case`, `flags`, or `regex=False` with a compiled\nregex will raise an error.\n\nExamples\n--------\nWhen `pat` is a string and `regex` is True (the default), the given `pat`\nis compiled as a regex. When `repl` is a string, it replaces matching\nregex patterns as with :meth:`re.sub`. NaN value(s) in the Series are\nleft as is:\n\n>>> pd.Series(['foo', 'fuz', np.nan]).str.replace('f.', 'ba', regex=True)\n0    bao\n1    baz\n2    NaN\ndtype: object\n\nWhen `pat` is a string and `regex` is False, every `pat` is replaced with\n`repl` as with :meth:`str.replace`:\n\n>>> pd.Series(['f.o', 'fuz', np.nan]).str.replace('f.', 'ba', regex=False)\n0    bao\n1    fuz\n2    NaN\ndtype: object\n\nWhen `repl` is a callable, it is called on every `pat` using\n:func:`re.sub`. The callable should expect one positional argument\n(a regex object) and return a string.\n\nTo get the idea:\n\n>>> pd.Series(['foo', 'fuz', np.nan]).str.replace('f', repr)\n0    <_sre.SRE_Match object; span=(0, 1), match='f'>oo\n1    <_sre.SRE_Match object; span=(0, 1), match='f'>uz\n2                                                  NaN\ndtype: object\n\nReverse every lowercase alphabetic word:\n\n>>> repl = lambda m: m.group(0)[::-1]\n>>> pd.Series(['foo 123', 'bar baz', np.nan]).str.replace(r'[a-z]+', repl)\n0    oof 123\n1    rab zab\n2        NaN\ndtype: object\n\nUsing regex groups (extract second group and swap case):\n\n>>> pat = r\"(?P<one>\\w+) (?P<two>\\w+) (?P<three>\\w+)\"\n>>> repl = lambda m: m.group('two').swapcase()\n>>> pd.Series(['One Two Three', 'Foo Bar Baz']).str.replace(pat, repl)\n0    tWO\n1    bAR\ndtype: object\n\nUsing a compiled regex with flags\n\n>>> import re\n>>> regex_pat = re.compile(r'FUZ', flags=re.IGNORECASE)\n>>> pd.Series(['foo', 'fuz', np.nan]).str.replace(regex_pat, 'bar')\n0    foo\n1    bar\n2    NaN\ndtype: object", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2632, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2632", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {n, regex, pat, repl, case, flags}"], ["PR08", "Parameter \"case\" description should start with a capital letter"], ["PR09", "Parameter \"case\" description should finish with \".\""], ["PR08", "Parameter \"flags\" description should start with a capital letter"], ["PR09", "Parameter \"flags\" description should finish with \".\""], ["PR08", "Parameter \"regex\" description should start with a capital letter"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 86, in pandas.Series.str.replace\nFailed example:\n    pd.Series(['foo', 'fuz', np.nan]).str.replace('f', repr)\nExpected:\n    0    <_sre.SRE_Match object; span=(0, 1), match='f'>oo\n    1    <_sre.SRE_Match object; span=(0, 1), match='f'>uz\n    2                                                  NaN\n    dtype: object\nGot:\n    0    <re.Match object; span=(0, 1), match='f'>oo\n    1    <re.Match object; span=(0, 1), match='f'>uz\n    2                                            NaN\n    dtype: object\n"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 86, in pandas.Series.str.replace\nFailed example:\n    pd.Series(['foo', 'fuz', np.nan]).str.replace('f', repr)\nExpected:\n    0    <_sre.SRE_Match object; span=(0, 1), match='f'>oo\n    1    <_sre.SRE_Match object; span=(0, 1), match='f'>uz\n    2                                                  NaN\n    dtype: object\nGot:\n    0    <re.Match object; span=(0, 1), match='f'>oo\n    1    <re.Match object; span=(0, 1), match='f'>uz\n    2                                            NaN\n    dtype: object\n", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.rfind": {"type": "function", "docstring": "Return highest indexes in each strings in the Series/Index\nwhere the substring is fully contained between [start:end].\nReturn -1 on failure. Equivalent to standard :meth:`str.rfind`.\n\nParameters\n----------\nsub : str\n    Substring being searched\nstart : int\n    Left edge index\nend : int\n    Right edge index\n\nReturns\n-------\nfound : Series/Index of integer values\n\nSee Also\n--------\nfind : Return lowest indexes in each strings.", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2934, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2934", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {start, end, sub}"], ["PR09", "Parameter \"sub\" description should finish with \".\""], ["PR09", "Parameter \"start\" description should finish with \".\""], ["PR09", "Parameter \"end\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.rindex": {"type": "function", "docstring": "Return highest indexes in each strings where the substring is\nfully contained between [start:end]. This is the same as\n``str.rfind`` except instead of returning -1, it raises a ValueError\nwhen the substring is not found. Equivalent to standard ``str.rindex``.\n\nParameters\n----------\nsub : str\n    Substring being searched\nstart : int\n    Left edge index\nend : int\n    Right edge index\n\nReturns\n-------\nfound : Series/Index of objects\n\nSee Also\n--------\nindex : Return lowest indexes in each strings.", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 3009, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L3009", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {start, end, sub}"], ["PR09", "Parameter \"sub\" description should finish with \".\""], ["PR09", "Parameter \"start\" description should finish with \".\""], ["PR09", "Parameter \"end\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.rjust": {"type": "function", "docstring": "Filling left side of strings in the Series/Index with an\nadditional character. Equivalent to :meth:`str.rjust`.\n\nParameters\n----------\nwidth : int\n    Minimum width of resulting string; additional characters will be filled\n    with ``fillchar``\nfillchar : str\n    Additional character for filling, default is whitespace\n\nReturns\n-------\nfilled : Series/Index of objects", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2681, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2681", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {width, fillchar}"], ["PR09", "Parameter \"width\" description should finish with \".\""], ["PR09", "Parameter \"fillchar\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.rpartition": {"type": "function", "docstring": "Split the string at the last occurrence of `sep`.\n\nThis method splits the string at the last occurrence of `sep`,\nand returns 3 elements containing the part before the separator,\nthe separator itself, and the part after the separator.\nIf the separator is not found, return 3 elements containing two empty strings, followed by the string itself.\n\nParameters\n----------\nsep : str, default whitespace\n    String to split on.\npat : str, default whitespace\n    .. deprecated:: 0.24.0\n       Use ``sep`` instead\nexpand : bool, default True\n    If True, return DataFrame/MultiIndex expanding dimensionality.\n    If False, return Series/Index.\n\nReturns\n-------\nDataFrame/MultiIndex or Series/Index of objects\n\nSee Also\n--------\npartition : Split the string at the first occurrence of `sep`.\nSeries.str.split : Split strings around given separators.\nstr.partition : Standard library version.\n\nExamples\n--------\n\n>>> s = pd.Series(['Linda van der Berg', 'George Pitt-Rivers'])\n>>> s\n0    Linda van der Berg\n1    George Pitt-Rivers\ndtype: object\n\n>>> s.str.partition()\n        0  1             2\n0   Linda     van der Berg\n1  George      Pitt-Rivers\n\nTo partition by the last space instead of the first one:\n\n>>> s.str.rpartition()\n               0  1            2\n0  Linda van der            Berg\n1         George     Pitt-Rivers\n\nTo partition by something different than a space:\n\n>>> s.str.partition('-')\n                    0  1       2\n0  Linda van der Berg\n1         George Pitt  -  Rivers\n\nTo return a Series containing tuples instead of a DataFrame:\n\n>>> s.str.partition('-', expand=False)\n0    (Linda van der Berg, , )\n1    (George Pitt, -, Rivers)\ndtype: object\n\nAlso available on indices:\n\n>>> idx = pd.Index(['X 123', 'Y 999'])\n>>> idx\nIndex(['X 123', 'Y 999'], dtype='object')\n\nWhich will create a MultiIndex:\n\n>>> idx.str.partition()\nMultiIndex([('X', ' ', '123'),\n            ('Y', ' ', '999')],\n           dtype='object')\n\nOr an index with tuples with ``expand=False``:\n\n>>> idx.str.partition(expand=False)\nIndex([('X', ' ', '123'), ('Y', ' ', '999')], dtype='object')", "deprecated": false, "file": "pandas/util/_decorators.py", "file_line": 2591, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/_decorators.py#L2591", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {pat, sep, expand}"], ["PR07", "Parameter \"pat\" has no description"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 73, in pandas.Series.str.rpartition\nFailed example:\n    idx.str.partition()\nExpected:\n    MultiIndex([('X', ' ', '123'),\n                ('Y', ' ', '999')],\n               dtype='object')\nGot:\n    MultiIndex([('X', ' ', '123'),\n                ('Y', ' ', '999')],\n               )\n"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 73, in pandas.Series.str.rpartition\nFailed example:\n    idx.str.partition()\nExpected:\n    MultiIndex([('X', ' ', '123'),\n                ('Y', ' ', '999')],\n               dtype='object')\nGot:\n    MultiIndex([('X', ' ', '123'),\n                ('Y', ' ', '999')],\n               )\n", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.rstrip": {"type": "function", "docstring": "Remove leading and trailing characters.\n\nStrip whitespaces (including newlines) or a set of specified characters\nfrom each string in the Series/Index from right side.\nEquivalent to :meth:`str.rstrip`.\n\nParameters\n----------\nto_strip : str or None, default None\n    Specifying the set of characters to be removed.\n    All combinations of this set of characters will be stripped.\n    If None then whitespaces are removed.\n\nReturns\n-------\nSeries/Index of objects\n\nSee Also\n--------\nSeries.str.strip : Remove leading and trailing characters in Series/Index.\nSeries.str.lstrip : Remove leading characters in Series/Index.\nSeries.str.rstrip : Remove trailing characters in Series/Index.\n\nExamples\n--------\n>>> s = pd.Series(['1. Ant.  ', '2. Bee!\\n', '3. Cat?\\t', np.nan])\n>>> s\n0    1. Ant.\n1    2. Bee!\\n\n2    3. Cat?\\t\n3          NaN\ndtype: object\n\n>>> s.str.strip()\n0    1. Ant.\n1    2. Bee!\n2    3. Cat?\n3        NaN\ndtype: object\n\n>>> s.str.lstrip('123.')\n0    Ant.\n1    Bee!\\n\n2    Cat?\\t\n3       NaN\ndtype: object\n\n>>> s.str.rstrip('.!? \\n\\t')\n0    1. Ant\n1    2. Bee\n2    3. Cat\n3       NaN\ndtype: object\n\n>>> s.str.strip('123.!? \\n\\t')\n0    Ant\n1    Bee\n2    Cat\n3    NaN\ndtype: object", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2852, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2852", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {to_strip}"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.slice": {"type": "function", "docstring": "Slice substrings from each element in the Series or Index.\n\nParameters\n----------\nstart : int, optional\n    Start position for slice operation.\nstop : int, optional\n    Stop position for slice operation.\nstep : int, optional\n    Step size for slice operation.\n\nReturns\n-------\nSeries or Index of object\n    Series or Index from sliced substring from original string object.\n\nSee Also\n--------\nSeries.str.slice_replace : Replace a slice with a string.\nSeries.str.get : Return element at position.\n    Equivalent to `Series.str.slice(start=i, stop=i+1)` with `i`\n    being the position.\n\nExamples\n--------\n>>> s = pd.Series([\"koala\", \"fox\", \"chameleon\"])\n>>> s\n0        koala\n1          fox\n2    chameleon\ndtype: object\n\n>>> s.str.slice(start=1)\n0        oala\n1          ox\n2    hameleon\ndtype: object\n\n>>> s.str.slice(start=-1)\n0           a\n1           x\n2           n\ndtype: object\n\n>>> s.str.slice(stop=2)\n0    ko\n1    fo\n2    ch\ndtype: object\n\n>>> s.str.slice(step=2)\n0      kaa\n1       fx\n2    caeen\ndtype: object\n\n>>> s.str.slice(start=0, stop=5, step=3)\n0    kl\n1     f\n2    cm\ndtype: object\n\nEquivalent behaviour to:\n\n>>> s.str[0:5:3]\n0    kl\n1     f\n2    cm\ndtype: object", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2750, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2750", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.slice_replace": {"type": "function", "docstring": "Replace a positional slice of a string with another value.\n\nParameters\n----------\nstart : int, optional\n    Left index position to use for the slice. If not specified (None),\n    the slice is unbounded on the left, i.e. slice from the start\n    of the string.\nstop : int, optional\n    Right index position to use for the slice. If not specified (None),\n    the slice is unbounded on the right, i.e. slice until the\n    end of the string.\nrepl : str, optional\n    String for replacement. If not specified (None), the sliced region\n    is replaced with an empty string.\n\nReturns\n-------\nSeries or Index\n    Same type as the original object.\n\nSee Also\n--------\nSeries.str.slice : Just slicing without replacement.\n\nExamples\n--------\n>>> s = pd.Series(['a', 'ab', 'abc', 'abdc', 'abcde'])\n>>> s\n0        a\n1       ab\n2      abc\n3     abdc\n4    abcde\ndtype: object\n\nSpecify just `start`, meaning replace `start` until the end of the\nstring with `repl`.\n\n>>> s.str.slice_replace(1, repl='X')\n0    aX\n1    aX\n2    aX\n3    aX\n4    aX\ndtype: object\n\nSpecify just `stop`, meaning the start of the string to `stop` is replaced\nwith `repl`, and the rest of the string is included.\n\n>>> s.str.slice_replace(stop=2, repl='X')\n0       X\n1       X\n2      Xc\n3     Xdc\n4    Xcde\ndtype: object\n\nSpecify `start` and `stop`, meaning the slice from `start` to `stop` is\nreplaced with `repl`. Everything before or after `start` and `stop` is\nincluded as is.\n\n>>> s.str.slice_replace(start=1, stop=3, repl='X')\n0      aX\n1      aX\n2      aX\n3     aXc\n4    aXde\ndtype: object", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2755, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2755", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {start, stop, repl}"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.split": {"type": "function", "docstring": "Split strings around given separator/delimiter.\n\nSplits the string in the Series/Index from the beginning,\nat the specified delimiter string. Equivalent to :meth:`str.split`.\n\nParameters\n----------\npat : str, optional\n    String or regular expression to split on.\n    If not specified, split on whitespace.\nn : int, default -1 (all)\n    Limit number of splits in output.\n    ``None``, 0 and -1 will be interpreted as return all splits.\nexpand : bool, default False\n    Expand the splitted strings into separate columns.\n\n    * If ``True``, return DataFrame/MultiIndex expanding dimensionality.\n    * If ``False``, return Series/Index, containing lists of strings.\n\nReturns\n-------\nSeries, Index, DataFrame or MultiIndex\n    Type matches caller unless ``expand=True`` (see Notes).\n\nSee Also\n--------\nSeries.str.split : Split strings around given separator/delimiter.\nSeries.str.rsplit : Splits string around given separator/delimiter,\n    starting from the right.\nSeries.str.join : Join lists contained as elements in the Series/Index\n    with passed delimiter.\nstr.split : Standard library version for split.\nstr.rsplit : Standard library version for rsplit.\n\nNotes\n-----\nThe handling of the `n` keyword depends on the number of found splits:\n\n- If found splits > `n`,  make first `n` splits only\n- If found splits <= `n`, make all splits\n- If for a certain row the number of found splits < `n`,\n  append `None` for padding up to `n` if ``expand=True``\n\nIf using ``expand=True``, Series and Index callers return DataFrame and\nMultiIndex objects, respectively.\n\nExamples\n--------\n>>> s = pd.Series([\"this is a regular sentence\",\n...                \"https://docs.python.org/3/tutorial/index.html\",\n...                np.nan])\n0                       this is a regular sentence\n1    https://docs.python.org/3/tutorial/index.html\n2                                              NaN\ndtype: object\n\nIn the default setting, the string is split by whitespace.\n\n>>> s.str.split()\n0                   [this, is, a, regular, sentence]\n1    [https://docs.python.org/3/tutorial/index.html]\n2                                                NaN\ndtype: object\n\nWithout the `n` parameter, the outputs of `rsplit` and `split`\nare identical.\n\n>>> s.str.rsplit()\n0                   [this, is, a, regular, sentence]\n1    [https://docs.python.org/3/tutorial/index.html]\n2                                                NaN\ndtype: object\n\nThe `n` parameter can be used to limit the number of splits on the\ndelimiter. The outputs of `split` and `rsplit` are different.\n\n>>> s.str.split(n=2)\n0                     [this, is, a regular sentence]\n1    [https://docs.python.org/3/tutorial/index.html]\n2                                                NaN\ndtype: object\n\n>>> s.str.rsplit(n=2)\n0                     [this is a, regular, sentence]\n1    [https://docs.python.org/3/tutorial/index.html]\n2                                                NaN\ndtype: object\n\nThe `pat` parameter can be used to split by other characters.\n\n>>> s.str.split(pat = \"/\")\n0                         [this is a regular sentence]\n1    [https:, , docs.python.org, 3, tutorial, index...\n2                                                  NaN\ndtype: object\n\nWhen using ``expand=True``, the split elements will expand out into\nseparate columns. If NaN is present, it is propagated throughout\nthe columns during the split.\n\n>>> s.str.split(expand=True)\n                                               0     1     2        3\n0                                           this    is     a  regular\n1  https://docs.python.org/3/tutorial/index.html  None  None     None\n2                                            NaN   NaN   NaN      NaN \\\n             4\n0     sentence\n1         None\n2          NaN\n\nFor slightly more complex use cases like splitting the html document name\nfrom a url, a combination of parameter settings can be used.\n\n>>> s.str.rsplit(\"/\", n=1, expand=True)\n                                    0           1\n0          this is a regular sentence        None\n1  https://docs.python.org/3/tutorial  index.html\n2                                 NaN         NaN\n\nRemember to escape special characters when explicitly using regular\nexpressions.\n\n>>> s = pd.Series([\"1+1=2\"])\n\n>>> s.str.split(r\"\\+|=\", expand=True)\n     0    1    2\n0    1    1    2", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2478, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2478", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {pat, n, expand}"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 50, in pandas.Series.str.split\nFailed example:\n    s = pd.Series([\"this is a regular sentence\",\n                   \"https://docs.python.org/3/tutorial/index.html\",\n                   np.nan])\nExpected:\n    0                       this is a regular sentence\n    1    https://docs.python.org/3/tutorial/index.html\n    2                                              NaN\n    dtype: object\nGot nothing\n**********************************************************************\nLine 102, in pandas.Series.str.split\nFailed example:\n    s.str.split(expand=True)\nExpected:\n                                                   0     1     2        3\n    0                                           this    is     a  regular\n    1  https://docs.python.org/3/tutorial/index.html  None  None     None\n    2                                            NaN   NaN   NaN      NaN \\\n                 4\n    0     sentence\n    1         None\n    2          NaN\nGot:\n                                                   0     1     2        3         4\n    0                                           this    is     a  regular  sentence\n    1  https://docs.python.org/3/tutorial/index.html  None  None     None      None\n    2                                            NaN   NaN   NaN      NaN       NaN\n"], ["EX03", "flake8 error: E251 unexpected spaces around keyword / parameter equals (2 times)"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 50, in pandas.Series.str.split\nFailed example:\n    s = pd.Series([\"this is a regular sentence\",\n                   \"https://docs.python.org/3/tutorial/index.html\",\n                   np.nan])\nExpected:\n    0                       this is a regular sentence\n    1    https://docs.python.org/3/tutorial/index.html\n    2                                              NaN\n    dtype: object\nGot nothing\n**********************************************************************\nLine 102, in pandas.Series.str.split\nFailed example:\n    s.str.split(expand=True)\nExpected:\n                                                   0     1     2        3\n    0                                           this    is     a  regular\n    1  https://docs.python.org/3/tutorial/index.html  None  None     None\n    2                                            NaN   NaN   NaN      NaN \\\n                 4\n    0     sentence\n    1         None\n    2          NaN\nGot:\n                                                   0     1     2        3         4\n    0                                           this    is     a  regular  sentence\n    1  https://docs.python.org/3/tutorial/index.html  None  None     None      None\n    2                                            NaN   NaN   NaN      NaN       NaN\n", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.rsplit": {"type": "function", "docstring": "Split strings around given separator/delimiter.\n\nSplits the string in the Series/Index from the end,\nat the specified delimiter string. Equivalent to :meth:`str.rsplit`.\n\nParameters\n----------\npat : str, optional\n    String or regular expression to split on.\n    If not specified, split on whitespace.\nn : int, default -1 (all)\n    Limit number of splits in output.\n    ``None``, 0 and -1 will be interpreted as return all splits.\nexpand : bool, default False\n    Expand the splitted strings into separate columns.\n\n    * If ``True``, return DataFrame/MultiIndex expanding dimensionality.\n    * If ``False``, return Series/Index, containing lists of strings.\n\nReturns\n-------\nSeries, Index, DataFrame or MultiIndex\n    Type matches caller unless ``expand=True`` (see Notes).\n\nSee Also\n--------\nSeries.str.split : Split strings around given separator/delimiter.\nSeries.str.rsplit : Splits string around given separator/delimiter,\n    starting from the right.\nSeries.str.join : Join lists contained as elements in the Series/Index\n    with passed delimiter.\nstr.split : Standard library version for split.\nstr.rsplit : Standard library version for rsplit.\n\nNotes\n-----\nThe handling of the `n` keyword depends on the number of found splits:\n\n- If found splits > `n`,  make first `n` splits only\n- If found splits <= `n`, make all splits\n- If for a certain row the number of found splits < `n`,\n  append `None` for padding up to `n` if ``expand=True``\n\nIf using ``expand=True``, Series and Index callers return DataFrame and\nMultiIndex objects, respectively.\n\nExamples\n--------\n>>> s = pd.Series([\"this is a regular sentence\",\n...                \"https://docs.python.org/3/tutorial/index.html\",\n...                np.nan])\n0                       this is a regular sentence\n1    https://docs.python.org/3/tutorial/index.html\n2                                              NaN\ndtype: object\n\nIn the default setting, the string is split by whitespace.\n\n>>> s.str.split()\n0                   [this, is, a, regular, sentence]\n1    [https://docs.python.org/3/tutorial/index.html]\n2                                                NaN\ndtype: object\n\nWithout the `n` parameter, the outputs of `rsplit` and `split`\nare identical.\n\n>>> s.str.rsplit()\n0                   [this, is, a, regular, sentence]\n1    [https://docs.python.org/3/tutorial/index.html]\n2                                                NaN\ndtype: object\n\nThe `n` parameter can be used to limit the number of splits on the\ndelimiter. The outputs of `split` and `rsplit` are different.\n\n>>> s.str.split(n=2)\n0                     [this, is, a regular sentence]\n1    [https://docs.python.org/3/tutorial/index.html]\n2                                                NaN\ndtype: object\n\n>>> s.str.rsplit(n=2)\n0                     [this is a, regular, sentence]\n1    [https://docs.python.org/3/tutorial/index.html]\n2                                                NaN\ndtype: object\n\nThe `pat` parameter can be used to split by other characters.\n\n>>> s.str.split(pat = \"/\")\n0                         [this is a regular sentence]\n1    [https:, , docs.python.org, 3, tutorial, index...\n2                                                  NaN\ndtype: object\n\nWhen using ``expand=True``, the split elements will expand out into\nseparate columns. If NaN is present, it is propagated throughout\nthe columns during the split.\n\n>>> s.str.split(expand=True)\n                                               0     1     2        3\n0                                           this    is     a  regular\n1  https://docs.python.org/3/tutorial/index.html  None  None     None\n2                                            NaN   NaN   NaN      NaN \\\n             4\n0     sentence\n1         None\n2          NaN\n\nFor slightly more complex use cases like splitting the html document name\nfrom a url, a combination of parameter settings can be used.\n\n>>> s.str.rsplit(\"/\", n=1, expand=True)\n                                    0           1\n0          this is a regular sentence        None\n1  https://docs.python.org/3/tutorial  index.html\n2                                 NaN         NaN\n\nRemember to escape special characters when explicitly using regular\nexpressions.\n\n>>> s = pd.Series([\"1+1=2\"])\n\n>>> s.str.split(r\"\\+|=\", expand=True)\n     0    1    2\n0    1    1    2", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2484, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2484", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {pat, n, expand}"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 50, in pandas.Series.str.rsplit\nFailed example:\n    s = pd.Series([\"this is a regular sentence\",\n                   \"https://docs.python.org/3/tutorial/index.html\",\n                   np.nan])\nExpected:\n    0                       this is a regular sentence\n    1    https://docs.python.org/3/tutorial/index.html\n    2                                              NaN\n    dtype: object\nGot nothing\n**********************************************************************\nLine 102, in pandas.Series.str.rsplit\nFailed example:\n    s.str.split(expand=True)\nExpected:\n                                                   0     1     2        3\n    0                                           this    is     a  regular\n    1  https://docs.python.org/3/tutorial/index.html  None  None     None\n    2                                            NaN   NaN   NaN      NaN \\\n                 4\n    0     sentence\n    1         None\n    2          NaN\nGot:\n                                                   0     1     2        3         4\n    0                                           this    is     a  regular  sentence\n    1  https://docs.python.org/3/tutorial/index.html  None  None     None      None\n    2                                            NaN   NaN   NaN      NaN       NaN\n"], ["EX03", "flake8 error: E251 unexpected spaces around keyword / parameter equals (2 times)"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 50, in pandas.Series.str.rsplit\nFailed example:\n    s = pd.Series([\"this is a regular sentence\",\n                   \"https://docs.python.org/3/tutorial/index.html\",\n                   np.nan])\nExpected:\n    0                       this is a regular sentence\n    1    https://docs.python.org/3/tutorial/index.html\n    2                                              NaN\n    dtype: object\nGot nothing\n**********************************************************************\nLine 102, in pandas.Series.str.rsplit\nFailed example:\n    s.str.split(expand=True)\nExpected:\n                                                   0     1     2        3\n    0                                           this    is     a  regular\n    1  https://docs.python.org/3/tutorial/index.html  None  None     None\n    2                                            NaN   NaN   NaN      NaN \\\n                 4\n    0     sentence\n    1         None\n    2          NaN\nGot:\n                                                   0     1     2        3         4\n    0                                           this    is     a  regular  sentence\n    1  https://docs.python.org/3/tutorial/index.html  None  None     None      None\n    2                                            NaN   NaN   NaN      NaN       NaN\n", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.startswith": {"type": "function", "docstring": "Test if the start of each string element matches a pattern.\n\nEquivalent to :meth:`str.startswith`.\n\nParameters\n----------\npat : str\n    Character sequence. Regular expressions are not accepted.\nna : object, default NaN\n    Object shown if element tested is not a string.\n\nReturns\n-------\nSeries or Index of bool\n    A Series of booleans indicating whether the given pattern matches\n    the start of each string element.\n\nSee Also\n--------\nstr.startswith : Python standard library string method.\nSeries.str.endswith : Same as startswith, but tests the end of string.\nSeries.str.contains : Tests if string element contains a pattern.\n\nExamples\n--------\n>>> s = pd.Series(['bat', 'Bear', 'cat', np.nan])\n>>> s\n0     bat\n1    Bear\n2     cat\n3     NaN\ndtype: object\n\n>>> s.str.startswith('b')\n0     True\n1    False\n2    False\n3      NaN\ndtype: object\n\nSpecifying `na` to be `False` instead of `NaN`.\n\n>>> s.str.startswith('b', na=False)\n0     True\n1    False\n2    False\n3    False\ndtype: bool", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 1889, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L1889", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {pat, na}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": "pandas.Series.str.endswith"}, "pandas.Series.str.strip": {"type": "function", "docstring": "Remove leading and trailing characters.\n\nStrip whitespaces (including newlines) or a set of specified characters\nfrom each string in the Series/Index from left and right sides.\nEquivalent to :meth:`str.strip`.\n\nParameters\n----------\nto_strip : str or None, default None\n    Specifying the set of characters to be removed.\n    All combinations of this set of characters will be stripped.\n    If None then whitespaces are removed.\n\nReturns\n-------\nSeries/Index of objects\n\nSee Also\n--------\nSeries.str.strip : Remove leading and trailing characters in Series/Index.\nSeries.str.lstrip : Remove leading characters in Series/Index.\nSeries.str.rstrip : Remove trailing characters in Series/Index.\n\nExamples\n--------\n>>> s = pd.Series(['1. Ant.  ', '2. Bee!\\n', '3. Cat?\\t', np.nan])\n>>> s\n0    1. Ant.\n1    2. Bee!\\n\n2    3. Cat?\\t\n3          NaN\ndtype: object\n\n>>> s.str.strip()\n0    1. Ant.\n1    2. Bee!\n2    3. Cat?\n3        NaN\ndtype: object\n\n>>> s.str.lstrip('123.')\n0    Ant.\n1    Bee!\\n\n2    Cat?\\t\n3       NaN\ndtype: object\n\n>>> s.str.rstrip('.!? \\n\\t')\n0    1. Ant\n1    2. Bee\n2    3. Cat\n3       NaN\ndtype: object\n\n>>> s.str.strip('123.!? \\n\\t')\n0    Ant\n1    Bee\n2    Cat\n3    NaN\ndtype: object", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2838, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2838", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {to_strip}"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.swapcase": {"type": "function", "docstring": "Convert strings in the Series/Index to be swapcased.\n\nEquivalent to :meth:`str.swapcase`.\n\nReturns\n-------\nSeries/Index of objects\n\nSee Also\n--------\nSeries.str.lower : Converts all characters to lowercase.\nSeries.str.upper : Converts all characters to uppercase.\nSeries.str.title : Converts first character of each word to uppercase and\n    remaining to lowercase.\nSeries.str.capitalize : Converts first character to uppercase and\n    remaining to lowercase.\nSeries.str.swapcase : Converts uppercase to lowercase and lowercase to\n    uppercase.\nSeries.str.casefold: Removes all case distinctions in the string.\n\nExamples\n--------\n>>> s = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])\n>>> s\n0                 lower\n1              CAPITALS\n2    this is a sentence\n3              SwApCaSe\ndtype: object\n\n>>> s.str.lower()\n0                 lower\n1              capitals\n2    this is a sentence\n3              swapcase\ndtype: object\n\n>>> s.str.upper()\n0                 LOWER\n1              CAPITALS\n2    THIS IS A SENTENCE\n3              SWAPCASE\ndtype: object\n\n>>> s.str.title()\n0                 Lower\n1              Capitals\n2    This Is A Sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.capitalize()\n0                 Lower\n1              Capitals\n2    This is a sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.swapcase()\n0                 LOWER\n1              capitals\n2    THIS IS A SENTENCE\n3              sWaPcAsE\ndtype: object", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 1862, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L1862", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": "pandas.Series.str.lower"}, "pandas.Series.str.title": {"type": "function", "docstring": "Convert strings in the Series/Index to titlecase.\n\nEquivalent to :meth:`str.title`.\n\nReturns\n-------\nSeries/Index of objects\n\nSee Also\n--------\nSeries.str.lower : Converts all characters to lowercase.\nSeries.str.upper : Converts all characters to uppercase.\nSeries.str.title : Converts first character of each word to uppercase and\n    remaining to lowercase.\nSeries.str.capitalize : Converts first character to uppercase and\n    remaining to lowercase.\nSeries.str.swapcase : Converts uppercase to lowercase and lowercase to\n    uppercase.\nSeries.str.casefold: Removes all case distinctions in the string.\n\nExamples\n--------\n>>> s = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])\n>>> s\n0                 lower\n1              CAPITALS\n2    this is a sentence\n3              SwApCaSe\ndtype: object\n\n>>> s.str.lower()\n0                 lower\n1              capitals\n2    this is a sentence\n3              swapcase\ndtype: object\n\n>>> s.str.upper()\n0                 LOWER\n1              CAPITALS\n2    THIS IS A SENTENCE\n3              SWAPCASE\ndtype: object\n\n>>> s.str.title()\n0                 Lower\n1              Capitals\n2    This Is A Sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.capitalize()\n0                 Lower\n1              Capitals\n2    This is a sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.swapcase()\n0                 LOWER\n1              capitals\n2    THIS IS A SENTENCE\n3              sWaPcAsE\ndtype: object", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 1862, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L1862", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": "pandas.Series.str.swapcase"}, "pandas.Series.str.translate": {"type": "function", "docstring": "Map all characters in the string through the given mapping table.\nEquivalent to standard :meth:`str.translate`.\n\nParameters\n----------\ntable : dict\n    table is a mapping of Unicode ordinals to Unicode ordinals, strings, or\n    None. Unmapped characters are left untouched.\n    Characters mapped to None are deleted. :meth:`str.maketrans` is a\n    helper function for making translation tables.\n\nReturns\n-------\nSeries or Index", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2875, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2875", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {table}"], ["PR08", "Parameter \"table\" description should start with a capital letter"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.upper": {"type": "function", "docstring": "Convert strings in the Series/Index to uppercase.\n\nEquivalent to :meth:`str.upper`.\n\nReturns\n-------\nSeries/Index of objects\n\nSee Also\n--------\nSeries.str.lower : Converts all characters to lowercase.\nSeries.str.upper : Converts all characters to uppercase.\nSeries.str.title : Converts first character of each word to uppercase and\n    remaining to lowercase.\nSeries.str.capitalize : Converts first character to uppercase and\n    remaining to lowercase.\nSeries.str.swapcase : Converts uppercase to lowercase and lowercase to\n    uppercase.\nSeries.str.casefold: Removes all case distinctions in the string.\n\nExamples\n--------\n>>> s = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])\n>>> s\n0                 lower\n1              CAPITALS\n2    this is a sentence\n3              SwApCaSe\ndtype: object\n\n>>> s.str.lower()\n0                 lower\n1              capitals\n2    this is a sentence\n3              swapcase\ndtype: object\n\n>>> s.str.upper()\n0                 LOWER\n1              CAPITALS\n2    THIS IS A SENTENCE\n3              SWAPCASE\ndtype: object\n\n>>> s.str.title()\n0                 Lower\n1              Capitals\n2    This Is A Sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.capitalize()\n0                 Lower\n1              Capitals\n2    This is a sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.swapcase()\n0                 LOWER\n1              capitals\n2    THIS IS A SENTENCE\n3              sWaPcAsE\ndtype: object", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 1862, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L1862", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": "pandas.Series.str.title"}, "pandas.Series.str.wrap": {"type": "function", "docstring": "Wrap long strings in the Series/Index to be formatted in\nparagraphs with length less than a given width.\n\nThis method has the same keyword parameters and defaults as\n:class:`textwrap.TextWrapper`.\n\nParameters\n----------\nwidth : int\n    Maximum line width.\nexpand_tabs : bool, optional\n    If True, tab characters will be expanded to spaces (default: True).\nreplace_whitespace : bool, optional\n    If True, each whitespace character (as defined by string.whitespace)\n    remaining after tab expansion will be replaced by a single space\n    (default: True).\ndrop_whitespace : bool, optional\n    If True, whitespace that, after wrapping, happens to end up at the\n    beginning or end of a line is dropped (default: True).\nbreak_long_words : bool, optional\n    If True, then words longer than width will be broken in order to ensure\n    that no lines are longer than width. If it is false, long words will\n    not be broken, and some lines may be longer than width (default: True).\nbreak_on_hyphens : bool, optional\n    If True, wrapping will occur preferably on whitespace and right after\n    hyphens in compound words, as it is customary in English. If false,\n    only whitespaces will be considered as potentially good places for line\n    breaks, but you need to set break_long_words to false if you want truly\n    insecable words (default: True).\n\nReturns\n-------\nSeries or Index\n\nNotes\n-----\nInternally, this method uses a :class:`textwrap.TextWrapper` instance with\ndefault settings. To achieve behavior matching R's stringr library str_wrap\nfunction, use the arguments:\n\n- expand_tabs = False\n- replace_whitespace = True\n- drop_whitespace = True\n- break_long_words = False\n- break_on_hyphens = False\n\nExamples\n--------\n\n>>> s = pd.Series(['line to be wrapped', 'another line to be wrapped'])\n>>> s.str.wrap(12)\n0             line to be\\nwrapped\n1    another line\\nto be\\nwrapped\ndtype: object", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2858, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2858", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {width, expand_tabs, replace_whitespace, drop_whitespace, break_long_words, break_on_hyphens}"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.zfill": {"type": "function", "docstring": "Pad strings in the Series/Index by prepending '0' characters.\n\nStrings in the Series/Index are padded with '0' characters on the\nleft of the string to reach a total string length  `width`. Strings\nin the Series/Index with length greater or equal to `width` are\nunchanged.\n\nParameters\n----------\nwidth : int\n    Minimum length of resulting string; strings with length less\n    than `width` be prepended with '0' characters.\n\nReturns\n-------\nSeries/Index of objects\n\nSee Also\n--------\nSeries.str.rjust : Fills the left side of strings with an arbitrary\n    character.\nSeries.str.ljust : Fills the right side of strings with an arbitrary\n    character.\nSeries.str.pad : Fills the specified sides of strings with an arbitrary\n    character.\nSeries.str.center : Fills boths sides of strings with an arbitrary\n    character.\n\nNotes\n-----\nDiffers from :meth:`str.zfill` which has special handling\nfor '+'/'-' in the string.\n\nExamples\n--------\n>>> s = pd.Series(['-1', '1', '1000', 10, np.nan])\n>>> s\n0      -1\n1       1\n2    1000\n3      10\n4     NaN\ndtype: object\n\nNote that ``10`` and ``NaN`` are not strings, therefore they are\nconverted to ``NaN``. The minus sign in ``'-1'`` is treated as a\nregular character and the zero is added to the left of it\n(:meth:`str.zfill` would have moved it to the left). ``1000``\nremains unchanged as it is longer than `width`.\n\n>>> s.str.zfill(3)\n0     0-1\n1     001\n2    1000\n3     NaN\n4     NaN\ndtype: object", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2686, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2686", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {width}"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str.isalnum": {"type": "function", "docstring": "Check whether all characters in each string are alphanumeric.\n\nThis is equivalent to running the Python string method\n:meth:`str.isalnum` for each element of the Series/Index. If a string\nhas zero characters, ``False`` is returned for that check.\n\nReturns\n-------\nSeries or Index of bool\n    Series or Index of boolean values with the same length as the original\n    Series/Index.\n\nSee Also\n--------\nSeries.str.isalpha : Check whether all characters are alphabetic.\nSeries.str.isnumeric : Check whether all characters are numeric.\nSeries.str.isalnum : Check whether all characters are alphanumeric.\nSeries.str.isdigit : Check whether all characters are digits.\nSeries.str.isdecimal : Check whether all characters are decimal.\nSeries.str.isspace : Check whether all characters are whitespace.\nSeries.str.islower : Check whether all characters are lowercase.\nSeries.str.isupper : Check whether all characters are uppercase.\nSeries.str.istitle : Check whether all characters are titlecase.\n\nExamples\n--------\n**Checks for Alphabetic and Numeric Characters**\n\n>>> s1 = pd.Series(['one', 'one1', '1', ''])\n\n>>> s1.str.isalpha()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s1.str.isnumeric()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\n>>> s1.str.isalnum()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\nNote that checks against characters mixed with any additional punctuation\nor whitespace will evaluate to false for an alphanumeric check.\n\n>>> s2 = pd.Series(['A B', '1.5', '3,000'])\n>>> s2.str.isalnum()\n0    False\n1    False\n2    False\ndtype: bool\n\n**More Detailed Checks for Numeric Characters**\n\nThere are several different but overlapping sets of numeric characters that\ncan be checked for.\n\n>>> s3 = pd.Series(['23', '\u00b3', '\u2155', ''])\n\nThe ``s3.str.isdecimal`` method checks for characters used to form numbers\nin base 10.\n\n>>> s3.str.isdecimal()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isdigit`` method is the same as ``s3.str.isdecimal`` but also\nincludes special digits, like superscripted and subscripted digits in\nunicode.\n\n>>> s3.str.isdigit()\n0     True\n1     True\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isnumeric`` method is the same as ``s3.str.isdigit`` but also\nincludes other characters that can represent quantities such as unicode\nfractions.\n\n>>> s3.str.isnumeric()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\n**Checks for Whitespace**\n\n>>> s4 = pd.Series([' ', '\\t\\r\\n ', ''])\n>>> s4.str.isspace()\n0     True\n1     True\n2    False\ndtype: bool\n\n**Checks for Character Case**\n\n>>> s5 = pd.Series(['leopard', 'Golden Eagle', 'SNAKE', ''])\n\n>>> s5.str.islower()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s5.str.isupper()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\nThe ``s5.str.istitle`` method checks for whether all words are in title\ncase (whether only the first letter of each word is capitalized). Words are\nassumed to be as any sequence of non-numeric characters separated by\nwhitespace characters.\n\n>>> s5.str.istitle()\n0    False\n1     True\n2    False\n3    False\ndtype: bool", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 1862, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L1862", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": "pandas.Series.str.upper"}, "pandas.Series.str.isalpha": {"type": "function", "docstring": "Check whether all characters in each string are alphabetic.\n\nThis is equivalent to running the Python string method\n:meth:`str.isalpha` for each element of the Series/Index. If a string\nhas zero characters, ``False`` is returned for that check.\n\nReturns\n-------\nSeries or Index of bool\n    Series or Index of boolean values with the same length as the original\n    Series/Index.\n\nSee Also\n--------\nSeries.str.isalpha : Check whether all characters are alphabetic.\nSeries.str.isnumeric : Check whether all characters are numeric.\nSeries.str.isalnum : Check whether all characters are alphanumeric.\nSeries.str.isdigit : Check whether all characters are digits.\nSeries.str.isdecimal : Check whether all characters are decimal.\nSeries.str.isspace : Check whether all characters are whitespace.\nSeries.str.islower : Check whether all characters are lowercase.\nSeries.str.isupper : Check whether all characters are uppercase.\nSeries.str.istitle : Check whether all characters are titlecase.\n\nExamples\n--------\n**Checks for Alphabetic and Numeric Characters**\n\n>>> s1 = pd.Series(['one', 'one1', '1', ''])\n\n>>> s1.str.isalpha()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s1.str.isnumeric()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\n>>> s1.str.isalnum()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\nNote that checks against characters mixed with any additional punctuation\nor whitespace will evaluate to false for an alphanumeric check.\n\n>>> s2 = pd.Series(['A B', '1.5', '3,000'])\n>>> s2.str.isalnum()\n0    False\n1    False\n2    False\ndtype: bool\n\n**More Detailed Checks for Numeric Characters**\n\nThere are several different but overlapping sets of numeric characters that\ncan be checked for.\n\n>>> s3 = pd.Series(['23', '\u00b3', '\u2155', ''])\n\nThe ``s3.str.isdecimal`` method checks for characters used to form numbers\nin base 10.\n\n>>> s3.str.isdecimal()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isdigit`` method is the same as ``s3.str.isdecimal`` but also\nincludes special digits, like superscripted and subscripted digits in\nunicode.\n\n>>> s3.str.isdigit()\n0     True\n1     True\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isnumeric`` method is the same as ``s3.str.isdigit`` but also\nincludes other characters that can represent quantities such as unicode\nfractions.\n\n>>> s3.str.isnumeric()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\n**Checks for Whitespace**\n\n>>> s4 = pd.Series([' ', '\\t\\r\\n ', ''])\n>>> s4.str.isspace()\n0     True\n1     True\n2    False\ndtype: bool\n\n**Checks for Character Case**\n\n>>> s5 = pd.Series(['leopard', 'Golden Eagle', 'SNAKE', ''])\n\n>>> s5.str.islower()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s5.str.isupper()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\nThe ``s5.str.istitle`` method checks for whether all words are in title\ncase (whether only the first letter of each word is capitalized). Words are\nassumed to be as any sequence of non-numeric characters separated by\nwhitespace characters.\n\n>>> s5.str.istitle()\n0    False\n1     True\n2    False\n3    False\ndtype: bool", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 1862, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L1862", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": "pandas.Series.str.isalnum"}, "pandas.Series.str.isdigit": {"type": "function", "docstring": "Check whether all characters in each string are digits.\n\nThis is equivalent to running the Python string method\n:meth:`str.isdigit` for each element of the Series/Index. If a string\nhas zero characters, ``False`` is returned for that check.\n\nReturns\n-------\nSeries or Index of bool\n    Series or Index of boolean values with the same length as the original\n    Series/Index.\n\nSee Also\n--------\nSeries.str.isalpha : Check whether all characters are alphabetic.\nSeries.str.isnumeric : Check whether all characters are numeric.\nSeries.str.isalnum : Check whether all characters are alphanumeric.\nSeries.str.isdigit : Check whether all characters are digits.\nSeries.str.isdecimal : Check whether all characters are decimal.\nSeries.str.isspace : Check whether all characters are whitespace.\nSeries.str.islower : Check whether all characters are lowercase.\nSeries.str.isupper : Check whether all characters are uppercase.\nSeries.str.istitle : Check whether all characters are titlecase.\n\nExamples\n--------\n**Checks for Alphabetic and Numeric Characters**\n\n>>> s1 = pd.Series(['one', 'one1', '1', ''])\n\n>>> s1.str.isalpha()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s1.str.isnumeric()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\n>>> s1.str.isalnum()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\nNote that checks against characters mixed with any additional punctuation\nor whitespace will evaluate to false for an alphanumeric check.\n\n>>> s2 = pd.Series(['A B', '1.5', '3,000'])\n>>> s2.str.isalnum()\n0    False\n1    False\n2    False\ndtype: bool\n\n**More Detailed Checks for Numeric Characters**\n\nThere are several different but overlapping sets of numeric characters that\ncan be checked for.\n\n>>> s3 = pd.Series(['23', '\u00b3', '\u2155', ''])\n\nThe ``s3.str.isdecimal`` method checks for characters used to form numbers\nin base 10.\n\n>>> s3.str.isdecimal()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isdigit`` method is the same as ``s3.str.isdecimal`` but also\nincludes special digits, like superscripted and subscripted digits in\nunicode.\n\n>>> s3.str.isdigit()\n0     True\n1     True\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isnumeric`` method is the same as ``s3.str.isdigit`` but also\nincludes other characters that can represent quantities such as unicode\nfractions.\n\n>>> s3.str.isnumeric()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\n**Checks for Whitespace**\n\n>>> s4 = pd.Series([' ', '\\t\\r\\n ', ''])\n>>> s4.str.isspace()\n0     True\n1     True\n2    False\ndtype: bool\n\n**Checks for Character Case**\n\n>>> s5 = pd.Series(['leopard', 'Golden Eagle', 'SNAKE', ''])\n\n>>> s5.str.islower()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s5.str.isupper()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\nThe ``s5.str.istitle`` method checks for whether all words are in title\ncase (whether only the first letter of each word is capitalized). Words are\nassumed to be as any sequence of non-numeric characters separated by\nwhitespace characters.\n\n>>> s5.str.istitle()\n0    False\n1     True\n2    False\n3    False\ndtype: bool", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 1862, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L1862", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": "pandas.Series.str.isalpha"}, "pandas.Series.str.isspace": {"type": "function", "docstring": "Check whether all characters in each string are whitespace.\n\nThis is equivalent to running the Python string method\n:meth:`str.isspace` for each element of the Series/Index. If a string\nhas zero characters, ``False`` is returned for that check.\n\nReturns\n-------\nSeries or Index of bool\n    Series or Index of boolean values with the same length as the original\n    Series/Index.\n\nSee Also\n--------\nSeries.str.isalpha : Check whether all characters are alphabetic.\nSeries.str.isnumeric : Check whether all characters are numeric.\nSeries.str.isalnum : Check whether all characters are alphanumeric.\nSeries.str.isdigit : Check whether all characters are digits.\nSeries.str.isdecimal : Check whether all characters are decimal.\nSeries.str.isspace : Check whether all characters are whitespace.\nSeries.str.islower : Check whether all characters are lowercase.\nSeries.str.isupper : Check whether all characters are uppercase.\nSeries.str.istitle : Check whether all characters are titlecase.\n\nExamples\n--------\n**Checks for Alphabetic and Numeric Characters**\n\n>>> s1 = pd.Series(['one', 'one1', '1', ''])\n\n>>> s1.str.isalpha()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s1.str.isnumeric()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\n>>> s1.str.isalnum()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\nNote that checks against characters mixed with any additional punctuation\nor whitespace will evaluate to false for an alphanumeric check.\n\n>>> s2 = pd.Series(['A B', '1.5', '3,000'])\n>>> s2.str.isalnum()\n0    False\n1    False\n2    False\ndtype: bool\n\n**More Detailed Checks for Numeric Characters**\n\nThere are several different but overlapping sets of numeric characters that\ncan be checked for.\n\n>>> s3 = pd.Series(['23', '\u00b3', '\u2155', ''])\n\nThe ``s3.str.isdecimal`` method checks for characters used to form numbers\nin base 10.\n\n>>> s3.str.isdecimal()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isdigit`` method is the same as ``s3.str.isdecimal`` but also\nincludes special digits, like superscripted and subscripted digits in\nunicode.\n\n>>> s3.str.isdigit()\n0     True\n1     True\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isnumeric`` method is the same as ``s3.str.isdigit`` but also\nincludes other characters that can represent quantities such as unicode\nfractions.\n\n>>> s3.str.isnumeric()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\n**Checks for Whitespace**\n\n>>> s4 = pd.Series([' ', '\\t\\r\\n ', ''])\n>>> s4.str.isspace()\n0     True\n1     True\n2    False\ndtype: bool\n\n**Checks for Character Case**\n\n>>> s5 = pd.Series(['leopard', 'Golden Eagle', 'SNAKE', ''])\n\n>>> s5.str.islower()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s5.str.isupper()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\nThe ``s5.str.istitle`` method checks for whether all words are in title\ncase (whether only the first letter of each word is capitalized). Words are\nassumed to be as any sequence of non-numeric characters separated by\nwhitespace characters.\n\n>>> s5.str.istitle()\n0    False\n1     True\n2    False\n3    False\ndtype: bool", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 1862, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L1862", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": "pandas.Series.str.isdigit"}, "pandas.Series.str.islower": {"type": "function", "docstring": "Check whether all characters in each string are lowercase.\n\nThis is equivalent to running the Python string method\n:meth:`str.islower` for each element of the Series/Index. If a string\nhas zero characters, ``False`` is returned for that check.\n\nReturns\n-------\nSeries or Index of bool\n    Series or Index of boolean values with the same length as the original\n    Series/Index.\n\nSee Also\n--------\nSeries.str.isalpha : Check whether all characters are alphabetic.\nSeries.str.isnumeric : Check whether all characters are numeric.\nSeries.str.isalnum : Check whether all characters are alphanumeric.\nSeries.str.isdigit : Check whether all characters are digits.\nSeries.str.isdecimal : Check whether all characters are decimal.\nSeries.str.isspace : Check whether all characters are whitespace.\nSeries.str.islower : Check whether all characters are lowercase.\nSeries.str.isupper : Check whether all characters are uppercase.\nSeries.str.istitle : Check whether all characters are titlecase.\n\nExamples\n--------\n**Checks for Alphabetic and Numeric Characters**\n\n>>> s1 = pd.Series(['one', 'one1', '1', ''])\n\n>>> s1.str.isalpha()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s1.str.isnumeric()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\n>>> s1.str.isalnum()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\nNote that checks against characters mixed with any additional punctuation\nor whitespace will evaluate to false for an alphanumeric check.\n\n>>> s2 = pd.Series(['A B', '1.5', '3,000'])\n>>> s2.str.isalnum()\n0    False\n1    False\n2    False\ndtype: bool\n\n**More Detailed Checks for Numeric Characters**\n\nThere are several different but overlapping sets of numeric characters that\ncan be checked for.\n\n>>> s3 = pd.Series(['23', '\u00b3', '\u2155', ''])\n\nThe ``s3.str.isdecimal`` method checks for characters used to form numbers\nin base 10.\n\n>>> s3.str.isdecimal()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isdigit`` method is the same as ``s3.str.isdecimal`` but also\nincludes special digits, like superscripted and subscripted digits in\nunicode.\n\n>>> s3.str.isdigit()\n0     True\n1     True\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isnumeric`` method is the same as ``s3.str.isdigit`` but also\nincludes other characters that can represent quantities such as unicode\nfractions.\n\n>>> s3.str.isnumeric()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\n**Checks for Whitespace**\n\n>>> s4 = pd.Series([' ', '\\t\\r\\n ', ''])\n>>> s4.str.isspace()\n0     True\n1     True\n2    False\ndtype: bool\n\n**Checks for Character Case**\n\n>>> s5 = pd.Series(['leopard', 'Golden Eagle', 'SNAKE', ''])\n\n>>> s5.str.islower()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s5.str.isupper()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\nThe ``s5.str.istitle`` method checks for whether all words are in title\ncase (whether only the first letter of each word is capitalized). Words are\nassumed to be as any sequence of non-numeric characters separated by\nwhitespace characters.\n\n>>> s5.str.istitle()\n0    False\n1     True\n2    False\n3    False\ndtype: bool", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 1862, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L1862", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": "pandas.Series.str.isspace"}, "pandas.Series.str.isupper": {"type": "function", "docstring": "Check whether all characters in each string are uppercase.\n\nThis is equivalent to running the Python string method\n:meth:`str.isupper` for each element of the Series/Index. If a string\nhas zero characters, ``False`` is returned for that check.\n\nReturns\n-------\nSeries or Index of bool\n    Series or Index of boolean values with the same length as the original\n    Series/Index.\n\nSee Also\n--------\nSeries.str.isalpha : Check whether all characters are alphabetic.\nSeries.str.isnumeric : Check whether all characters are numeric.\nSeries.str.isalnum : Check whether all characters are alphanumeric.\nSeries.str.isdigit : Check whether all characters are digits.\nSeries.str.isdecimal : Check whether all characters are decimal.\nSeries.str.isspace : Check whether all characters are whitespace.\nSeries.str.islower : Check whether all characters are lowercase.\nSeries.str.isupper : Check whether all characters are uppercase.\nSeries.str.istitle : Check whether all characters are titlecase.\n\nExamples\n--------\n**Checks for Alphabetic and Numeric Characters**\n\n>>> s1 = pd.Series(['one', 'one1', '1', ''])\n\n>>> s1.str.isalpha()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s1.str.isnumeric()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\n>>> s1.str.isalnum()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\nNote that checks against characters mixed with any additional punctuation\nor whitespace will evaluate to false for an alphanumeric check.\n\n>>> s2 = pd.Series(['A B', '1.5', '3,000'])\n>>> s2.str.isalnum()\n0    False\n1    False\n2    False\ndtype: bool\n\n**More Detailed Checks for Numeric Characters**\n\nThere are several different but overlapping sets of numeric characters that\ncan be checked for.\n\n>>> s3 = pd.Series(['23', '\u00b3', '\u2155', ''])\n\nThe ``s3.str.isdecimal`` method checks for characters used to form numbers\nin base 10.\n\n>>> s3.str.isdecimal()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isdigit`` method is the same as ``s3.str.isdecimal`` but also\nincludes special digits, like superscripted and subscripted digits in\nunicode.\n\n>>> s3.str.isdigit()\n0     True\n1     True\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isnumeric`` method is the same as ``s3.str.isdigit`` but also\nincludes other characters that can represent quantities such as unicode\nfractions.\n\n>>> s3.str.isnumeric()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\n**Checks for Whitespace**\n\n>>> s4 = pd.Series([' ', '\\t\\r\\n ', ''])\n>>> s4.str.isspace()\n0     True\n1     True\n2    False\ndtype: bool\n\n**Checks for Character Case**\n\n>>> s5 = pd.Series(['leopard', 'Golden Eagle', 'SNAKE', ''])\n\n>>> s5.str.islower()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s5.str.isupper()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\nThe ``s5.str.istitle`` method checks for whether all words are in title\ncase (whether only the first letter of each word is capitalized). Words are\nassumed to be as any sequence of non-numeric characters separated by\nwhitespace characters.\n\n>>> s5.str.istitle()\n0    False\n1     True\n2    False\n3    False\ndtype: bool", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 1862, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L1862", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": "pandas.Series.str.islower"}, "pandas.Series.str.istitle": {"type": "function", "docstring": "Check whether all characters in each string are titlecase.\n\nThis is equivalent to running the Python string method\n:meth:`str.istitle` for each element of the Series/Index. If a string\nhas zero characters, ``False`` is returned for that check.\n\nReturns\n-------\nSeries or Index of bool\n    Series or Index of boolean values with the same length as the original\n    Series/Index.\n\nSee Also\n--------\nSeries.str.isalpha : Check whether all characters are alphabetic.\nSeries.str.isnumeric : Check whether all characters are numeric.\nSeries.str.isalnum : Check whether all characters are alphanumeric.\nSeries.str.isdigit : Check whether all characters are digits.\nSeries.str.isdecimal : Check whether all characters are decimal.\nSeries.str.isspace : Check whether all characters are whitespace.\nSeries.str.islower : Check whether all characters are lowercase.\nSeries.str.isupper : Check whether all characters are uppercase.\nSeries.str.istitle : Check whether all characters are titlecase.\n\nExamples\n--------\n**Checks for Alphabetic and Numeric Characters**\n\n>>> s1 = pd.Series(['one', 'one1', '1', ''])\n\n>>> s1.str.isalpha()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s1.str.isnumeric()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\n>>> s1.str.isalnum()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\nNote that checks against characters mixed with any additional punctuation\nor whitespace will evaluate to false for an alphanumeric check.\n\n>>> s2 = pd.Series(['A B', '1.5', '3,000'])\n>>> s2.str.isalnum()\n0    False\n1    False\n2    False\ndtype: bool\n\n**More Detailed Checks for Numeric Characters**\n\nThere are several different but overlapping sets of numeric characters that\ncan be checked for.\n\n>>> s3 = pd.Series(['23', '\u00b3', '\u2155', ''])\n\nThe ``s3.str.isdecimal`` method checks for characters used to form numbers\nin base 10.\n\n>>> s3.str.isdecimal()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isdigit`` method is the same as ``s3.str.isdecimal`` but also\nincludes special digits, like superscripted and subscripted digits in\nunicode.\n\n>>> s3.str.isdigit()\n0     True\n1     True\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isnumeric`` method is the same as ``s3.str.isdigit`` but also\nincludes other characters that can represent quantities such as unicode\nfractions.\n\n>>> s3.str.isnumeric()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\n**Checks for Whitespace**\n\n>>> s4 = pd.Series([' ', '\\t\\r\\n ', ''])\n>>> s4.str.isspace()\n0     True\n1     True\n2    False\ndtype: bool\n\n**Checks for Character Case**\n\n>>> s5 = pd.Series(['leopard', 'Golden Eagle', 'SNAKE', ''])\n\n>>> s5.str.islower()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s5.str.isupper()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\nThe ``s5.str.istitle`` method checks for whether all words are in title\ncase (whether only the first letter of each word is capitalized). Words are\nassumed to be as any sequence of non-numeric characters separated by\nwhitespace characters.\n\n>>> s5.str.istitle()\n0    False\n1     True\n2    False\n3    False\ndtype: bool", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 1862, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L1862", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": "pandas.Series.str.isupper"}, "pandas.Series.str.isnumeric": {"type": "function", "docstring": "Check whether all characters in each string are numeric.\n\nThis is equivalent to running the Python string method\n:meth:`str.isnumeric` for each element of the Series/Index. If a string\nhas zero characters, ``False`` is returned for that check.\n\nReturns\n-------\nSeries or Index of bool\n    Series or Index of boolean values with the same length as the original\n    Series/Index.\n\nSee Also\n--------\nSeries.str.isalpha : Check whether all characters are alphabetic.\nSeries.str.isnumeric : Check whether all characters are numeric.\nSeries.str.isalnum : Check whether all characters are alphanumeric.\nSeries.str.isdigit : Check whether all characters are digits.\nSeries.str.isdecimal : Check whether all characters are decimal.\nSeries.str.isspace : Check whether all characters are whitespace.\nSeries.str.islower : Check whether all characters are lowercase.\nSeries.str.isupper : Check whether all characters are uppercase.\nSeries.str.istitle : Check whether all characters are titlecase.\n\nExamples\n--------\n**Checks for Alphabetic and Numeric Characters**\n\n>>> s1 = pd.Series(['one', 'one1', '1', ''])\n\n>>> s1.str.isalpha()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s1.str.isnumeric()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\n>>> s1.str.isalnum()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\nNote that checks against characters mixed with any additional punctuation\nor whitespace will evaluate to false for an alphanumeric check.\n\n>>> s2 = pd.Series(['A B', '1.5', '3,000'])\n>>> s2.str.isalnum()\n0    False\n1    False\n2    False\ndtype: bool\n\n**More Detailed Checks for Numeric Characters**\n\nThere are several different but overlapping sets of numeric characters that\ncan be checked for.\n\n>>> s3 = pd.Series(['23', '\u00b3', '\u2155', ''])\n\nThe ``s3.str.isdecimal`` method checks for characters used to form numbers\nin base 10.\n\n>>> s3.str.isdecimal()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isdigit`` method is the same as ``s3.str.isdecimal`` but also\nincludes special digits, like superscripted and subscripted digits in\nunicode.\n\n>>> s3.str.isdigit()\n0     True\n1     True\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isnumeric`` method is the same as ``s3.str.isdigit`` but also\nincludes other characters that can represent quantities such as unicode\nfractions.\n\n>>> s3.str.isnumeric()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\n**Checks for Whitespace**\n\n>>> s4 = pd.Series([' ', '\\t\\r\\n ', ''])\n>>> s4.str.isspace()\n0     True\n1     True\n2    False\ndtype: bool\n\n**Checks for Character Case**\n\n>>> s5 = pd.Series(['leopard', 'Golden Eagle', 'SNAKE', ''])\n\n>>> s5.str.islower()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s5.str.isupper()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\nThe ``s5.str.istitle`` method checks for whether all words are in title\ncase (whether only the first letter of each word is capitalized). Words are\nassumed to be as any sequence of non-numeric characters separated by\nwhitespace characters.\n\n>>> s5.str.istitle()\n0    False\n1     True\n2    False\n3    False\ndtype: bool", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 1862, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L1862", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": "pandas.Series.str.istitle"}, "pandas.Series.str.isdecimal": {"type": "function", "docstring": "Check whether all characters in each string are decimal.\n\nThis is equivalent to running the Python string method\n:meth:`str.isdecimal` for each element of the Series/Index. If a string\nhas zero characters, ``False`` is returned for that check.\n\nReturns\n-------\nSeries or Index of bool\n    Series or Index of boolean values with the same length as the original\n    Series/Index.\n\nSee Also\n--------\nSeries.str.isalpha : Check whether all characters are alphabetic.\nSeries.str.isnumeric : Check whether all characters are numeric.\nSeries.str.isalnum : Check whether all characters are alphanumeric.\nSeries.str.isdigit : Check whether all characters are digits.\nSeries.str.isdecimal : Check whether all characters are decimal.\nSeries.str.isspace : Check whether all characters are whitespace.\nSeries.str.islower : Check whether all characters are lowercase.\nSeries.str.isupper : Check whether all characters are uppercase.\nSeries.str.istitle : Check whether all characters are titlecase.\n\nExamples\n--------\n**Checks for Alphabetic and Numeric Characters**\n\n>>> s1 = pd.Series(['one', 'one1', '1', ''])\n\n>>> s1.str.isalpha()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s1.str.isnumeric()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\n>>> s1.str.isalnum()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\nNote that checks against characters mixed with any additional punctuation\nor whitespace will evaluate to false for an alphanumeric check.\n\n>>> s2 = pd.Series(['A B', '1.5', '3,000'])\n>>> s2.str.isalnum()\n0    False\n1    False\n2    False\ndtype: bool\n\n**More Detailed Checks for Numeric Characters**\n\nThere are several different but overlapping sets of numeric characters that\ncan be checked for.\n\n>>> s3 = pd.Series(['23', '\u00b3', '\u2155', ''])\n\nThe ``s3.str.isdecimal`` method checks for characters used to form numbers\nin base 10.\n\n>>> s3.str.isdecimal()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isdigit`` method is the same as ``s3.str.isdecimal`` but also\nincludes special digits, like superscripted and subscripted digits in\nunicode.\n\n>>> s3.str.isdigit()\n0     True\n1     True\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isnumeric`` method is the same as ``s3.str.isdigit`` but also\nincludes other characters that can represent quantities such as unicode\nfractions.\n\n>>> s3.str.isnumeric()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\n**Checks for Whitespace**\n\n>>> s4 = pd.Series([' ', '\\t\\r\\n ', ''])\n>>> s4.str.isspace()\n0     True\n1     True\n2    False\ndtype: bool\n\n**Checks for Character Case**\n\n>>> s5 = pd.Series(['leopard', 'Golden Eagle', 'SNAKE', ''])\n\n>>> s5.str.islower()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s5.str.isupper()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\nThe ``s5.str.istitle`` method checks for whether all words are in title\ncase (whether only the first letter of each word is capitalized). Words are\nassumed to be as any sequence of non-numeric characters separated by\nwhitespace characters.\n\n>>> s5.str.istitle()\n0    False\n1     True\n2    False\n3    False\ndtype: bool", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 1862, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L1862", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": "pandas.Series.str.isnumeric"}, "pandas.Series.str.get_dummies": {"type": "function", "docstring": "Split each string in the Series by sep and return a DataFrame\nof dummy/indicator variables.\n\nParameters\n----------\nsep : str, default \"|\"\n    String to split on.\n\nReturns\n-------\nDataFrame\n    Dummy variables corresponding to values of the Series.\n\nSee Also\n--------\nget_dummies : Convert categorical variable into dummy/indicator\n    variables.\n\nExamples\n--------\n>>> pd.Series(['a|b', 'a', 'a|c']).str.get_dummies()\n   a  b  c\n0  1  1  0\n1  1  0  0\n2  1  0  1\n\n>>> pd.Series(['a|b', np.nan, 'a|c']).str.get_dummies()\n   a  b  c\n0  1  1  0\n1  0  0  0\n2  1  0  1", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 2864, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L2864", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {sep}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.str": {"type": "type", "docstring": "Vectorized string functions for Series and Index. NAs stay NA unless\nhandled otherwise by a particular method. Patterned after Python's string\nmethods, with some inspiration from R's stringr package.\n\nExamples\n--------\n>>> s.str.split('_')\n>>> s.str.replace('_', '')", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 1914, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L1914", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {data} not documented"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 8, in pandas.Series.str\nFailed example:\n    s.str.split('_')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.str[0]>\", line 1, in <module>\n        s.str.split('_')\n    NameError: name 's' is not defined\n**********************************************************************\nLine 9, in pandas.Series.str\nFailed example:\n    s.str.replace('_', '')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.str[1]>\", line 1, in <module>\n        s.str.replace('_', '')\n    NameError: name 's' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 's' (2 times)"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 8, in pandas.Series.str\nFailed example:\n    s.str.split('_')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.str[0]>\", line 1, in <module>\n        s.str.split('_')\n    NameError: name 's' is not defined\n**********************************************************************\nLine 9, in pandas.Series.str\nFailed example:\n    s.str.replace('_', '')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.str[1]>\", line 1, in <module>\n        s.str.replace('_', '')\n    NameError: name 's' is not defined\n", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.cat": {"type": "type", "docstring": "Accessor object for categorical properties of the Series values.\n\nBe aware that assigning to `categories` is a inplace operation, while all\nmethods return new categorical data per default (but can be called with\n`inplace=True`).\n\nParameters\n----------\ndata : Series or CategoricalIndex\n\nExamples\n--------\n>>> s.cat.categories\n>>> s.cat.categories = list('abc')\n>>> s.cat.rename_categories(list('cab'))\n>>> s.cat.reorder_categories(list('cab'))\n>>> s.cat.add_categories(['d','e'])\n>>> s.cat.remove_categories(['d'])\n>>> s.cat.remove_unused_categories()\n>>> s.cat.set_categories(list('abcde'))\n>>> s.cat.as_ordered()\n>>> s.cat.as_unordered()", "deprecated": false, "file": "pandas/core/arrays/categorical.py", "file_line": 2518, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/categorical.py#L2518", "errors": [["PR07", "Parameter \"data\" has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 14, in pandas.Series.cat\nFailed example:\n    s.cat.categories\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.cat[0]>\", line 1, in <module>\n        s.cat.categories\n    NameError: name 's' is not defined\n**********************************************************************\nLine 15, in pandas.Series.cat\nFailed example:\n    s.cat.categories = list('abc')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.cat[1]>\", line 1, in <module>\n        s.cat.categories = list('abc')\n    NameError: name 's' is not defined\n**********************************************************************\nLine 16, in pandas.Series.cat\nFailed example:\n    s.cat.rename_categories(list('cab'))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.cat[2]>\", line 1, in <module>\n        s.cat.rename_categories(list('cab'))\n    NameError: name 's' is not defined\n**********************************************************************\nLine 17, in pandas.Series.cat\nFailed example:\n    s.cat.reorder_categories(list('cab'))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.cat[3]>\", line 1, in <module>\n        s.cat.reorder_categories(list('cab'))\n    NameError: name 's' is not defined\n**********************************************************************\nLine 18, in pandas.Series.cat\nFailed example:\n    s.cat.add_categories(['d','e'])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.cat[4]>\", line 1, in <module>\n        s.cat.add_categories(['d','e'])\n    NameError: name 's' is not defined\n**********************************************************************\nLine 19, in pandas.Series.cat\nFailed example:\n    s.cat.remove_categories(['d'])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.cat[5]>\", line 1, in <module>\n        s.cat.remove_categories(['d'])\n    NameError: name 's' is not defined\n**********************************************************************\nLine 20, in pandas.Series.cat\nFailed example:\n    s.cat.remove_unused_categories()\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.cat[6]>\", line 1, in <module>\n        s.cat.remove_unused_categories()\n    NameError: name 's' is not defined\n**********************************************************************\nLine 21, in pandas.Series.cat\nFailed example:\n    s.cat.set_categories(list('abcde'))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.cat[7]>\", line 1, in <module>\n        s.cat.set_categories(list('abcde'))\n    NameError: name 's' is not defined\n**********************************************************************\nLine 22, in pandas.Series.cat\nFailed example:\n    s.cat.as_ordered()\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.cat[8]>\", line 1, in <module>\n        s.cat.as_ordered()\n    NameError: name 's' is not defined\n**********************************************************************\nLine 23, in pandas.Series.cat\nFailed example:\n    s.cat.as_unordered()\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.cat[9]>\", line 1, in <module>\n        s.cat.as_unordered()\n    NameError: name 's' is not defined\n"], ["EX03", "flake8 error: E231 missing whitespace after ','"], ["EX03", "flake8 error: F821 undefined name 's' (10 times)"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 14, in pandas.Series.cat\nFailed example:\n    s.cat.categories\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.cat[0]>\", line 1, in <module>\n        s.cat.categories\n    NameError: name 's' is not defined\n**********************************************************************\nLine 15, in pandas.Series.cat\nFailed example:\n    s.cat.categories = list('abc')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.cat[1]>\", line 1, in <module>\n        s.cat.categories = list('abc')\n    NameError: name 's' is not defined\n**********************************************************************\nLine 16, in pandas.Series.cat\nFailed example:\n    s.cat.rename_categories(list('cab'))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.cat[2]>\", line 1, in <module>\n        s.cat.rename_categories(list('cab'))\n    NameError: name 's' is not defined\n**********************************************************************\nLine 17, in pandas.Series.cat\nFailed example:\n    s.cat.reorder_categories(list('cab'))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.cat[3]>\", line 1, in <module>\n        s.cat.reorder_categories(list('cab'))\n    NameError: name 's' is not defined\n**********************************************************************\nLine 18, in pandas.Series.cat\nFailed example:\n    s.cat.add_categories(['d','e'])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.cat[4]>\", line 1, in <module>\n        s.cat.add_categories(['d','e'])\n    NameError: name 's' is not defined\n**********************************************************************\nLine 19, in pandas.Series.cat\nFailed example:\n    s.cat.remove_categories(['d'])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.cat[5]>\", line 1, in <module>\n        s.cat.remove_categories(['d'])\n    NameError: name 's' is not defined\n**********************************************************************\nLine 20, in pandas.Series.cat\nFailed example:\n    s.cat.remove_unused_categories()\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.cat[6]>\", line 1, in <module>\n        s.cat.remove_unused_categories()\n    NameError: name 's' is not defined\n**********************************************************************\nLine 21, in pandas.Series.cat\nFailed example:\n    s.cat.set_categories(list('abcde'))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.cat[7]>\", line 1, in <module>\n        s.cat.set_categories(list('abcde'))\n    NameError: name 's' is not defined\n**********************************************************************\nLine 22, in pandas.Series.cat\nFailed example:\n    s.cat.as_ordered()\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.cat[8]>\", line 1, in <module>\n        s.cat.as_ordered()\n    NameError: name 's' is not defined\n**********************************************************************\nLine 23, in pandas.Series.cat\nFailed example:\n    s.cat.as_unordered()\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.cat[9]>\", line 1, in <module>\n        s.cat.as_unordered()\n    NameError: name 's' is not defined\n", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.dt": {"type": "type", "docstring": "Accessor object for datetimelike properties of the Series values.\n\nExamples\n--------\n>>> s.dt.hour\n>>> s.dt.second\n>>> s.dt.quarter\n\nReturns a Series indexed like the original Series.\nRaises TypeError if the Series does not contain datetimelike values.", "deprecated": false, "file": "pandas/core/indexes/accessors.py", "file_line": 309, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/accessors.py#L309", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Series.sparse": {"type": "type", "docstring": "Accessor for SparseSparse from other sparse matrix data types.", "deprecated": false, "file": "pandas/core/arrays/sparse.py", "file_line": 1949, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/sparse.py#L1949", "errors": [["PR01", "Parameters {data} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.DataFrame.sparse": {"type": "type", "docstring": "DataFrame accessor for sparse data.\n\n.. versionadded:: 0.25.0", "deprecated": false, "file": "pandas/core/arrays/sparse.py", "file_line": 2107, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/sparse.py#L2107", "errors": [["PR01", "Parameters {data} not documented"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": ""}, "pandas.Index.str": {"type": "type", "docstring": "Vectorized string functions for Series and Index. NAs stay NA unless\nhandled otherwise by a particular method. Patterned after Python's string\nmethods, with some inspiration from R's stringr package.\n\nExamples\n--------\n>>> s.str.split('_')\n>>> s.str.replace('_', '')", "deprecated": false, "file": "pandas/core/strings.py", "file_line": 1914, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/strings.py#L1914", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {data} not documented"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 8, in pandas.Index.str\nFailed example:\n    s.str.split('_')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Index.str[0]>\", line 1, in <module>\n        s.str.split('_')\n    NameError: name 's' is not defined\n**********************************************************************\nLine 9, in pandas.Index.str\nFailed example:\n    s.str.replace('_', '')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Index.str[1]>\", line 1, in <module>\n        s.str.replace('_', '')\n    NameError: name 's' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 's' (2 times)"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 8, in pandas.Index.str\nFailed example:\n    s.str.split('_')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Index.str[0]>\", line 1, in <module>\n        s.str.split('_')\n    NameError: name 's' is not defined\n**********************************************************************\nLine 9, in pandas.Index.str\nFailed example:\n    s.str.replace('_', '')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Index.str[1]>\", line 1, in <module>\n        s.str.replace('_', '')\n    NameError: name 's' is not defined\n", "in_api": true, "section": "Accessors", "subsection": "String handling", "shared_code_with": "pandas.Series.str"}, "pandas.Series.cat.categories": {"type": "property", "docstring": "The categories of this categorical.\n\nSetting assigns new values to each category (effectively a rename of\neach individual category).\n\nThe assigned value has to be a list-like object. All items must be\nunique and the number of items in the new categories must be the same\nas the number of items in the old categories.\n\nAssigning to `categories` is a inplace operation!\n\nRaises\n------\nValueError\n    If the new categories do not validate as categories or if the\n    number of new categories is unequal the number of old categories\n\nSee Also\n--------\nrename_categories\nreorder_categories\nadd_categories\nremove_categories\nremove_unused_categories\nset_categories", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [["SA04", "Missing description for See Also \"rename_categories\" reference"], ["SA04", "Missing description for See Also \"reorder_categories\" reference"], ["SA04", "Missing description for See Also \"add_categories\" reference"], ["SA04", "Missing description for See Also \"remove_categories\" reference"], ["SA04", "Missing description for See Also \"remove_unused_categories\" reference"], ["SA04", "Missing description for See Also \"set_categories\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Categorical accessor", "shared_code_with": "pandas.Series.dt.nanoseconds"}, "pandas.Series.cat.ordered": {"type": "property", "docstring": "Whether the categories have an ordered relationship.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Categorical accessor", "shared_code_with": "pandas.Series.cat.categories"}, "pandas.Series.cat.codes": {"type": "property", "docstring": "Return Series of codes as well as the index.", "deprecated": false, "file": "pandas/core/arrays/categorical.py", "file_line": 2562, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/categorical.py#L2562", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Categorical accessor", "shared_code_with": ""}, "pandas.Series.cat.rename_categories": {"type": "function", "docstring": "Rename categories.\n\nParameters\n----------\nnew_categories : list-like, dict-like or callable\n\n   * list-like: all items must be unique and the number of items in\n     the new categories must match the existing number of categories.\n\n   * dict-like: specifies a mapping from\n     old categories to new. Categories not contained in the mapping\n     are passed through and extra categories in the mapping are\n     ignored.\n\n     .. versionadded:: 0.21.0\n\n   * callable : a callable that is called on all items in the old\n     categories and whose return values comprise the new categories.\n\n     .. versionadded:: 0.23.0\n\ninplace : bool, default False\n   Whether or not to rename the categories inplace or return a copy of\n   this categorical with renamed categories.\n\nReturns\n-------\ncat : Categorical or None\n   With ``inplace=False``, the new categorical is returned.\n   With ``inplace=True``, there is no return value.\n\nRaises\n------\nValueError\n    If new categories are list-like and do not have the same number of\n    items than the current categories or do not validate as categories\n\nSee Also\n--------\nreorder_categories\nadd_categories\nremove_categories\nremove_unused_categories\nset_categories\n\nExamples\n--------\n>>> c = pd.Categorical(['a', 'a', 'b'])\n>>> c.rename_categories([0, 1])\n[0, 0, 1]\nCategories (2, int64): [0, 1]\n\nFor dict-like ``new_categories``, extra keys are ignored and\ncategories not in the dictionary are passed through\n\n>>> c.rename_categories({'a': 'A', 'c': 'C'})\n[A, A, b]\nCategories (2, object): [A, b]\n\nYou may also provide a callable to create the new categories\n\n>>> c.rename_categories(lambda x: x.upper())\n[A, A, B]\nCategories (2, object): [A, B]", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {inplace, new_categories}"], ["PR08", "Parameter \"new_categories\" description should start with a capital letter"], ["PR09", "Parameter \"new_categories\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["SA04", "Missing description for See Also \"reorder_categories\" reference"], ["SA04", "Missing description for See Also \"add_categories\" reference"], ["SA04", "Missing description for See Also \"remove_categories\" reference"], ["SA04", "Missing description for See Also \"remove_unused_categories\" reference"], ["SA04", "Missing description for See Also \"set_categories\" reference"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Categorical accessor", "shared_code_with": "pandas.Series.dt.total_seconds"}, "pandas.Series.cat.reorder_categories": {"type": "function", "docstring": "Reorder categories as specified in new_categories.\n\n`new_categories` need to include all old categories and no new category\nitems.\n\nParameters\n----------\nnew_categories : Index-like\n   The categories in new order.\nordered : bool, optional\n   Whether or not the categorical is treated as a ordered categorical.\n   If not given, do not change the ordered information.\ninplace : bool, default False\n   Whether or not to reorder the categories inplace or return a copy of\n   this categorical with reordered categories.\n\nReturns\n-------\ncat : Categorical with reordered categories or None if inplace.\n\nRaises\n------\nValueError\n    If the new categories do not contain all old category items or any\n    new ones\n\nSee Also\n--------\nrename_categories\nadd_categories\nremove_categories\nremove_unused_categories\nset_categories", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {inplace, new_categories, ordered}"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"rename_categories\" reference"], ["SA04", "Missing description for See Also \"add_categories\" reference"], ["SA04", "Missing description for See Also \"remove_categories\" reference"], ["SA04", "Missing description for See Also \"remove_unused_categories\" reference"], ["SA04", "Missing description for See Also \"set_categories\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Categorical accessor", "shared_code_with": "pandas.Series.cat.rename_categories"}, "pandas.Series.cat.add_categories": {"type": "function", "docstring": "Add new categories.\n\n`new_categories` will be included at the last/highest place in the\ncategories and will be unused directly after this call.\n\nParameters\n----------\nnew_categories : category or list-like of category\n   The new categories to be included.\ninplace : bool, default False\n   Whether or not to add the categories inplace or return a copy of\n   this categorical with added categories.\n\nReturns\n-------\ncat : Categorical with new categories added or None if inplace.\n\nRaises\n------\nValueError\n    If the new categories include old categories or do not validate as\n    categories\n\nSee Also\n--------\nrename_categories\nreorder_categories\nremove_categories\nremove_unused_categories\nset_categories", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {inplace, new_categories}"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"rename_categories\" reference"], ["SA04", "Missing description for See Also \"reorder_categories\" reference"], ["SA04", "Missing description for See Also \"remove_categories\" reference"], ["SA04", "Missing description for See Also \"remove_unused_categories\" reference"], ["SA04", "Missing description for See Also \"set_categories\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Categorical accessor", "shared_code_with": "pandas.Series.cat.reorder_categories"}, "pandas.Series.cat.remove_categories": {"type": "function", "docstring": "Remove the specified categories.\n\n`removals` must be included in the old categories. Values which were in\nthe removed categories will be set to NaN\n\nParameters\n----------\nremovals : category or list of categories\n   The categories which should be removed.\ninplace : bool, default False\n   Whether or not to remove the categories inplace or return a copy of\n   this categorical with removed categories.\n\nReturns\n-------\ncat : Categorical with removed categories or None if inplace.\n\nRaises\n------\nValueError\n    If the removals are not contained in the categories\n\nSee Also\n--------\nrename_categories\nreorder_categories\nadd_categories\nremove_unused_categories\nset_categories", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {removals, inplace}"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"rename_categories\" reference"], ["SA04", "Missing description for See Also \"reorder_categories\" reference"], ["SA04", "Missing description for See Also \"add_categories\" reference"], ["SA04", "Missing description for See Also \"remove_unused_categories\" reference"], ["SA04", "Missing description for See Also \"set_categories\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Categorical accessor", "shared_code_with": "pandas.Series.cat.add_categories"}, "pandas.Series.cat.remove_unused_categories": {"type": "function", "docstring": "Remove categories which are not used.\n\nParameters\n----------\ninplace : bool, default False\n   Whether or not to drop unused categories inplace or return a copy of\n   this categorical with unused categories dropped.\n\nReturns\n-------\ncat : Categorical with unused categories dropped or None if inplace.\n\nSee Also\n--------\nrename_categories\nreorder_categories\nadd_categories\nremove_categories\nset_categories", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {inplace}"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"rename_categories\" reference"], ["SA04", "Missing description for See Also \"reorder_categories\" reference"], ["SA04", "Missing description for See Also \"add_categories\" reference"], ["SA04", "Missing description for See Also \"remove_categories\" reference"], ["SA04", "Missing description for See Also \"set_categories\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Categorical accessor", "shared_code_with": "pandas.Series.cat.remove_categories"}, "pandas.Series.cat.set_categories": {"type": "function", "docstring": "Set the categories to the specified new_categories.\n\n`new_categories` can include new categories (which will result in\nunused categories) or remove old categories (which results in values\nset to NaN). If `rename==True`, the categories will simple be renamed\n(less or more items than in old categories will result in values set to\nNaN or in unused categories respectively).\n\nThis method can be used to perform more than one action of adding,\nremoving, and reordering simultaneously and is therefore faster than\nperforming the individual steps via the more specialised methods.\n\nOn the other hand this methods does not do checks (e.g., whether the\nold categories are included in the new categories on a reorder), which\ncan result in surprising changes, for example when using special string\ndtypes on python3, which does not considers a S1 string equal to a\nsingle char python string.\n\nParameters\n----------\nnew_categories : Index-like\n   The categories in new order.\nordered : bool, default False\n   Whether or not the categorical is treated as a ordered categorical.\n   If not given, do not change the ordered information.\nrename : bool, default False\n   Whether or not the new_categories should be considered as a rename\n   of the old categories or as reordered categories.\ninplace : bool, default False\n   Whether or not to reorder the categories in-place or return a copy\n   of this categorical with reordered categories.\n\nReturns\n-------\nCategorical with reordered categories or None if inplace.\n\nRaises\n------\nValueError\n    If new_categories does not validate as categories\n\nSee Also\n--------\nrename_categories\nreorder_categories\nadd_categories\nremove_categories\nremove_unused_categories", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {inplace, new_categories, rename, ordered}"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"rename_categories\" reference"], ["SA04", "Missing description for See Also \"reorder_categories\" reference"], ["SA04", "Missing description for See Also \"add_categories\" reference"], ["SA04", "Missing description for See Also \"remove_categories\" reference"], ["SA04", "Missing description for See Also \"remove_unused_categories\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Categorical accessor", "shared_code_with": "pandas.Series.cat.remove_unused_categories"}, "pandas.Series.cat.as_ordered": {"type": "function", "docstring": "Set the Categorical to be ordered.\n\nParameters\n----------\ninplace : bool, default False\n   Whether or not to set the ordered attribute in-place or return\n   a copy of this categorical with ordered set to True.\n\nReturns\n-------\nCategorical\n    Ordered Categorical.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {inplace}"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Categorical accessor", "shared_code_with": "pandas.Series.cat.set_categories"}, "pandas.Series.cat.as_unordered": {"type": "function", "docstring": "Set the Categorical to be unordered.\n\nParameters\n----------\ninplace : bool, default False\n   Whether or not to set the ordered attribute in-place or return\n   a copy of this categorical with ordered set to False.\n\nReturns\n-------\nCategorical\n    Unordered Categorical.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {inplace}"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Categorical accessor", "shared_code_with": "pandas.Series.cat.as_ordered"}, "pandas.Series.sparse.npoints": {"type": "property", "docstring": "The number of non- ``fill_value`` points.\n\nExamples\n--------\n>>> s = SparseArray([0, 0, 1, 1, 1], fill_value=0)\n>>> s.npoints\n3", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 6, in pandas.Series.sparse.npoints\nFailed example:\n    s = SparseArray([0, 0, 1, 1, 1], fill_value=0)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.npoints[0]>\", line 1, in <module>\n        s = SparseArray([0, 0, 1, 1, 1], fill_value=0)\n    NameError: name 'SparseArray' is not defined\n**********************************************************************\nLine 7, in pandas.Series.sparse.npoints\nFailed example:\n    s.npoints\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.npoints[1]>\", line 1, in <module>\n        s.npoints\n    NameError: name 's' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'SparseArray'"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 6, in pandas.Series.sparse.npoints\nFailed example:\n    s = SparseArray([0, 0, 1, 1, 1], fill_value=0)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.npoints[0]>\", line 1, in <module>\n        s = SparseArray([0, 0, 1, 1, 1], fill_value=0)\n    NameError: name 'SparseArray' is not defined\n**********************************************************************\nLine 7, in pandas.Series.sparse.npoints\nFailed example:\n    s.npoints\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.npoints[1]>\", line 1, in <module>\n        s.npoints\n    NameError: name 's' is not defined\n", "in_api": true, "section": "Accessors", "subsection": "Sparse accessor", "shared_code_with": "pandas.Series.cat.ordered"}, "pandas.Series.sparse.density": {"type": "property", "docstring": "The percent of non- ``fill_value`` points, as decimal.\n\nExamples\n--------\n>>> s = SparseArray([0, 0, 1, 1, 1], fill_value=0)\n>>> s.density\n0.6", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 6, in pandas.Series.sparse.density\nFailed example:\n    s = SparseArray([0, 0, 1, 1, 1], fill_value=0)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.density[0]>\", line 1, in <module>\n        s = SparseArray([0, 0, 1, 1, 1], fill_value=0)\n    NameError: name 'SparseArray' is not defined\n**********************************************************************\nLine 7, in pandas.Series.sparse.density\nFailed example:\n    s.density\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.density[1]>\", line 1, in <module>\n        s.density\n    NameError: name 's' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'SparseArray'"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 6, in pandas.Series.sparse.density\nFailed example:\n    s = SparseArray([0, 0, 1, 1, 1], fill_value=0)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.density[0]>\", line 1, in <module>\n        s = SparseArray([0, 0, 1, 1, 1], fill_value=0)\n    NameError: name 'SparseArray' is not defined\n**********************************************************************\nLine 7, in pandas.Series.sparse.density\nFailed example:\n    s.density\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.density[1]>\", line 1, in <module>\n        s.density\n    NameError: name 's' is not defined\n", "in_api": true, "section": "Accessors", "subsection": "Sparse accessor", "shared_code_with": "pandas.Series.sparse.npoints"}, "pandas.Series.sparse.fill_value": {"type": "property", "docstring": "Elements in `data` that are `fill_value` are not stored.\n\nFor memory savings, this should be the most common value in the array.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Accessors", "subsection": "Sparse accessor", "shared_code_with": "pandas.Series.sparse.density"}, "pandas.Series.sparse.sp_values": {"type": "property", "docstring": "An ndarray containing the non- ``fill_value`` values.\n\nExamples\n--------\n>>> s = SparseArray([0, 0, 1, 0, 2], fill_value=0)\n>>> s.sp_values\narray([1, 2])", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 6, in pandas.Series.sparse.sp_values\nFailed example:\n    s = SparseArray([0, 0, 1, 0, 2], fill_value=0)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.sp_values[0]>\", line 1, in <module>\n        s = SparseArray([0, 0, 1, 0, 2], fill_value=0)\n    NameError: name 'SparseArray' is not defined\n**********************************************************************\nLine 7, in pandas.Series.sparse.sp_values\nFailed example:\n    s.sp_values\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.sp_values[1]>\", line 1, in <module>\n        s.sp_values\n    NameError: name 's' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'SparseArray'"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 6, in pandas.Series.sparse.sp_values\nFailed example:\n    s = SparseArray([0, 0, 1, 0, 2], fill_value=0)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.sp_values[0]>\", line 1, in <module>\n        s = SparseArray([0, 0, 1, 0, 2], fill_value=0)\n    NameError: name 'SparseArray' is not defined\n**********************************************************************\nLine 7, in pandas.Series.sparse.sp_values\nFailed example:\n    s.sp_values\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.sp_values[1]>\", line 1, in <module>\n        s.sp_values\n    NameError: name 's' is not defined\n", "in_api": true, "section": "Accessors", "subsection": "Sparse accessor", "shared_code_with": "pandas.Series.sparse.fill_value"}, "pandas.Series.sparse.from_coo": {"type": "method", "docstring": "Create a SparseSeries from a scipy.sparse.coo_matrix.\n\nParameters\n----------\nA : scipy.sparse.coo_matrix\ndense_index : bool, default False\n    If False (default), the SparseSeries index consists of only the\n    coords of the non-null entries of the original coo_matrix.\n    If True, the SparseSeries index consists of the full sorted\n    (row, col) coordinates of the coo_matrix.\n\nReturns\n-------\ns : SparseSeries\n\nExamples\n--------\n>>> from scipy import sparse\n>>> A = sparse.coo_matrix(([3.0, 1.0, 2.0], ([1, 0, 0], [0, 2, 3])),\n                       shape=(3, 4))\n>>> A\n<3x4 sparse matrix of type '<class 'numpy.float64'>'\n        with 3 stored elements in COOrdinate format>\n>>> A.todense()\nmatrix([[ 0.,  0.,  1.,  2.],\n        [ 3.,  0.,  0.,  0.],\n        [ 0.,  0.,  0.,  0.]])\n>>> ss = pd.SparseSeries.from_coo(A)\n>>> ss\n0  2    1\n   3    2\n1  0    3\ndtype: float64\nBlockIndex\nBlock locations: array([0], dtype=int32)\nBlock lengths: array([3], dtype=int32)", "deprecated": false, "file": "pandas/core/arrays/sparse.py", "file_line": 1969, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/sparse.py#L1969", "errors": [["PR07", "Parameter \"A\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 20, in pandas.Series.sparse.from_coo\nFailed example:\n    A = sparse.coo_matrix(([3.0, 1.0, 2.0], ([1, 0, 0], [0, 2, 3])),\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.from_coo[1]>\", line 1\n        A = sparse.coo_matrix(([3.0, 1.0, 2.0], ([1, 0, 0], [0, 2, 3])),\n                                                                       ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 22, in pandas.Series.sparse.from_coo\nFailed example:\n    A\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.from_coo[2]>\", line 1, in <module>\n        A\n    NameError: name 'A' is not defined\n**********************************************************************\nLine 25, in pandas.Series.sparse.from_coo\nFailed example:\n    A.todense()\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.from_coo[3]>\", line 1, in <module>\n        A.todense()\n    NameError: name 'A' is not defined\n**********************************************************************\nLine 29, in pandas.Series.sparse.from_coo\nFailed example:\n    ss = pd.SparseSeries.from_coo(A)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.from_coo[4]>\", line 1, in <module>\n        ss = pd.SparseSeries.from_coo(A)\n    NameError: name 'A' is not defined\n**********************************************************************\nLine 30, in pandas.Series.sparse.from_coo\nFailed example:\n    ss\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.from_coo[5]>\", line 1, in <module>\n        ss\n    NameError: name 'ss' is not defined\n"], ["EX03", "flake8 error: E902 TokenError: EOF in multi-line statement"], ["EX03", "flake8 error: E999 SyntaxError: invalid syntax"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 20, in pandas.Series.sparse.from_coo\nFailed example:\n    A = sparse.coo_matrix(([3.0, 1.0, 2.0], ([1, 0, 0], [0, 2, 3])),\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.from_coo[1]>\", line 1\n        A = sparse.coo_matrix(([3.0, 1.0, 2.0], ([1, 0, 0], [0, 2, 3])),\n                                                                       ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 22, in pandas.Series.sparse.from_coo\nFailed example:\n    A\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.from_coo[2]>\", line 1, in <module>\n        A\n    NameError: name 'A' is not defined\n**********************************************************************\nLine 25, in pandas.Series.sparse.from_coo\nFailed example:\n    A.todense()\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.from_coo[3]>\", line 1, in <module>\n        A.todense()\n    NameError: name 'A' is not defined\n**********************************************************************\nLine 29, in pandas.Series.sparse.from_coo\nFailed example:\n    ss = pd.SparseSeries.from_coo(A)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.from_coo[4]>\", line 1, in <module>\n        ss = pd.SparseSeries.from_coo(A)\n    NameError: name 'A' is not defined\n**********************************************************************\nLine 30, in pandas.Series.sparse.from_coo\nFailed example:\n    ss\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.from_coo[5]>\", line 1, in <module>\n        ss\n    NameError: name 'ss' is not defined\n", "in_api": true, "section": "Accessors", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.sparse.to_coo": {"type": "function", "docstring": "Create a scipy.sparse.coo_matrix from a SparseSeries with MultiIndex.\n\nUse row_levels and column_levels to determine the row and column\ncoordinates respectively. row_levels and column_levels are the names\n(labels) or numbers of the levels. {row_levels, column_levels} must be\na partition of the MultiIndex level names (or numbers).\n\nParameters\n----------\nrow_levels : tuple/list\ncolumn_levels : tuple/list\nsort_labels : bool, default False\n    Sort the row and column labels before forming the sparse matrix.\n\nReturns\n-------\ny : scipy.sparse.coo_matrix\nrows : list (row labels)\ncolumns : list (column labels)\n\nExamples\n--------\n>>> s = pd.Series([3.0, np.nan, 1.0, 3.0, np.nan, np.nan])\n>>> s.index = pd.MultiIndex.from_tuples([(1, 2, 'a', 0),\n                                        (1, 2, 'a', 1),\n                                        (1, 1, 'b', 0),\n                                        (1, 1, 'b', 1),\n                                        (2, 1, 'b', 0),\n                                        (2, 1, 'b', 1)],\n                                        names=['A', 'B', 'C', 'D'])\n>>> ss = s.to_sparse()\n>>> A, rows, columns = ss.to_coo(row_levels=['A', 'B'],\n                                 column_levels=['C', 'D'],\n                                 sort_labels=True)\n>>> A\n<3x4 sparse matrix of type '<class 'numpy.float64'>'\n        with 3 stored elements in COOrdinate format>\n>>> A.todense()\nmatrix([[ 0.,  0.,  1.,  3.],\n[ 3.,  0.,  0.,  0.],\n[ 0.,  0.,  0.,  0.]])\n>>> rows\n[(1, 1), (1, 2), (2, 1)]\n>>> columns\n[('a', 0), ('a', 1), ('b', 0), ('b', 1)]", "deprecated": false, "file": "pandas/core/arrays/sparse.py", "file_line": 2017, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/sparse.py#L2017", "errors": [["PR07", "Parameter \"row_levels\" has no description"], ["PR07", "Parameter \"column_levels\" has no description"], ["RT03", "Return value has no description"], ["RT03", "Return value has no description"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 25, in pandas.Series.sparse.to_coo\nFailed example:\n    s.index = pd.MultiIndex.from_tuples([(1, 2, 'a', 0),\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.to_coo[1]>\", line 1\n        s.index = pd.MultiIndex.from_tuples([(1, 2, 'a', 0),\n                                                           ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 33, in pandas.Series.sparse.to_coo\nFailed example:\n    A, rows, columns = ss.to_coo(row_levels=['A', 'B'],\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.to_coo[3]>\", line 1\n        A, rows, columns = ss.to_coo(row_levels=['A', 'B'],\n                                                          ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 36, in pandas.Series.sparse.to_coo\nFailed example:\n    A\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.to_coo[4]>\", line 1, in <module>\n        A\n    NameError: name 'A' is not defined\n**********************************************************************\nLine 39, in pandas.Series.sparse.to_coo\nFailed example:\n    A.todense()\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.to_coo[5]>\", line 1, in <module>\n        A.todense()\n    NameError: name 'A' is not defined\n**********************************************************************\nLine 43, in pandas.Series.sparse.to_coo\nFailed example:\n    rows\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.to_coo[6]>\", line 1, in <module>\n        rows\n    NameError: name 'rows' is not defined\n**********************************************************************\nLine 45, in pandas.Series.sparse.to_coo\nFailed example:\n    columns\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.to_coo[7]>\", line 1, in <module>\n        columns\n    NameError: name 'columns' is not defined\n"], ["EX03", "flake8 error: E902 TokenError: EOF in multi-line statement"], ["EX03", "flake8 error: E999 SyntaxError: invalid syntax"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 25, in pandas.Series.sparse.to_coo\nFailed example:\n    s.index = pd.MultiIndex.from_tuples([(1, 2, 'a', 0),\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.to_coo[1]>\", line 1\n        s.index = pd.MultiIndex.from_tuples([(1, 2, 'a', 0),\n                                                           ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 33, in pandas.Series.sparse.to_coo\nFailed example:\n    A, rows, columns = ss.to_coo(row_levels=['A', 'B'],\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.to_coo[3]>\", line 1\n        A, rows, columns = ss.to_coo(row_levels=['A', 'B'],\n                                                          ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 36, in pandas.Series.sparse.to_coo\nFailed example:\n    A\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.to_coo[4]>\", line 1, in <module>\n        A\n    NameError: name 'A' is not defined\n**********************************************************************\nLine 39, in pandas.Series.sparse.to_coo\nFailed example:\n    A.todense()\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.to_coo[5]>\", line 1, in <module>\n        A.todense()\n    NameError: name 'A' is not defined\n**********************************************************************\nLine 43, in pandas.Series.sparse.to_coo\nFailed example:\n    rows\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.to_coo[6]>\", line 1, in <module>\n        rows\n    NameError: name 'rows' is not defined\n**********************************************************************\nLine 45, in pandas.Series.sparse.to_coo\nFailed example:\n    columns\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Series.sparse.to_coo[7]>\", line 1, in <module>\n        columns\n    NameError: name 'columns' is not defined\n", "in_api": true, "section": "Accessors", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.plot": {"type": "type", "docstring": "Make plots of Series or DataFrame using the backend specified by the\noption ``plotting.backend``. By default, matplotlib is used.\n\nParameters\n----------\ndata : Series or DataFrame\n    The object for which the method is called\nx : label or position, default None\n    Only used if data is a DataFrame.\ny : label, position or list of label, positions, default None\n    Allows plotting of one column versus another. Only used if data is a\n    DataFrame.\nkind : str\n    - 'line' : line plot (default)\n    - 'bar' : vertical bar plot\n    - 'barh' : horizontal bar plot\n    - 'hist' : histogram\n    - 'box' : boxplot\n    - 'kde' : Kernel Density Estimation plot\n    - 'density' : same as 'kde'\n    - 'area' : area plot\n    - 'pie' : pie plot\n    - 'scatter' : scatter plot\n    - 'hexbin' : hexbin plot\nfigsize : a tuple (width, height) in inches\nuse_index : bool, default True\n    Use index as ticks for x axis\ntitle : str or list\n    Title to use for the plot. If a string is passed, print the string\n    at the top of the figure. If a list is passed and `subplots` is\n    True, print each item in the list above the corresponding subplot.\ngrid : bool, default None (matlab style default)\n    Axis grid lines\nlegend : False/True/'reverse'\n    Place legend on axis subplots\nstyle : list or dict\n    matplotlib line style per column\nlogx : bool or 'sym', default False\n    Use log scaling or symlog scaling on x axis\n    .. versionchanged:: 0.25.0\n\nlogy : bool or 'sym' default False\n    Use log scaling or symlog scaling on y axis\n    .. versionchanged:: 0.25.0\n\nloglog : bool or 'sym', default False\n    Use log scaling or symlog scaling on both x and y axes\n    .. versionchanged:: 0.25.0\n\nxticks : sequence\n    Values to use for the xticks.\nyticks : sequence\n    Values to use for the yticks.\nxlim : 2-tuple/list\nylim : 2-tuple/list\nrot : int, default None\n    Rotation for ticks (xticks for vertical, yticks for horizontal\n    plots)\nfontsize : int, default None\n    Font size for xticks and yticks.\ncolormap : str or matplotlib colormap object, default None\n    Colormap to select colors from. If string, load colormap with that\n    name from matplotlib.\ncolorbar : bool, optional\n    If True, plot colorbar (only relevant for 'scatter' and 'hexbin'\n    plots)\nposition : float\n    Specify relative alignments for bar plot layout.\n    From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5\n    (center)\ntable : bool, Series or DataFrame, default False\n    If True, draw a table using the data in the DataFrame and the data\n    will be transposed to meet matplotlib's default layout.\n    If a Series or DataFrame is passed, use passed data to draw a\n    table.\nyerr : DataFrame, Series, array-like, dict and str\n    See :ref:`Plotting with Error Bars <visualization.errorbars>` for\n    detail.\nxerr : DataFrame, Series, array-like, dict and str\n    Equivalent to yerr.\nmark_right : bool, default True\n    When using a secondary_y axis, automatically mark the column\n    labels with \"(right)\" in the legend\ninclude_bool : bool, default is False\n    If True, boolean values can be plotted.\n`**kwds` : keywords\n    Options to pass to matplotlib plotting method.\n\nReturns\n-------\n:class:`matplotlib.axes.Axes` or numpy.ndarray of them\n    If the backend is not the default matplotlib one, the return value\n    will be the object returned by the backend.\n\nNotes\n-----\n- See matplotlib documentation online for more on this subject\n- If `kind` = 'bar' or 'barh', you can specify relative alignments\n  for bar plot layout by `position` keyword.\n  From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5\n  (center)", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 504, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L504", "errors": [["SS06", "Summary should fit in a single line"], ["PR02", "Unknown parameters {`**kwds`, logy, position, kind, figsize, y, ylim, fontsize, xerr, mark_right, loglog, yticks, xlim, table, rot, logx, include_bool, use_index, legend, x, xticks, colorbar, grid, title, colormap, style, yerr}"], ["PR09", "Parameter \"data\" description should finish with \".\""], ["PR08", "Parameter \"kind\" description should start with a capital letter"], ["PR09", "Parameter \"kind\" description should finish with \".\""], ["PR07", "Parameter \"figsize\" has no description"], ["PR09", "Parameter \"use_index\" description should finish with \".\""], ["PR09", "Parameter \"grid\" description should finish with \".\""], ["PR09", "Parameter \"legend\" description should finish with \".\""], ["PR08", "Parameter \"style\" description should start with a capital letter"], ["PR09", "Parameter \"style\" description should finish with \".\""], ["PR09", "Parameter \"logx\" description should finish with \".\""], ["PR09", "Parameter \"logy\" description should finish with \".\""], ["PR09", "Parameter \"loglog\" description should finish with \".\""], ["PR07", "Parameter \"xlim\" has no description"], ["PR07", "Parameter \"ylim\" has no description"], ["PR09", "Parameter \"rot\" description should finish with \".\""], ["PR09", "Parameter \"colorbar\" description should finish with \".\""], ["PR09", "Parameter \"position\" description should finish with \".\""], ["PR09", "Parameter \"mark_right\" description should finish with \".\""]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Plotting", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.plot.area": {"type": "function", "docstring": "Draw a stacked area plot.\n\nAn area plot displays quantitative data visually.\nThis function wraps the matplotlib area function.\n\nParameters\n----------\nx : label or position, optional\n    Coordinates for the X axis. By default uses the index.\ny : label or position, optional\n    Column to plot. By default uses all columns.\nstacked : bool, default True\n    Area plots are stacked by default. Set to False to create a\n    unstacked plot.\n**kwds : optional\n    Additional keyword arguments are documented in\n    :meth:`DataFrame.plot`.\n\nReturns\n-------\nmatplotlib.axes.Axes or numpy.ndarray\n    Area plot, or array of area plots if subplots is True.\n\nSee Also\n--------\nDataFrame.plot : Make plots of DataFrame using matplotlib / pylab.\n\nExamples\n--------\nDraw an area plot based on basic business metrics:\n\n.. plot::\n    :context: close-figs\n\n    >>> df = pd.DataFrame({\n    ...     'sales': [3, 2, 3, 9, 10, 6],\n    ...     'signups': [5, 5, 6, 12, 14, 13],\n    ...     'visits': [20, 42, 28, 62, 81, 50],\n    ... }, index=pd.date_range(start='2018/01/01', end='2018/07/01',\n    ...                        freq='M'))\n    >>> ax = df.plot.area()\n\nArea plots are stacked by default. To produce an unstacked plot,\npass ``stacked=False``:\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = df.plot.area(stacked=False)\n\nDraw an area plot for a single column:\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = df.plot.area(y='sales')\n\nDraw with a different `x`:\n\n.. plot::\n    :context: close-figs\n\n    >>> df = pd.DataFrame({\n    ...     'sales': [3, 2, 3],\n    ...     'visits': [20, 42, 28],\n    ...     'day': [1, 2, 3],\n    ... })\n    >>> ax = df.plot.area(x='day')", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 1239, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L1239", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {**kwds, stacked}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Plotting", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.plot.bar": {"type": "function", "docstring": "Vertical bar plot.\n\nA bar plot is a plot that presents categorical data with\nrectangular bars with lengths proportional to the values that they\nrepresent. A bar plot shows comparisons among discrete categories. One\naxis of the plot shows the specific categories being compared, and the\nother axis represents a measured value.\n\nParameters\n----------\nx : label or position, optional\n    Allows plotting of one column versus another. If not specified,\n    the index of the DataFrame is used.\ny : label or position, optional\n    Allows plotting of one column versus another. If not specified,\n    all numerical columns are used.\n**kwds\n    Additional keyword arguments are documented in\n    :meth:`DataFrame.plot`.\n\nReturns\n-------\nmatplotlib.axes.Axes or np.ndarray of them\n    An ndarray is returned with one :class:`matplotlib.axes.Axes`\n    per column when ``subplots=True``.\n\nSee Also\n--------\nDataFrame.plot.barh : Horizontal bar plot.\nDataFrame.plot : Make plots of a DataFrame.\nmatplotlib.pyplot.bar : Make a bar plot with matplotlib.\n\nExamples\n--------\nBasic plot.\n\n.. plot::\n    :context: close-figs\n\n    >>> df = pd.DataFrame({'lab':['A', 'B', 'C'], 'val':[10, 30, 20]})\n    >>> ax = df.plot.bar(x='lab', y='val', rot=0)\n\nPlot a whole dataframe to a bar plot. Each column is assigned a\ndistinct color, and each row is nested in a group along the\nhorizontal axis.\n\n.. plot::\n    :context: close-figs\n\n    >>> speed = [0.1, 17.5, 40, 48, 52, 69, 88]\n    >>> lifespan = [2, 8, 70, 1.5, 25, 12, 28]\n    >>> index = ['snail', 'pig', 'elephant',\n    ...          'rabbit', 'giraffe', 'coyote', 'horse']\n    >>> df = pd.DataFrame({'speed': speed,\n    ...                    'lifespan': lifespan}, index=index)\n    >>> ax = df.plot.bar(rot=0)\n\nInstead of nesting, the figure can be split by column with\n``subplots=True``. In this case, a :class:`numpy.ndarray` of\n:class:`matplotlib.axes.Axes` are returned.\n\n.. plot::\n    :context: close-figs\n\n    >>> axes = df.plot.bar(rot=0, subplots=True)\n    >>> axes[1].legend(loc=2)  # doctest: +SKIP\n\nPlot a single column.\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = df.plot.bar(y='speed', rot=0)\n\nPlot only selected categories for the DataFrame.\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = df.plot.bar(x='lifespan', rot=0)", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 867, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L867", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {**kwds}"], ["EX03", "flake8 error: E231 missing whitespace after ':' (2 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Plotting", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.plot.barh": {"type": "function", "docstring": "Make a horizontal bar plot.\n\nA horizontal bar plot is a plot that presents quantitative data with\nrectangular bars with lengths proportional to the values that they\nrepresent. A bar plot shows comparisons among discrete categories. One\naxis of the plot shows the specific categories being compared, and the\nother axis represents a measured value.\n\nParameters\n----------\nx : label or position, default DataFrame.index\n    Column to be used for categories.\ny : label or position, default All numeric columns in dataframe\n    Columns to be plotted from the DataFrame.\n**kwds\n    Keyword arguments to pass on to :meth:`DataFrame.plot`.\n\nReturns\n-------\n:class:`matplotlib.axes.Axes` or numpy.ndarray of them\n\nSee Also\n--------\nDataFrame.plot.bar: Vertical bar plot.\nDataFrame.plot : Make plots of DataFrame using matplotlib.\nmatplotlib.axes.Axes.bar : Plot a vertical bar plot using matplotlib.\n\nExamples\n--------\nBasic example\n\n.. plot::\n    :context: close-figs\n\n    >>> df = pd.DataFrame({'lab': ['A', 'B', 'C'], 'val': [10, 30, 20]})\n    >>> ax = df.plot.barh(x='lab', y='val')\n\nPlot a whole DataFrame to a horizontal bar plot\n\n.. plot::\n    :context: close-figs\n\n    >>> speed = [0.1, 17.5, 40, 48, 52, 69, 88]\n    >>> lifespan = [2, 8, 70, 1.5, 25, 12, 28]\n    >>> index = ['snail', 'pig', 'elephant',\n    ...          'rabbit', 'giraffe', 'coyote', 'horse']\n    >>> df = pd.DataFrame({'speed': speed,\n    ...                    'lifespan': lifespan}, index=index)\n    >>> ax = df.plot.barh()\n\nPlot a column of the DataFrame to a horizontal bar plot\n\n.. plot::\n    :context: close-figs\n\n    >>> speed = [0.1, 17.5, 40, 48, 52, 69, 88]\n    >>> lifespan = [2, 8, 70, 1.5, 25, 12, 28]\n    >>> index = ['snail', 'pig', 'elephant',\n    ...          'rabbit', 'giraffe', 'coyote', 'horse']\n    >>> df = pd.DataFrame({'speed': speed,\n    ...                    'lifespan': lifespan}, index=index)\n    >>> ax = df.plot.barh(y='speed')\n\nPlot DataFrame versus the desired column\n\n.. plot::\n    :context: close-figs\n\n    >>> speed = [0.1, 17.5, 40, 48, 52, 69, 88]\n    >>> lifespan = [2, 8, 70, 1.5, 25, 12, 28]\n    >>> index = ['snail', 'pig', 'elephant',\n    ...          'rabbit', 'giraffe', 'coyote', 'horse']\n    >>> df = pd.DataFrame({'speed': speed,\n    ...                    'lifespan': lifespan}, index=index)\n    >>> ax = df.plot.barh(x='lifespan')", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 952, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L952", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {**kwds}"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Plotting", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.plot.box": {"type": "function", "docstring": "Make a box plot of the DataFrame columns.\n\nA box plot is a method for graphically depicting groups of numerical\ndata through their quartiles.\nThe box extends from the Q1 to Q3 quartile values of the data,\nwith a line at the median (Q2). The whiskers extend from the edges\nof box to show the range of the data. The position of the whiskers\nis set by default to 1.5*IQR (IQR = Q3 - Q1) from the edges of the\nbox. Outlier points are those past the end of the whiskers.\n\nFor further details see Wikipedia's\nentry for `boxplot <https://en.wikipedia.org/wiki/Box_plot>`__.\n\nA consideration when using this chart is that the box and the whiskers\ncan overlap, which is very common when plotting small sets of data.\n\nParameters\n----------\nby : str or sequence\n    Column in the DataFrame to group by.\n**kwds : optional\n    Additional keywords are documented in\n    :meth:`DataFrame.plot`.\n\nReturns\n-------\n:class:`matplotlib.axes.Axes` or numpy.ndarray of them\n\nSee Also\n--------\nDataFrame.boxplot: Another method to draw a box plot.\nSeries.plot.box: Draw a box plot from a Series object.\nmatplotlib.pyplot.boxplot: Draw a box plot in matplotlib.\n\nExamples\n--------\nDraw a box plot from a DataFrame with four columns of randomly\ngenerated data.\n\n.. plot::\n    :context: close-figs\n\n    >>> data = np.random.randn(25, 4)\n    >>> df = pd.DataFrame(data, columns=list('ABCD'))\n    >>> ax = df.plot.box()", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 1032, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L1032", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {**kwds}"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Plotting", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.plot.density": {"type": "function", "docstring": "Generate Kernel Density Estimate plot using Gaussian kernels.\n\nIn statistics, `kernel density estimation`_ (KDE) is a non-parametric\nway to estimate the probability density function (PDF) of a random\nvariable. This function uses Gaussian kernels and includes automatic\nbandwidth determination.\n\n.. _kernel density estimation:\n    https://en.wikipedia.org/wiki/Kernel_density_estimation\n\nParameters\n----------\nbw_method : str, scalar or callable, optional\n    The method used to calculate the estimator bandwidth. This can be\n    'scott', 'silverman', a scalar constant or a callable.\n    If None (default), 'scott' is used.\n    See :class:`scipy.stats.gaussian_kde` for more information.\nind : NumPy array or integer, optional\n    Evaluation points for the estimated PDF. If None (default),\n    1000 equally spaced points are used. If `ind` is a NumPy array, the\n    KDE is evaluated at the points passed. If `ind` is an integer,\n    `ind` number of equally spaced points are used.\n**kwds : optional\n    Additional keyword arguments are documented in\n    :meth:`pandas.%(this-datatype)s.plot`.\n\nReturns\n-------\nmatplotlib.axes.Axes or numpy.ndarray of them\n\nSee Also\n--------\nscipy.stats.gaussian_kde : Representation of a kernel-density\n    estimate using Gaussian kernels. This is the function used\n    internally to estimate the PDF.\n\nExamples\n--------\nGiven a Series of points randomly sampled from an unknown\ndistribution, estimate its PDF using KDE with automatic\nbandwidth determination and plot the results, evaluating them at\n1000 equally spaced points (default):\n\n.. plot::\n    :context: close-figs\n\n    >>> s = pd.Series([1, 2, 2.5, 3, 3.5, 4, 5])\n    >>> ax = s.plot.kde()\n\nA scalar bandwidth can be specified. Using a small bandwidth value can\nlead to over-fitting, while using a large bandwidth value may result\nin under-fitting:\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = s.plot.kde(bw_method=0.3)\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = s.plot.kde(bw_method=3)\n\nFinally, the `ind` parameter determines the evaluation points for the\nplot of the estimated PDF:\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = s.plot.kde(ind=[1, 2, 3, 4, 5])\n\nFor DataFrame, it works in the same way:\n\n.. plot::\n    :context: close-figs\n\n    >>> df = pd.DataFrame({\n    ...     'x': [1, 2, 2.5, 3, 3.5, 4, 5],\n    ...     'y': [4, 4, 4.5, 5, 5.5, 6, 6],\n    ... })\n    >>> ax = df.plot.kde()\n\nA scalar bandwidth can be specified. Using a small bandwidth value can\nlead to over-fitting, while using a large bandwidth value may result\nin under-fitting:\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = df.plot.kde(bw_method=0.3)\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = df.plot.kde(bw_method=3)\n\nFinally, the `ind` parameter determines the evaluation points for the\nplot of the estimated PDF:\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = df.plot.kde(ind=[1, 2, 3, 4, 5, 6])", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 1129, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L1129", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {**kwds}"], ["PR06", "Parameter \"ind\" type should use \"int\" instead of \"integer\""], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Plotting", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.plot.hist": {"type": "function", "docstring": "Draw one histogram of the DataFrame's columns.\n\nA histogram is a representation of the distribution of data.\nThis function groups the values of all given Series in the DataFrame\ninto bins and draws all bins in one :class:`matplotlib.axes.Axes`.\nThis is useful when the DataFrame's Series are in a similar scale.\n\nParameters\n----------\nby : str or sequence, optional\n    Column in the DataFrame to group by.\nbins : int, default 10\n    Number of histogram bins to be used.\n**kwds\n    Additional keyword arguments are documented in\n    :meth:`DataFrame.plot`.\n\nReturns\n-------\nclass:`matplotlib.AxesSubplot`\n    Return a histogram plot.\n\nSee Also\n--------\nDataFrame.hist : Draw histograms per DataFrame's Series.\nSeries.hist : Draw a histogram with Series' data.\n\nExamples\n--------\nWhen we draw a dice 6000 times, we expect to get each value around 1000\ntimes. But when we draw two dices and sum the result, the distribution\nis going to be quite different. A histogram illustrates those\ndistributions.\n\n.. plot::\n    :context: close-figs\n\n    >>> df = pd.DataFrame(\n    ...     np.random.randint(1, 7, 6000),\n    ...     columns = ['one'])\n    >>> df['two'] = df['one'] + np.random.randint(1, 7, 6000)\n    >>> ax = df.plot.hist(bins=12, alpha=0.5)", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 1082, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L1082", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {**kwds}"], ["EX03", "flake8 error: E251 unexpected spaces around keyword / parameter equals (2 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Plotting", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.plot.kde": {"type": "function", "docstring": "Generate Kernel Density Estimate plot using Gaussian kernels.\n\nIn statistics, `kernel density estimation`_ (KDE) is a non-parametric\nway to estimate the probability density function (PDF) of a random\nvariable. This function uses Gaussian kernels and includes automatic\nbandwidth determination.\n\n.. _kernel density estimation:\n    https://en.wikipedia.org/wiki/Kernel_density_estimation\n\nParameters\n----------\nbw_method : str, scalar or callable, optional\n    The method used to calculate the estimator bandwidth. This can be\n    'scott', 'silverman', a scalar constant or a callable.\n    If None (default), 'scott' is used.\n    See :class:`scipy.stats.gaussian_kde` for more information.\nind : NumPy array or integer, optional\n    Evaluation points for the estimated PDF. If None (default),\n    1000 equally spaced points are used. If `ind` is a NumPy array, the\n    KDE is evaluated at the points passed. If `ind` is an integer,\n    `ind` number of equally spaced points are used.\n**kwds : optional\n    Additional keyword arguments are documented in\n    :meth:`pandas.%(this-datatype)s.plot`.\n\nReturns\n-------\nmatplotlib.axes.Axes or numpy.ndarray of them\n\nSee Also\n--------\nscipy.stats.gaussian_kde : Representation of a kernel-density\n    estimate using Gaussian kernels. This is the function used\n    internally to estimate the PDF.\n\nExamples\n--------\nGiven a Series of points randomly sampled from an unknown\ndistribution, estimate its PDF using KDE with automatic\nbandwidth determination and plot the results, evaluating them at\n1000 equally spaced points (default):\n\n.. plot::\n    :context: close-figs\n\n    >>> s = pd.Series([1, 2, 2.5, 3, 3.5, 4, 5])\n    >>> ax = s.plot.kde()\n\nA scalar bandwidth can be specified. Using a small bandwidth value can\nlead to over-fitting, while using a large bandwidth value may result\nin under-fitting:\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = s.plot.kde(bw_method=0.3)\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = s.plot.kde(bw_method=3)\n\nFinally, the `ind` parameter determines the evaluation points for the\nplot of the estimated PDF:\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = s.plot.kde(ind=[1, 2, 3, 4, 5])\n\nFor DataFrame, it works in the same way:\n\n.. plot::\n    :context: close-figs\n\n    >>> df = pd.DataFrame({\n    ...     'x': [1, 2, 2.5, 3, 3.5, 4, 5],\n    ...     'y': [4, 4, 4.5, 5, 5.5, 6, 6],\n    ... })\n    >>> ax = df.plot.kde()\n\nA scalar bandwidth can be specified. Using a small bandwidth value can\nlead to over-fitting, while using a large bandwidth value may result\nin under-fitting:\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = df.plot.kde(bw_method=0.3)\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = df.plot.kde(bw_method=3)\n\nFinally, the `ind` parameter determines the evaluation points for the\nplot of the estimated PDF:\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = df.plot.kde(ind=[1, 2, 3, 4, 5, 6])", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 1129, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L1129", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {**kwds}"], ["PR06", "Parameter \"ind\" type should use \"int\" instead of \"integer\""], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Plotting", "subsection": "Sparse accessor", "shared_code_with": "pandas.Series.plot.density"}, "pandas.Series.plot.line": {"type": "function", "docstring": "Plot Series or DataFrame as lines.\n\nThis function is useful to plot lines using DataFrame's values\nas coordinates.\n\nParameters\n----------\nx : int or str, optional\n    Columns to use for the horizontal axis.\n    Either the location or the label of the columns to be used.\n    By default, it will use the DataFrame indices.\ny : int, str, or list of them, optional\n    The values to be plotted.\n    Either the location or the label of the columns to be used.\n    By default, it will use the remaining DataFrame numeric columns.\n**kwds\n    Keyword arguments to pass on to :meth:`DataFrame.plot`.\n\nReturns\n-------\n:class:`matplotlib.axes.Axes` or :class:`numpy.ndarray`\n    Return an ndarray when ``subplots=True``.\n\nSee Also\n--------\nmatplotlib.pyplot.plot : Plot y versus x as lines and/or markers.\n\nExamples\n--------\n\n.. plot::\n    :context: close-figs\n\n    >>> s = pd.Series([1, 3, 2])\n    >>> s.plot.line()\n\n.. plot::\n    :context: close-figs\n\n    The following example shows the populations for some animals\n    over the years.\n\n    >>> df = pd.DataFrame({\n    ...    'pig': [20, 18, 489, 675, 1776],\n    ...    'horse': [4, 25, 281, 600, 1900]\n    ...    }, index=[1990, 1997, 2003, 2009, 2014])\n    >>> lines = df.plot.line()\n\n.. plot::\n   :context: close-figs\n\n   An example with subplots, so an array of axes is returned.\n\n   >>> axes = df.plot.line(subplots=True)\n   >>> type(axes)\n   <class 'numpy.ndarray'>\n\n.. plot::\n    :context: close-figs\n\n    The following example shows the relationship between both\n    populations.\n\n    >>> lines = df.plot.line(x='pig', y='horse')", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 798, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L798", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {**kwds}"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 36, in pandas.Series.plot.line\nFailed example:\n    s.plot.line()\nExpected nothing\nGot:\n    <matplotlib.axes._subplots.AxesSubplot object at 0x11bb8f910>\n"], ["EX03", "flake8 error: E121 continuation line under-indented for hanging indent"], ["EX03", "flake8 error: E123 closing bracket does not match indentation of opening bracket's line"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 36, in pandas.Series.plot.line\nFailed example:\n    s.plot.line()\nExpected nothing\nGot:\n    <matplotlib.axes._subplots.AxesSubplot object at 0x11bb8f910>\n", "in_api": true, "section": "Plotting", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.plot.pie": {"type": "function", "docstring": "Generate a pie plot.\n\nA pie plot is a proportional representation of the numerical data in a\ncolumn. This function wraps :meth:`matplotlib.pyplot.pie` for the\nspecified column. If no column reference is passed and\n``subplots=True`` a pie plot is drawn for each numerical column\nindependently.\n\nParameters\n----------\ny : int or label, optional\n    Label or position of the column to plot.\n    If not provided, ``subplots=True`` argument must be passed.\n**kwds\n    Keyword arguments to pass on to :meth:`DataFrame.plot`.\n\nReturns\n-------\nmatplotlib.axes.Axes or np.ndarray of them\n    A NumPy array is returned when `subplots` is True.\n\nSee Also\n--------\nSeries.plot.pie : Generate a pie plot for a Series.\nDataFrame.plot : Make plots of a DataFrame.\n\nExamples\n--------\nIn the example below we have a DataFrame with the information about\nplanet's mass and radius. We pass the the 'mass' column to the\npie function to get a pie plot.\n\n.. plot::\n    :context: close-figs\n\n    >>> df = pd.DataFrame({'mass': [0.330, 4.87 , 5.97],\n    ...                    'radius': [2439.7, 6051.8, 6378.1]},\n    ...                   index=['Mercury', 'Venus', 'Earth'])\n    >>> plot = df.plot.pie(y='mass', figsize=(5, 5))\n\n.. plot::\n    :context: close-figs\n\n    >>> plot = df.plot.pie(subplots=True, figsize=(6, 3))", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 1312, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L1312", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {**kwds, y}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Plotting", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.hist": {"type": "function", "docstring": "Draw histogram of the input series using matplotlib.\n\nParameters\n----------\nby : object, optional\n    If passed, then used to form histograms for separate groups\nax : matplotlib axis object\n    If not passed, uses gca()\ngrid : bool, default True\n    Whether to show axis grid lines\nxlabelsize : int, default None\n    If specified changes the x-axis label size\nxrot : float, default None\n    rotation of x axis labels\nylabelsize : int, default None\n    If specified changes the y-axis label size\nyrot : float, default None\n    rotation of y axis labels\nfigsize : tuple, default None\n    figure size in inches by default\nbins : int or sequence, default 10\n    Number of histogram bins to be used. If an integer is given, bins + 1\n    bin edges are calculated and returned. If bins is a sequence, gives\n    bin edges, including left edge of first bin and right edge of last\n    bin. In this case, bins is returned unmodified.\n`**kwds` : keywords\n    To be passed to the actual plotting function\n\nReturns\n-------\nmatplotlib.AxesSubplot\n    A histogram plot.\n\nSee Also\n--------\nmatplotlib.axes.Axes.hist : Plot a histogram using matplotlib.", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 22, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L22", "errors": [["PR01", "Parameters {**kwds} not documented"], ["PR02", "Unknown parameters {`**kwds`}"], ["PR09", "Parameter \"by\" description should finish with \".\""], ["PR09", "Parameter \"ax\" description should finish with \".\""], ["PR09", "Parameter \"grid\" description should finish with \".\""], ["PR09", "Parameter \"xlabelsize\" description should finish with \".\""], ["PR08", "Parameter \"xrot\" description should start with a capital letter"], ["PR09", "Parameter \"xrot\" description should finish with \".\""], ["PR09", "Parameter \"ylabelsize\" description should finish with \".\""], ["PR08", "Parameter \"yrot\" description should start with a capital letter"], ["PR09", "Parameter \"yrot\" description should finish with \".\""], ["PR08", "Parameter \"figsize\" description should start with a capital letter"], ["PR09", "Parameter \"figsize\" description should finish with \".\""], ["PR09", "Parameter \"`**kwds`\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Plotting", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.to_pickle": {"type": "function", "docstring": "Pickle (serialize) object to file.\n\nParameters\n----------\npath : str\n    File path where the pickled object will be stored.\ncompression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None},         default 'infer'\n    A string representing the compression to use in the output file. By\n    default, infers from the file extension in specified path.\n\n    .. versionadded:: 0.20.0\nprotocol : int\n    Int which indicates which protocol should be used by the pickler,\n    default HIGHEST_PROTOCOL (see [1]_ paragraph 12.1.2). The possible\n    values are 0, 1, 2, 3, 4. A negative value for the protocol\n    parameter is equivalent to setting its value to HIGHEST_PROTOCOL.\n\n    .. [1] https://docs.python.org/3/library/pickle.html\n    .. versionadded:: 0.21.0\n\nSee Also\n--------\nread_pickle : Load pickled pandas object (or any object) from file.\nDataFrame.to_hdf : Write DataFrame to an HDF5 file.\nDataFrame.to_sql : Write DataFrame to a SQL database.\nDataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\nExamples\n--------\n>>> original_df = pd.DataFrame({\"foo\": range(5), \"bar\": range(5, 10)})\n>>> original_df\n   foo  bar\n0    0    5\n1    1    6\n2    2    7\n3    3    8\n4    4    9\n>>> original_df.to_pickle(\"./dummy.pkl\")\n\n>>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")\n>>> unpickled_df\n   foo  bar\n0    0    5\n1    1    6\n2    2    7\n3    3    8\n4    4    9\n\n>>> import os\n>>> os.remove(\"./dummy.pkl\")", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 2694, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L2694", "errors": [["PR09", "Parameter \"protocol\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Serialization / IO / conversion", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.to_csv": {"type": "function", "docstring": "Write object to a comma-separated values (csv) file.\n\n.. versionchanged:: 0.24.0\n    The order of arguments for Series was changed.\n\nParameters\n----------\npath_or_buf : str or file handle, default None\n    File path or object, if None is provided the result is returned as\n    a string.  If a file object is passed it should be opened with\n    `newline=''`, disabling universal newlines.\n\n    .. versionchanged:: 0.24.0\n\n       Was previously named \"path\" for Series.\n\nsep : str, default ','\n    String of length 1. Field delimiter for the output file.\nna_rep : str, default ''\n    Missing data representation.\nfloat_format : str, default None\n    Format string for floating point numbers.\ncolumns : sequence, optional\n    Columns to write.\nheader : bool or list of str, default True\n    Write out the column names. If a list of strings is given it is\n    assumed to be aliases for the column names.\n\n    .. versionchanged:: 0.24.0\n\n       Previously defaulted to False for Series.\n\nindex : bool, default True\n    Write row names (index).\nindex_label : str or sequence, or False, default None\n    Column label for index column(s) if desired. If None is given, and\n    `header` and `index` are True, then the index names are used. A\n    sequence should be given if the object uses MultiIndex. If\n    False do not print fields for index names. Use index_label=False\n    for easier importing in R.\nmode : str\n    Python write mode, default 'w'.\nencoding : str, optional\n    A string representing the encoding to use in the output file,\n    defaults to 'utf-8'.\ncompression : str, default 'infer'\n    Compression mode among the following possible values: {'infer',\n    'gzip', 'bz2', 'zip', 'xz', None}. If 'infer' and `path_or_buf`\n    is path-like, then detect compression from the following\n    extensions: '.gz', '.bz2', '.zip' or '.xz'. (otherwise no\n    compression).\n\n    .. versionchanged:: 0.24.0\n\n       'infer' option added and set to default.\n\nquoting : optional constant from csv module\n    Defaults to csv.QUOTE_MINIMAL. If you have set a `float_format`\n    then floats are converted to strings and thus csv.QUOTE_NONNUMERIC\n    will treat them as non-numeric.\nquotechar : str, default '\\\"'\n    String of length 1. Character used to quote fields.\nline_terminator : str, optional\n    The newline character or character sequence to use in the output\n    file. Defaults to `os.linesep`, which depends on the OS in which\n    this method is called ('\\n' for linux, '\\r\\n' for Windows, i.e.).\n\n    .. versionchanged:: 0.24.0\nchunksize : int or None\n    Rows to write at a time.\ndate_format : str, default None\n    Format string for datetime objects.\ndoublequote : bool, default True\n    Control quoting of `quotechar` inside a field.\nescapechar : str, default None\n    String of length 1. Character used to escape `sep` and `quotechar`\n    when appropriate.\ndecimal : str, default '.'\n    Character recognized as decimal separator. E.g. use ',' for\n    European data.\n\nReturns\n-------\nNone or str\n    If path_or_buf is None, returns the resulting csv format as a\n    string. Otherwise returns None.\n\nSee Also\n--------\nread_csv : Load a CSV file into a DataFrame.\nto_excel : Write DataFrame to an Excel file.\n\nExamples\n--------\n>>> df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n...                    'mask': ['red', 'purple'],\n...                    'weapon': ['sai', 'bo staff']})\n>>> df.to_csv(index=False)\n'name,mask,weapon\\nRaphael,red,sai\\nDonatello,purple,bo staff\\n'", "deprecated": false, "file": "pandas/core/series.py", "file_line": 4518, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L4518", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {na_rep, escapechar, path_or_buf, compression, columns, line_terminator, mode, encoding, float_format, header, quotechar, doublequote, index_label, index, quoting, sep, decimal, chunksize, date_format}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Serialization / IO / conversion", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.to_dict": {"type": "function", "docstring": "Convert Series to {label -> value} dict or dict-like object.\n\nParameters\n----------\ninto : class, default dict\n    The collections.abc.Mapping subclass to use as the return\n    object. Can be the actual class or an empty\n    instance of the mapping type you want.  If you want a\n    collections.defaultdict, you must pass it initialized.\n\n    .. versionadded:: 0.21.0\n\nReturns\n-------\ncollections.abc.Mapping\n    Key-value representation of Series.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s.to_dict()\n{0: 1, 1: 2, 2: 3, 3: 4}\n>>> from collections import OrderedDict, defaultdict\n>>> s.to_dict(OrderedDict)\nOrderedDict([(0, 1), (1, 2), (2, 3), (3, 4)])\n>>> dd = defaultdict(list)\n>>> s.to_dict(dd)\ndefaultdict(<class 'list'>, {0: 1, 1: 2, 2: 3, 3: 4})", "deprecated": false, "file": "pandas/core/series.py", "file_line": 1716, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L1716", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Serialization / IO / conversion", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.to_excel": {"type": "function", "docstring": "Write object to an Excel sheet.\n\nTo write a single object to an Excel .xlsx file it is only necessary to\nspecify a target file name. To write to multiple sheets it is necessary to\ncreate an `ExcelWriter` object with a target file name, and specify a sheet\nin the file to write to.\n\nMultiple sheets may be written to by specifying unique `sheet_name`.\nWith all data written to the file it is necessary to save the changes.\nNote that creating an `ExcelWriter` object with a file name that already\nexists will result in the contents of the existing file being erased.\n\nParameters\n----------\nexcel_writer : str or ExcelWriter object\n    File path or existing ExcelWriter.\nsheet_name : str, default 'Sheet1'\n    Name of sheet which will contain DataFrame.\nna_rep : str, default ''\n    Missing data representation.\nfloat_format : str, optional\n    Format string for floating point numbers. For example\n    ``float_format=\"%.2f\"`` will format 0.1234 to 0.12.\ncolumns : sequence or list of str, optional\n    Columns to write.\nheader : bool or list of str, default True\n    Write out the column names. If a list of string is given it is\n    assumed to be aliases for the column names.\nindex : bool, default True\n    Write row names (index).\nindex_label : str or sequence, optional\n    Column label for index column(s) if desired. If not specified, and\n    `header` and `index` are True, then the index names are used. A\n    sequence should be given if the DataFrame uses MultiIndex.\nstartrow : int, default 0\n    Upper left cell row to dump data frame.\nstartcol : int, default 0\n    Upper left cell column to dump data frame.\nengine : str, optional\n    Write engine to use, 'openpyxl' or 'xlsxwriter'. You can also set this\n    via the options ``io.excel.xlsx.writer``, ``io.excel.xls.writer``, and\n    ``io.excel.xlsm.writer``.\nmerge_cells : bool, default True\n    Write MultiIndex and Hierarchical Rows as merged cells.\nencoding : str, optional\n    Encoding of the resulting excel file. Only necessary for xlwt,\n    other writers support unicode natively.\ninf_rep : str, default 'inf'\n    Representation for infinity (there is no native representation for\n    infinity in Excel).\nverbose : bool, default True\n    Display more information in the error logs.\nfreeze_panes : tuple of int (length 2), optional\n    Specifies the one-based bottommost row and rightmost column that\n    is to be frozen.\n\n    .. versionadded:: 0.20.0.\n\nSee Also\n--------\nto_csv : Write DataFrame to a comma-separated values (csv) file.\nExcelWriter : Class for writing DataFrame objects into excel sheets.\nread_excel : Read an Excel file into a pandas DataFrame.\nread_csv : Read a comma-separated values (csv) file into DataFrame.\n\nNotes\n-----\nFor compatibility with :meth:`~DataFrame.to_csv`,\nto_excel serializes lists and dicts to strings before writing.\n\nOnce a workbook has been saved it is not possible write further data\nwithout rewriting the whole workbook.\n\nExamples\n--------\n\nCreate, write to and save a workbook:\n\n>>> df1 = pd.DataFrame([['a', 'b'], ['c', 'd']],\n...                    index=['row 1', 'row 2'],\n...                    columns=['col 1', 'col 2'])\n>>> df1.to_excel(\"output.xlsx\")  # doctest: +SKIP\n\nTo specify the sheet name:\n\n>>> df1.to_excel(\"output.xlsx\",\n...              sheet_name='Sheet_name_1')  # doctest: +SKIP\n\nIf you wish to write to more than one sheet in the workbook, it is\nnecessary to specify an ExcelWriter object:\n\n>>> df2 = df1.copy()\n>>> with pd.ExcelWriter('output.xlsx') as writer:  # doctest: +SKIP\n...     df1.to_excel(writer, sheet_name='Sheet_name_1')\n...     df2.to_excel(writer, sheet_name='Sheet_name_2')\n\nExcelWriter can also be used to append to an existing Excel file:\n\n>>> with pd.ExcelWriter('output.xlsx',\n...                     mode='a') as writer:  # doctest: +SKIP\n...     df.to_excel(writer, sheet_name='Sheet_name_3')\n\nTo set the library that is used to write the Excel file,\nyou can pass the `engine` keyword (the default engine is\nautomatically chosen depending on the file extension):\n\n>>> df1.to_excel('output1.xlsx', engine='xlsxwriter')  # doctest: +SKIP", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 2196, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L2196", "errors": [["EX03", "flake8 error: F821 undefined name 'df'"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Serialization / IO / conversion", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.to_frame": {"type": "function", "docstring": "Convert Series to DataFrame.\n\nParameters\n----------\nname : object, default None\n    The passed name should substitute for the series name (if it has\n    one).\n\nReturns\n-------\nDataFrame\n    DataFrame representation of Series.\n\nExamples\n--------\n>>> s = pd.Series([\"a\", \"b\", \"c\"],\n...               name=\"vals\")\n>>> s.to_frame()\n  vals\n0    a\n1    b\n2    c", "deprecated": false, "file": "pandas/core/series.py", "file_line": 1751, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L1751", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Serialization / IO / conversion", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.to_xarray": {"type": "function", "docstring": "Return an xarray object from the pandas object.\n\nReturns\n-------\nxarray.DataArray or xarray.Dataset\n    Data in the pandas structure converted to Dataset if the object is\n    a DataFrame, or a DataArray if the object is a Series.\n\nSee Also\n--------\nDataFrame.to_hdf : Write DataFrame to an HDF5 file.\nDataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\nNotes\n-----\nSee the `xarray docs <http://xarray.pydata.org/en/stable/>`__\n\nExamples\n--------\n>>> df = pd.DataFrame([('falcon', 'bird',  389.0, 2),\n...                    ('parrot', 'bird', 24.0, 2),\n...                    ('lion',   'mammal', 80.5, 4),\n...                    ('monkey', 'mammal', np.nan, 4)],\n...                    columns=['name', 'class', 'max_speed',\n...                             'num_legs'])\n>>> df\n     name   class  max_speed  num_legs\n0  falcon    bird      389.0         2\n1  parrot    bird       24.0         2\n2    lion  mammal       80.5         4\n3  monkey  mammal        NaN         4\n\n>>> df.to_xarray()\n<xarray.Dataset>\nDimensions:    (index: 4)\nCoordinates:\n  * index      (index) int64 0 1 2 3\nData variables:\n    name       (index) object 'falcon' 'parrot' 'lion' 'monkey'\n    class      (index) object 'bird' 'bird' 'mammal' 'mammal'\n    max_speed  (index) float64 389.0 24.0 80.5 nan\n    num_legs   (index) int64 2 2 4 4\n\n>>> df['max_speed'].to_xarray()\n<xarray.DataArray 'max_speed' (index: 4)>\narray([389. ,  24. ,  80.5,   nan])\nCoordinates:\n  * index    (index) int64 0 1 2 3\n\n>>> dates = pd.to_datetime(['2018-01-01', '2018-01-01',\n...                         '2018-01-02', '2018-01-02'])\n>>> df_multiindex = pd.DataFrame({'date': dates,\n...                    'animal': ['falcon', 'parrot', 'falcon',\n...                               'parrot'],\n...                    'speed': [350, 18, 361, 15]}).set_index(['date',\n...                                                    'animal'])\n>>> df_multiindex\n                   speed\ndate       animal\n2018-01-01 falcon    350\n           parrot     18\n2018-01-02 falcon    361\n           parrot     15\n\n>>> df_multiindex.to_xarray()\n<xarray.Dataset>\nDimensions:  (animal: 2, date: 2)\nCoordinates:\n  * date     (date) datetime64[ns] 2018-01-01 2018-01-02\n  * animal   (animal) object 'falcon' 'parrot'\nData variables:\n    speed    (date, animal) int64 350 18 361 15", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 2810, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L2810", "errors": [["EX03", "flake8 error: E127 continuation line over-indented for visual indent"], ["EX03", "flake8 error: E128 continuation line under-indented for visual indent (3 times)"], ["EX03", "flake8 error: E241 multiple spaces after ',' (2 times)"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Serialization / IO / conversion", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.to_hdf": {"type": "function", "docstring": "Write the contained data to an HDF5 file using HDFStore.\n\nHierarchical Data Format (HDF) is self-describing, allowing an\napplication to interpret the structure and contents of a file with\nno outside information. One HDF file can hold a mix of related objects\nwhich can be accessed as a group or as individual objects.\n\nIn order to add another DataFrame or Series to an existing HDF file\nplease use append mode and a different a key.\n\nFor more information see the :ref:`user guide <io.hdf5>`.\n\nParameters\n----------\npath_or_buf : str or pandas.HDFStore\n    File path or HDFStore object.\nkey : str\n    Identifier for the group in the store.\nmode : {'a', 'w', 'r+'}, default 'a'\n    Mode to open file:\n\n    - 'w': write, a new file is created (an existing file with\n      the same name would be deleted).\n    - 'a': append, an existing file is opened for reading and\n      writing, and if the file does not exist it is created.\n    - 'r+': similar to 'a', but the file must already exist.\nformat : {'fixed', 'table'}, default 'fixed'\n    Possible values:\n\n    - 'fixed': Fixed format. Fast writing/reading. Not-appendable,\n      nor searchable.\n    - 'table': Table format. Write as a PyTables Table structure\n      which may perform worse but allow more flexible operations\n      like searching / selecting subsets of the data.\nappend : bool, default False\n    For Table formats, append the input data to the existing.\ndata_columns :  list of columns or True, optional\n    List of columns to create as indexed data columns for on-disk\n    queries, or True to use all columns. By default only the axes\n    of the object are indexed. See :ref:`io.hdf5-query-data-columns`.\n    Applicable only to format='table'.\ncomplevel : {0-9}, optional\n    Specifies a compression level for data.\n    A value of 0 disables compression.\ncomplib : {'zlib', 'lzo', 'bzip2', 'blosc'}, default 'zlib'\n    Specifies the compression library to be used.\n    As of v0.20.2 these additional compressors for Blosc are supported\n    (default if no compressor specified: 'blosc:blosclz'):\n    {'blosc:blosclz', 'blosc:lz4', 'blosc:lz4hc', 'blosc:snappy',\n    'blosc:zlib', 'blosc:zstd'}.\n    Specifying a compression library which is not available issues\n    a ValueError.\nfletcher32 : bool, default False\n    If applying compression use the fletcher32 checksum.\ndropna : bool, default False\n    If true, ALL nan rows will not be written to store.\nerrors : str, default 'strict'\n    Specifies how encoding and decoding errors are to be handled.\n    See the errors argument for :func:`open` for a full list\n    of options.\n\nSee Also\n--------\nDataFrame.read_hdf : Read from HDF file.\nDataFrame.to_parquet : Write a DataFrame to the binary parquet format.\nDataFrame.to_sql : Write to a sql table.\nDataFrame.to_feather : Write out feather-format for DataFrames.\nDataFrame.to_csv : Write out to a csv file.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]},\n...                   index=['a', 'b', 'c'])\n>>> df.to_hdf('data.h5', key='df', mode='w')\n\nWe can add another object to the same file:\n\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s.to_hdf('data.h5', key='s')\n\nReading from HDF file:\n\n>>> pd.read_hdf('data.h5', 'df')\nA  B\na  1  4\nb  2  5\nc  3  6\n>>> pd.read_hdf('data.h5', 's')\n0    1\n1    2\n2    3\n3    4\ndtype: int64\n\nDeleting file with data:\n\n>>> import os\n>>> os.remove('data.h5')", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 2406, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L2406", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {data_columns, complib, format, errors, append, mode, fletcher32, complevel, dropna}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Serialization / IO / conversion", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.to_sql": {"type": "function", "docstring": "Write records stored in a DataFrame to a SQL database.\n\nDatabases supported by SQLAlchemy [1]_ are supported. Tables can be\nnewly created, appended to, or overwritten.\n\nParameters\n----------\nname : str\n    Name of SQL table.\ncon : sqlalchemy.engine.Engine or sqlite3.Connection\n    Using SQLAlchemy makes it possible to use any DB supported by that\n    library. Legacy support is provided for sqlite3.Connection objects.\nschema : str, optional\n    Specify the schema (if database flavor supports this). If None, use\n    default schema.\nif_exists : {'fail', 'replace', 'append'}, default 'fail'\n    How to behave if the table already exists.\n\n    * fail: Raise a ValueError.\n    * replace: Drop the table before inserting new values.\n    * append: Insert new values to the existing table.\n\nindex : bool, default True\n    Write DataFrame index as a column. Uses `index_label` as the column\n    name in the table.\nindex_label : str or sequence, default None\n    Column label for index column(s). If None is given (default) and\n    `index` is True, then the index names are used.\n    A sequence should be given if the DataFrame uses MultiIndex.\nchunksize : int, optional\n    Rows will be written in batches of this size at a time. By default,\n    all rows will be written at once.\ndtype : dict, optional\n    Specifying the datatype for columns. The keys should be the column\n    names and the values should be the SQLAlchemy types or strings for\n    the sqlite3 legacy mode.\nmethod : {None, 'multi', callable}, default None\n    Controls the SQL insertion clause used:\n\n    * None : Uses standard SQL ``INSERT`` clause (one per row).\n    * 'multi': Pass multiple values in a single ``INSERT`` clause.\n    * callable with signature ``(pd_table, conn, keys, data_iter)``.\n\n    Details and a sample callable implementation can be found in the\n    section :ref:`insert method <io.sql.method>`.\n\n    .. versionadded:: 0.24.0\n\nRaises\n------\nValueError\n    When the table already exists and `if_exists` is 'fail' (the\n    default).\n\nSee Also\n--------\nread_sql : Read a DataFrame from a table.\n\nNotes\n-----\nTimezone aware datetime columns will be written as\n``Timestamp with timezone`` type with SQLAlchemy if supported by the\ndatabase. Otherwise, the datetimes will be stored as timezone unaware\ntimestamps local to the original timezone.\n\n.. versionadded:: 0.24.0\n\nReferences\n----------\n.. [1] http://docs.sqlalchemy.org\n.. [2] https://www.python.org/dev/peps/pep-0249/\n\nExamples\n--------\n\nCreate an in-memory SQLite database.\n\n>>> from sqlalchemy import create_engine\n>>> engine = create_engine('sqlite://', echo=False)\n\nCreate a table from scratch with 3 rows.\n\n>>> df = pd.DataFrame({'name' : ['User 1', 'User 2', 'User 3']})\n>>> df\n     name\n0  User 1\n1  User 2\n2  User 3\n\n>>> df.to_sql('users', con=engine)\n>>> engine.execute(\"SELECT * FROM users\").fetchall()\n[(0, 'User 1'), (1, 'User 2'), (2, 'User 3')]\n\n>>> df1 = pd.DataFrame({'name' : ['User 4', 'User 5']})\n>>> df1.to_sql('users', con=engine, if_exists='append')\n>>> engine.execute(\"SELECT * FROM users\").fetchall()\n[(0, 'User 1'), (1, 'User 2'), (2, 'User 3'),\n (0, 'User 4'), (1, 'User 5')]\n\nOverwrite the table with just ``df1``.\n\n>>> df1.to_sql('users', con=engine, if_exists='replace',\n...            index_label='id')\n>>> engine.execute(\"SELECT * FROM users\").fetchall()\n[(0, 'User 4'), (1, 'User 5')]\n\nSpecify the dtype (especially useful for integers with missing values).\nNotice that while pandas is forced to store the data as floating point,\nthe database supports nullable integers. When fetching the data with\nPython, we get back integer scalars.\n\n>>> df = pd.DataFrame({\"A\": [1, None, 2]})\n>>> df\n     A\n0  1.0\n1  NaN\n2  2.0\n\n>>> from sqlalchemy.types import Integer\n>>> df.to_sql('integers', con=engine, index=False,\n...           dtype={\"A\": Integer()})\n\n>>> engine.execute(\"SELECT * FROM integers\").fetchall()\n[(1,), (None,), (2,)]", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 2541, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L2541", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Serialization / IO / conversion", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.to_msgpack": {"type": "function", "docstring": "Serialize object to input file path using msgpack format.\n\n.. deprecated:: 0.25.0\n\nto_msgpack is deprecated and will be removed in a future version.\nIt is recommended to use pyarrow for on-the-wire transmission of\npandas objects.\n\nParameters\n----------\npath : string File path, buffer-like, or None\n    if None, return generated bytes\nappend : bool whether to append to an existing msgpack\n    (default is False)\ncompress : type of compressor (zlib or blosc), default to None (no\n    compression)\n\nReturns\n-------\nNone or bytes\n    If path_or_buf is None, returns the resulting msgpack format as a\n    byte string. Otherwise returns None.", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 2511, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L2511", "errors": [["PR01", "Parameters {path_or_buf, encoding, **kwargs} not documented"], ["PR02", "Unknown parameters {path, append, compress}"], ["PR06", "Parameter \"path\" type should use \"str\" instead of \"string\""], ["PR08", "Parameter \"path\" description should start with a capital letter"], ["PR09", "Parameter \"path\" description should finish with \".\""], ["PR08", "Parameter \"append\" description should start with a capital letter"], ["PR09", "Parameter \"append\" description should finish with \".\""], ["PR08", "Parameter \"compress\" description should start with a capital letter"], ["PR09", "Parameter \"compress\" description should finish with \".\""]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Serialization / IO / conversion", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.to_json": {"type": "function", "docstring": "Convert the object to a JSON string.\n\nNote NaN's and None will be converted to null and datetime objects\nwill be converted to UNIX timestamps.\n\nParameters\n----------\npath_or_buf : str or file handle, optional\n    File path or object. If not specified, the result is returned as\n    a string.\norient : str\n    Indication of expected JSON string format.\n\n    * Series\n\n      - default is 'index'\n      - allowed values are: {'split','records','index','table'}\n\n    * DataFrame\n\n      - default is 'columns'\n      - allowed values are:\n        {'split','records','index','columns','values','table'}\n\n    * The format of the JSON string\n\n      - 'split' : dict like {'index' -> [index],\n        'columns' -> [columns], 'data' -> [values]}\n      - 'records' : list like\n        [{column -> value}, ... , {column -> value}]\n      - 'index' : dict like {index -> {column -> value}}\n      - 'columns' : dict like {column -> {index -> value}}\n      - 'values' : just the values array\n      - 'table' : dict like {'schema': {schema}, 'data': {data}}\n        describing the data, and the data component is\n        like ``orient='records'``.\n\n        .. versionchanged:: 0.20.0\n\ndate_format : {None, 'epoch', 'iso'}\n    Type of date conversion. 'epoch' = epoch milliseconds,\n    'iso' = ISO8601. The default depends on the `orient`. For\n    ``orient='table'``, the default is 'iso'. For all other orients,\n    the default is 'epoch'.\ndouble_precision : int, default 10\n    The number of decimal places to use when encoding\n    floating point values.\nforce_ascii : bool, default True\n    Force encoded string to be ASCII.\ndate_unit : string, default 'ms' (milliseconds)\n    The time unit to encode to, governs timestamp and ISO8601\n    precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n    microsecond, and nanosecond respectively.\ndefault_handler : callable, default None\n    Handler to call if object cannot otherwise be converted to a\n    suitable format for JSON. Should receive a single argument which is\n    the object to convert and return a serialisable object.\nlines : bool, default False\n    If 'orient' is 'records' write out line delimited json format. Will\n    throw ValueError if incorrect 'orient' since others are not list\n    like.\n\ncompression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}\n\n    A string representing the compression to use in the output file,\n    only used when the first argument is a filename. By default, the\n    compression is inferred from the filename.\n\n    .. versionadded:: 0.21.0\n    .. versionchanged:: 0.24.0\n       'infer' option added and set to default\nindex : bool, default True\n    Whether to include the index values in the JSON string. Not\n    including the index (``index=False``) is only supported when\n    orient is 'split' or 'table'.\n\n    .. versionadded:: 0.23.0\n\nReturns\n-------\nNone or str\n    If path_or_buf is None, returns the resulting json format as a\n    string. Otherwise returns None.\n\nSee Also\n--------\nread_json\n\nExamples\n--------\n\n>>> df = pd.DataFrame([['a', 'b'], ['c', 'd']],\n...                   index=['row 1', 'row 2'],\n...                   columns=['col 1', 'col 2'])\n>>> df.to_json(orient='split')\n'{\"columns\":[\"col 1\",\"col 2\"],\n  \"index\":[\"row 1\",\"row 2\"],\n  \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n\nEncoding/decoding a Dataframe using ``'records'`` formatted JSON.\nNote that index labels are not preserved with this encoding.\n\n>>> df.to_json(orient='records')\n'[{\"col 1\":\"a\",\"col 2\":\"b\"},{\"col 1\":\"c\",\"col 2\":\"d\"}]'\n\nEncoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n>>> df.to_json(orient='index')\n'{\"row 1\":{\"col 1\":\"a\",\"col 2\":\"b\"},\"row 2\":{\"col 1\":\"c\",\"col 2\":\"d\"}}'\n\nEncoding/decoding a Dataframe using ``'columns'`` formatted JSON:\n\n>>> df.to_json(orient='columns')\n'{\"col 1\":{\"row 1\":\"a\",\"row 2\":\"c\"},\"col 2\":{\"row 1\":\"b\",\"row 2\":\"d\"}}'\n\nEncoding/decoding a Dataframe using ``'values'`` formatted JSON:\n\n>>> df.to_json(orient='values')\n'[[\"a\",\"b\"],[\"c\",\"d\"]]'\n\nEncoding with Table Schema\n\n>>> df.to_json(orient='table')\n'{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                        {\"name\": \"col 1\", \"type\": \"string\"},\n                        {\"name\": \"col 2\", \"type\": \"string\"}],\n             \"primaryKey\": \"index\",\n             \"pandas_version\": \"0.20.0\"},\n  \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n           {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 2240, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L2240", "errors": [["PR09", "Parameter \"orient\" description should finish with \".\""], ["PR06", "Parameter \"date_unit\" type should use \"str\" instead of \"string\""], ["SA04", "Missing description for See Also \"read_json\" reference"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 96, in pandas.Series.to_json\nFailed example:\n    df.to_json(orient='split')\nExpected:\n    '{\"columns\":[\"col 1\",\"col 2\"],\n      \"index\":[\"row 1\",\"row 2\"],\n      \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\nGot:\n    '{\"columns\":[\"col 1\",\"col 2\"],\"index\":[\"row 1\",\"row 2\"],\"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n**********************************************************************\nLine 124, in pandas.Series.to_json\nFailed example:\n    df.to_json(orient='table')\nExpected:\n    '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                            {\"name\": \"col 1\", \"type\": \"string\"},\n                            {\"name\": \"col 2\", \"type\": \"string\"}],\n                 \"primaryKey\": \"index\",\n                 \"pandas_version\": \"0.20.0\"},\n      \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n               {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'\nGot:\n    '{\"schema\": {\"fields\":[{\"name\":\"index\",\"type\":\"string\"},{\"name\":\"col 1\",\"type\":\"string\"},{\"name\":\"col 2\",\"type\":\"string\"}],\"primaryKey\":[\"index\"],\"pandas_version\":\"0.20.0\"}, \"data\": [{\"index\":\"row 1\",\"col 1\":\"a\",\"col 2\":\"b\"},{\"index\":\"row 2\",\"col 1\":\"c\",\"col 2\":\"d\"}]}'\n"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 96, in pandas.Series.to_json\nFailed example:\n    df.to_json(orient='split')\nExpected:\n    '{\"columns\":[\"col 1\",\"col 2\"],\n      \"index\":[\"row 1\",\"row 2\"],\n      \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\nGot:\n    '{\"columns\":[\"col 1\",\"col 2\"],\"index\":[\"row 1\",\"row 2\"],\"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n**********************************************************************\nLine 124, in pandas.Series.to_json\nFailed example:\n    df.to_json(orient='table')\nExpected:\n    '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                            {\"name\": \"col 1\", \"type\": \"string\"},\n                            {\"name\": \"col 2\", \"type\": \"string\"}],\n                 \"primaryKey\": \"index\",\n                 \"pandas_version\": \"0.20.0\"},\n      \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n               {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'\nGot:\n    '{\"schema\": {\"fields\":[{\"name\":\"index\",\"type\":\"string\"},{\"name\":\"col 1\",\"type\":\"string\"},{\"name\":\"col 2\",\"type\":\"string\"}],\"primaryKey\":[\"index\"],\"pandas_version\":\"0.20.0\"}, \"data\": [{\"index\":\"row 1\",\"col 1\":\"a\",\"col 2\":\"b\"},{\"index\":\"row 2\",\"col 1\":\"c\",\"col 2\":\"d\"}]}'\n", "in_api": true, "section": "Serialization / IO / conversion", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.to_sparse": {"type": "function", "docstring": "Convert Series to SparseSeries.\n\n.. deprecated:: 0.25.0\n\nParameters\n----------\nkind : {'block', 'integer'}, default 'block'\nfill_value : float, defaults to NaN (missing)\n    Value to use for filling NaN values.\n\nReturns\n-------\nSparseSeries\n    Sparse representation of the Series.", "deprecated": true, "file": "pandas/core/series.py", "file_line": 1783, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L1783", "errors": [["PR06", "Parameter \"kind\" type should use \"int\" instead of \"integer\""], ["PR07", "Parameter \"kind\" has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Serialization / IO / conversion", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.to_dense": {"type": "function", "docstring": "Return dense representation of Series/DataFrame (as opposed to sparse).\n\n.. deprecated:: 0.25.0\n\nReturns\n-------\n%(klass)s\n    Dense %(klass)s.", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 1984, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L1984", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Serialization / IO / conversion", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.to_string": {"type": "function", "docstring": "Render a string representation of the Series.\n\nParameters\n----------\nbuf : StringIO-like, optional\n    Buffer to write to.\nna_rep : str, optional\n    String representation of NaN to use, default 'NaN'.\nfloat_format : one-parameter function, optional\n    Formatter function to apply to columns' elements if they are\n    floats, default None.\nheader : bool, default True\n    Add the Series header (index name).\nindex : bool, optional\n    Add index (row) labels, default True.\nlength : bool, default False\n    Add the Series length.\ndtype : bool, default False\n    Add the Series dtype.\nname : bool, default False\n    Add the Series name if not None.\nmax_rows : int, optional\n    Maximum number of rows to show before truncating. If None, show\n    all.\nmin_rows : int, optional\n    The number of rows to display in a truncated repr (when number\n    of rows is above `max_rows`).\n\nReturns\n-------\nstr or None\n    String representation of Series if ``buf=None``, otherwise None.", "deprecated": false, "file": "pandas/core/series.py", "file_line": 1588, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L1588", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Serialization / IO / conversion", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.to_clipboard": {"type": "function", "docstring": "Copy object to the system clipboard.\n\nWrite a text representation of object to the system clipboard.\nThis can be pasted into Excel, for example.\n\nParameters\n----------\nexcel : bool, default True\n    - True, use the provided separator, writing in a csv format for\n      allowing easy pasting into excel.\n    - False, write a string representation of the object to the\n      clipboard.\n\nsep : str, default ``'\\t'``\n    Field delimiter.\n**kwargs\n    These parameters will be passed to DataFrame.to_csv.\n\nSee Also\n--------\nDataFrame.to_csv : Write a DataFrame to a comma-separated values\n    (csv) file.\nread_clipboard : Read text from clipboard and pass to read_table.\n\nNotes\n-----\nRequirements for your platform.\n\n  - Linux : `xclip`, or `xsel` (with `PyQt4` modules)\n  - Windows : none\n  - OS X : none\n\nExamples\n--------\nCopy the contents of a DataFrame to the clipboard.\n\n>>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'])\n>>> df.to_clipboard(sep=',')\n... # Wrote the following to the system clipboard:\n... # ,A,B,C\n... # 0,1,2,3\n... # 1,4,5,6\n\nWe can omit the the index by passing the keyword `index` and setting\nit to false.\n\n>>> df.to_clipboard(sep=',', index=False)\n... # Wrote the following to the system clipboard:\n... # A,B,C\n... # 1,2,3\n... # 4,5,6", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 2752, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L2752", "errors": [["PR08", "Parameter \"excel\" description should start with a capital letter"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Serialization / IO / conversion", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.Series.to_latex": {"type": "function", "docstring": "Render an object to a LaTeX tabular environment table.\n\nRender an object to a tabular environment table. You can splice\nthis into a LaTeX document. Requires \\usepackage{booktabs}.\n\n.. versionchanged:: 0.20.2\n   Added to Series\n\nParameters\n----------\nbuf : str, Path or StringIO-like, optional, default None\n    Buffer to write to. If None, the output is returned as a string.\ncolumns : list of label, optional\n    The subset of columns to write. Writes all columns by default.\ncol_space : int, optional\n    The minimum width of each column.\nheader : bool or list of str, default True\n    Write out the column names. If a list of strings is given,\n    it is assumed to be aliases for the column names.\nindex : bool, default True\n    Write row names (index).\nna_rep : str, default 'NaN'\n    Missing data representation.\nformatters : list of functions or dict of {str: function}, optional\n    Formatter functions to apply to columns' elements by position or\n    name. The result of each function must be a unicode string.\n    List must be of length equal to the number of columns.\nfloat_format : one-parameter function or str, optional, default None\n    Formatter for floating point numbers. For example\n    ``float_format=\"%.2f\"`` and ``float_format=\"{:0.2f}\".format`` will\n    both result in 0.1234 being formatted as 0.12.\nsparsify : bool, optional\n    Set to False for a DataFrame with a hierarchical index to print\n    every multiindex key at each row. By default, the value will be\n    read from the config module.\nindex_names : bool, default True\n    Prints the names of the indexes.\nbold_rows : bool, default False\n    Make the row labels bold in the output.\ncolumn_format : str, optional\n    The columns format as specified in `LaTeX table format\n    <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g. 'rcl' for 3\n    columns. By default, 'l' will be used for all columns except\n    columns of numbers, which default to 'r'.\nlongtable : bool, optional\n    By default, the value will be read from the pandas config\n    module. Use a longtable environment instead of tabular. Requires\n    adding a \\usepackage{longtable} to your LaTeX preamble.\nescape : bool, optional\n    By default, the value will be read from the pandas config\n    module. When set to False prevents from escaping latex special\n    characters in column names.\nencoding : str, optional\n    A string representing the encoding to use in the output file,\n    defaults to 'utf-8'.\ndecimal : str, default '.'\n    Character recognized as decimal separator, e.g. ',' in Europe.\nmulticolumn : bool, default True\n    Use \\multicolumn to enhance MultiIndex columns.\n    The default will be read from the config module.\n\n    .. versionadded:: 0.20.0\nmulticolumn_format : str, default 'l'\n    The alignment for multicolumns, similar to `column_format`\n    The default will be read from the config module.\n\n    .. versionadded:: 0.20.0\nmultirow : bool, default False\n    Use \\multirow to enhance MultiIndex rows. Requires adding a\n    \\usepackage{multirow} to your LaTeX preamble. Will print\n    centered labels (instead of top-aligned) across the contained\n    rows, separating groups via clines. The default will be read\n    from the pandas config module.\n\n    .. versionadded:: 0.20.0\n\nReturns\n-------\nstr or None\n    If buf is None, returns the result as a string. Otherwise returns\n    None.\n\nSee Also\n--------\nDataFrame.to_string : Render a DataFrame to a console-friendly\n    tabular output.\nDataFrame.to_html : Render a DataFrame as an HTML table.\n\nExamples\n--------\n>>> df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n...                    'mask': ['red', 'purple'],\n...                    'weapon': ['sai', 'bo staff']})\n>>> print(df.to_latex(index=False)) # doctest: +NORMALIZE_WHITESPACE\n\\begin{tabular}{lll}\n \\toprule\n       name &    mask &    weapon \\\\\n \\midrule\n    Raphael &     red &       sai \\\\\n  Donatello &  purple &  bo staff \\\\\n\\bottomrule\n\\end{tabular}", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 2892, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L2892", "errors": [["EX03", "flake8 error: E261 at least two spaces before inline comment"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Serialization / IO / conversion", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.SparseSeries.to_coo": {"type": "function", "docstring": "Create a scipy.sparse.coo_matrix from a SparseSeries with MultiIndex.\n\nUse row_levels and column_levels to determine the row and column\ncoordinates respectively. row_levels and column_levels are the names\n(labels) or numbers of the levels. {row_levels, column_levels} must be\na partition of the MultiIndex level names (or numbers).\n\nParameters\n----------\nrow_levels : tuple/list\ncolumn_levels : tuple/list\nsort_labels : bool, default False\n    Sort the row and column labels before forming the sparse matrix.\n\nReturns\n-------\ny : scipy.sparse.coo_matrix\nrows : list (row labels)\ncolumns : list (column labels)\n\nExamples\n--------\n>>> s = pd.Series([3.0, np.nan, 1.0, 3.0, np.nan, np.nan])\n>>> s.index = pd.MultiIndex.from_tuples([(1, 2, 'a', 0),\n                                        (1, 2, 'a', 1),\n                                        (1, 1, 'b', 0),\n                                        (1, 1, 'b', 1),\n                                        (2, 1, 'b', 0),\n                                        (2, 1, 'b', 1)],\n                                        names=['A', 'B', 'C', 'D'])\n>>> ss = s.to_sparse()\n>>> A, rows, columns = ss.to_coo(row_levels=['A', 'B'],\n                                 column_levels=['C', 'D'],\n                                 sort_labels=True)\n>>> A\n<3x4 sparse matrix of type '<class 'numpy.float64'>'\n        with 3 stored elements in COOrdinate format>\n>>> A.todense()\nmatrix([[ 0.,  0.,  1.,  3.],\n[ 3.,  0.,  0.,  0.],\n[ 0.,  0.,  0.,  0.]])\n>>> rows\n[(1, 1), (1, 2), (2, 1)]\n>>> columns\n[('a', 0), ('a', 1), ('b', 0), ('b', 1)]", "deprecated": false, "file": "pandas/core/sparse/series.py", "file_line": 620, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/sparse/series.py#L620", "errors": [["PR07", "Parameter \"row_levels\" has no description"], ["PR07", "Parameter \"column_levels\" has no description"], ["RT03", "Return value has no description"], ["RT03", "Return value has no description"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 25, in pandas.SparseSeries.to_coo\nFailed example:\n    s.index = pd.MultiIndex.from_tuples([(1, 2, 'a', 0),\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.SparseSeries.to_coo[1]>\", line 1\n        s.index = pd.MultiIndex.from_tuples([(1, 2, 'a', 0),\n                                                           ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 33, in pandas.SparseSeries.to_coo\nFailed example:\n    A, rows, columns = ss.to_coo(row_levels=['A', 'B'],\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.SparseSeries.to_coo[3]>\", line 1\n        A, rows, columns = ss.to_coo(row_levels=['A', 'B'],\n                                                          ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 36, in pandas.SparseSeries.to_coo\nFailed example:\n    A\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.SparseSeries.to_coo[4]>\", line 1, in <module>\n        A\n    NameError: name 'A' is not defined\n**********************************************************************\nLine 39, in pandas.SparseSeries.to_coo\nFailed example:\n    A.todense()\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.SparseSeries.to_coo[5]>\", line 1, in <module>\n        A.todense()\n    NameError: name 'A' is not defined\n**********************************************************************\nLine 43, in pandas.SparseSeries.to_coo\nFailed example:\n    rows\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.SparseSeries.to_coo[6]>\", line 1, in <module>\n        rows\n    NameError: name 'rows' is not defined\n**********************************************************************\nLine 45, in pandas.SparseSeries.to_coo\nFailed example:\n    columns\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.SparseSeries.to_coo[7]>\", line 1, in <module>\n        columns\n    NameError: name 'columns' is not defined\n"], ["EX03", "flake8 error: E902 TokenError: EOF in multi-line statement"], ["EX03", "flake8 error: E999 SyntaxError: invalid syntax"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 25, in pandas.SparseSeries.to_coo\nFailed example:\n    s.index = pd.MultiIndex.from_tuples([(1, 2, 'a', 0),\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.SparseSeries.to_coo[1]>\", line 1\n        s.index = pd.MultiIndex.from_tuples([(1, 2, 'a', 0),\n                                                           ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 33, in pandas.SparseSeries.to_coo\nFailed example:\n    A, rows, columns = ss.to_coo(row_levels=['A', 'B'],\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.SparseSeries.to_coo[3]>\", line 1\n        A, rows, columns = ss.to_coo(row_levels=['A', 'B'],\n                                                          ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 36, in pandas.SparseSeries.to_coo\nFailed example:\n    A\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.SparseSeries.to_coo[4]>\", line 1, in <module>\n        A\n    NameError: name 'A' is not defined\n**********************************************************************\nLine 39, in pandas.SparseSeries.to_coo\nFailed example:\n    A.todense()\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.SparseSeries.to_coo[5]>\", line 1, in <module>\n        A.todense()\n    NameError: name 'A' is not defined\n**********************************************************************\nLine 43, in pandas.SparseSeries.to_coo\nFailed example:\n    rows\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.SparseSeries.to_coo[6]>\", line 1, in <module>\n        rows\n    NameError: name 'rows' is not defined\n**********************************************************************\nLine 45, in pandas.SparseSeries.to_coo\nFailed example:\n    columns\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.SparseSeries.to_coo[7]>\", line 1, in <module>\n        columns\n    NameError: name 'columns' is not defined\n", "in_api": true, "section": "Sparse", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.SparseSeries.from_coo": {"type": "method", "docstring": "Create a SparseSeries from a scipy.sparse.coo_matrix.\n\nParameters\n----------\nA : scipy.sparse.coo_matrix\ndense_index : bool, default False\n    If False (default), the SparseSeries index consists of only the\n    coords of the non-null entries of the original coo_matrix.\n    If True, the SparseSeries index consists of the full sorted\n    (row, col) coordinates of the coo_matrix.\n\nReturns\n-------\ns : SparseSeries\n\nExamples\n--------\n>>> from scipy import sparse\n>>> A = sparse.coo_matrix(([3.0, 1.0, 2.0], ([1, 0, 0], [0, 2, 3])),\n                       shape=(3, 4))\n>>> A\n<3x4 sparse matrix of type '<class 'numpy.float64'>'\n        with 3 stored elements in COOrdinate format>\n>>> A.todense()\nmatrix([[ 0.,  0.,  1.,  2.],\n        [ 3.,  0.,  0.,  0.],\n        [ 0.,  0.,  0.,  0.]])\n>>> ss = pd.SparseSeries.from_coo(A)\n>>> ss\n0  2    1\n   3    2\n1  0    3\ndtype: float64\nBlockIndex\nBlock locations: array([0], dtype=int32)\nBlock lengths: array([3], dtype=int32)", "deprecated": false, "file": "pandas/core/sparse/series.py", "file_line": 627, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/sparse/series.py#L627", "errors": [["PR07", "Parameter \"A\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 20, in pandas.SparseSeries.from_coo\nFailed example:\n    A = sparse.coo_matrix(([3.0, 1.0, 2.0], ([1, 0, 0], [0, 2, 3])),\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.SparseSeries.from_coo[1]>\", line 1\n        A = sparse.coo_matrix(([3.0, 1.0, 2.0], ([1, 0, 0], [0, 2, 3])),\n                                                                       ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 22, in pandas.SparseSeries.from_coo\nFailed example:\n    A\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.SparseSeries.from_coo[2]>\", line 1, in <module>\n        A\n    NameError: name 'A' is not defined\n**********************************************************************\nLine 25, in pandas.SparseSeries.from_coo\nFailed example:\n    A.todense()\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.SparseSeries.from_coo[3]>\", line 1, in <module>\n        A.todense()\n    NameError: name 'A' is not defined\n**********************************************************************\nLine 29, in pandas.SparseSeries.from_coo\nFailed example:\n    ss = pd.SparseSeries.from_coo(A)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.SparseSeries.from_coo[4]>\", line 1, in <module>\n        ss = pd.SparseSeries.from_coo(A)\n    NameError: name 'A' is not defined\n**********************************************************************\nLine 30, in pandas.SparseSeries.from_coo\nFailed example:\n    ss\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.SparseSeries.from_coo[5]>\", line 1, in <module>\n        ss\n    NameError: name 'ss' is not defined\n"], ["EX03", "flake8 error: E902 TokenError: EOF in multi-line statement"], ["EX03", "flake8 error: E999 SyntaxError: invalid syntax"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 20, in pandas.SparseSeries.from_coo\nFailed example:\n    A = sparse.coo_matrix(([3.0, 1.0, 2.0], ([1, 0, 0], [0, 2, 3])),\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.SparseSeries.from_coo[1]>\", line 1\n        A = sparse.coo_matrix(([3.0, 1.0, 2.0], ([1, 0, 0], [0, 2, 3])),\n                                                                       ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 22, in pandas.SparseSeries.from_coo\nFailed example:\n    A\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.SparseSeries.from_coo[2]>\", line 1, in <module>\n        A\n    NameError: name 'A' is not defined\n**********************************************************************\nLine 25, in pandas.SparseSeries.from_coo\nFailed example:\n    A.todense()\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.SparseSeries.from_coo[3]>\", line 1, in <module>\n        A.todense()\n    NameError: name 'A' is not defined\n**********************************************************************\nLine 29, in pandas.SparseSeries.from_coo\nFailed example:\n    ss = pd.SparseSeries.from_coo(A)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.SparseSeries.from_coo[4]>\", line 1, in <module>\n        ss = pd.SparseSeries.from_coo(A)\n    NameError: name 'A' is not defined\n**********************************************************************\nLine 30, in pandas.SparseSeries.from_coo\nFailed example:\n    ss\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.SparseSeries.from_coo[5]>\", line 1, in <module>\n        ss\n    NameError: name 'ss' is not defined\n", "in_api": true, "section": "Sparse", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.array": {"type": "function", "docstring": "Create an array.\n\n.. versionadded:: 0.24.0\n\nParameters\n----------\ndata : Sequence of objects\n    The scalars inside `data` should be instances of the\n    scalar type for `dtype`. It's expected that `data`\n    represents a 1-dimensional array of data.\n\n    When `data` is an Index or Series, the underlying array\n    will be extracted from `data`.\n\ndtype : str, np.dtype, or ExtensionDtype, optional\n    The dtype to use for the array. This may be a NumPy\n    dtype or an extension type registered with pandas using\n    :meth:`pandas.api.extensions.register_extension_dtype`.\n\n    If not specified, there are two possibilities:\n\n    1. When `data` is a :class:`Series`, :class:`Index`, or\n       :class:`ExtensionArray`, the `dtype` will be taken\n       from the data.\n    2. Otherwise, pandas will attempt to infer the `dtype`\n       from the data.\n\n    Note that when `data` is a NumPy array, ``data.dtype`` is\n    *not* used for inferring the array type. This is because\n    NumPy cannot represent all the types of data that can be\n    held in extension arrays.\n\n    Currently, pandas will infer an extension dtype for sequences of\n\n    ============================== =====================================\n    Scalar Type                    Array Type\n    ============================== =====================================\n    :class:`pandas.Interval`       :class:`pandas.arrays.IntervalArray`\n    :class:`pandas.Period`         :class:`pandas.arrays.PeriodArray`\n    :class:`datetime.datetime`     :class:`pandas.arrays.DatetimeArray`\n    :class:`datetime.timedelta`    :class:`pandas.arrays.TimedeltaArray`\n    ============================== =====================================\n\n    For all other cases, NumPy's usual inference rules will be used.\n\ncopy : bool, default True\n    Whether to copy the data, even if not necessary. Depending\n    on the type of `data`, creating the new array may require\n    copying data, even if ``copy=False``.\n\nReturns\n-------\nExtensionArray\n    The newly created array.\n\nRaises\n------\nValueError\n    When `data` is not 1-dimensional.\n\nSee Also\n--------\nnumpy.array : Construct a NumPy array.\nSeries : Construct a pandas Series.\nIndex : Construct a pandas Index.\narrays.PandasArray : ExtensionArray wrapping a NumPy array.\nSeries.array : Extract the array stored within a Series.\n\nNotes\n-----\nOmitting the `dtype` argument means pandas will attempt to infer the\nbest array type from the values in the data. As new array types are\nadded by pandas and 3rd party libraries, the \"best\" array type may\nchange. We recommend specifying `dtype` to ensure that\n\n1. the correct array type for the data is returned\n2. the returned array type doesn't change as new extension types\n   are added by pandas and third-party libraries\n\nAdditionally, if the underlying memory representation of the returned\narray matters, we recommend specifying the `dtype` as a concrete object\nrather than a string alias or allowing it to be inferred. For example,\na future version of pandas or a 3rd-party library may include a\ndedicated ExtensionArray for string data. In this event, the following\nwould no longer return a :class:`arrays.PandasArray` backed by a NumPy\narray.\n\n>>> pd.array(['a', 'b'], dtype=str)\n<PandasArray>\n['a', 'b']\nLength: 2, dtype: str32\n\nThis would instead return the new ExtensionArray dedicated for string\ndata. If you really need the new array to be backed by a  NumPy array,\nspecify that in the dtype.\n\n>>> pd.array(['a', 'b'], dtype=np.dtype(\"<U1\"))\n<PandasArray>\n['a', 'b']\nLength: 2, dtype: str32\n\nOr use the dedicated constructor for the array you're expecting, and\nwrap that in a PandasArray\n\n>>> pd.array(np.array(['a', 'b'], dtype='<U1'))\n<PandasArray>\n['a', 'b']\nLength: 2, dtype: str32\n\nFinally, Pandas has arrays that mostly overlap with NumPy\n\n  * :class:`arrays.DatetimeArray`\n  * :class:`arrays.TimedeltaArray`\n\nWhen data with a ``datetime64[ns]`` or ``timedelta64[ns]`` dtype is\npassed, pandas will always return a ``DatetimeArray`` or ``TimedeltaArray``\nrather than a ``PandasArray``. This is for symmetry with the case of\ntimezone-aware data, which NumPy does not natively support.\n\n>>> pd.array(['2015', '2016'], dtype='datetime64[ns]')\n<DatetimeArray>\n['2015-01-01 00:00:00', '2016-01-01 00:00:00']\nLength: 2, dtype: datetime64[ns]\n\n>>> pd.array([\"1H\", \"2H\"], dtype='timedelta64[ns]')\n<TimedeltaArray>\n['01:00:00', '02:00:00']\nLength: 2, dtype: timedelta64[ns]\n\nExamples\n--------\nIf a dtype is not specified, `data` is passed through to\n:meth:`numpy.array`, and a :class:`arrays.PandasArray` is returned.\n\n>>> pd.array([1, 2])\n<PandasArray>\n[1, 2]\nLength: 2, dtype: int64\n\nOr the NumPy dtype can be specified\n\n>>> pd.array([1, 2], dtype=np.dtype(\"int32\"))\n<PandasArray>\n[1, 2]\nLength: 2, dtype: int32\n\nYou can use the string alias for `dtype`\n\n>>> pd.array(['a', 'b', 'a'], dtype='category')\n[a, b, a]\nCategories (2, object): [a, b]\n\nOr specify the actual dtype\n\n>>> pd.array(['a', 'b', 'a'],\n...          dtype=pd.CategoricalDtype(['a', 'b', 'c'], ordered=True))\n[a, b, a]\nCategories (3, object): [a < b < c]\n\nBecause omitting the `dtype` passes the data through to NumPy,\na mixture of valid integers and NA will return a floating-point\nNumPy array.\n\n>>> pd.array([1, 2, np.nan])\n<PandasArray>\n[1.0,  2.0, nan]\nLength: 3, dtype: float64\n\nTo use pandas' nullable :class:`pandas.arrays.IntegerArray`, specify\nthe dtype:\n\n>>> pd.array([1, 2, np.nan], dtype='Int64')\n<IntegerArray>\n[1, 2, NaN]\nLength: 3, dtype: Int64\n\nPandas will infer an ExtensionArray for some types of data:\n\n>>> pd.array([pd.Period('2000', freq=\"D\"), pd.Period(\"2000\", freq=\"D\")])\n<PeriodArray>\n['2000-01-01', '2000-01-01']\nLength: 2, dtype: period[D]\n\n`data` must be 1-dimensional. A ValueError is raised when the input\nhas the wrong dimensionality.\n\n>>> pd.array(1)\nTraceback (most recent call last):\n  ...\nValueError: Cannot pass scalar '1' to 'pandas.array'.", "deprecated": false, "file": "pandas/core/construction.py", "file_line": 51, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/construction.py#L51", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.Timestamp": {"type": "type", "docstring": "Pandas replacement for python datetime.datetime object.\n\nTimestamp is the pandas equivalent of python's Datetime\nand is interchangeable with it in most cases. It's the type used\nfor the entries that make up a DatetimeIndex, and other timeseries\noriented data structures in pandas.\n\nParameters\n----------\nts_input : datetime-like, str, int, float\n    Value to be converted to Timestamp.\nfreq : str, DateOffset\n    Offset which Timestamp will have.\ntz : str, pytz.timezone, dateutil.tz.tzfile or None\n    Time zone for time which Timestamp will have.\nunit : str\n    Unit used for conversion if ts_input is of type int or float. The\n    valid values are 'D', 'h', 'm', 's', 'ms', 'us', and 'ns'. For\n    example, 's' means seconds and 'ms' means milliseconds.\nyear, month, day : int\n    .. versionadded:: 0.19.0\nhour, minute, second, microsecond : int, optional, default 0\n    .. versionadded:: 0.19.0\nnanosecond : int, optional, default 0\n    .. versionadded:: 0.23.0\ntzinfo : datetime.tzinfo, optional, default None\n    .. versionadded:: 0.19.0\n\nNotes\n-----\nThere are essentially three calling conventions for the constructor. The\nprimary form accepts four parameters. They can be passed by position or\nkeyword.\n\nThe other two forms mimic the parameters from ``datetime.datetime``. They\ncan be passed by either position or keyword, but not both mixed together.\n\nExamples\n--------\nUsing the primary calling convention:\n\nThis converts a datetime-like string\n\n>>> pd.Timestamp('2017-01-01T12')\nTimestamp('2017-01-01 12:00:00')\n\nThis converts a float representing a Unix epoch in units of seconds\n\n>>> pd.Timestamp(1513393355.5, unit='s')\nTimestamp('2017-12-16 03:02:35.500000')\n\nThis converts an int representing a Unix-epoch in units of seconds\nand for a particular timezone\n\n>>> pd.Timestamp(1513393355, unit='s', tz='US/Pacific')\nTimestamp('2017-12-15 19:02:35-0800', tz='US/Pacific')\n\nUsing the other two forms that mimic the API for ``datetime.datetime``:\n\n>>> pd.Timestamp(2017, 1, 1, 12)\nTimestamp('2017-01-01 12:00:00')\n\n>>> pd.Timestamp(year=2017, month=1, day=1, hour=12)\nTimestamp('2017-01-01 12:00:00')", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR01", "Parameters {month, microsecond, minute, second, year, day, hour} not documented"], ["PR02", "Unknown parameters {year, month, day, hour, minute, second, microsecond}"], ["PR07", "Parameter \"year, month, day\" has no description"], ["PR07", "Parameter \"hour, minute, second, microsecond\" has no description"], ["PR07", "Parameter \"nanosecond\" has no description"], ["PR07", "Parameter \"tzinfo\" has no description"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "", "shared_code_with": "pandas.Series.index"}, "pandas.Timestamp.asm8": {"type": "getset_descriptor", "docstring": "Return numpy datetime64 format in nanoseconds.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp"}, "pandas.Timestamp.day": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.asm8"}, "pandas.Timestamp.dayofweek": {"type": "property", "docstring": "Return day of whe week.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.day"}, "pandas.Timestamp.dayofyear": {"type": "property", "docstring": "Return the day of the year.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.dayofweek"}, "pandas.Timestamp.days_in_month": {"type": "property", "docstring": "Return the number of days in the month.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.dayofyear"}, "pandas.Timestamp.daysinmonth": {"type": "property", "docstring": "Return the number of days in the month.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.days_in_month"}, "pandas.Timestamp.fold": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.daysinmonth"}, "pandas.Timestamp.hour": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.fold"}, "pandas.Timestamp.is_leap_year": {"type": "property", "docstring": "Return True if year is a leap year.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.hour"}, "pandas.Timestamp.is_month_end": {"type": "property", "docstring": "Return True if date is last day of month.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.is_leap_year"}, "pandas.Timestamp.is_month_start": {"type": "property", "docstring": "Return True if date is first day of month.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.is_month_end"}, "pandas.Timestamp.is_quarter_end": {"type": "property", "docstring": "Return True if date is last day of the quarter.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.is_month_start"}, "pandas.Timestamp.is_quarter_start": {"type": "property", "docstring": "Return True if date is first day of the quarter.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.is_quarter_end"}, "pandas.Timestamp.is_year_end": {"type": "property", "docstring": "Return True if date is last day of the year.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.is_quarter_start"}, "pandas.Timestamp.is_year_start": {"type": "property", "docstring": "Return True if date is first day of the year.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.is_year_end"}, "pandas.Timestamp.max": {"type": "Timestamp", "docstring": "Pandas replacement for python datetime.datetime object.\n\nTimestamp is the pandas equivalent of python's Datetime\nand is interchangeable with it in most cases. It's the type used\nfor the entries that make up a DatetimeIndex, and other timeseries\noriented data structures in pandas.\n\nParameters\n----------\nts_input : datetime-like, str, int, float\n    Value to be converted to Timestamp.\nfreq : str, DateOffset\n    Offset which Timestamp will have.\ntz : str, pytz.timezone, dateutil.tz.tzfile or None\n    Time zone for time which Timestamp will have.\nunit : str\n    Unit used for conversion if ts_input is of type int or float. The\n    valid values are 'D', 'h', 'm', 's', 'ms', 'us', and 'ns'. For\n    example, 's' means seconds and 'ms' means milliseconds.\nyear, month, day : int\n    .. versionadded:: 0.19.0\nhour, minute, second, microsecond : int, optional, default 0\n    .. versionadded:: 0.19.0\nnanosecond : int, optional, default 0\n    .. versionadded:: 0.23.0\ntzinfo : datetime.tzinfo, optional, default None\n    .. versionadded:: 0.19.0\n\nNotes\n-----\nThere are essentially three calling conventions for the constructor. The\nprimary form accepts four parameters. They can be passed by position or\nkeyword.\n\nThe other two forms mimic the parameters from ``datetime.datetime``. They\ncan be passed by either position or keyword, but not both mixed together.\n\nExamples\n--------\nUsing the primary calling convention:\n\nThis converts a datetime-like string\n\n>>> pd.Timestamp('2017-01-01T12')\nTimestamp('2017-01-01 12:00:00')\n\nThis converts a float representing a Unix epoch in units of seconds\n\n>>> pd.Timestamp(1513393355.5, unit='s')\nTimestamp('2017-12-16 03:02:35.500000')\n\nThis converts an int representing a Unix-epoch in units of seconds\nand for a particular timezone\n\n>>> pd.Timestamp(1513393355, unit='s', tz='US/Pacific')\nTimestamp('2017-12-15 19:02:35-0800', tz='US/Pacific')\n\nUsing the other two forms that mimic the API for ``datetime.datetime``:\n\n>>> pd.Timestamp(2017, 1, 1, 12)\nTimestamp('2017-01-01 12:00:00')\n\n>>> pd.Timestamp(year=2017, month=1, day=1, hour=12)\nTimestamp('2017-01-01 12:00:00')", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR02", "Unknown parameters {tz, ts_input, freq, unit, hour, minute, second, microsecond, nanosecond, year, month, day, tzinfo}"], ["PR07", "Parameter \"year, month, day\" has no description"], ["PR07", "Parameter \"hour, minute, second, microsecond\" has no description"], ["PR07", "Parameter \"nanosecond\" has no description"], ["PR07", "Parameter \"tzinfo\" has no description"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.is_year_start"}, "pandas.Timestamp.microsecond": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.max"}, "pandas.Timestamp.min": {"type": "Timestamp", "docstring": "Pandas replacement for python datetime.datetime object.\n\nTimestamp is the pandas equivalent of python's Datetime\nand is interchangeable with it in most cases. It's the type used\nfor the entries that make up a DatetimeIndex, and other timeseries\noriented data structures in pandas.\n\nParameters\n----------\nts_input : datetime-like, str, int, float\n    Value to be converted to Timestamp.\nfreq : str, DateOffset\n    Offset which Timestamp will have.\ntz : str, pytz.timezone, dateutil.tz.tzfile or None\n    Time zone for time which Timestamp will have.\nunit : str\n    Unit used for conversion if ts_input is of type int or float. The\n    valid values are 'D', 'h', 'm', 's', 'ms', 'us', and 'ns'. For\n    example, 's' means seconds and 'ms' means milliseconds.\nyear, month, day : int\n    .. versionadded:: 0.19.0\nhour, minute, second, microsecond : int, optional, default 0\n    .. versionadded:: 0.19.0\nnanosecond : int, optional, default 0\n    .. versionadded:: 0.23.0\ntzinfo : datetime.tzinfo, optional, default None\n    .. versionadded:: 0.19.0\n\nNotes\n-----\nThere are essentially three calling conventions for the constructor. The\nprimary form accepts four parameters. They can be passed by position or\nkeyword.\n\nThe other two forms mimic the parameters from ``datetime.datetime``. They\ncan be passed by either position or keyword, but not both mixed together.\n\nExamples\n--------\nUsing the primary calling convention:\n\nThis converts a datetime-like string\n\n>>> pd.Timestamp('2017-01-01T12')\nTimestamp('2017-01-01 12:00:00')\n\nThis converts a float representing a Unix epoch in units of seconds\n\n>>> pd.Timestamp(1513393355.5, unit='s')\nTimestamp('2017-12-16 03:02:35.500000')\n\nThis converts an int representing a Unix-epoch in units of seconds\nand for a particular timezone\n\n>>> pd.Timestamp(1513393355, unit='s', tz='US/Pacific')\nTimestamp('2017-12-15 19:02:35-0800', tz='US/Pacific')\n\nUsing the other two forms that mimic the API for ``datetime.datetime``:\n\n>>> pd.Timestamp(2017, 1, 1, 12)\nTimestamp('2017-01-01 12:00:00')\n\n>>> pd.Timestamp(year=2017, month=1, day=1, hour=12)\nTimestamp('2017-01-01 12:00:00')", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR02", "Unknown parameters {tz, ts_input, freq, unit, hour, minute, second, microsecond, nanosecond, year, month, day, tzinfo}"], ["PR07", "Parameter \"year, month, day\" has no description"], ["PR07", "Parameter \"hour, minute, second, microsecond\" has no description"], ["PR07", "Parameter \"nanosecond\" has no description"], ["PR07", "Parameter \"tzinfo\" has no description"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.microsecond"}, "pandas.Timestamp.minute": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.min"}, "pandas.Timestamp.month": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.minute"}, "pandas.Timestamp.nanosecond": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.month"}, "pandas.Timestamp.quarter": {"type": "property", "docstring": "Return the quarter of the year.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.nanosecond"}, "pandas.Timestamp.resolution": {"type": "property", "docstring": "Return resolution describing the smallest difference between two\ntimes that can be represented by Timestamp object_state", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.quarter"}, "pandas.Timestamp.second": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.resolution"}, "pandas.Timestamp.tz": {"type": "property", "docstring": "Alias for tzinfo", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS03", "Summary does not end with a period"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.second"}, "pandas.Timestamp.tzinfo": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.tz"}, "pandas.Timestamp.value": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.tzinfo"}, "pandas.Timestamp.week": {"type": "property", "docstring": "Return the week number of the year.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.value"}, "pandas.Timestamp.weekofyear": {"type": "property", "docstring": "Return the week number of the year.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.week"}, "pandas.Timestamp.year": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Properties", "shared_code_with": "pandas.Timestamp.weekofyear"}, "pandas.Timestamp.astimezone": {"type": "cython_function_or_method", "docstring": "Convert tz-aware Timestamp to another time zone.\n\nParameters\n----------\ntz : str, pytz.timezone, dateutil.tz.tzfile or None\n    Time zone for time which Timestamp will be converted to.\n    None will remove timezone holding UTC time.\n\nReturns\n-------\nconverted : Timestamp\n\nRaises\n------\nTypeError\n    If Timestamp is tz-naive.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.year"}, "pandas.Timestamp.ceil": {"type": "cython_function_or_method", "docstring": "return a new Timestamp ceiled to this resolution\n\nParameters\n----------\nfreq : a freq string indicating the ceiling resolution\nambiguous : bool, 'NaT', default 'raise'\n    - bool contains flags to determine if time is dst or not (note\n      that this flag is only applicable for ambiguous fall dst dates)\n    - 'NaT' will return NaT for an ambiguous time\n    - 'raise' will raise an AmbiguousTimeError for an ambiguous time\n\n    .. versionadded:: 0.24.0\nnonexistent : 'shift_forward', 'shift_backward, 'NaT', timedelta, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST.\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times\n\n    .. versionadded:: 0.24.0\n\nRaises\n------\nValueError if the freq cannot be converted", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"], ["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"freq\" has no description"], ["PR08", "Parameter \"ambiguous\" description should start with a capital letter"], ["PR09", "Parameter \"ambiguous\" description should finish with \".\""], ["PR09", "Parameter \"nonexistent\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.astimezone"}, "pandas.Timestamp.combine": {"type": "method", "docstring": "Timestamp.combine(date, time)\n\ndate, time -> datetime with same date and time fields", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"], ["PR01", "Parameters {date, time} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.ceil"}, "pandas.Timestamp.ctime": {"type": "method_descriptor", "docstring": "Return ctime() style string.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.combine"}, "pandas.Timestamp.date": {"type": "method_descriptor", "docstring": "Return date object with same year, month and day.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.ctime"}, "pandas.Timestamp.day_name": {"type": "cython_function_or_method", "docstring": "Return the day name of the Timestamp with specified locale.\n\nParameters\n----------\nlocale : string, default None (English locale)\n    locale determining the language in which to return the day name\n\nReturns\n-------\nday_name : string\n\n.. versionadded:: 0.23.0", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR06", "Parameter \"locale\" type should use \"str\" instead of \"string\""], ["PR08", "Parameter \"locale\" description should start with a capital letter"], ["PR09", "Parameter \"locale\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.date"}, "pandas.Timestamp.dst": {"type": "method_descriptor", "docstring": "Return self.tzinfo.dst(self).", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.day_name"}, "pandas.Timestamp.floor": {"type": "cython_function_or_method", "docstring": "return a new Timestamp floored to this resolution\n\nParameters\n----------\nfreq : a freq string indicating the flooring resolution\nambiguous : bool, 'NaT', default 'raise'\n    - bool contains flags to determine if time is dst or not (note\n      that this flag is only applicable for ambiguous fall dst dates)\n    - 'NaT' will return NaT for an ambiguous time\n    - 'raise' will raise an AmbiguousTimeError for an ambiguous time\n\n    .. versionadded:: 0.24.0\nnonexistent : 'shift_forward', 'shift_backward, 'NaT', timedelta, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST.\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times\n\n    .. versionadded:: 0.24.0\n\nRaises\n------\nValueError if the freq cannot be converted", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"], ["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"freq\" has no description"], ["PR08", "Parameter \"ambiguous\" description should start with a capital letter"], ["PR09", "Parameter \"ambiguous\" description should finish with \".\""], ["PR09", "Parameter \"nonexistent\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.dst"}, "pandas.Timestamp.freq": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.floor"}, "pandas.Timestamp.freqstr": {"type": "property", "docstring": "Return the total number of days in the month.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.freq"}, "pandas.Timestamp.fromordinal": {"type": "method", "docstring": "Timestamp.fromordinal(ordinal, freq=None, tz=None)\n\npassed an ordinal, translate and convert to a ts\nnote: by definition there cannot be any tz info on the ordinal itself\n\nParameters\n----------\nordinal : int\n    date corresponding to a proleptic Gregorian ordinal\nfreq : str, DateOffset\n    Offset which Timestamp will have\ntz : str, pytz.timezone, dateutil.tz.tzfile or None\n    Time zone for time which Timestamp will have.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["PR08", "Parameter \"ordinal\" description should start with a capital letter"], ["PR09", "Parameter \"ordinal\" description should finish with \".\""], ["PR09", "Parameter \"freq\" description should finish with \".\""]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.freqstr"}, "pandas.Timestamp.fromtimestamp": {"type": "method", "docstring": "Timestamp.fromtimestamp(ts)\n\ntimestamp[, tz] -> tz's local time from POSIX timestamp.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS02", "Summary does not start with a capital letter"], ["PR01", "Parameters {ts} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.fromordinal"}, "pandas.Timestamp.isocalendar": {"type": "method_descriptor", "docstring": "Return a 3-tuple containing ISO year, week number, and weekday.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.fromtimestamp"}, "pandas.Timestamp.isoformat": {"type": "cython_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.isocalendar"}, "pandas.Timestamp.isoweekday": {"type": "method_descriptor", "docstring": "Return the day of the week represented by the date.\nMonday == 1 ... Sunday == 7", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.isoformat"}, "pandas.Timestamp.month_name": {"type": "cython_function_or_method", "docstring": "Return the month name of the Timestamp with specified locale.\n\nParameters\n----------\nlocale : string, default None (English locale)\n    locale determining the language in which to return the month name\n\nReturns\n-------\nmonth_name : string\n\n.. versionadded:: 0.23.0", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR06", "Parameter \"locale\" type should use \"str\" instead of \"string\""], ["PR08", "Parameter \"locale\" description should start with a capital letter"], ["PR09", "Parameter \"locale\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.isoweekday"}, "pandas.Timestamp.normalize": {"type": "cython_function_or_method", "docstring": "Normalize Timestamp to midnight, preserving\ntz information.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.month_name"}, "pandas.Timestamp.now": {"type": "method", "docstring": "Timestamp.now(tz=None)\n\nReturn new Timestamp object representing current time local to\ntz.\n\nParameters\n----------\ntz : str or timezone object, default None\n    Timezone to localize to", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS06", "Summary should fit in a single line"], ["PR09", "Parameter \"tz\" description should finish with \".\""]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.normalize"}, "pandas.Timestamp.replace": {"type": "cython_function_or_method", "docstring": "implements datetime.replace, handles nanoseconds\n\nParameters\n----------\nyear : int, optional\nmonth : int, optional\nday : int, optional\nhour : int, optional\nminute : int, optional\nsecond : int, optional\nmicrosecond : int, optional\nnanosecond : int, optional\ntzinfo : tz-convertible, optional\nfold : int, optional, default is 0\n\nReturns\n-------\nTimestamp with fields replaced", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"], ["PR07", "Parameter \"year\" has no description"], ["PR07", "Parameter \"month\" has no description"], ["PR07", "Parameter \"day\" has no description"], ["PR07", "Parameter \"hour\" has no description"], ["PR07", "Parameter \"minute\" has no description"], ["PR07", "Parameter \"second\" has no description"], ["PR07", "Parameter \"microsecond\" has no description"], ["PR07", "Parameter \"nanosecond\" has no description"], ["PR07", "Parameter \"tzinfo\" has no description"], ["PR07", "Parameter \"fold\" has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.now"}, "pandas.Timestamp.round": {"type": "cython_function_or_method", "docstring": "Round the Timestamp to the specified resolution\n\nParameters\n----------\nfreq : a freq string indicating the rounding resolution\nambiguous : bool, 'NaT', default 'raise'\n    - bool contains flags to determine if time is dst or not (note\n      that this flag is only applicable for ambiguous fall dst dates)\n    - 'NaT' will return NaT for an ambiguous time\n    - 'raise' will raise an AmbiguousTimeError for an ambiguous time\n\n    .. versionadded:: 0.24.0\nnonexistent : 'shift_forward', 'shift_backward, 'NaT', timedelta, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST.\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\na new Timestamp rounded to the given resolution of `freq`\n\nRaises\n------\nValueError if the freq cannot be converted", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS03", "Summary does not end with a period"], ["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"freq\" has no description"], ["PR08", "Parameter \"ambiguous\" description should start with a capital letter"], ["PR09", "Parameter \"ambiguous\" description should finish with \".\""], ["PR09", "Parameter \"nonexistent\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.replace"}, "pandas.Timestamp.strftime": {"type": "method_descriptor", "docstring": "format -> strftime() style string.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS02", "Summary does not start with a capital letter"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.round"}, "pandas.Timestamp.strptime": {"type": "method", "docstring": "Timestamp.strptime(string, format)\n\nFunction is not implemented. Use pd.to_datetime().", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR01", "Parameters {format, date_string} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.strftime"}, "pandas.Timestamp.time": {"type": "method_descriptor", "docstring": "Return time object with same time but with tzinfo=None.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.strptime"}, "pandas.Timestamp.timestamp": {"type": "method_descriptor", "docstring": "Return POSIX timestamp as float.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.time"}, "pandas.Timestamp.timetuple": {"type": "method_descriptor", "docstring": "Return time tuple, compatible with time.localtime().", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.timestamp"}, "pandas.Timestamp.timetz": {"type": "method_descriptor", "docstring": "Return time object with same time and tzinfo.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.timetuple"}, "pandas.Timestamp.to_datetime64": {"type": "method_descriptor", "docstring": "Return a numpy.datetime64 object with 'ns' precision.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.timetz"}, "pandas.Timestamp.to_numpy": {"type": "method_descriptor", "docstring": "Convert the Timestamp to a NumPy datetime64.\n\n.. versionadded:: 0.25.0\n\nThis is an alias method for `Timestamp.to_datetime64()`. The dtype and\ncopy parameters are available here only for compatibility. Their values\nwill not affect the return value.\n\nReturns\n-------\nnumpy.datetime64\n\nSee Also\n--------\nDatetimeIndex.to_numpy : Similar method for DatetimeIndex.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.to_datetime64"}, "pandas.Timestamp.to_julian_date": {"type": "cython_function_or_method", "docstring": "Convert TimeStamp to a Julian Date.\n0 Julian date is noon January 1, 4713 BC.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.to_numpy"}, "pandas.Timestamp.to_period": {"type": "cython_function_or_method", "docstring": "Return an period of which this timestamp is an observation.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR01", "Parameters {freq} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.to_julian_date"}, "pandas.Timestamp.to_pydatetime": {"type": "method_descriptor", "docstring": "Convert a Timestamp object to a native Python datetime object.\n\nIf warn=True, issue a warning if nanoseconds is nonzero.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.to_period"}, "pandas.Timestamp.today": {"type": "method", "docstring": "Timestamp.today(cls, tz=None)\n\nReturn the current time in the local timezone.  This differs\nfrom datetime.today() in that it can be localized to a\npassed timezone.\n\nParameters\n----------\ntz : str or timezone object, default None\n    Timezone to localize to", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS06", "Summary should fit in a single line"], ["PR09", "Parameter \"tz\" description should finish with \".\""]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.to_pydatetime"}, "pandas.Timestamp.toordinal": {"type": "method_descriptor", "docstring": "Return proleptic Gregorian ordinal.  January 1 of year 1 is day 1.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.today"}, "pandas.Timestamp.tz_convert": {"type": "cython_function_or_method", "docstring": "Convert tz-aware Timestamp to another time zone.\n\nParameters\n----------\ntz : str, pytz.timezone, dateutil.tz.tzfile or None\n    Time zone for time which Timestamp will be converted to.\n    None will remove timezone holding UTC time.\n\nReturns\n-------\nconverted : Timestamp\n\nRaises\n------\nTypeError\n    If Timestamp is tz-naive.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.toordinal"}, "pandas.Timestamp.tz_localize": {"type": "cython_function_or_method", "docstring": "Convert naive Timestamp to local time zone, or remove\ntimezone from tz-aware Timestamp.\n\nParameters\n----------\ntz : str, pytz.timezone, dateutil.tz.tzfile or None\n    Time zone for time which Timestamp will be converted to.\n    None will remove timezone holding local time.\n\nambiguous : bool, 'NaT', default 'raise'\n    When clocks moved backward due to DST, ambiguous times may arise.\n    For example in Central European Time (UTC+01), when going from\n    03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n    00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n    `ambiguous` parameter dictates how ambiguous times should be\n    handled.\n\n    - bool contains flags to determine if time is dst or not (note\n      that this flag is only applicable for ambiguous fall dst dates)\n    - 'NaT' will return NaT for an ambiguous time\n    - 'raise' will raise an AmbiguousTimeError for an ambiguous time\n\nnonexistent : 'shift_forward', 'shift_backward, 'NaT', timedelta, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST.\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times\n\n    .. versionadded:: 0.24.0\n\nerrors : 'raise', 'coerce', default None\n    - 'raise' will raise a NonExistentTimeError if a timestamp is not\n       valid in the specified timezone (e.g. due to a transition from\n       or to DST time). Use ``nonexistent='raise'`` instead.\n    - 'coerce' will return NaT if the timestamp can not be converted\n      into the specified timezone. Use ``nonexistent='NaT'`` instead.\n\n      .. deprecated:: 0.24.0\n\nReturns\n-------\nlocalized : Timestamp\n\nRaises\n------\nTypeError\n    If the Timestamp is tz-aware and tz is not None.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS06", "Summary should fit in a single line"], ["PR09", "Parameter \"ambiguous\" description should finish with \".\""], ["PR09", "Parameter \"nonexistent\" description should finish with \".\""], ["PR08", "Parameter \"errors\" description should start with a capital letter"], ["PR09", "Parameter \"errors\" description should finish with \".\""]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.tz_convert"}, "pandas.Timestamp.tzname": {"type": "method_descriptor", "docstring": "Return self.tzinfo.tzname(self).", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.tz_localize"}, "pandas.Timestamp.utcfromtimestamp": {"type": "method", "docstring": "Timestamp.utcfromtimestamp(ts)\n\nConstruct a naive UTC datetime from a POSIX timestamp.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR01", "Parameters {ts} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.tzname"}, "pandas.Timestamp.utcnow": {"type": "method", "docstring": "Timestamp.utcnow()\n\nReturn a new Timestamp representing UTC day and time.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.utcfromtimestamp"}, "pandas.Timestamp.utcoffset": {"type": "method_descriptor", "docstring": "Return self.tzinfo.utcoffset(self).", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.utcnow"}, "pandas.Timestamp.utctimetuple": {"type": "method_descriptor", "docstring": "Return UTC time tuple, compatible with time.localtime().", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.utcoffset"}, "pandas.Timestamp.weekday": {"type": "method_descriptor", "docstring": "Return the day of the week represented by the date.\nMonday == 0 ... Sunday == 6", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.utctimetuple"}, "pandas.arrays.DatetimeArray": {"type": "type", "docstring": "Pandas ExtensionArray for tz-naive or tz-aware datetime data.\n\n.. versionadded:: 0.24.0\n\n.. warning::\n\n   DatetimeArray is currently experimental, and its API may change\n   without warning. In particular, :attr:`DatetimeArray.dtype` is\n   expected to change to always be an instance of an ``ExtensionDtype``\n   subclass.\n\nParameters\n----------\nvalues : Series, Index, DatetimeArray, ndarray\n    The datetime data.\n\n    For DatetimeArray `values` (or a Series or Index boxing one),\n    `dtype` and `freq` will be extracted from `values`, with\n    precedence given to\n\ndtype : numpy.dtype or DatetimeTZDtype\n    Note that the only NumPy dtype allowed is 'datetime64[ns]'.\nfreq : str or Offset, optional\ncopy : bool, default False\n    Whether to copy the underlying array of values.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone", "deprecated": false, "file": "pandas/core/arrays/datetimes.py", "file_line": 237, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/datetimes.py#L237", "errors": [["PR09", "Parameter \"values\" description should finish with \".\""], ["PR07", "Parameter \"freq\" has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": ""}, "pandas.DatetimeTZDtype": {"type": "type", "docstring": "An ExtensionDtype for timezone-aware datetime data.\n\n**This is not an actual numpy dtype**, but a duck type.\n\nParameters\n----------\nunit : str, default \"ns\"\n    The precision of the datetime data. Currently limited\n    to ``\"ns\"``.\ntz : str, int, or datetime.tzinfo\n    The timezone.\n\nAttributes\n----------\nunit\ntz\n\nMethods\n-------\nNone\n\nRaises\n------\npytz.UnknownTimeZoneError\n    When the requested timezone cannot be found.\n\nExamples\n--------\n>>> pd.DatetimeTZDtype(tz='UTC')\ndatetime64[ns, UTC]\n\n>>> pd.DatetimeTZDtype(tz='dateutil/US/Central')\ndatetime64[ns, tzfile('/usr/share/zoneinfo/US/Central')]", "deprecated": false, "file": "pandas/core/dtypes/dtypes.py", "file_line": 616, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/dtypes.py#L616", "errors": [], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Datetime data", "subsection": "Methods", "shared_code_with": ""}, "pandas.Timedelta": {"type": "type", "docstring": "Represents a duration, the difference between two dates or times.\n\nTimedelta is the pandas equivalent of python's ``datetime.timedelta``\nand is interchangeable with it in most cases.\n\nParameters\n----------\nvalue : Timedelta, timedelta, np.timedelta64, string, or integer\nunit : str, optional\n    Denote the unit of the input, if input is an integer. Default 'ns'.\n    Possible values:\n    {'Y', 'M', 'W', 'D', 'days', 'day', 'hours', hour', 'hr', 'h',\n    'm', 'minute', 'min', 'minutes', 'T', 'S', 'seconds', 'sec', 'second',\n    'ms', 'milliseconds', 'millisecond', 'milli', 'millis', 'L',\n    'us', 'microseconds', 'microsecond', 'micro', 'micros', 'U',\n    'ns', 'nanoseconds', 'nano', 'nanos', 'nanosecond', 'N'}\n**kwargs\n    Available kwargs: {days, seconds, microseconds,\n    milliseconds, minutes, hours, weeks}.\n    Values for construction in compat with datetime.timedelta.\n    Numpy ints and floats will be coerced to python ints and floats.\n\nNotes\n-----\nThe ``.value`` attribute is always in ns.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR06", "Parameter \"value\" type should use \"int\" instead of \"integer\""], ["PR06", "Parameter \"value\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"value\" has no description"], ["PR09", "Parameter \"unit\" description should finish with \".\""]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Methods", "shared_code_with": "pandas.Timestamp.weekday"}, "pandas.Timedelta.asm8": {"type": "getset_descriptor", "docstring": "Return a numpy timedelta64 array scalar view.\n\nProvides access to the array scalar view (i.e. a combination of the\nvalue and the units) associated with the numpy.timedelta64().view(),\nincluding a 64-bit integer representation of the timedelta in\nnanoseconds (Python int compatible).\n\nReturns\n-------\nnumpy timedelta64 array scalar view\n    Array scalar view of the timedelta in nanoseconds.\n\nExamples\n--------\n>>> td = pd.Timedelta('1 days 2 min 3 us 42 ns')\n>>> td.asm8\nnumpy.timedelta64(86520000003042,'ns')\n\n>>> td = pd.Timedelta('2 min 3 s')\n>>> td.asm8\nnumpy.timedelta64(123000000000,'ns')\n\n>>> td = pd.Timedelta('3 ms 5 us')\n>>> td.asm8\nnumpy.timedelta64(3005000,'ns')\n\n>>> td = pd.Timedelta(42, unit='ns')\n>>> td.asm8\nnumpy.timedelta64(42,'ns')", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Properties", "shared_code_with": "pandas.Timedelta"}, "pandas.Timedelta.components": {"type": "getset_descriptor", "docstring": "Return a components namedtuple-like.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Properties", "shared_code_with": "pandas.Timedelta.asm8"}, "pandas.Timedelta.days": {"type": "member_descriptor", "docstring": "Number of days.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Properties", "shared_code_with": "pandas.Timedelta.components"}, "pandas.Timedelta.delta": {"type": "getset_descriptor", "docstring": "Return the timedelta in nanoseconds (ns), for internal compatibility.\n\nReturns\n-------\nint\n    Timedelta in nanoseconds.\n\nExamples\n--------\n>>> td = pd.Timedelta('1 days 42 ns')\n>>> td.delta\n86400000000042\n\n>>> td = pd.Timedelta('3 s')\n>>> td.delta\n3000000000\n\n>>> td = pd.Timedelta('3 ms 5 us')\n>>> td.delta\n3005000\n\n>>> td = pd.Timedelta(42, unit='ns')\n>>> td.delta\n42", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Properties", "shared_code_with": "pandas.Timedelta.days"}, "pandas.Timedelta.freq": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Properties", "shared_code_with": "pandas.Timedelta.delta"}, "pandas.Timedelta.is_populated": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Properties", "shared_code_with": "pandas.Timedelta.freq"}, "pandas.Timedelta.max": {"type": "Timedelta", "docstring": "Represents a duration, the difference between two dates or times.\n\nTimedelta is the pandas equivalent of python's ``datetime.timedelta``\nand is interchangeable with it in most cases.\n\nParameters\n----------\nvalue : Timedelta, timedelta, np.timedelta64, string, or integer\nunit : str, optional\n    Denote the unit of the input, if input is an integer. Default 'ns'.\n    Possible values:\n    {'Y', 'M', 'W', 'D', 'days', 'day', 'hours', hour', 'hr', 'h',\n    'm', 'minute', 'min', 'minutes', 'T', 'S', 'seconds', 'sec', 'second',\n    'ms', 'milliseconds', 'millisecond', 'milli', 'millis', 'L',\n    'us', 'microseconds', 'microsecond', 'micro', 'micros', 'U',\n    'ns', 'nanoseconds', 'nano', 'nanos', 'nanosecond', 'N'}\n**kwargs\n    Available kwargs: {days, seconds, microseconds,\n    milliseconds, minutes, hours, weeks}.\n    Values for construction in compat with datetime.timedelta.\n    Numpy ints and floats will be coerced to python ints and floats.\n\nNotes\n-----\nThe ``.value`` attribute is always in ns.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR02", "Unknown parameters {unit, value, **kwargs}"], ["PR06", "Parameter \"value\" type should use \"int\" instead of \"integer\""], ["PR06", "Parameter \"value\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"value\" has no description"], ["PR09", "Parameter \"unit\" description should finish with \".\""]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Properties", "shared_code_with": "pandas.Timedelta.is_populated"}, "pandas.Timedelta.microseconds": {"type": "member_descriptor", "docstring": "Number of microseconds (>= 0 and less than 1 second).", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Properties", "shared_code_with": "pandas.Timedelta.max"}, "pandas.Timedelta.min": {"type": "Timedelta", "docstring": "Represents a duration, the difference between two dates or times.\n\nTimedelta is the pandas equivalent of python's ``datetime.timedelta``\nand is interchangeable with it in most cases.\n\nParameters\n----------\nvalue : Timedelta, timedelta, np.timedelta64, string, or integer\nunit : str, optional\n    Denote the unit of the input, if input is an integer. Default 'ns'.\n    Possible values:\n    {'Y', 'M', 'W', 'D', 'days', 'day', 'hours', hour', 'hr', 'h',\n    'm', 'minute', 'min', 'minutes', 'T', 'S', 'seconds', 'sec', 'second',\n    'ms', 'milliseconds', 'millisecond', 'milli', 'millis', 'L',\n    'us', 'microseconds', 'microsecond', 'micro', 'micros', 'U',\n    'ns', 'nanoseconds', 'nano', 'nanos', 'nanosecond', 'N'}\n**kwargs\n    Available kwargs: {days, seconds, microseconds,\n    milliseconds, minutes, hours, weeks}.\n    Values for construction in compat with datetime.timedelta.\n    Numpy ints and floats will be coerced to python ints and floats.\n\nNotes\n-----\nThe ``.value`` attribute is always in ns.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR02", "Unknown parameters {unit, value, **kwargs}"], ["PR06", "Parameter \"value\" type should use \"int\" instead of \"integer\""], ["PR06", "Parameter \"value\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"value\" has no description"], ["PR09", "Parameter \"unit\" description should finish with \".\""]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Properties", "shared_code_with": "pandas.Timedelta.microseconds"}, "pandas.Timedelta.nanoseconds": {"type": "getset_descriptor", "docstring": "Return the number of nanoseconds (n), where 0 <= n < 1 microsecond.\n\nReturns\n-------\nint\n    Number of nanoseconds.\n\nSee Also\n--------\nTimedelta.components : Return all attributes with assigned values\n    (i.e. days, hours, minutes, seconds, milliseconds, microseconds,\n    nanoseconds).\n\nExamples\n--------\n**Using string input**\n\n>>> td = pd.Timedelta('1 days 2 min 3 us 42 ns')\n>>> td.nanoseconds\n42\n\n**Using integer input**\n\n>>> td = pd.Timedelta(42, unit='ns')\n>>> td.nanoseconds\n42", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Properties", "shared_code_with": "pandas.Timedelta.min"}, "pandas.Timedelta.resolution": {"type": "getset_descriptor", "docstring": "Return a string representing the lowest timedelta resolution.\n\nEach timedelta has a defined resolution that represents the lowest OR\nmost granular level of precision. Each level of resolution is\nrepresented by a short string as defined below:\n\nResolution:     Return value\n\n* Days:         'D'\n* Hours:        'H'\n* Minutes:      'T'\n* Seconds:      'S'\n* Milliseconds: 'L'\n* Microseconds: 'U'\n* Nanoseconds:  'N'\n\nReturns\n-------\nstr\n    Timedelta resolution.\n\nExamples\n--------\n>>> td = pd.Timedelta('1 days 2 min 3 us 42 ns')\n>>> td.resolution\n'N'\n\n>>> td = pd.Timedelta('1 days 2 min 3 us')\n>>> td.resolution\n'U'\n\n>>> td = pd.Timedelta('2 min 3 s')\n>>> td.resolution\n'S'\n\n>>> td = pd.Timedelta(36, unit='us')\n>>> td.resolution\n'U'", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Properties", "shared_code_with": "pandas.Timedelta.nanoseconds"}, "pandas.Timedelta.seconds": {"type": "member_descriptor", "docstring": "Number of seconds (>= 0 and less than 1 day).", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Properties", "shared_code_with": "pandas.Timedelta.resolution"}, "pandas.Timedelta.value": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Properties", "shared_code_with": "pandas.Timedelta.seconds"}, "pandas.Timedelta.view": {"type": "method_descriptor", "docstring": "Array view compatibility.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Properties", "shared_code_with": "pandas.Timedelta.value"}, "pandas.Timedelta.ceil": {"type": "cython_function_or_method", "docstring": "return a new Timedelta ceiled to this resolution\n\nParameters\n----------\nfreq : a freq string indicating the ceiling resolution", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"], ["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"freq\" has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Methods", "shared_code_with": "pandas.Timedelta.view"}, "pandas.Timedelta.floor": {"type": "cython_function_or_method", "docstring": "return a new Timedelta floored to this resolution\n\nParameters\n----------\nfreq : a freq string indicating the flooring resolution", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"], ["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"freq\" has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Methods", "shared_code_with": "pandas.Timedelta.ceil"}, "pandas.Timedelta.isoformat": {"type": "method_descriptor", "docstring": "Format Timedelta as ISO 8601 Duration like\n``P[n]Y[n]M[n]DT[n]H[n]M[n]S``, where the ``[n]`` s are replaced by the\nvalues. See https://en.wikipedia.org/wiki/ISO_8601#Durations\n\n.. versionadded:: 0.20.0\n\nReturns\n-------\nformatted : str\n\nSee Also\n--------\nTimestamp.isoformat\n\nNotes\n-----\nThe longest component is days, whose value may be larger than\n365.\nEvery component is always included, even if its value is 0.\nPandas uses nanosecond precision, so up to 9 decimal places may\nbe included in the seconds component.\nTrailing 0's are removed from the seconds component after the decimal.\nWe do not 0 pad components, so it's `...T5H...`, not `...T05H...`\n\nExamples\n--------\n>>> td = pd.Timedelta(days=6, minutes=50, seconds=3,\n...                   milliseconds=10, microseconds=10, nanoseconds=12)\n>>> td.isoformat()\n'P6DT0H50M3.010010012S'\n>>> pd.Timedelta(hours=1, seconds=10).isoformat()\n'P0DT0H0M10S'\n>>> pd.Timedelta(hours=1, seconds=10).isoformat()\n'P0DT0H0M10S'\n>>> pd.Timedelta(days=500.5).isoformat()\n'P500DT12H0MS'", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["SA04", "Missing description for See Also \"Timestamp.isoformat\" reference"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 32, in pandas.Timedelta.isoformat\nFailed example:\n    pd.Timedelta(hours=1, seconds=10).isoformat()\nExpected:\n    'P0DT0H0M10S'\nGot:\n    'P0DT1H0M10S'\n**********************************************************************\nLine 34, in pandas.Timedelta.isoformat\nFailed example:\n    pd.Timedelta(hours=1, seconds=10).isoformat()\nExpected:\n    'P0DT0H0M10S'\nGot:\n    'P0DT1H0M10S'\n**********************************************************************\nLine 36, in pandas.Timedelta.isoformat\nFailed example:\n    pd.Timedelta(days=500.5).isoformat()\nExpected:\n    'P500DT12H0MS'\nGot:\n    'P500DT12H0M0S'\n"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 32, in pandas.Timedelta.isoformat\nFailed example:\n    pd.Timedelta(hours=1, seconds=10).isoformat()\nExpected:\n    'P0DT0H0M10S'\nGot:\n    'P0DT1H0M10S'\n**********************************************************************\nLine 34, in pandas.Timedelta.isoformat\nFailed example:\n    pd.Timedelta(hours=1, seconds=10).isoformat()\nExpected:\n    'P0DT0H0M10S'\nGot:\n    'P0DT1H0M10S'\n**********************************************************************\nLine 36, in pandas.Timedelta.isoformat\nFailed example:\n    pd.Timedelta(days=500.5).isoformat()\nExpected:\n    'P500DT12H0MS'\nGot:\n    'P500DT12H0M0S'\n", "in_api": true, "section": "Timedelta data", "subsection": "Methods", "shared_code_with": "pandas.Timedelta.floor"}, "pandas.Timedelta.round": {"type": "cython_function_or_method", "docstring": "Round the Timedelta to the specified resolution\n\nParameters\n----------\nfreq : a freq string indicating the rounding resolution\n\nReturns\n-------\na new Timedelta rounded to the given resolution of `freq`\n\nRaises\n------\nValueError if the freq cannot be converted", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS03", "Summary does not end with a period"], ["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"freq\" has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Methods", "shared_code_with": "pandas.Timedelta.isoformat"}, "pandas.Timedelta.to_pytimedelta": {"type": "method_descriptor", "docstring": "Convert a pandas Timedelta object into a python timedelta object.\n\nTimedelta objects are internally saved as numpy datetime64[ns] dtype.\nUse to_pytimedelta() to convert to object dtype.\n\nReturns\n-------\ndatetime.timedelta or numpy.array of datetime.timedelta\n\nSee Also\n--------\nto_timedelta : Convert argument to Timedelta type.\n\nNotes\n-----\nAny nanosecond resolution will be lost.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Methods", "shared_code_with": "pandas.Timedelta.round"}, "pandas.Timedelta.to_timedelta64": {"type": "method_descriptor", "docstring": "Return a numpy.timedelta64 object with 'ns' precision.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Methods", "shared_code_with": "pandas.Timedelta.to_pytimedelta"}, "pandas.Timedelta.to_numpy": {"type": "method_descriptor", "docstring": "Convert the Timestamp to a NumPy timedelta64.\n\n.. versionadded:: 0.25.0\n\nThis is an alias method for `Timedelta.to_timedelta64()`. The dtype and\ncopy parameters are available here only for compatibility. Their values\nwill not affect the return value.\n\nReturns\n-------\nnumpy.timedelta64\n\nSee Also\n--------\nSeries.to_numpy : Similar method for Series.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Methods", "shared_code_with": "pandas.Timedelta.to_timedelta64"}, "pandas.Timedelta.total_seconds": {"type": "method_descriptor", "docstring": "Total duration of timedelta in seconds (to ns precision).", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Methods", "shared_code_with": "pandas.Timedelta.to_numpy"}, "pandas.arrays.TimedeltaArray": {"type": "type", "docstring": "Pandas ExtensionArray for timedelta data.\n\n.. versionadded:: 0.24.0\n\n.. warning::\n\n   TimedeltaArray is currently experimental, and its API may change\n   without warning. In particular, :attr:`TimedeltaArray.dtype` is\n   expected to change to be an instance of an ``ExtensionDtype``\n   subclass.\n\nParameters\n----------\nvalues : array-like\n    The timedelta data.\n\ndtype : numpy.dtype\n    Currently, only ``numpy.dtype(\"timedelta64[ns]\")`` is accepted.\nfreq : Offset, optional\ncopy : bool, default False\n    Whether to copy the underlying array of data.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone", "deprecated": false, "file": "pandas/core/arrays/timedeltas.py", "file_line": 126, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/timedeltas.py#L126", "errors": [["PR07", "Parameter \"freq\" has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Timedelta data", "subsection": "Methods", "shared_code_with": ""}, "pandas.Period": {"type": "type", "docstring": "Represents a period of time\n\nParameters\n----------\nvalue : Period or str, default None\n    The time period represented (e.g., '4Q2005')\nfreq : str, default None\n    One of pandas period strings or corresponding objects\nyear : int, default None\nmonth : int, default 1\nquarter : int, default None\nday : int, default 1\nhour : int, default 0\nminute : int, default 0\nsecond : int, default 0", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS03", "Summary does not end with a period"], ["PR01", "Parameters {ordinal} not documented"], ["PR09", "Parameter \"value\" description should finish with \".\""], ["PR09", "Parameter \"freq\" description should finish with \".\""], ["PR07", "Parameter \"year\" has no description"], ["PR07", "Parameter \"month\" has no description"], ["PR07", "Parameter \"quarter\" has no description"], ["PR07", "Parameter \"day\" has no description"], ["PR07", "Parameter \"hour\" has no description"], ["PR07", "Parameter \"minute\" has no description"], ["PR07", "Parameter \"second\" has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Methods", "shared_code_with": "pandas.Timedelta.total_seconds"}, "pandas.Period.day": {"type": "getset_descriptor", "docstring": "Get day of the month that a Period falls on.\n\nReturns\n-------\nint\n\nSee Also\n--------\nPeriod.dayofweek : Get the day of the week.\nPeriod.dayofyear : Get the day of the year.\n\nExamples\n--------\n>>> p = pd.Period(\"2018-03-11\", freq='H')\n>>> p.day\n11", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Properties", "shared_code_with": "pandas.Period"}, "pandas.Period.dayofweek": {"type": "getset_descriptor", "docstring": "Day of the week the period lies in, with Monday=0 and Sunday=6.\n\nIf the period frequency is lower than daily (e.g. hourly), and the\nperiod spans over multiple days, the day at the start of the period is\nused.\n\nIf the frequency is higher than daily (e.g. monthly), the last day\nof the period is used.\n\nReturns\n-------\nint\n    Day of the week.\n\nSee Also\n--------\nPeriod.dayofweek : Day of the week the period lies in.\nPeriod.weekday : Alias of Period.dayofweek.\nPeriod.day : Day of the month.\nPeriod.dayofyear : Day of the year.\n\nExamples\n--------\n>>> per = pd.Period('2017-12-31 22:00', 'H')\n>>> per.dayofweek\n6\n\nFor periods that span over multiple days, the day at the beginning of\nthe period is returned.\n\n>>> per = pd.Period('2017-12-31 22:00', '4H')\n>>> per.dayofweek\n6\n>>> per.start_time.dayofweek\n6\n\nFor periods with a frequency higher than days, the last day of the\nperiod is returned.\n\n>>> per = pd.Period('2018-01', 'M')\n>>> per.dayofweek\n2\n>>> per.end_time.dayofweek\n2", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Properties", "shared_code_with": "pandas.Period.day"}, "pandas.Period.dayofyear": {"type": "getset_descriptor", "docstring": "Return the day of the year.\n\nThis attribute returns the day of the year on which the particular\ndate occurs. The return value ranges between 1 to 365 for regular\nyears and 1 to 366 for leap years.\n\nReturns\n-------\nint\n    The day of year.\n\nSee Also\n--------\nPeriod.day : Return the day of the month.\nPeriod.dayofweek : Return the day of week.\nPeriodIndex.dayofyear : Return the day of year of all indexes.\n\nExamples\n--------\n>>> period = pd.Period(\"2015-10-23\", freq='H')\n>>> period.dayofyear\n296\n>>> period = pd.Period(\"2012-12-31\", freq='D')\n>>> period.dayofyear\n366\n>>> period = pd.Period(\"2013-01-01\", freq='D')\n>>> period.dayofyear\n1", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Properties", "shared_code_with": "pandas.Period.dayofweek"}, "pandas.Period.days_in_month": {"type": "getset_descriptor", "docstring": "Get the total number of days in the month that this period falls on.\n\nReturns\n-------\nint\n\nSee Also\n--------\nPeriod.daysinmonth : Gets the number of days in the month.\nDatetimeIndex.daysinmonth : Gets the number of days in the month.\ncalendar.monthrange : Returns a tuple containing weekday\n    (0-6 ~ Mon-Sun) and number of days (28-31).\n\nExamples\n--------\n>>> p = pd.Period('2018-2-17')\n>>> p.days_in_month\n28\n\n>>> pd.Period('2018-03-01').days_in_month\n31\n\nHandles the leap year case as well:\n\n>>> p = pd.Period('2016-2-17')\n>>> p.days_in_month\n29", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Properties", "shared_code_with": "pandas.Period.dayofyear"}, "pandas.Period.daysinmonth": {"type": "getset_descriptor", "docstring": "Get the total number of days of the month that the Period falls in.\n\nReturns\n-------\nint\n\nSee Also\n--------\nPeriod.days_in_month : Return the days of the month.\nPeriod.dayofyear : Return the day of the year.\n\nExamples\n--------\n>>> p = pd.Period(\"2018-03-11\", freq='H')\n>>> p.daysinmonth\n31", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Properties", "shared_code_with": "pandas.Period.days_in_month"}, "pandas.Period.end_time": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Properties", "shared_code_with": "pandas.Period.daysinmonth"}, "pandas.Period.freq": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Properties", "shared_code_with": "pandas.Period.end_time"}, "pandas.Period.freqstr": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Properties", "shared_code_with": "pandas.Period.freq"}, "pandas.Period.hour": {"type": "getset_descriptor", "docstring": "Get the hour of the day component of the Period.\n\nReturns\n-------\nint\n    The hour as an integer, between 0 and 23.\n\nSee Also\n--------\nPeriod.second : Get the second component of the Period.\nPeriod.minute : Get the minute component of the Period.\n\nExamples\n--------\n>>> p = pd.Period(\"2018-03-11 13:03:12.050000\")\n>>> p.hour\n13\n\nPeriod longer than a day\n\n>>> p = pd.Period(\"2018-03-11\", freq=\"M\")\n>>> p.hour\n0", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Properties", "shared_code_with": "pandas.Period.freqstr"}, "pandas.Period.is_leap_year": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Properties", "shared_code_with": "pandas.Period.hour"}, "pandas.Period.minute": {"type": "getset_descriptor", "docstring": "Get minute of the hour component of the Period.\n\nReturns\n-------\nint\n    The minute as an integer, between 0 and 59.\n\nSee Also\n--------\nPeriod.hour : Get the hour component of the Period.\nPeriod.second : Get the second component of the Period.\n\nExamples\n--------\n>>> p = pd.Period(\"2018-03-11 13:03:12.050000\")\n>>> p.minute\n3", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Properties", "shared_code_with": "pandas.Period.is_leap_year"}, "pandas.Period.month": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Properties", "shared_code_with": "pandas.Period.minute"}, "pandas.Period.ordinal": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Properties", "shared_code_with": "pandas.Period.month"}, "pandas.Period.quarter": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Properties", "shared_code_with": "pandas.Period.ordinal"}, "pandas.Period.qyear": {"type": "getset_descriptor", "docstring": "Fiscal year the Period lies in according to its starting-quarter.\n\nThe `year` and the `qyear` of the period will be the same if the fiscal\nand calendar years are the same. When they are not, the fiscal year\ncan be different from the calendar year of the period.\n\nReturns\n-------\nint\n    The fiscal year of the period.\n\nSee Also\n--------\nPeriod.year : Return the calendar year of the period.\n\nExamples\n--------\nIf the natural and fiscal year are the same, `qyear` and `year` will\nbe the same.\n\n>>> per = pd.Period('2018Q1', freq='Q')\n>>> per.qyear\n2018\n>>> per.year\n2018\n\nIf the fiscal year starts in April (`Q-MAR`), the first quarter of\n2018 will start in April 2017. `year` will then be 2018, but `qyear`\nwill be the fiscal year, 2018.\n\n>>> per = pd.Period('2018Q1', freq='Q-MAR')\n>>> per.start_time\nTimestamp('2017-04-01 00:00:00')\n>>> per.qyear\n2018\n>>> per.year\n2017", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Properties", "shared_code_with": "pandas.Period.quarter"}, "pandas.Period.second": {"type": "getset_descriptor", "docstring": "Get the second component of the Period.\n\nReturns\n-------\nint\n    The second of the Period (ranges from 0 to 59).\n\nSee Also\n--------\nPeriod.hour : Get the hour component of the Period.\nPeriod.minute : Get the minute component of the Period.\n\nExamples\n--------\n>>> p = pd.Period(\"2018-03-11 13:03:12.050000\")\n>>> p.second\n12", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Properties", "shared_code_with": "pandas.Period.qyear"}, "pandas.Period.start_time": {"type": "getset_descriptor", "docstring": "Get the Timestamp for the start of the period.\n\nReturns\n-------\nTimestamp\n\nSee Also\n--------\nPeriod.end_time : Return the end Timestamp.\nPeriod.dayofyear : Return the day of year.\nPeriod.daysinmonth : Return the days in that month.\nPeriod.dayofweek : Return the day of the week.\n\nExamples\n--------\n>>> period = pd.Period('2012-1-1', freq='D')\n>>> period\nPeriod('2012-01-01', 'D')\n\n>>> period.start_time\nTimestamp('2012-01-01 00:00:00')\n\n>>> period.end_time\nTimestamp('2012-01-01 23:59:59.999999999')", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Properties", "shared_code_with": "pandas.Period.second"}, "pandas.Period.week": {"type": "getset_descriptor", "docstring": "Get the week of the year on the given Period.\n\nReturns\n-------\nint\n\nSee Also\n--------\nPeriod.dayofweek : Get the day component of the Period.\nPeriod.weekday : Get the day component of the Period.\n\nExamples\n--------\n>>> p = pd.Period(\"2018-03-11\", \"H\")\n>>> p.week\n10\n\n>>> p = pd.Period(\"2018-02-01\", \"D\")\n>>> p.week\n5\n\n>>> p = pd.Period(\"2018-01-06\", \"D\")\n>>> p.week\n1", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Properties", "shared_code_with": "pandas.Period.start_time"}, "pandas.Period.weekday": {"type": "getset_descriptor", "docstring": "Day of the week the period lies in, with Monday=0 and Sunday=6.\n\nIf the period frequency is lower than daily (e.g. hourly), and the\nperiod spans over multiple days, the day at the start of the period is\nused.\n\nIf the frequency is higher than daily (e.g. monthly), the last day\nof the period is used.\n\nReturns\n-------\nint\n    Day of the week.\n\nSee Also\n--------\nPeriod.dayofweek : Day of the week the period lies in.\nPeriod.weekday : Alias of Period.dayofweek.\nPeriod.day : Day of the month.\nPeriod.dayofyear : Day of the year.\n\nExamples\n--------\n>>> per = pd.Period('2017-12-31 22:00', 'H')\n>>> per.dayofweek\n6\n\nFor periods that span over multiple days, the day at the beginning of\nthe period is returned.\n\n>>> per = pd.Period('2017-12-31 22:00', '4H')\n>>> per.dayofweek\n6\n>>> per.start_time.dayofweek\n6\n\nFor periods with a frequency higher than days, the last day of the\nperiod is returned.\n\n>>> per = pd.Period('2018-01', 'M')\n>>> per.dayofweek\n2\n>>> per.end_time.dayofweek\n2", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Properties", "shared_code_with": "pandas.Period.week"}, "pandas.Period.weekofyear": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Properties", "shared_code_with": "pandas.Period.weekday"}, "pandas.Period.year": {"type": "getset_descriptor", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Properties", "shared_code_with": "pandas.Period.weekofyear"}, "pandas.Period.asfreq": {"type": "method_descriptor", "docstring": "Convert Period to desired frequency, either at the start or end of the\ninterval\n\nParameters\n----------\nfreq : string\nhow : {'E', 'S', 'end', 'start'}, default 'end'\n    Start or end of the timespan\n\nReturns\n-------\nresampled : Period", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["PR02", "Unknown parameters {freq, how}"], ["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"freq\" has no description"], ["PR09", "Parameter \"how\" description should finish with \".\""]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Methods", "shared_code_with": "pandas.Period.year"}, "pandas.Period.now": {"type": "builtin_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Methods", "shared_code_with": "pandas.Period.asfreq"}, "pandas.Period.strftime": {"type": "method_descriptor", "docstring": "Returns the string representation of the :class:`Period`, depending\non the selected ``fmt``. ``fmt`` must be a string\ncontaining one or several directives.  The method recognizes the same\ndirectives as the :func:`time.strftime` function of the standard Python\ndistribution, as well as the specific additional directives ``%f``,\n``%F``, ``%q``. (formatting & docs originally from scikits.timeries)\n\n+-----------+--------------------------------+-------+\n| Directive | Meaning                        | Notes |\n+===========+================================+=======+\n| ``%a``    | Locale's abbreviated weekday   |       |\n|           | name.                          |       |\n+-----------+--------------------------------+-------+\n| ``%A``    | Locale's full weekday name.    |       |\n+-----------+--------------------------------+-------+\n| ``%b``    | Locale's abbreviated month     |       |\n|           | name.                          |       |\n+-----------+--------------------------------+-------+\n| ``%B``    | Locale's full month name.      |       |\n+-----------+--------------------------------+-------+\n| ``%c``    | Locale's appropriate date and  |       |\n|           | time representation.           |       |\n+-----------+--------------------------------+-------+\n| ``%d``    | Day of the month as a decimal  |       |\n|           | number [01,31].                |       |\n+-----------+--------------------------------+-------+\n| ``%f``    | 'Fiscal' year without a        | \\(1)  |\n|           | century  as a decimal number   |       |\n|           | [00,99]                        |       |\n+-----------+--------------------------------+-------+\n| ``%F``    | 'Fiscal' year with a century   | \\(2)  |\n|           | as a decimal number            |       |\n+-----------+--------------------------------+-------+\n| ``%H``    | Hour (24-hour clock) as a      |       |\n|           | decimal number [00,23].        |       |\n+-----------+--------------------------------+-------+\n| ``%I``    | Hour (12-hour clock) as a      |       |\n|           | decimal number [01,12].        |       |\n+-----------+--------------------------------+-------+\n| ``%j``    | Day of the year as a decimal   |       |\n|           | number [001,366].              |       |\n+-----------+--------------------------------+-------+\n| ``%m``    | Month as a decimal number      |       |\n|           | [01,12].                       |       |\n+-----------+--------------------------------+-------+\n| ``%M``    | Minute as a decimal number     |       |\n|           | [00,59].                       |       |\n+-----------+--------------------------------+-------+\n| ``%p``    | Locale's equivalent of either  | \\(3)  |\n|           | AM or PM.                      |       |\n+-----------+--------------------------------+-------+\n| ``%q``    | Quarter as a decimal number    |       |\n|           | [01,04]                        |       |\n+-----------+--------------------------------+-------+\n| ``%S``    | Second as a decimal number     | \\(4)  |\n|           | [00,61].                       |       |\n+-----------+--------------------------------+-------+\n| ``%U``    | Week number of the year        | \\(5)  |\n|           | (Sunday as the first day of    |       |\n|           | the week) as a decimal number  |       |\n|           | [00,53].  All days in a new    |       |\n|           | year preceding the first       |       |\n|           | Sunday are considered to be in |       |\n|           | week 0.                        |       |\n+-----------+--------------------------------+-------+\n| ``%w``    | Weekday as a decimal number    |       |\n|           | [0(Sunday),6].                 |       |\n+-----------+--------------------------------+-------+\n| ``%W``    | Week number of the year        | \\(5)  |\n|           | (Monday as the first day of    |       |\n|           | the week) as a decimal number  |       |\n|           | [00,53].  All days in a new    |       |\n|           | year preceding the first       |       |\n|           | Monday are considered to be in |       |\n|           | week 0.                        |       |\n+-----------+--------------------------------+-------+\n| ``%x``    | Locale's appropriate date      |       |\n|           | representation.                |       |\n+-----------+--------------------------------+-------+\n| ``%X``    | Locale's appropriate time      |       |\n|           | representation.                |       |\n+-----------+--------------------------------+-------+\n| ``%y``    | Year without century as a      |       |\n|           | decimal number [00,99].        |       |\n+-----------+--------------------------------+-------+\n| ``%Y``    | Year with century as a decimal |       |\n|           | number.                        |       |\n+-----------+--------------------------------+-------+\n| ``%Z``    | Time zone name (no characters  |       |\n|           | if no time zone exists).       |       |\n+-----------+--------------------------------+-------+\n| ``%%``    | A literal ``'%'`` character.   |       |\n+-----------+--------------------------------+-------+\n\nNotes\n-----\n\n(1)\n    The ``%f`` directive is the same as ``%y`` if the frequency is\n    not quarterly.\n    Otherwise, it corresponds to the 'fiscal' year, as defined by\n    the :attr:`qyear` attribute.\n\n(2)\n    The ``%F`` directive is the same as ``%Y`` if the frequency is\n    not quarterly.\n    Otherwise, it corresponds to the 'fiscal' year, as defined by\n    the :attr:`qyear` attribute.\n\n(3)\n    The ``%p`` directive only affects the output hour field\n    if the ``%I`` directive is used to parse the hour.\n\n(4)\n    The range really is ``0`` to ``61``; this accounts for leap\n    seconds and the (very rare) double leap seconds.\n\n(5)\n    The ``%U`` and ``%W`` directives are only used in calculations\n    when the day of the week and the year are specified.\n\nExamples\n--------\n\n>>> a = Period(freq='Q-JUL', year=2006, quarter=1)\n>>> a.strftime('%F-Q%q')\n'2006-Q1'\n>>> # Output the last month in the quarter of this date\n>>> a.strftime('%b-%Y')\n'Oct-2005'\n>>>\n>>> a = Period(freq='D', year=2001, month=1, day=1)\n>>> a.strftime('%d-%b-%Y')\n'01-Jan-2006'\n>>> a.strftime('%b. %d, %Y was a %A')\n'Jan. 01, 2001 was a Monday'", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 126, in pandas.Period.strftime\nFailed example:\n    a = Period(freq='Q-JUL', year=2006, quarter=1)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Period.strftime[0]>\", line 1, in <module>\n        a = Period(freq='Q-JUL', year=2006, quarter=1)\n    NameError: name 'Period' is not defined\n**********************************************************************\nLine 127, in pandas.Period.strftime\nFailed example:\n    a.strftime('%F-Q%q')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Period.strftime[1]>\", line 1, in <module>\n        a.strftime('%F-Q%q')\n    NameError: name 'a' is not defined\n**********************************************************************\nLine 130, in pandas.Period.strftime\nFailed example:\n    a.strftime('%b-%Y')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Period.strftime[2]>\", line 1, in <module>\n        a.strftime('%b-%Y')\n    NameError: name 'a' is not defined\n**********************************************************************\nLine 133, in pandas.Period.strftime\nFailed example:\n    a = Period(freq='D', year=2001, month=1, day=1)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Period.strftime[3]>\", line 1, in <module>\n        a = Period(freq='D', year=2001, month=1, day=1)\n    NameError: name 'Period' is not defined\n**********************************************************************\nLine 134, in pandas.Period.strftime\nFailed example:\n    a.strftime('%d-%b-%Y')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Period.strftime[4]>\", line 1, in <module>\n        a.strftime('%d-%b-%Y')\n    NameError: name 'a' is not defined\n**********************************************************************\nLine 136, in pandas.Period.strftime\nFailed example:\n    a.strftime('%b. %d, %Y was a %A')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Period.strftime[5]>\", line 1, in <module>\n        a.strftime('%b. %d, %Y was a %A')\n    NameError: name 'a' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'Period' (2 times)"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 126, in pandas.Period.strftime\nFailed example:\n    a = Period(freq='Q-JUL', year=2006, quarter=1)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Period.strftime[0]>\", line 1, in <module>\n        a = Period(freq='Q-JUL', year=2006, quarter=1)\n    NameError: name 'Period' is not defined\n**********************************************************************\nLine 127, in pandas.Period.strftime\nFailed example:\n    a.strftime('%F-Q%q')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Period.strftime[1]>\", line 1, in <module>\n        a.strftime('%F-Q%q')\n    NameError: name 'a' is not defined\n**********************************************************************\nLine 130, in pandas.Period.strftime\nFailed example:\n    a.strftime('%b-%Y')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Period.strftime[2]>\", line 1, in <module>\n        a.strftime('%b-%Y')\n    NameError: name 'a' is not defined\n**********************************************************************\nLine 133, in pandas.Period.strftime\nFailed example:\n    a = Period(freq='D', year=2001, month=1, day=1)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Period.strftime[3]>\", line 1, in <module>\n        a = Period(freq='D', year=2001, month=1, day=1)\n    NameError: name 'Period' is not defined\n**********************************************************************\nLine 134, in pandas.Period.strftime\nFailed example:\n    a.strftime('%d-%b-%Y')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Period.strftime[4]>\", line 1, in <module>\n        a.strftime('%d-%b-%Y')\n    NameError: name 'a' is not defined\n**********************************************************************\nLine 136, in pandas.Period.strftime\nFailed example:\n    a.strftime('%b. %d, %Y was a %A')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Period.strftime[5]>\", line 1, in <module>\n        a.strftime('%b. %d, %Y was a %A')\n    NameError: name 'a' is not defined\n", "in_api": true, "section": "Period", "subsection": "Methods", "shared_code_with": "pandas.Period.now"}, "pandas.Period.to_timestamp": {"type": "method_descriptor", "docstring": "Return the Timestamp representation of the Period at the target\nfrequency at the specified end (how) of the Period\n\nParameters\n----------\nfreq : string or DateOffset\n    Target frequency. Default is 'D' if self.freq is week or\n    longer and 'S' otherwise\nhow : str, default 'S' (start)\n    'S', 'E'. Can be aliased as case insensitive\n    'Start', 'Finish', 'Begin', 'End'\n\nReturns\n-------\nTimestamp", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["PR02", "Unknown parameters {freq, how}"], ["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"freq\" description should finish with \".\""], ["PR08", "Parameter \"how\" description should start with a capital letter"], ["PR09", "Parameter \"how\" description should finish with \".\""]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Methods", "shared_code_with": "pandas.Period.strftime"}, "pandas.arrays.PeriodArray": {"type": "type", "docstring": "Pandas ExtensionArray for storing Period data.\n\nUsers should use :func:`period_array` to create new instances.\n\nParameters\n----------\nvalues : Union[PeriodArray, Series[period], ndarray[int], PeriodIndex]\n    The data to store. These should be arrays that can be directly\n    converted to ordinals without inference or copy (PeriodArray,\n    ndarray[int64]), or a box around such an array (Series[period],\n    PeriodIndex).\nfreq : str or DateOffset\n    The `freq` to use for the array. Mostly applicable when `values`\n    is an ndarray of integers, when `freq` is required. When `values`\n    is a PeriodArray (or box around), it's checked that ``values.freq``\n    matches `freq`.\ndtype : PeriodDtype, optional\n    A PeriodDtype instance from which to extract a `freq`. If both\n    `freq` and `dtype` are specified, then the frequencies must match.\ncopy : bool, default False\n    Whether to copy the ordinals before storing.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nSee Also\n--------\nperiod_array : Create a new PeriodArray.\nPeriodIndex : Immutable Index for period data.\n\nNotes\n-----\nThere are two components to a PeriodArray\n\n- ordinals : integer ndarray\n- freq : pd.tseries.offsets.Offset\n\nThe values are physically stored as a 1-D ndarray of integers. These are\ncalled \"ordinals\" and represent some kind of offset from a base.\n\nThe `freq` indicates the span covered by each element of the array.\nAll elements in the PeriodArray have the same `freq`.", "deprecated": false, "file": "pandas/core/arrays/period.py", "file_line": 111, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/period.py#L111", "errors": [], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Methods", "shared_code_with": ""}, "pandas.PeriodDtype": {"type": "type", "docstring": "An ExtensionDtype for Period data.\n\n**This is not an actual numpy dtype**, but a duck type.\n\nParameters\n----------\nfreq : str or DateOffset\n    The frequency of this PeriodDtype\n\nAttributes\n----------\nfreq\n\nMethods\n-------\nNone\n\nExamples\n--------\n>>> pd.PeriodDtype(freq='D')\nperiod[D]\n\n>>> pd.PeriodDtype(freq=pd.offsets.MonthEnd())\nperiod[M]", "deprecated": false, "file": "pandas/core/dtypes/dtypes.py", "file_line": 784, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/dtypes.py#L784", "errors": [["PR09", "Parameter \"freq\" description should finish with \".\""]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Period", "subsection": "Methods", "shared_code_with": ""}, "pandas.Interval": {"type": "type", "docstring": "Immutable object implementing an Interval, a bounded slice-like interval.\n\n.. versionadded:: 0.20.0\n\nParameters\n----------\nleft : orderable scalar\n    Left bound for the interval.\nright : orderable scalar\n    Right bound for the interval.\nclosed : {'right', 'left', 'both', 'neither'}, default 'right'\n    Whether the interval is closed on the left-side, right-side, both or\n    neither. See the Notes for more detailed explanation.\n\nSee Also\n--------\nIntervalIndex : An Index of Interval objects that are all closed on the\n    same side.\ncut : Convert continuous data into discrete bins (Categorical\n    of Interval objects).\nqcut : Convert continuous data into bins (Categorical of Interval objects)\n    based on quantiles.\nPeriod : Represents a period of time.\n\nNotes\n-----\nThe parameters `left` and `right` must be from the same type, you must be\nable to compare them and they must satisfy ``left <= right``.\n\nA closed interval (in mathematics denoted by square brackets) contains\nits endpoints, i.e. the closed interval ``[0, 5]`` is characterized by the\nconditions ``0 <= x <= 5``. This is what ``closed='both'`` stands for.\nAn open interval (in mathematics denoted by parentheses) does not contain\nits endpoints, i.e. the open interval ``(0, 5)`` is characterized by the\nconditions ``0 < x < 5``. This is what ``closed='neither'`` stands for.\nIntervals can also be half-open or half-closed, i.e. ``[0, 5)`` is\ndescribed by ``0 <= x < 5`` (``closed='left'``) and ``(0, 5]`` is\ndescribed by ``0 < x <= 5`` (``closed='right'``).\n\nExamples\n--------\nIt is possible to build Intervals of different types, like numeric ones:\n\n>>> iv = pd.Interval(left=0, right=5)\n>>> iv\nInterval(0, 5, closed='right')\n\nYou can check if an element belongs to it\n\n>>> 2.5 in iv\nTrue\n\nYou can test the bounds (``closed='right'``, so ``0 < x <= 5``):\n\n>>> 0 in iv\nFalse\n>>> 5 in iv\nTrue\n>>> 0.0001 in iv\nTrue\n\nCalculate its length\n\n>>> iv.length\n5\n\nYou can operate with `+` and `*` over an Interval and the operation\nis applied to each of its bounds, so the result depends on the type\nof the bound elements\n\n>>> shifted_iv = iv + 3\n>>> shifted_iv\nInterval(3, 8, closed='right')\n>>> extended_iv = iv * 10.0\n>>> extended_iv\nInterval(0.0, 50.0, closed='right')\n\nTo create a time interval you can use Timestamps as the bounds\n\n>>> year_2017 = pd.Interval(pd.Timestamp('2017-01-01 00:00:00'),\n...                         pd.Timestamp('2018-01-01 00:00:00'),\n...                         closed='left')\n>>> pd.Timestamp('2017-01-01 00:00') in year_2017\nTrue\n>>> year_2017.length\nTimedelta('365 days 00:00:00')\n\nAnd also you can create string intervals\n\n>>> volume_1 = pd.Interval('Ant', 'Dog', closed='both')\n>>> 'Bee' in volume_1\nTrue", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR02", "Unknown parameters {closed, left, right}"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 91, in pandas.Interval\nFailed example:\n    volume_1 = pd.Interval('Ant', 'Dog', closed='both')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Interval[14]>\", line 1, in <module>\n        volume_1 = pd.Interval('Ant', 'Dog', closed='both')\n      File \"pandas/_libs/interval.pyx\", line 303, in pandas._libs.interval.Interval.__init__\n        self._validate_endpoint(left)\n      File \"pandas/_libs/interval.pyx\", line 328, in pandas._libs.interval.Interval._validate_endpoint\n        raise ValueError(msg)\n    ValueError: Only numeric, Timestamp and Timedelta endpoints are allowed when constructing an Interval.\n**********************************************************************\nLine 92, in pandas.Interval\nFailed example:\n    'Bee' in volume_1\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Interval[15]>\", line 1, in <module>\n        'Bee' in volume_1\n    NameError: name 'volume_1' is not defined\n"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 91, in pandas.Interval\nFailed example:\n    volume_1 = pd.Interval('Ant', 'Dog', closed='both')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Interval[14]>\", line 1, in <module>\n        volume_1 = pd.Interval('Ant', 'Dog', closed='both')\n      File \"pandas/_libs/interval.pyx\", line 303, in pandas._libs.interval.Interval.__init__\n        self._validate_endpoint(left)\n      File \"pandas/_libs/interval.pyx\", line 328, in pandas._libs.interval.Interval._validate_endpoint\n        raise ValueError(msg)\n    ValueError: Only numeric, Timestamp and Timedelta endpoints are allowed when constructing an Interval.\n**********************************************************************\nLine 92, in pandas.Interval\nFailed example:\n    'Bee' in volume_1\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Interval[15]>\", line 1, in <module>\n        'Bee' in volume_1\n    NameError: name 'volume_1' is not defined\n", "in_api": true, "section": "Interval data", "subsection": "Methods", "shared_code_with": "pandas.Period.to_timestamp"}, "pandas.Interval.closed": {"type": "getset_descriptor", "docstring": "Whether the interval is closed on the left-side, right-side, both or\nneither", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": "pandas.Interval"}, "pandas.Interval.closed_left": {"type": "getset_descriptor", "docstring": "Check if the interval is closed on the left side.\n\nFor the meaning of `closed` and `open` see :class:`~pandas.Interval`.\n\nReturns\n-------\nbool\n    ``True`` if the Interval is closed on the left-side, else\n    ``False``.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": "pandas.Interval.closed"}, "pandas.Interval.closed_right": {"type": "getset_descriptor", "docstring": "Check if the interval is closed on the right side.\n\nFor the meaning of `closed` and `open` see :class:`~pandas.Interval`.\n\nReturns\n-------\nbool\n    ``True`` if the Interval is closed on the left-side, else\n    ``False``.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": "pandas.Interval.closed_left"}, "pandas.Interval.is_empty": {"type": "getset_descriptor", "docstring": "Indicates if an interval is empty, meaning it contains no points.\n\n.. versionadded:: 0.25.0\n\nReturns\n-------\nbool or ndarray\n    A boolean indicating if a scalar :class:`Interval` is empty, or a\n    boolean ``ndarray`` positionally indicating if an ``Interval`` in\n    an :class:`~arrays.IntervalArray` or :class:`IntervalIndex` is\n    empty.\n\nExamples\n--------\nAn :class:`Interval` that contains points is not empty:\n\n>>> pd.Interval(0, 1, closed='right').is_empty\nFalse\n\nAn ``Interval`` that does not contain any points is empty:\n\n>>> pd.Interval(0, 0, closed='right').is_empty\nTrue\n>>> pd.Interval(0, 0, closed='left').is_empty\nTrue\n>>> pd.Interval(0, 0, closed='neither').is_empty\nTrue\n\nAn ``Interval`` that contains a single point is not empty:\n\n>>> pd.Interval(0, 0, closed='both').is_empty\nFalse\n\nAn :class:`~arrays.IntervalArray` or :class:`IntervalIndex` returns a\nboolean ``ndarray`` positionally indicating if an ``Interval`` is\nempty:\n\n>>> ivs = [pd.Interval(0, 0, closed='neither'),\n...        pd.Interval(1, 2, closed='neither')]\n>>> pd.arrays.IntervalArray(ivs).is_empty\narray([ True, False])\n\nMissing values are not considered empty:\n\n>>> ivs = [pd.Interval(0, 0, closed='neither'), np.nan]\n>>> pd.IntervalIndex(ivs).is_empty\narray([ True, False])", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": "pandas.Interval.closed_right"}, "pandas.Interval.left": {"type": "getset_descriptor", "docstring": "Left bound for the interval", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS03", "Summary does not end with a period"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": "pandas.Interval.is_empty"}, "pandas.Interval.length": {"type": "getset_descriptor", "docstring": "Return the length of the Interval", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS03", "Summary does not end with a period"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": "pandas.Interval.left"}, "pandas.Interval.mid": {"type": "getset_descriptor", "docstring": "Return the midpoint of the Interval", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS03", "Summary does not end with a period"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": "pandas.Interval.length"}, "pandas.Interval.open_left": {"type": "getset_descriptor", "docstring": "Check if the interval is open on the left side.\n\nFor the meaning of `closed` and `open` see :class:`~pandas.Interval`.\n\nReturns\n-------\nbool\n    ``True`` if the Interval is closed on the left-side, else\n    ``False``.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": "pandas.Interval.mid"}, "pandas.Interval.open_right": {"type": "getset_descriptor", "docstring": "Check if the interval is open on the right side.\n\nFor the meaning of `closed` and `open` see :class:`~pandas.Interval`.\n\nReturns\n-------\nbool\n    ``True`` if the Interval is closed on the left-side, else\n    ``False``.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": "pandas.Interval.open_left"}, "pandas.Interval.overlaps": {"type": "method_descriptor", "docstring": "Check whether two Interval objects overlap.\n\nTwo intervals overlap if they share a common point, including closed\nendpoints. Intervals that only have an open endpoint in common do not\noverlap.\n\n.. versionadded:: 0.24.0\n\nParameters\n----------\nother : Interval\n    The interval to check against for an overlap.\n\nReturns\n-------\nbool\n    ``True`` if the two intervals overlap, else ``False``.\n\nSee Also\n--------\nIntervalArray.overlaps : The corresponding method for IntervalArray.\nIntervalIndex.overlaps : The corresponding method for IntervalIndex.\n\nExamples\n--------\n>>> i1 = pd.Interval(0, 2)\n>>> i2 = pd.Interval(1, 3)\n>>> i1.overlaps(i2)\nTrue\n>>> i3 = pd.Interval(4, 5)\n>>> i1.overlaps(i3)\nFalse\n\nIntervals that share closed endpoints overlap:\n\n>>> i4 = pd.Interval(0, 1, closed='both')\n>>> i5 = pd.Interval(1, 2, closed='both')\n>>> i4.overlaps(i5)\nTrue\n\nIntervals that only have an open endpoint in common do not overlap:\n\n>>> i6 = pd.Interval(1, 2, closed='neither')\n>>> i4.overlaps(i6)\nFalse", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR02", "Unknown parameters {other}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": "pandas.Interval.open_right"}, "pandas.Interval.right": {"type": "getset_descriptor", "docstring": "Right bound for the interval", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS03", "Summary does not end with a period"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": "pandas.Interval.overlaps"}, "pandas.arrays.IntervalArray": {"type": "type", "docstring": "Pandas array for interval data that are closed on the same side.\n\n.. versionadded:: 0.24.0\n\nParameters\n----------\ndata : array-like (1-dimensional)\n    Array-like containing Interval objects from which to build the\n    IntervalArray.\nclosed : {'left', 'right', 'both', 'neither'}, default 'right'\n    Whether the intervals are closed on the left-side, right-side, both or\n    neither.\ndtype : dtype or None, default None\n    If None, dtype will be inferred.\n\n    .. versionadded:: 0.23.0\ncopy : bool, default False\n    Copy the input data.\nverify_integrity : bool, default True\n    Verify that the IntervalArray is valid.\n\nAttributes\n----------\nleft\nright\nclosed\nmid\nlength\nis_empty\nis_non_overlapping_monotonic\n\nMethods\n-------\nfrom_arrays\nfrom_tuples\nfrom_breaks\ncontains\noverlaps\nset_closed\nto_tuples\n\nSee Also\n--------\nIndex : The base pandas Index type.\nInterval : A bounded slice-like interval; the elements of an IntervalArray.\ninterval_range : Function to create a fixed frequency IntervalIndex.\ncut : Bin values into discrete Intervals.\nqcut : Bin values into equal-sized Intervals based on rank or sample quantiles.\n\nNotes\n-----\nSee the `user guide\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#intervalindex>`_\nfor more.\n\nExamples\n--------\nA new ``IntervalArray`` can be constructed directly from an array-like of\n``Interval`` objects:\n\n>>> pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)])\nIntervalArray([(0, 1], (1, 5]],\n              closed='right',\n              dtype='interval[int64]')\n\nIt may also be constructed using one of the constructor\nmethods: :meth:`IntervalArray.from_arrays`,\n:meth:`IntervalArray.from_breaks`, and :meth:`IntervalArray.from_tuples`.", "deprecated": false, "file": "pandas/core/arrays/interval.py", "file_line": 143, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/interval.py#L143", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": ""}, "pandas.IntervalDtype": {"type": "type", "docstring": "An ExtensionDtype for Interval data.\n\n**This is not an actual numpy dtype**, but a duck type.\n\nParameters\n----------\nsubtype : str, np.dtype\n    The dtype of the Interval bounds.\n\nAttributes\n----------\nsubtype\n\nMethods\n-------\nNone\n\nExamples\n--------\n>>> pd.IntervalDtype(subtype='int64')\ninterval[int64]", "deprecated": false, "file": "pandas/core/dtypes/dtypes.py", "file_line": 946, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/dtypes.py#L946", "errors": [], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": ""}, "pandas.arrays.IntervalArray.left": {"type": "property", "docstring": "Return the left endpoints of each Interval in the IntervalArray as\nan Index", "deprecated": false, "file": "pandas/core/arrays/interval.py", "file_line": 853, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/interval.py#L853", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": ""}, "pandas.arrays.IntervalArray.right": {"type": "property", "docstring": "Return the right endpoints of each Interval in the IntervalArray as\nan Index", "deprecated": false, "file": "pandas/core/arrays/interval.py", "file_line": 861, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/interval.py#L861", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": ""}, "pandas.arrays.IntervalArray.closed": {"type": "property", "docstring": "Whether the intervals are closed on the left-side, right-side, both or\nneither", "deprecated": false, "file": "pandas/core/arrays/interval.py", "file_line": 869, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/interval.py#L869", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": ""}, "pandas.arrays.IntervalArray.mid": {"type": "property", "docstring": "Return the midpoint of each Interval in the IntervalArray as an Index", "deprecated": false, "file": "pandas/core/arrays/interval.py", "file_line": 932, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/interval.py#L932", "errors": [["SS03", "Summary does not end with a period"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": ""}, "pandas.arrays.IntervalArray.length": {"type": "property", "docstring": "Return an Index with entries denoting the length of each Interval in\nthe IntervalArray", "deprecated": false, "file": "pandas/core/arrays/interval.py", "file_line": 916, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/interval.py#L916", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": ""}, "pandas.arrays.IntervalArray.is_empty": {"type": "getset_descriptor", "docstring": "Indicates if an interval is empty, meaning it contains no points.\n\n.. versionadded:: 0.25.0\n\nReturns\n-------\nbool or ndarray\n    A boolean indicating if a scalar :class:`Interval` is empty, or a\n    boolean ``ndarray`` positionally indicating if an ``Interval`` in\n    an :class:`~arrays.IntervalArray` or :class:`IntervalIndex` is\n    empty.\n\nExamples\n--------\nAn :class:`Interval` that contains points is not empty:\n\n>>> pd.Interval(0, 1, closed='right').is_empty\nFalse\n\nAn ``Interval`` that does not contain any points is empty:\n\n>>> pd.Interval(0, 0, closed='right').is_empty\nTrue\n>>> pd.Interval(0, 0, closed='left').is_empty\nTrue\n>>> pd.Interval(0, 0, closed='neither').is_empty\nTrue\n\nAn ``Interval`` that contains a single point is not empty:\n\n>>> pd.Interval(0, 0, closed='both').is_empty\nFalse\n\nAn :class:`~arrays.IntervalArray` or :class:`IntervalIndex` returns a\nboolean ``ndarray`` positionally indicating if an ``Interval`` is\nempty:\n\n>>> ivs = [pd.Interval(0, 0, closed='neither'),\n...        pd.Interval(1, 2, closed='neither')]\n>>> pd.arrays.IntervalArray(ivs).is_empty\narray([ True, False])\n\nMissing values are not considered empty:\n\n>>> ivs = [pd.Interval(0, 0, closed='neither'), np.nan]\n>>> pd.IntervalIndex(ivs).is_empty\narray([ True, False])", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": "pandas.Interval.right"}, "pandas.arrays.IntervalArray.is_non_overlapping_monotonic": {"type": "property", "docstring": "Return True if the IntervalArray is non-overlapping (no Intervals share\npoints) and is either monotonic increasing or monotonic decreasing,\nelse False", "deprecated": false, "file": "pandas/core/arrays/interval.py", "file_line": 952, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/interval.py#L952", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": ""}, "pandas.arrays.IntervalArray.from_arrays": {"type": "method", "docstring": "Construct from two arrays defining the left and right bounds.\n\nParameters\n----------\nleft : array-like (1-dimensional)\n    Left bounds for each interval.\nright : array-like (1-dimensional)\n    Right bounds for each interval.\nclosed : {'left', 'right', 'both', 'neither'}, default 'right'\n    Whether the intervals are closed on the left-side, right-side, both\n    or neither.\ncopy : boolean, default False\n    Copy the data.\ndtype : dtype, optional\n    If None, dtype will be inferred.\n\n    .. versionadded:: 0.23.0\n\nReturns\n-------\nIntervalArray\n\nRaises\n------\nValueError\n    When a value is missing in only one of `left` or `right`.\n    When a value in `left` is greater than the corresponding value\n    in `right`.\n\nSee Also\n--------\ninterval_range : Function to create a fixed frequency IntervalIndex.\nIntervalArray.from_breaks : Construct an IntervalArray from an array of\n    splits.\nIntervalArray.from_tuples : Construct an IntervalArray from an\n    array-like of tuples.\n\nNotes\n-----\nEach element of `left` must be less than or equal to the `right`\nelement at the same position. If an element is missing, it must be\nmissing in both `left` and `right`. A TypeError is raised when\nusing an unsupported type for `left` or `right`. At the moment,\n'category', 'object', and 'string' subtypes are not supported.\n\nExamples\n--------\n>>> IntervalArray.from_arrays([0, 1, 2], [1, 2, 3])\nIntervalArray([(0, 1], (1, 2], (2, 3]],\n             closed='right',\n             dtype='interval[int64]')", "deprecated": false, "file": "pandas/core/arrays/interval.py", "file_line": 351, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/interval.py#L351", "errors": [["PR06", "Parameter \"copy\" type should use \"bool\" instead of \"boolean\""], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 49, in pandas.arrays.IntervalArray.from_arrays\nFailed example:\n    IntervalArray.from_arrays([0, 1, 2], [1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.arrays.IntervalArray.from_arrays[0]>\", line 1, in <module>\n        IntervalArray.from_arrays([0, 1, 2], [1, 2, 3])\n    NameError: name 'IntervalArray' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'IntervalArray'"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "**********************************************************************\nLine 49, in pandas.arrays.IntervalArray.from_arrays\nFailed example:\n    IntervalArray.from_arrays([0, 1, 2], [1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.arrays.IntervalArray.from_arrays[0]>\", line 1, in <module>\n        IntervalArray.from_arrays([0, 1, 2], [1, 2, 3])\n    NameError: name 'IntervalArray' is not defined\n", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": ""}, "pandas.arrays.IntervalArray.from_tuples": {"type": "method", "docstring": "Construct an IntervalArray from an array-like of tuples\n\nParameters\n----------\ndata : array-like (1-dimensional)\n    Array of tuples\nclosed : {'left', 'right', 'both', 'neither'}, default 'right'\n    Whether the intervals are closed on the left-side, right-side, both\n    or neither.\ncopy : boolean, default False\n    by-default copy the data, this is compat only and ignored\ndtype : dtype or None, default None\n    If None, dtype will be inferred\n\n    ..versionadded:: 0.23.0\n\nReturns\n-------\nIntervalArray\n\nSee Also\n--------\ninterval_range : Function to create a fixed frequency IntervalIndex.\nIntervalArray.from_arrays : Construct an IntervalArray from a left and\n                            right array.\nIntervalArray.from_breaks : Construct an IntervalArray from an array of\n                            splits.\n\nExamples\n--------\n>>> pd.arrays.IntervalArray.from_tuples([(0, 1), (1, 2)])\nIntervalArray([(0, 1], (1, 2]],\n            closed='right', dtype='interval[int64]')", "deprecated": false, "file": "pandas/core/arrays/interval.py", "file_line": 399, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/interval.py#L399", "errors": [["SS03", "Summary does not end with a period"], ["PR09", "Parameter \"data\" description should finish with \".\""], ["PR06", "Parameter \"copy\" type should use \"bool\" instead of \"boolean\""], ["PR08", "Parameter \"copy\" description should start with a capital letter"], ["PR09", "Parameter \"copy\" description should finish with \".\""], ["PR09", "Parameter \"dtype\" description should finish with \".\""], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": ""}, "pandas.arrays.IntervalArray.from_breaks": {"type": "method", "docstring": "Construct an IntervalArray from an array of splits.\n\nParameters\n----------\nbreaks : array-like (1-dimensional)\n    Left and right bounds for each interval.\nclosed : {'left', 'right', 'both', 'neither'}, default 'right'\n    Whether the intervals are closed on the left-side, right-side, both\n    or neither.\ncopy : boolean, default False\n    copy the data\ndtype : dtype or None, default None\n    If None, dtype will be inferred\n\n    .. versionadded:: 0.23.0\n\nReturns\n-------\nIntervalArray\n\nSee Also\n--------\ninterval_range : Function to create a fixed frequency IntervalIndex.\nIntervalArray.from_arrays : Construct from a left and right array.\nIntervalArray.from_tuples : Construct from a sequence of tuples.\n\nExamples\n--------\n>>> pd.arrays.IntervalArray.from_breaks([0, 1, 2, 3])\nIntervalArray([(0, 1], (1, 2], (2, 3]],\n              closed='right',\n              dtype='interval[int64]')", "deprecated": false, "file": "pandas/core/arrays/interval.py", "file_line": 288, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/interval.py#L288", "errors": [["PR06", "Parameter \"copy\" type should use \"bool\" instead of \"boolean\""], ["PR08", "Parameter \"copy\" description should start with a capital letter"], ["PR09", "Parameter \"copy\" description should finish with \".\""], ["PR09", "Parameter \"dtype\" description should finish with \".\""], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": ""}, "pandas.arrays.IntervalArray.contains": {"type": "function", "docstring": "Check elementwise if the Intervals contain the value.\n\nReturn a boolean mask whether the value is contained in the Intervals\nof the IntervalArray.\n\n.. versionadded:: 0.25.0\n\nParameters\n----------\nother : scalar\n    The value to check whether it is contained in the Intervals.\n\nReturns\n-------\nboolean array\n\nSee Also\n--------\nInterval.contains : Check whether Interval object contains value.\nIntervalArray.overlaps : Check if an Interval overlaps the values in the\n    IntervalArray.\n\nExamples\n--------\n>>> intervals = pd.arrays.IntervalArray.from_tuples([(0, 1), (1, 3), (2, 4)])\n>>> intervals\nIntervalArray([(0, 1], (1, 3], (2, 4]],\n      closed='right',\n      dtype='interval[int64]')\n>>> intervals.contains(0.5)\narray([ True, False, False])", "deprecated": false, "file": "pandas/core/arrays/interval.py", "file_line": 1067, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/interval.py#L1067", "errors": [["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": ""}, "pandas.arrays.IntervalArray.overlaps": {"type": "function", "docstring": "Check elementwise if an Interval overlaps the values in the IntervalArray.\n\nTwo intervals overlap if they share a common point, including closed\nendpoints. Intervals that only have an open endpoint in common do not\noverlap.\n\n.. versionadded:: 0.24.0\n\nParameters\n----------\nother : Interval\n    Interval to check against for an overlap.\n\nReturns\n-------\nndarray\n    Boolean array positionally indicating where an overlap occurs.\n\nSee Also\n--------\nInterval.overlaps : Check whether two Interval objects overlap.\n\nExamples\n--------\n>>> intervals = pd.arrays.IntervalArray.from_tuples([(0, 1), (1, 3), (2, 4)])\n>>> intervals\nIntervalArray([(0, 1], (1, 3], (2, 4]],\n      closed='right',\n      dtype='interval[int64]')\n>>> intervals.overlaps(pd.Interval(0.5, 1.5))\narray([ True,  True, False])\n\nIntervals that share closed endpoints overlap:\n\n>>> intervals.overlaps(pd.Interval(1, 3, closed='left'))\narray([ True,  True, True])\n\nIntervals that only have an open endpoint in common do not overlap:\n\n>>> intervals.overlaps(pd.Interval(1, 2, closed='right'))\narray([False,  True, False])", "deprecated": false, "file": "pandas/core/arrays/interval.py", "file_line": 1122, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/interval.py#L1122", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": ""}, "pandas.arrays.IntervalArray.set_closed": {"type": "function", "docstring": "Return an IntervalArray identical to the current one, but closed on the\nspecified side\n\n.. versionadded:: 0.24.0\n\nParameters\n----------\nclosed : {'left', 'right', 'both', 'neither'}\n    Whether the intervals are closed on the left-side, right-side, both\n    or neither.\n\nReturns\n-------\nnew_index : IntervalArray\n\nExamples\n--------\n>>> index = pd.interval_range(0, 3)\n>>> index\nIntervalIndex([(0, 1], (1, 2], (2, 3]],\n      closed='right',\n      dtype='interval[int64]')\n>>> index.set_closed('both')\nIntervalIndex([[0, 1], [1, 2], [2, 3]],\n      closed='both',\n      dtype='interval[int64]')", "deprecated": false, "file": "pandas/core/arrays/interval.py", "file_line": 908, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/interval.py#L908", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": ""}, "pandas.arrays.IntervalArray.to_tuples": {"type": "function", "docstring": "Return an ndarray of tuples of the form (left, right)\n\nParameters\n----------\nna_tuple : boolean, default True\n    Returns NA as a tuple if True, ``(nan, nan)``, or just as the NA\n    value itself if False, ``nan``.\n\n    .. versionadded:: 0.23.0\n\nReturns\n-------\ntuples: ndarray", "deprecated": false, "file": "pandas/core/arrays/interval.py", "file_line": 1014, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/interval.py#L1014", "errors": [["SS03", "Summary does not end with a period"], ["PR06", "Parameter \"na_tuple\" type should use \"bool\" instead of \"boolean\""], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Interval data", "subsection": "Properties", "shared_code_with": ""}, "pandas.arrays.IntegerArray": {"type": "type", "docstring": "Array of integer (optional missing) values.\n\n.. versionadded:: 0.24.0\n\n.. warning::\n\n   IntegerArray is currently experimental, and its API or internal\n   implementation may change without warning.\n\nWe represent an IntegerArray with 2 numpy arrays:\n\n- data: contains a numpy integer array of the appropriate dtype\n- mask: a boolean array holding a mask on the data, True is missing\n\nTo construct an IntegerArray from generic array-like input, use\n:func:`pandas.array` with one of the integer dtypes (see examples).\n\nSee :ref:`integer_na` for more.\n\nParameters\n----------\nvalues : numpy.ndarray\n    A 1-d integer-dtype array.\nmask : numpy.ndarray\n    A 1-d boolean-dtype array indicating missing values.\ncopy : bool, default False\n    Whether to copy the `values` and `mask`.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nReturns\n-------\nIntegerArray\n\nExamples\n--------\nCreate an IntegerArray with :func:`pandas.array`.\n\n>>> int_array = pd.array([1, None, 3], dtype=pd.Int32Dtype())\n>>> int_array\n<IntegerArray>\n[1, NaN, 3]\nLength: 3, dtype: Int32\n\nString aliases for the dtypes are also available. They are capitalized.\n\n>>> pd.array([1, None, 3], dtype='Int32')\n<IntegerArray>\n[1, NaN, 3]\nLength: 3, dtype: Int32\n\n>>> pd.array([1, None, 3], dtype='UInt16')\n<IntegerArray>\n[1, NaN, 3]\nLength: 3, dtype: UInt16", "deprecated": false, "file": "pandas/core/arrays/integer.py", "file_line": 235, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/integer.py#L235", "errors": [], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Nullable integer", "subsection": "Properties", "shared_code_with": ""}, "pandas.Int8Dtype": {"type": "type", "docstring": "An ExtensionDtype for int8 integer data.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone", "deprecated": false, "file": "pandas/core/arrays/integer.py", "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/integer.py#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Nullable integer", "subsection": "Properties", "shared_code_with": ""}, "pandas.Int16Dtype": {"type": "type", "docstring": "An ExtensionDtype for int16 integer data.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone", "deprecated": false, "file": "pandas/core/arrays/integer.py", "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/integer.py#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Nullable integer", "subsection": "Properties", "shared_code_with": "pandas.Int8Dtype"}, "pandas.Int32Dtype": {"type": "type", "docstring": "An ExtensionDtype for int32 integer data.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone", "deprecated": false, "file": "pandas/core/arrays/integer.py", "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/integer.py#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Nullable integer", "subsection": "Properties", "shared_code_with": "pandas.Int16Dtype"}, "pandas.Int64Dtype": {"type": "type", "docstring": "An ExtensionDtype for int64 integer data.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone", "deprecated": false, "file": "pandas/core/arrays/integer.py", "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/integer.py#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Nullable integer", "subsection": "Properties", "shared_code_with": "pandas.Int32Dtype"}, "pandas.UInt8Dtype": {"type": "type", "docstring": "An ExtensionDtype for uint8 integer data.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone", "deprecated": false, "file": "pandas/core/arrays/integer.py", "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/integer.py#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Nullable integer", "subsection": "Properties", "shared_code_with": "pandas.Int64Dtype"}, "pandas.UInt16Dtype": {"type": "type", "docstring": "An ExtensionDtype for uint16 integer data.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone", "deprecated": false, "file": "pandas/core/arrays/integer.py", "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/integer.py#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Nullable integer", "subsection": "Properties", "shared_code_with": "pandas.UInt8Dtype"}, "pandas.UInt32Dtype": {"type": "type", "docstring": "An ExtensionDtype for uint32 integer data.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone", "deprecated": false, "file": "pandas/core/arrays/integer.py", "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/integer.py#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Nullable integer", "subsection": "Properties", "shared_code_with": "pandas.UInt16Dtype"}, "pandas.UInt64Dtype": {"type": "type", "docstring": "An ExtensionDtype for uint64 integer data.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone", "deprecated": false, "file": "pandas/core/arrays/integer.py", "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/integer.py#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Nullable integer", "subsection": "Properties", "shared_code_with": "pandas.UInt32Dtype"}, "pandas.CategoricalDtype": {"type": "type", "docstring": "Type for categorical data with the categories and orderedness.\n\n.. versionchanged:: 0.21.0\n\nParameters\n----------\ncategories : sequence, optional\n    Must be unique, and must not contain any nulls.\nordered : bool, default False\n\nAttributes\n----------\ncategories\nordered\n\nMethods\n-------\nNone\n\nSee Also\n--------\nCategorical\n\nNotes\n-----\nThis class is useful for specifying the type of a ``Categorical``\nindependent of the values. See :ref:`categorical.categoricaldtype`\nfor more.\n\nExamples\n--------\n>>> t = pd.CategoricalDtype(categories=['b', 'a'], ordered=True)\n>>> pd.Series(['a', 'b', 'a', 'c'], dtype=t)\n0      a\n1      b\n2      a\n3    NaN\ndtype: category\nCategories (2, object): [b < a]", "deprecated": false, "file": "pandas/core/dtypes/dtypes.py", "file_line": 172, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/dtypes.py#L172", "errors": [["PR07", "Parameter \"ordered\" has no description"], ["SA04", "Missing description for See Also \"Categorical\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Categorical data", "subsection": "Properties", "shared_code_with": ""}, "pandas.CategoricalDtype.categories": {"type": "property", "docstring": "An ``Index`` containing the unique categories allowed.", "deprecated": false, "file": "pandas/core/dtypes/dtypes.py", "file_line": 584, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/dtypes.py#L584", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Categorical data", "subsection": "Properties", "shared_code_with": ""}, "pandas.CategoricalDtype.ordered": {"type": "property", "docstring": "Whether the categories have an ordered relationship.", "deprecated": false, "file": "pandas/core/dtypes/dtypes.py", "file_line": 591, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/dtypes.py#L591", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Categorical data", "subsection": "Properties", "shared_code_with": ""}, "pandas.Categorical": {"type": "type", "docstring": "Represent a categorical variable in classic R / S-plus fashion.\n\n`Categoricals` can only take on only a limited, and usually fixed, number\nof possible values (`categories`). In contrast to statistical categorical\nvariables, a `Categorical` might have an order, but numerical operations\n(additions, divisions, ...) are not possible.\n\nAll values of the `Categorical` are either in `categories` or `np.nan`.\nAssigning values outside of `categories` will raise a `ValueError`. Order\nis defined by the order of the `categories`, not lexical order of the\nvalues.\n\nParameters\n----------\nvalues : list-like\n    The values of the categorical. If categories are given, values not in\n    categories will be replaced with NaN.\ncategories : Index-like (unique), optional\n    The unique categories for this categorical. If not given, the\n    categories are assumed to be the unique values of `values` (sorted, if\n    possible, otherwise in the order in which they appear).\nordered : bool, default False\n    Whether or not this categorical is treated as a ordered categorical.\n    If True, the resulting categorical will be ordered.\n    An ordered categorical respects, when sorted, the order of its\n    `categories` attribute (which in turn is the `categories` argument, if\n    provided).\ndtype : CategoricalDtype\n    An instance of ``CategoricalDtype`` to use for this categorical\n\n    .. versionadded:: 0.21.0\n\nAttributes\n----------\ncategories : Index\n    The categories of this categorical\ncodes : ndarray\n    The codes (integer positions, which point to the categories) of this\n    categorical, read only.\nordered : bool\n    Whether or not this Categorical is ordered.\ndtype : CategoricalDtype\n    The instance of ``CategoricalDtype`` storing the ``categories``\n    and ``ordered``.\n\n    .. versionadded:: 0.21.0\n\nMethods\n-------\nfrom_codes\n__array__\n\nRaises\n------\nValueError\n    If the categories do not validate.\nTypeError\n    If an explicit ``ordered=True`` is given but no `categories` and the\n    `values` are not sortable.\n\nSee Also\n--------\napi.types.CategoricalDtype : Type for categorical data.\nCategoricalIndex : An Index with an underlying ``Categorical``.\n\nNotes\n-----\nSee the `user guide\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html>`_\nfor more.\n\nExamples\n--------\n>>> pd.Categorical([1, 2, 3, 1, 2, 3])\n[1, 2, 3, 1, 2, 3]\nCategories (3, int64): [1, 2, 3]\n\n>>> pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'])\n[a, b, c, a, b, c]\nCategories (3, object): [a, b, c]\n\nOrdered `Categoricals` can be sorted according to the custom order\nof the categories and can have a min and max value.\n\n>>> c = pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'], ordered=True,\n...                    categories=['c', 'b', 'a'])\n>>> c\n[a, b, c, a, b, c]\nCategories (3, object): [c < b < a]\n>>> c.min()\n'c'", "deprecated": false, "file": "pandas/core/arrays/categorical.py", "file_line": 234, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/categorical.py#L234", "errors": [["PR01", "Parameters {fastpath} not documented"], ["PR09", "Parameter \"dtype\" description should finish with \".\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Categorical data", "subsection": "Properties", "shared_code_with": ""}, "pandas.Categorical.from_codes": {"type": "method", "docstring": "Make a Categorical type from codes and categories or dtype.\n\nThis constructor is useful if you already have codes and\ncategories/dtype and so do not need the (computation intensive)\nfactorization step, which is usually done on the constructor.\n\nIf your data does not follow this convention, please use the normal\nconstructor.\n\nParameters\n----------\ncodes : array-like, integers\n    An integer array, where each integer points to a category in\n    categories or dtype.categories, or else is -1 for NaN.\ncategories : index-like, optional\n    The categories for the categorical. Items need to be unique.\n    If the categories are not given here, then they must be provided\n    in `dtype`.\nordered : bool, optional\n    Whether or not this categorical is treated as an ordered\n    categorical. If not given here or in `dtype`, the resulting\n    categorical will be unordered.\ndtype : CategoricalDtype or the string \"category\", optional\n    If :class:`CategoricalDtype`, cannot be used together with\n    `categories` or `ordered`.\n\n    .. versionadded:: 0.24.0\n\n       When `dtype` is provided, neither `categories` nor `ordered`\n       should be provided.\n\nReturns\n-------\nCategorical\n\nExamples\n--------\n>>> dtype = pd.CategoricalDtype(['a', 'b'], ordered=True)\n>>> pd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)\n[a, b, a, b]\nCategories (2, object): [a < b]", "deprecated": false, "file": "pandas/core/arrays/categorical.py", "file_line": 620, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/categorical.py#L620", "errors": [["PR06", "Parameter \"codes\" type should use \"int\" instead of \"integer\""], ["PR06", "Parameter \"dtype\" type should use \"str\" instead of \"string\""], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Categorical data", "subsection": "Properties", "shared_code_with": ""}, "pandas.Categorical.dtype": {"type": "property", "docstring": "The :class:`~pandas.api.types.CategoricalDtype` for this instance", "deprecated": false, "file": "pandas/core/arrays/categorical.py", "file_line": 471, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/categorical.py#L471", "errors": [["SS03", "Summary does not end with a period"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Categorical data", "subsection": "Properties", "shared_code_with": ""}, "pandas.Categorical.categories": {"type": "property", "docstring": "The categories of this categorical.\n\nSetting assigns new values to each category (effectively a rename of\neach individual category).\n\nThe assigned value has to be a list-like object. All items must be\nunique and the number of items in the new categories must be the same\nas the number of items in the old categories.\n\nAssigning to `categories` is a inplace operation!\n\nRaises\n------\nValueError\n    If the new categories do not validate as categories or if the\n    number of new categories is unequal the number of old categories\n\nSee Also\n--------\nrename_categories\nreorder_categories\nadd_categories\nremove_categories\nremove_unused_categories\nset_categories", "deprecated": false, "file": "pandas/core/arrays/categorical.py", "file_line": 421, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/categorical.py#L421", "errors": [["SA04", "Missing description for See Also \"rename_categories\" reference"], ["SA04", "Missing description for See Also \"reorder_categories\" reference"], ["SA04", "Missing description for See Also \"add_categories\" reference"], ["SA04", "Missing description for See Also \"remove_categories\" reference"], ["SA04", "Missing description for See Also \"remove_unused_categories\" reference"], ["SA04", "Missing description for See Also \"set_categories\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Categorical data", "subsection": "Properties", "shared_code_with": ""}, "pandas.Categorical.ordered": {"type": "property", "docstring": "Whether the categories have an ordered relationship.", "deprecated": false, "file": "pandas/core/arrays/categorical.py", "file_line": 464, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/categorical.py#L464", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Categorical data", "subsection": "Properties", "shared_code_with": ""}, "pandas.Categorical.codes": {"type": "property", "docstring": "The category codes of this categorical.\n\nLevel codes are an array if integer which are the positions of the real\nvalues in the categories array.\n\nThere is not setter, use the other categorical methods and the normal item\nsetter to change values in the categorical.", "deprecated": false, "file": "pandas/core/arrays/categorical.py", "file_line": 699, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/categorical.py#L699", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Categorical data", "subsection": "Properties", "shared_code_with": ""}, "pandas.Categorical.__array__": {"type": "function", "docstring": "The numpy array interface.\n\nReturns\n-------\nnumpy.array\n    A numpy array of either the specified dtype or,\n    if dtype==None (default), the same dtype as\n    categorical.categories.dtype.", "deprecated": false, "file": "pandas/core/arrays/categorical.py", "file_line": 1312, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/categorical.py#L1312", "errors": [["PR01", "Parameters {dtype} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Categorical data", "subsection": "Properties", "shared_code_with": ""}, "pandas.SparseArray": {"type": "type", "docstring": "An ExtensionArray for storing sparse data.\n\n.. versionchanged:: 0.24.0\n\n   Implements the ExtensionArray interface.\n\nParameters\n----------\ndata : array-like\n    A dense array of values to store in the SparseArray. This may contain\n    `fill_value`.\nsparse_index : SparseIndex, optional\nindex : Index\nfill_value : scalar, optional\n    Elements in `data` that are `fill_value` are not stored in the\n    SparseArray. For memory savings, this should be the most common value\n    in `data`. By default, `fill_value` depends on the dtype of `data`:\n\n    =========== ==========\n    data.dtype  na_value\n    =========== ==========\n    float       ``np.nan``\n    int         ``0``\n    bool        False\n    datetime64  ``pd.NaT``\n    timedelta64 ``pd.NaT``\n    =========== ==========\n\n    The fill value is potentially specified in three ways. In order of\n    precedence, these are\n\n    1. The `fill_value` argument\n    2. ``dtype.fill_value`` if `fill_value` is None and `dtype` is\n       a ``SparseDtype``\n    3. ``data.dtype.fill_value`` if `fill_value` is None and `dtype`\n       is not a ``SparseDtype`` and `data` is a ``SparseArray``.\n\nkind : {'integer', 'block'}, default 'integer'\n    The type of storage for sparse locations.\n\n    * 'block': Stores a `block` and `block_length` for each\n      contiguous *span* of sparse values. This is best when\n      sparse data tends to be clumped together, with large\n      regions of ``fill-value`` values between sparse values.\n    * 'integer': uses an integer to store the location of\n      each sparse value.\n\ndtype : np.dtype or SparseDtype, optional\n    The dtype to use for the SparseArray. For numpy dtypes, this\n    determines the dtype of ``self.sp_values``. For SparseDtype,\n    this determines ``self.sp_values`` and ``self.fill_value``.\ncopy : bool, default False\n    Whether to explicitly copy the incoming `data` array.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone", "deprecated": false, "file": "pandas/core/arrays/sparse.py", "file_line": 528, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/sparse.py#L528", "errors": [["PR07", "Parameter \"sparse_index\" has no description"], ["PR07", "Parameter \"index\" has no description"], ["PR06", "Parameter \"kind\" type should use \"int\" instead of \"integer\""]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Sparse data", "subsection": "Properties", "shared_code_with": ""}, "pandas.SparseDtype": {"type": "type", "docstring": "Dtype for data stored in :class:`SparseArray`.\n\nThis dtype implements the pandas ExtensionDtype interface.\n\n.. versionadded:: 0.24.0\n\nParameters\n----------\ndtype : str, ExtensionDtype, numpy.dtype, type, default numpy.float64\n    The dtype of the underlying array storing the non-fill value values.\nfill_value : scalar, optional\n    The scalar value not stored in the SparseArray. By default, this\n    depends on `dtype`.\n\n    =========== ==========\n    dtype       na_value\n    =========== ==========\n    float       ``np.nan``\n    int         ``0``\n    bool        ``False``\n    datetime64  ``pd.NaT``\n    timedelta64 ``pd.NaT``\n    =========== ==========\n\n    The default value may be overridden by specifying a `fill_value`.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone", "deprecated": false, "file": "pandas/core/arrays/sparse.py", "file_line": 66, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/sparse.py#L66", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Sparse data", "subsection": "Properties", "shared_code_with": ""}, "pandas.DatetimeTZDtype.unit": {"type": "property", "docstring": "The precision of the datetime data.", "deprecated": false, "file": "pandas/core/dtypes/dtypes.py", "file_line": 694, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/dtypes.py#L694", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Sparse data", "subsection": "Properties", "shared_code_with": ""}, "pandas.DatetimeTZDtype.tz": {"type": "property", "docstring": "The timezone.", "deprecated": false, "file": "pandas/core/dtypes/dtypes.py", "file_line": 701, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/dtypes.py#L701", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Sparse data", "subsection": "Properties", "shared_code_with": ""}, "pandas.PeriodDtype.freq": {"type": "property", "docstring": "The frequency object of this PeriodDtype.", "deprecated": false, "file": "pandas/core/dtypes/dtypes.py", "file_line": 848, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/dtypes.py#L848", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Sparse data", "subsection": "Properties", "shared_code_with": ""}, "pandas.IntervalDtype.subtype": {"type": "property", "docstring": "The dtype of the Interval bounds.", "deprecated": false, "file": "pandas/core/dtypes/dtypes.py", "file_line": 1024, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/dtypes.py#L1024", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Sparse data", "subsection": "Properties", "shared_code_with": ""}, "pandas.read_pickle": {"type": "function", "docstring": "Load pickled pandas object (or any object) from file.\n\n.. warning::\n\n   Loading pickled data received from untrusted sources can be\n   unsafe. See `here <https://docs.python.org/3/library/pickle.html>`__.\n\nParameters\n----------\npath : str\n    File path where the pickled object will be loaded.\ncompression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}, default 'infer'\n    For on-the-fly decompression of on-disk data. If 'infer', then use\n    gzip, bz2, xz or zip if path ends in '.gz', '.bz2', '.xz',\n    or '.zip' respectively, and no decompression otherwise.\n    Set to None for no decompression.\n\n    .. versionadded:: 0.20.0\n\nReturns\n-------\nunpickled : same type as object stored in file\n\nSee Also\n--------\nDataFrame.to_pickle : Pickle (serialize) DataFrame object to file.\nSeries.to_pickle : Pickle (serialize) Series object to file.\nread_hdf : Read HDF5 file into a DataFrame.\nread_sql : Read SQL query or database table into a DataFrame.\nread_parquet : Load a parquet object, returning a DataFrame.\n\nNotes\n-----\nread_pickle is only guaranteed to be backwards compatible to pandas 0.20.3.\n\nExamples\n--------\n>>> original_df = pd.DataFrame({\"foo\": range(5), \"bar\": range(5, 10)})\n>>> original_df\n   foo  bar\n0    0    5\n1    1    6\n2    2    7\n3    3    8\n4    4    9\n>>> pd.to_pickle(original_df, \"./dummy.pkl\")\n\n>>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")\n>>> unpickled_df\n   foo  bar\n0    0    5\n1    1    6\n2    2    7\n3    3    8\n4    4    9\n\n>>> import os\n>>> os.remove(\"./dummy.pkl\")", "deprecated": false, "file": "pandas/io/pickle.py", "file_line": 83, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/pickle.py#L83", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Pickling", "shared_code_with": ""}, "pandas.read_table": {"type": "function", "docstring": "Read general delimited file into DataFrame.\n\nAlso supports optionally iterating or breaking of the file\ninto chunks.\n\nAdditional help can be found in the online docs for\n`IO Tools <http://pandas.pydata.org/pandas-docs/stable/user_guide/io.html>`_.\n\nParameters\n----------\nfilepath_or_buffer : str, path object or file-like object\n    Any valid string path is acceptable. The string could be a URL. Valid\n    URL schemes include http, ftp, s3, and file. For file URLs, a host is\n    expected. A local file could be: file://localhost/path/to/table.csv.\n\n    If you want to pass in a path object, pandas accepts any ``os.PathLike``.\n\n    By file-like object, we refer to objects with a ``read()`` method, such as\n    a file handler (e.g. via builtin ``open`` function) or ``StringIO``.\nsep : str, default '\\\\t' (tab-stop)\n    Delimiter to use. If sep is None, the C engine cannot automatically detect\n    the separator, but the Python parsing engine can, meaning the latter will\n    be used and automatically detect the separator by Python's builtin sniffer\n    tool, ``csv.Sniffer``. In addition, separators longer than 1 character and\n    different from ``'\\s+'`` will be interpreted as regular expressions and\n    will also force the use of the Python parsing engine. Note that regex\n    delimiters are prone to ignoring quoted data. Regex example: ``'\\r\\t'``.\ndelimiter : str, default ``None``\n    Alias for sep.\nheader : int, list of int, default 'infer'\n    Row number(s) to use as the column names, and the start of the\n    data.  Default behavior is to infer the column names: if no names\n    are passed the behavior is identical to ``header=0`` and column\n    names are inferred from the first line of the file, if column\n    names are passed explicitly then the behavior is identical to\n    ``header=None``. Explicitly pass ``header=0`` to be able to\n    replace existing names. The header can be a list of integers that\n    specify row locations for a multi-index on the columns\n    e.g. [0,1,3]. Intervening rows that are not specified will be\n    skipped (e.g. 2 in this example is skipped). Note that this\n    parameter ignores commented lines and empty lines if\n    ``skip_blank_lines=True``, so ``header=0`` denotes the first line of\n    data rather than the first line of the file.\nnames : array-like, optional\n    List of column names to use. If file contains no header row, then you\n    should explicitly pass ``header=None``. Duplicates in this list are not\n    allowed.\nindex_col : int, str, sequence of int / str, or False, default ``None``\n  Column(s) to use as the row labels of the ``DataFrame``, either given as\n  string name or column index. If a sequence of int / str is given, a\n  MultiIndex is used.\n\n  Note: ``index_col=False`` can be used to force pandas to *not* use the first\n  column as the index, e.g. when you have a malformed file with delimiters at\n  the end of each line.\nusecols : list-like or callable, optional\n    Return a subset of the columns. If list-like, all elements must either\n    be positional (i.e. integer indices into the document columns) or strings\n    that correspond to column names provided either by the user in `names` or\n    inferred from the document header row(s). For example, a valid list-like\n    `usecols` parameter would be ``[0, 1, 2]`` or ``['foo', 'bar', 'baz']``.\n    Element order is ignored, so ``usecols=[0, 1]`` is the same as ``[1, 0]``.\n    To instantiate a DataFrame from ``data`` with element order preserved use\n    ``pd.read_csv(data, usecols=['foo', 'bar'])[['foo', 'bar']]`` for columns\n    in ``['foo', 'bar']`` order or\n    ``pd.read_csv(data, usecols=['foo', 'bar'])[['bar', 'foo']]``\n    for ``['bar', 'foo']`` order.\n\n    If callable, the callable function will be evaluated against the column\n    names, returning names where the callable function evaluates to True. An\n    example of a valid callable argument would be ``lambda x: x.upper() in\n    ['AAA', 'BBB', 'DDD']``. Using this parameter results in much faster\n    parsing time and lower memory usage.\nsqueeze : bool, default False\n    If the parsed data only contains one column then return a Series.\nprefix : str, optional\n    Prefix to add to column numbers when no header, e.g. 'X' for X0, X1, ...\nmangle_dupe_cols : bool, default True\n    Duplicate columns will be specified as 'X', 'X.1', ...'X.N', rather than\n    'X'...'X'. Passing in False will cause data to be overwritten if there\n    are duplicate names in the columns.\ndtype : Type name or dict of column -> type, optional\n    Data type for data or columns. E.g. {'a': np.float64, 'b': np.int32,\n    'c': 'Int64'}\n    Use `str` or `object` together with suitable `na_values` settings\n    to preserve and not interpret dtype.\n    If converters are specified, they will be applied INSTEAD\n    of dtype conversion.\nengine : {'c', 'python'}, optional\n    Parser engine to use. The C engine is faster while the python engine is\n    currently more feature-complete.\nconverters : dict, optional\n    Dict of functions for converting values in certain columns. Keys can either\n    be integers or column labels.\ntrue_values : list, optional\n    Values to consider as True.\nfalse_values : list, optional\n    Values to consider as False.\nskipinitialspace : bool, default False\n    Skip spaces after delimiter.\nskiprows : list-like, int or callable, optional\n    Line numbers to skip (0-indexed) or number of lines to skip (int)\n    at the start of the file.\n\n    If callable, the callable function will be evaluated against the row\n    indices, returning True if the row should be skipped and False otherwise.\n    An example of a valid callable argument would be ``lambda x: x in [0, 2]``.\nskipfooter : int, default 0\n    Number of lines at bottom of file to skip (Unsupported with engine='c').\nnrows : int, optional\n    Number of rows of file to read. Useful for reading pieces of large files.\nna_values : scalar, str, list-like, or dict, optional\n    Additional strings to recognize as NA/NaN. If dict passed, specific\n    per-column NA values.  By default the following values are interpreted as\n    NaN: '', '#N/A', '#N/A N/A', '#NA', '-1.#IND', '-1.#QNAN', '-NaN', '-nan',\n    '1.#IND', '1.#QNAN', 'N/A', 'NA', 'NULL', 'NaN', 'n/a', 'nan',\n    'null'.\nkeep_default_na : bool, default True\n    Whether or not to include the default NaN values when parsing the data.\n    Depending on whether `na_values` is passed in, the behavior is as follows:\n\n    * If `keep_default_na` is True, and `na_values` are specified, `na_values`\n      is appended to the default NaN values used for parsing.\n    * If `keep_default_na` is True, and `na_values` are not specified, only\n      the default NaN values are used for parsing.\n    * If `keep_default_na` is False, and `na_values` are specified, only\n      the NaN values specified `na_values` are used for parsing.\n    * If `keep_default_na` is False, and `na_values` are not specified, no\n      strings will be parsed as NaN.\n\n    Note that if `na_filter` is passed in as False, the `keep_default_na` and\n    `na_values` parameters will be ignored.\nna_filter : bool, default True\n    Detect missing value markers (empty strings and the value of na_values). In\n    data without any NAs, passing na_filter=False can improve the performance\n    of reading a large file.\nverbose : bool, default False\n    Indicate number of NA values placed in non-numeric columns.\nskip_blank_lines : bool, default True\n    If True, skip over blank lines rather than interpreting as NaN values.\nparse_dates : bool or list of int or names or list of lists or dict, default False\n    The behavior is as follows:\n\n    * boolean. If True -> try parsing the index.\n    * list of int or names. e.g. If [1, 2, 3] -> try parsing columns 1, 2, 3\n      each as a separate date column.\n    * list of lists. e.g.  If [[1, 3]] -> combine columns 1 and 3 and parse as\n      a single date column.\n    * dict, e.g. {'foo' : [1, 3]} -> parse columns 1, 3 as date and call\n      result 'foo'\n\n    If a column or index cannot be represented as an array of datetimes,\n    say because of an unparseable value or a mixture of timezones, the column\n    or index will be returned unaltered as an object data type. For\n    non-standard datetime parsing, use ``pd.to_datetime`` after\n    ``pd.read_csv``. To parse an index or column with a mixture of timezones,\n    specify ``date_parser`` to be a partially-applied\n    :func:`pandas.to_datetime` with ``utc=True``. See\n    :ref:`io.csv.mixed_timezones` for more.\n\n    Note: A fast-path exists for iso8601-formatted dates.\ninfer_datetime_format : bool, default False\n    If True and `parse_dates` is enabled, pandas will attempt to infer the\n    format of the datetime strings in the columns, and if it can be inferred,\n    switch to a faster method of parsing them. In some cases this can increase\n    the parsing speed by 5-10x.\nkeep_date_col : bool, default False\n    If True and `parse_dates` specifies combining multiple columns then\n    keep the original columns.\ndate_parser : function, optional\n    Function to use for converting a sequence of string columns to an array of\n    datetime instances. The default uses ``dateutil.parser.parser`` to do the\n    conversion. Pandas will try to call `date_parser` in three different ways,\n    advancing to the next if an exception occurs: 1) Pass one or more arrays\n    (as defined by `parse_dates`) as arguments; 2) concatenate (row-wise) the\n    string values from the columns defined by `parse_dates` into a single array\n    and pass that; and 3) call `date_parser` once for each row using one or\n    more strings (corresponding to the columns defined by `parse_dates`) as\n    arguments.\ndayfirst : bool, default False\n    DD/MM format dates, international and European format.\ncache_dates : boolean, default True\n    If True, use a cache of unique, converted dates to apply the datetime\n    conversion. May produce significant speed-up when parsing duplicate\n    date strings, especially ones with timezone offsets.\n\n    .. versionadded:: 0.25.0\niterator : bool, default False\n    Return TextFileReader object for iteration or getting chunks with\n    ``get_chunk()``.\nchunksize : int, optional\n    Return TextFileReader object for iteration.\n    See the `IO Tools docs\n    <http://pandas.pydata.org/pandas-docs/stable/io.html#io-chunking>`_\n    for more information on ``iterator`` and ``chunksize``.\ncompression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}, default 'infer'\n    For on-the-fly decompression of on-disk data. If 'infer' and\n    `filepath_or_buffer` is path-like, then detect compression from the\n    following extensions: '.gz', '.bz2', '.zip', or '.xz' (otherwise no\n    decompression). If using 'zip', the ZIP file must contain only one data\n    file to be read in. Set to None for no decompression.\nthousands : str, optional\n    Thousands separator.\ndecimal : str, default '.'\n    Character to recognize as decimal point (e.g. use ',' for European data).\nlineterminator : str (length 1), optional\n    Character to break file into lines. Only valid with C parser.\nquotechar : str (length 1), optional\n    The character used to denote the start and end of a quoted item. Quoted\n    items can include the delimiter and it will be ignored.\nquoting : int or csv.QUOTE_* instance, default 0\n    Control field quoting behavior per ``csv.QUOTE_*`` constants. Use one of\n    QUOTE_MINIMAL (0), QUOTE_ALL (1), QUOTE_NONNUMERIC (2) or QUOTE_NONE (3).\ndoublequote : bool, default ``True``\n   When quotechar is specified and quoting is not ``QUOTE_NONE``, indicate\n   whether or not to interpret two consecutive quotechar elements INSIDE a\n   field as a single ``quotechar`` element.\nescapechar : str (length 1), optional\n    One-character string used to escape other characters.\ncomment : str, optional\n    Indicates remainder of line should not be parsed. If found at the beginning\n    of a line, the line will be ignored altogether. This parameter must be a\n    single character. Like empty lines (as long as ``skip_blank_lines=True``),\n    fully commented lines are ignored by the parameter `header` but not by\n    `skiprows`. For example, if ``comment='#'``, parsing\n    ``#empty\\na,b,c\\n1,2,3`` with ``header=0`` will result in 'a,b,c' being\n    treated as the header.\nencoding : str, optional\n    Encoding to use for UTF when reading/writing (ex. 'utf-8'). `List of Python\n    standard encodings\n    <https://docs.python.org/3/library/codecs.html#standard-encodings>`_ .\ndialect : str or csv.Dialect, optional\n    If provided, this parameter will override values (default or not) for the\n    following parameters: `delimiter`, `doublequote`, `escapechar`,\n    `skipinitialspace`, `quotechar`, and `quoting`. If it is necessary to\n    override values, a ParserWarning will be issued. See csv.Dialect\n    documentation for more details.\nerror_bad_lines : bool, default True\n    Lines with too many fields (e.g. a csv line with too many commas) will by\n    default cause an exception to be raised, and no DataFrame will be returned.\n    If False, then these \"bad lines\" will dropped from the DataFrame that is\n    returned.\nwarn_bad_lines : bool, default True\n    If error_bad_lines is False, and warn_bad_lines is True, a warning for each\n    \"bad line\" will be output.\ndelim_whitespace : bool, default False\n    Specifies whether or not whitespace (e.g. ``' '`` or ``'    '``) will be\n    used as the sep. Equivalent to setting ``sep='\\s+'``. If this option\n    is set to True, nothing should be passed in for the ``delimiter``\n    parameter.\nlow_memory : bool, default True\n    Internally process the file in chunks, resulting in lower memory use\n    while parsing, but possibly mixed type inference.  To ensure no mixed\n    types either set False, or specify the type with the `dtype` parameter.\n    Note that the entire file is read into a single DataFrame regardless,\n    use the `chunksize` or `iterator` parameter to return the data in chunks.\n    (Only valid with C parser).\nmemory_map : bool, default False\n    If a filepath is provided for `filepath_or_buffer`, map the file object\n    directly onto memory and access the data directly from there. Using this\n    option can improve performance because there is no longer any I/O overhead.\nfloat_precision : str, optional\n    Specifies which converter the C engine should use for floating-point\n    values. The options are `None` for the ordinary converter,\n    `high` for the high-precision converter, and `round_trip` for the\n    round-trip converter.\n\nReturns\n-------\nDataFrame or TextParser\n    A comma-separated values (csv) file is returned as two-dimensional\n    data structure with labeled axes.\n\nSee Also\n--------\nto_csv : Write DataFrame to a comma-separated values (csv) file.\nread_csv : Read a comma-separated values (csv) file into DataFrame.\nread_fwf : Read a table of fixed-width formatted lines into DataFrame.\n\nExamples\n--------\n>>> pd.read_table('data.csv')  # doctest: +SKIP", "deprecated": false, "file": "pandas/io/parsers.py", "file_line": 533, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/parsers.py#L533", "errors": [["PR06", "Parameter \"cache_dates\" type should use \"bool\" instead of \"boolean\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Flat file", "shared_code_with": ""}, "pandas.read_csv": {"type": "function", "docstring": "Read a comma-separated values (csv) file into DataFrame.\n\nAlso supports optionally iterating or breaking of the file\ninto chunks.\n\nAdditional help can be found in the online docs for\n`IO Tools <http://pandas.pydata.org/pandas-docs/stable/user_guide/io.html>`_.\n\nParameters\n----------\nfilepath_or_buffer : str, path object or file-like object\n    Any valid string path is acceptable. The string could be a URL. Valid\n    URL schemes include http, ftp, s3, and file. For file URLs, a host is\n    expected. A local file could be: file://localhost/path/to/table.csv.\n\n    If you want to pass in a path object, pandas accepts any ``os.PathLike``.\n\n    By file-like object, we refer to objects with a ``read()`` method, such as\n    a file handler (e.g. via builtin ``open`` function) or ``StringIO``.\nsep : str, default ','\n    Delimiter to use. If sep is None, the C engine cannot automatically detect\n    the separator, but the Python parsing engine can, meaning the latter will\n    be used and automatically detect the separator by Python's builtin sniffer\n    tool, ``csv.Sniffer``. In addition, separators longer than 1 character and\n    different from ``'\\s+'`` will be interpreted as regular expressions and\n    will also force the use of the Python parsing engine. Note that regex\n    delimiters are prone to ignoring quoted data. Regex example: ``'\\r\\t'``.\ndelimiter : str, default ``None``\n    Alias for sep.\nheader : int, list of int, default 'infer'\n    Row number(s) to use as the column names, and the start of the\n    data.  Default behavior is to infer the column names: if no names\n    are passed the behavior is identical to ``header=0`` and column\n    names are inferred from the first line of the file, if column\n    names are passed explicitly then the behavior is identical to\n    ``header=None``. Explicitly pass ``header=0`` to be able to\n    replace existing names. The header can be a list of integers that\n    specify row locations for a multi-index on the columns\n    e.g. [0,1,3]. Intervening rows that are not specified will be\n    skipped (e.g. 2 in this example is skipped). Note that this\n    parameter ignores commented lines and empty lines if\n    ``skip_blank_lines=True``, so ``header=0`` denotes the first line of\n    data rather than the first line of the file.\nnames : array-like, optional\n    List of column names to use. If file contains no header row, then you\n    should explicitly pass ``header=None``. Duplicates in this list are not\n    allowed.\nindex_col : int, str, sequence of int / str, or False, default ``None``\n  Column(s) to use as the row labels of the ``DataFrame``, either given as\n  string name or column index. If a sequence of int / str is given, a\n  MultiIndex is used.\n\n  Note: ``index_col=False`` can be used to force pandas to *not* use the first\n  column as the index, e.g. when you have a malformed file with delimiters at\n  the end of each line.\nusecols : list-like or callable, optional\n    Return a subset of the columns. If list-like, all elements must either\n    be positional (i.e. integer indices into the document columns) or strings\n    that correspond to column names provided either by the user in `names` or\n    inferred from the document header row(s). For example, a valid list-like\n    `usecols` parameter would be ``[0, 1, 2]`` or ``['foo', 'bar', 'baz']``.\n    Element order is ignored, so ``usecols=[0, 1]`` is the same as ``[1, 0]``.\n    To instantiate a DataFrame from ``data`` with element order preserved use\n    ``pd.read_csv(data, usecols=['foo', 'bar'])[['foo', 'bar']]`` for columns\n    in ``['foo', 'bar']`` order or\n    ``pd.read_csv(data, usecols=['foo', 'bar'])[['bar', 'foo']]``\n    for ``['bar', 'foo']`` order.\n\n    If callable, the callable function will be evaluated against the column\n    names, returning names where the callable function evaluates to True. An\n    example of a valid callable argument would be ``lambda x: x.upper() in\n    ['AAA', 'BBB', 'DDD']``. Using this parameter results in much faster\n    parsing time and lower memory usage.\nsqueeze : bool, default False\n    If the parsed data only contains one column then return a Series.\nprefix : str, optional\n    Prefix to add to column numbers when no header, e.g. 'X' for X0, X1, ...\nmangle_dupe_cols : bool, default True\n    Duplicate columns will be specified as 'X', 'X.1', ...'X.N', rather than\n    'X'...'X'. Passing in False will cause data to be overwritten if there\n    are duplicate names in the columns.\ndtype : Type name or dict of column -> type, optional\n    Data type for data or columns. E.g. {'a': np.float64, 'b': np.int32,\n    'c': 'Int64'}\n    Use `str` or `object` together with suitable `na_values` settings\n    to preserve and not interpret dtype.\n    If converters are specified, they will be applied INSTEAD\n    of dtype conversion.\nengine : {'c', 'python'}, optional\n    Parser engine to use. The C engine is faster while the python engine is\n    currently more feature-complete.\nconverters : dict, optional\n    Dict of functions for converting values in certain columns. Keys can either\n    be integers or column labels.\ntrue_values : list, optional\n    Values to consider as True.\nfalse_values : list, optional\n    Values to consider as False.\nskipinitialspace : bool, default False\n    Skip spaces after delimiter.\nskiprows : list-like, int or callable, optional\n    Line numbers to skip (0-indexed) or number of lines to skip (int)\n    at the start of the file.\n\n    If callable, the callable function will be evaluated against the row\n    indices, returning True if the row should be skipped and False otherwise.\n    An example of a valid callable argument would be ``lambda x: x in [0, 2]``.\nskipfooter : int, default 0\n    Number of lines at bottom of file to skip (Unsupported with engine='c').\nnrows : int, optional\n    Number of rows of file to read. Useful for reading pieces of large files.\nna_values : scalar, str, list-like, or dict, optional\n    Additional strings to recognize as NA/NaN. If dict passed, specific\n    per-column NA values.  By default the following values are interpreted as\n    NaN: '', '#N/A', '#N/A N/A', '#NA', '-1.#IND', '-1.#QNAN', '-NaN', '-nan',\n    '1.#IND', '1.#QNAN', 'N/A', 'NA', 'NULL', 'NaN', 'n/a', 'nan',\n    'null'.\nkeep_default_na : bool, default True\n    Whether or not to include the default NaN values when parsing the data.\n    Depending on whether `na_values` is passed in, the behavior is as follows:\n\n    * If `keep_default_na` is True, and `na_values` are specified, `na_values`\n      is appended to the default NaN values used for parsing.\n    * If `keep_default_na` is True, and `na_values` are not specified, only\n      the default NaN values are used for parsing.\n    * If `keep_default_na` is False, and `na_values` are specified, only\n      the NaN values specified `na_values` are used for parsing.\n    * If `keep_default_na` is False, and `na_values` are not specified, no\n      strings will be parsed as NaN.\n\n    Note that if `na_filter` is passed in as False, the `keep_default_na` and\n    `na_values` parameters will be ignored.\nna_filter : bool, default True\n    Detect missing value markers (empty strings and the value of na_values). In\n    data without any NAs, passing na_filter=False can improve the performance\n    of reading a large file.\nverbose : bool, default False\n    Indicate number of NA values placed in non-numeric columns.\nskip_blank_lines : bool, default True\n    If True, skip over blank lines rather than interpreting as NaN values.\nparse_dates : bool or list of int or names or list of lists or dict, default False\n    The behavior is as follows:\n\n    * boolean. If True -> try parsing the index.\n    * list of int or names. e.g. If [1, 2, 3] -> try parsing columns 1, 2, 3\n      each as a separate date column.\n    * list of lists. e.g.  If [[1, 3]] -> combine columns 1 and 3 and parse as\n      a single date column.\n    * dict, e.g. {'foo' : [1, 3]} -> parse columns 1, 3 as date and call\n      result 'foo'\n\n    If a column or index cannot be represented as an array of datetimes,\n    say because of an unparseable value or a mixture of timezones, the column\n    or index will be returned unaltered as an object data type. For\n    non-standard datetime parsing, use ``pd.to_datetime`` after\n    ``pd.read_csv``. To parse an index or column with a mixture of timezones,\n    specify ``date_parser`` to be a partially-applied\n    :func:`pandas.to_datetime` with ``utc=True``. See\n    :ref:`io.csv.mixed_timezones` for more.\n\n    Note: A fast-path exists for iso8601-formatted dates.\ninfer_datetime_format : bool, default False\n    If True and `parse_dates` is enabled, pandas will attempt to infer the\n    format of the datetime strings in the columns, and if it can be inferred,\n    switch to a faster method of parsing them. In some cases this can increase\n    the parsing speed by 5-10x.\nkeep_date_col : bool, default False\n    If True and `parse_dates` specifies combining multiple columns then\n    keep the original columns.\ndate_parser : function, optional\n    Function to use for converting a sequence of string columns to an array of\n    datetime instances. The default uses ``dateutil.parser.parser`` to do the\n    conversion. Pandas will try to call `date_parser` in three different ways,\n    advancing to the next if an exception occurs: 1) Pass one or more arrays\n    (as defined by `parse_dates`) as arguments; 2) concatenate (row-wise) the\n    string values from the columns defined by `parse_dates` into a single array\n    and pass that; and 3) call `date_parser` once for each row using one or\n    more strings (corresponding to the columns defined by `parse_dates`) as\n    arguments.\ndayfirst : bool, default False\n    DD/MM format dates, international and European format.\ncache_dates : boolean, default True\n    If True, use a cache of unique, converted dates to apply the datetime\n    conversion. May produce significant speed-up when parsing duplicate\n    date strings, especially ones with timezone offsets.\n\n    .. versionadded:: 0.25.0\niterator : bool, default False\n    Return TextFileReader object for iteration or getting chunks with\n    ``get_chunk()``.\nchunksize : int, optional\n    Return TextFileReader object for iteration.\n    See the `IO Tools docs\n    <http://pandas.pydata.org/pandas-docs/stable/io.html#io-chunking>`_\n    for more information on ``iterator`` and ``chunksize``.\ncompression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}, default 'infer'\n    For on-the-fly decompression of on-disk data. If 'infer' and\n    `filepath_or_buffer` is path-like, then detect compression from the\n    following extensions: '.gz', '.bz2', '.zip', or '.xz' (otherwise no\n    decompression). If using 'zip', the ZIP file must contain only one data\n    file to be read in. Set to None for no decompression.\nthousands : str, optional\n    Thousands separator.\ndecimal : str, default '.'\n    Character to recognize as decimal point (e.g. use ',' for European data).\nlineterminator : str (length 1), optional\n    Character to break file into lines. Only valid with C parser.\nquotechar : str (length 1), optional\n    The character used to denote the start and end of a quoted item. Quoted\n    items can include the delimiter and it will be ignored.\nquoting : int or csv.QUOTE_* instance, default 0\n    Control field quoting behavior per ``csv.QUOTE_*`` constants. Use one of\n    QUOTE_MINIMAL (0), QUOTE_ALL (1), QUOTE_NONNUMERIC (2) or QUOTE_NONE (3).\ndoublequote : bool, default ``True``\n   When quotechar is specified and quoting is not ``QUOTE_NONE``, indicate\n   whether or not to interpret two consecutive quotechar elements INSIDE a\n   field as a single ``quotechar`` element.\nescapechar : str (length 1), optional\n    One-character string used to escape other characters.\ncomment : str, optional\n    Indicates remainder of line should not be parsed. If found at the beginning\n    of a line, the line will be ignored altogether. This parameter must be a\n    single character. Like empty lines (as long as ``skip_blank_lines=True``),\n    fully commented lines are ignored by the parameter `header` but not by\n    `skiprows`. For example, if ``comment='#'``, parsing\n    ``#empty\\na,b,c\\n1,2,3`` with ``header=0`` will result in 'a,b,c' being\n    treated as the header.\nencoding : str, optional\n    Encoding to use for UTF when reading/writing (ex. 'utf-8'). `List of Python\n    standard encodings\n    <https://docs.python.org/3/library/codecs.html#standard-encodings>`_ .\ndialect : str or csv.Dialect, optional\n    If provided, this parameter will override values (default or not) for the\n    following parameters: `delimiter`, `doublequote`, `escapechar`,\n    `skipinitialspace`, `quotechar`, and `quoting`. If it is necessary to\n    override values, a ParserWarning will be issued. See csv.Dialect\n    documentation for more details.\nerror_bad_lines : bool, default True\n    Lines with too many fields (e.g. a csv line with too many commas) will by\n    default cause an exception to be raised, and no DataFrame will be returned.\n    If False, then these \"bad lines\" will dropped from the DataFrame that is\n    returned.\nwarn_bad_lines : bool, default True\n    If error_bad_lines is False, and warn_bad_lines is True, a warning for each\n    \"bad line\" will be output.\ndelim_whitespace : bool, default False\n    Specifies whether or not whitespace (e.g. ``' '`` or ``'    '``) will be\n    used as the sep. Equivalent to setting ``sep='\\s+'``. If this option\n    is set to True, nothing should be passed in for the ``delimiter``\n    parameter.\nlow_memory : bool, default True\n    Internally process the file in chunks, resulting in lower memory use\n    while parsing, but possibly mixed type inference.  To ensure no mixed\n    types either set False, or specify the type with the `dtype` parameter.\n    Note that the entire file is read into a single DataFrame regardless,\n    use the `chunksize` or `iterator` parameter to return the data in chunks.\n    (Only valid with C parser).\nmemory_map : bool, default False\n    If a filepath is provided for `filepath_or_buffer`, map the file object\n    directly onto memory and access the data directly from there. Using this\n    option can improve performance because there is no longer any I/O overhead.\nfloat_precision : str, optional\n    Specifies which converter the C engine should use for floating-point\n    values. The options are `None` for the ordinary converter,\n    `high` for the high-precision converter, and `round_trip` for the\n    round-trip converter.\n\nReturns\n-------\nDataFrame or TextParser\n    A comma-separated values (csv) file is returned as two-dimensional\n    data structure with labeled axes.\n\nSee Also\n--------\nto_csv : Write DataFrame to a comma-separated values (csv) file.\nread_csv : Read a comma-separated values (csv) file into DataFrame.\nread_fwf : Read a table of fixed-width formatted lines into DataFrame.\n\nExamples\n--------\n>>> pd.read_csv('data.csv')  # doctest: +SKIP", "deprecated": false, "file": "pandas/io/parsers.py", "file_line": 533, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/parsers.py#L533", "errors": [["PR06", "Parameter \"cache_dates\" type should use \"bool\" instead of \"boolean\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Flat file", "shared_code_with": "pandas.read_table"}, "pandas.read_fwf": {"type": "function", "docstring": "Read a table of fixed-width formatted lines into DataFrame.\n\nAlso supports optionally iterating or breaking of the file\ninto chunks.\n\nAdditional help can be found in the `online docs for IO Tools\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/io.html>`_.\n\nParameters\n----------\nfilepath_or_buffer : str, path object or file-like object\n    Any valid string path is acceptable. The string could be a URL. Valid\n    URL schemes include http, ftp, s3, and file. For file URLs, a host is\n    expected. A local file could be:\n    ``file://localhost/path/to/table.csv``.\n\n    If you want to pass in a path object, pandas accepts any\n    ``os.PathLike``.\n\n    By file-like object, we refer to objects with a ``read()`` method,\n    such as a file handler (e.g. via builtin ``open`` function)\n    or ``StringIO``.\ncolspecs : list of tuple (int, int) or 'infer'. optional\n    A list of tuples giving the extents of the fixed-width\n    fields of each line as half-open intervals (i.e.,  [from, to[ ).\n    String value 'infer' can be used to instruct the parser to try\n    detecting the column specifications from the first 100 rows of\n    the data which are not being skipped via skiprows (default='infer').\nwidths : list of int, optional\n    A list of field widths which can be used instead of 'colspecs' if\n    the intervals are contiguous.\ninfer_nrows : int, default 100\n    The number of rows to consider when letting the parser determine the\n    `colspecs`.\n\n    .. versionadded:: 0.24.0\n**kwds : optional\n    Optional keyword arguments can be passed to ``TextFileReader``.\n\nReturns\n-------\nDataFrame or TextParser\n    A comma-separated values (csv) file is returned as two-dimensional\n    data structure with labeled axes.\n\nSee Also\n--------\nto_csv : Write DataFrame to a comma-separated values (csv) file.\nread_csv : Read a comma-separated values (csv) file into DataFrame.\n\nExamples\n--------\n>>> pd.read_fwf('data.csv')  # doctest: +SKIP", "deprecated": false, "file": "pandas/io/parsers.py", "file_line": 705, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/parsers.py#L705", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Flat file", "shared_code_with": ""}, "pandas.read_msgpack": {"type": "function", "docstring": "Load msgpack pandas object from the specified\nfile path.\n\n.. deprecated:: 0.25.0\n\nread_msgpack is deprecated and will be removed in a future version.\nIt is recommended to use pyarrow for on-the-wire transmission of\npandas objects.\n\nParameters\n----------\npath_or_buf : str, path object or file-like object\n    Any valid string path is acceptable. The string could be a URL. Valid\n    URL schemes include http, ftp, s3, and file. For file URLs, a host is\n    expected.\n\n    If you want to pass in a path object, pandas accepts any\n    ``os.PathLike``.\n\n    By file-like object, we refer to objects with a ``read()`` method,\n    such as a file handler (e.g. via builtin ``open`` function) or\n    ``StringIO``.\nencoding : Encoding for decoding msgpack str type\niterator : boolean, if True, return an iterator to the unpacker\n           (default is False)\n\nReturns\n-------\nobj : same type as object stored in file\n\nNotes\n-----\nread_msgpack is only guaranteed to be backwards compatible to pandas\n0.20.3.", "deprecated": true, "file": "pandas/io/packers.py", "file_line": 156, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/packers.py#L156", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs} not documented"], ["PR07", "Parameter \"encoding\" has no description"], ["PR06", "Parameter \"iterator\" type should use \"bool\" instead of \"boolean\""], ["PR08", "Parameter \"iterator\" description should start with a capital letter"], ["PR09", "Parameter \"iterator\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Flat file", "shared_code_with": ""}, "pandas.read_clipboard": {"type": "function", "docstring": "Read text from clipboard and pass to read_csv. See read_csv for the\nfull argument list\n\nParameters\n----------\nsep : str, default '\\s+'\n    A string or regex delimiter. The default of '\\s+' denotes\n    one or more whitespace characters.\n\nReturns\n-------\nparsed : DataFrame", "deprecated": false, "file": "pandas/io/clipboards.py", "file_line": 10, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/clipboards.py#L10", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs} not documented"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Clipboard", "shared_code_with": ""}, "pandas.read_excel": {"type": "function", "docstring": "Read an Excel file into a pandas DataFrame.\n\nSupport both `xls` and `xlsx` file extensions from a local filesystem or URL.\nSupport an option to read a single sheet or a list of sheets.\n\nParameters\n----------\nio : str, ExcelFile, xlrd.Book, path object or file-like object\n    Any valid string path is acceptable. The string could be a URL. Valid\n    URL schemes include http, ftp, s3, and file. For file URLs, a host is\n    expected. A local file could be: ``file://localhost/path/to/table.xlsx``.\n\n    If you want to pass in a path object, pandas accepts any ``os.PathLike``.\n\n    By file-like object, we refer to objects with a ``read()`` method,\n    such as a file handler (e.g. via builtin ``open`` function)\n    or ``StringIO``.\nsheet_name : str, int, list, or None, default 0\n    Strings are used for sheet names. Integers are used in zero-indexed\n    sheet positions. Lists of strings/integers are used to request\n    multiple sheets. Specify None to get all sheets.\n\n    Available cases:\n\n    * Defaults to ``0``: 1st sheet as a `DataFrame`\n    * ``1``: 2nd sheet as a `DataFrame`\n    * ``\"Sheet1\"``: Load sheet with name \"Sheet1\"\n    * ``[0, 1, \"Sheet5\"]``: Load first, second and sheet named \"Sheet5\"\n      as a dict of `DataFrame`\n    * None: All sheets.\n\nheader : int, list of int, default 0\n    Row (0-indexed) to use for the column labels of the parsed\n    DataFrame. If a list of integers is passed those row positions will\n    be combined into a ``MultiIndex``. Use None if there is no header.\nnames : array-like, default None\n    List of column names to use. If file contains no header row,\n    then you should explicitly pass header=None.\nindex_col : int, list of int, default None\n    Column (0-indexed) to use as the row labels of the DataFrame.\n    Pass None if there is no such column.  If a list is passed,\n    those columns will be combined into a ``MultiIndex``.  If a\n    subset of data is selected with ``usecols``, index_col\n    is based on the subset.\nusecols : int, str, list-like, or callable default None\n    Return a subset of the columns.\n\n    * If None, then parse all columns.\n    * If int, then indicates last column to be parsed.\n\n      .. deprecated:: 0.24.0\n         Pass in a list of int instead from 0 to `usecols` inclusive.\n\n    * If str, then indicates comma separated list of Excel column letters\n      and column ranges (e.g. \"A:E\" or \"A,C,E:F\"). Ranges are inclusive of\n      both sides.\n    * If list of int, then indicates list of column numbers to be parsed.\n    * If list of string, then indicates list of column names to be parsed.\n\n      .. versionadded:: 0.24.0\n\n    * If callable, then evaluate each column name against it and parse the\n      column if the callable returns ``True``.\n\n      .. versionadded:: 0.24.0\n\nsqueeze : bool, default False\n    If the parsed data only contains one column then return a Series.\ndtype : Type name or dict of column -> type, default None\n    Data type for data or columns. E.g. {'a': np.float64, 'b': np.int32}\n    Use `object` to preserve data as stored in Excel and not interpret dtype.\n    If converters are specified, they will be applied INSTEAD\n    of dtype conversion.\n\n    .. versionadded:: 0.20.0\n\nengine : str, default None\n    If io is not a buffer or path, this must be set to identify io.\n    Acceptable values are None or xlrd.\nconverters : dict, default None\n    Dict of functions for converting values in certain columns. Keys can\n    either be integers or column labels, values are functions that take one\n    input argument, the Excel cell content, and return the transformed\n    content.\ntrue_values : list, default None\n    Values to consider as True.\nfalse_values : list, default None\n    Values to consider as False.\nskiprows : list-like\n    Rows to skip at the beginning (0-indexed).\nnrows : int, default None\n    Number of rows to parse.\n\n    .. versionadded:: 0.23.0\n\nna_values : scalar, str, list-like, or dict, default None\n    Additional strings to recognize as NA/NaN. If dict passed, specific\n    per-column NA values. By default the following values are interpreted\n    as NaN: '', '#N/A', '#N/A N/A', '#NA', '-1.#IND', '-1.#QNAN', '-NaN', '-nan',\n    '1.#IND', '1.#QNAN', 'N/A', 'NA', 'NULL', 'NaN', 'n/a', 'nan',\n    'null'.\nkeep_default_na : bool, default True\n    If na_values are specified and keep_default_na is False the default NaN\n    values are overridden, otherwise they're appended to.\nverbose : bool, default False\n    Indicate number of NA values placed in non-numeric columns.\nparse_dates : bool, list-like, or dict, default False\n    The behavior is as follows:\n\n    * bool. If True -> try parsing the index.\n    * list of int or names. e.g. If [1, 2, 3] -> try parsing columns 1, 2, 3\n      each as a separate date column.\n    * list of lists. e.g.  If [[1, 3]] -> combine columns 1 and 3 and parse as\n      a single date column.\n    * dict, e.g. {'foo' : [1, 3]} -> parse columns 1, 3 as date and call\n      result 'foo'\n\n    If a column or index contains an unparseable date, the entire column or\n    index will be returned unaltered as an object data type. For non-standard\n    datetime parsing, use ``pd.to_datetime`` after ``pd.read_excel``.\n\n    Note: A fast-path exists for iso8601-formatted dates.\ndate_parser : function, optional\n    Function to use for converting a sequence of string columns to an array of\n    datetime instances. The default uses ``dateutil.parser.parser`` to do the\n    conversion. Pandas will try to call `date_parser` in three different ways,\n    advancing to the next if an exception occurs: 1) Pass one or more arrays\n    (as defined by `parse_dates`) as arguments; 2) concatenate (row-wise) the\n    string values from the columns defined by `parse_dates` into a single array\n    and pass that; and 3) call `date_parser` once for each row using one or\n    more strings (corresponding to the columns defined by `parse_dates`) as\n    arguments.\nthousands : str, default None\n    Thousands separator for parsing string columns to numeric.  Note that\n    this parameter is only necessary for columns stored as TEXT in Excel,\n    any numeric columns will automatically be parsed, regardless of display\n    format.\ncomment : str, default None\n    Comments out remainder of line. Pass a character or characters to this\n    argument to indicate comments in the input file. Any data between the\n    comment string and the end of the current line is ignored.\nskip_footer : int, default 0\n    Alias of `skipfooter`.\n\n    .. deprecated:: 0.23.0\n       Use `skipfooter` instead.\nskipfooter : int, default 0\n    Rows at the end to skip (0-indexed).\nconvert_float : bool, default True\n    Convert integral floats to int (i.e., 1.0 --> 1). If False, all numeric\n    data will be read in as floats: Excel stores all numbers as floats\n    internally.\nmangle_dupe_cols : bool, default True\n    Duplicate columns will be specified as 'X', 'X.1', ...'X.N', rather than\n    'X'...'X'. Passing in False will cause data to be overwritten if there\n    are duplicate names in the columns.\n**kwds : optional\n        Optional keyword arguments can be passed to ``TextFileReader``.\n\nReturns\n-------\nDataFrame or dict of DataFrames\n    DataFrame from the passed in Excel file. See notes in sheet_name\n    argument for more information on when a dict of DataFrames is returned.\n\nSee Also\n--------\nto_excel : Write DataFrame to an Excel file.\nto_csv : Write DataFrame to a comma-separated values (csv) file.\nread_csv : Read a comma-separated values (csv) file into DataFrame.\nread_fwf : Read a table of fixed-width formatted lines into DataFrame.\n\nExamples\n--------\nThe file can be read using the file name as string or an open file object:\n\n>>> pd.read_excel('tmp.xlsx', index_col=0)  # doctest: +SKIP\n       Name  Value\n0   string1      1\n1   string2      2\n2  #Comment      3\n\n>>> pd.read_excel(open('tmp.xlsx', 'rb'),\n...               sheet_name='Sheet3')  # doctest: +SKIP\n   Unnamed: 0      Name  Value\n0           0   string1      1\n1           1   string2      2\n2           2  #Comment      3\n\nIndex and header can be specified via the `index_col` and `header` arguments\n\n>>> pd.read_excel('tmp.xlsx', index_col=None, header=None)  # doctest: +SKIP\n     0         1      2\n0  NaN      Name  Value\n1  0.0   string1      1\n2  1.0   string2      2\n3  2.0  #Comment      3\n\nColumn types are inferred but can be explicitly specified\n\n>>> pd.read_excel('tmp.xlsx', index_col=0,\n...               dtype={'Name': str, 'Value': float})  # doctest: +SKIP\n       Name  Value\n0   string1    1.0\n1   string2    2.0\n2  #Comment    3.0\n\nTrue, False, and NA values, and thousands separators have defaults,\nbut can be explicitly specified, too. Supply the values you would like\nas strings or lists of strings!\n\n>>> pd.read_excel('tmp.xlsx', index_col=0,\n...               na_values=['string1', 'string2'])  # doctest: +SKIP\n       Name  Value\n0       NaN      1\n1       NaN      2\n2  #Comment      3\n\nComment lines in the excel input file can be skipped using the `comment` kwarg\n\n>>> pd.read_excel('tmp.xlsx', index_col=0, comment='#')  # doctest: +SKIP\n      Name  Value\n0  string1    1.0\n1  string2    2.0\n2     None    NaN", "deprecated": false, "file": "pandas/util/_decorators.py", "file_line": 266, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/_decorators.py#L266", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {**kwds, dtype, date_parser, index_col, engine, usecols, skipfooter, skip_footer, io, header, parse_dates, keep_default_na, true_values, mangle_dupe_cols, nrows, na_values, verbose, convert_float, false_values, converters, sheet_name, skiprows, squeeze, names, comment, thousands}"], ["PR09", "Parameter \"usecols\" description should finish with \".\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Excel", "shared_code_with": ""}, "pandas.ExcelFile.parse": {"type": "function", "docstring": "Parse specified sheet(s) into a DataFrame\n\nEquivalent to read_excel(ExcelFile, ...)  See the read_excel\ndocstring for more info on accepted parameters\n\nReturns\n-------\nDataFrame or dict of DataFrames\n    DataFrame from the passed in Excel file.", "deprecated": false, "file": "pandas/io/excel/_base.py", "file_line": 816, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/excel/_base.py#L816", "errors": [["SS03", "Summary does not end with a period"], ["PR01", "Parameters {**kwds, date_parser, index_col, usecols, skipfooter, header, parse_dates, true_values, mangle_dupe_cols, nrows, na_values, convert_float, false_values, converters, sheet_name, skiprows, squeeze, names, comment, thousands} not documented"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Excel", "shared_code_with": ""}, "pandas.ExcelWriter": {"type": "ABCMeta", "docstring": "Class for writing DataFrame objects into excel sheets, default is to use\nxlwt for xls, openpyxl for xlsx.  See DataFrame.to_excel for typical usage.\n\nParameters\n----------\npath : string\n    Path to xls or xlsx file.\nengine : string (optional)\n    Engine to use for writing. If None, defaults to\n    ``io.excel.<extension>.writer``.  NOTE: can only be passed as a keyword\n    argument.\ndate_format : string, default None\n    Format string for dates written into Excel files (e.g. 'YYYY-MM-DD')\ndatetime_format : string, default None\n    Format string for datetime objects written into Excel files\n    (e.g. 'YYYY-MM-DD HH:MM:SS')\nmode : {'w', 'a'}, default 'w'\n    File mode to use (write or append).\n\n    .. versionadded:: 0.24.0\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nNotes\n-----\nNone of the methods and properties are considered public.\n\nFor compatibility with CSV writers, ExcelWriter serializes lists\nand dicts to strings before writing.\n\nExamples\n--------\nDefault usage:\n\n>>> with ExcelWriter('path_to_file.xlsx') as writer:\n...     df.to_excel(writer)\n\nTo write to separate sheets in a single file:\n\n>>> with ExcelWriter('path_to_file.xlsx') as writer:\n...     df1.to_excel(writer, sheet_name='Sheet1')\n...     df2.to_excel(writer, sheet_name='Sheet2')\n\nYou can set the date format or datetime format:\n\n>>> with ExcelWriter('path_to_file.xlsx',\n                      date_format='YYYY-MM-DD',\n                      datetime_format='YYYY-MM-DD HH:MM:SS') as writer:\n...     df.to_excel(writer)\n\nYou can also append to an existing Excel file:\n\n>>> with ExcelWriter('path_to_file.xlsx', mode='a') as writer:\n...     df.to_excel(writer, sheet_name='Sheet3')", "deprecated": false, "file": "pandas/io/excel/_base.py", "file_line": 528, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/excel/_base.py#L528", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {date_format, mode, datetime_format}"], ["PR06", "Parameter \"path\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"engine\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"date_format\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"date_format\" description should finish with \".\""], ["PR06", "Parameter \"datetime_format\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"datetime_format\" description should finish with \".\""], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 42, in pandas.ExcelWriter\nFailed example:\n    with ExcelWriter('path_to_file.xlsx') as writer:\n        df.to_excel(writer)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.ExcelWriter[0]>\", line 1, in <module>\n        with ExcelWriter('path_to_file.xlsx') as writer:\n    NameError: name 'ExcelWriter' is not defined\n**********************************************************************\nLine 47, in pandas.ExcelWriter\nFailed example:\n    with ExcelWriter('path_to_file.xlsx') as writer:\n        df1.to_excel(writer, sheet_name='Sheet1')\n        df2.to_excel(writer, sheet_name='Sheet2')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.ExcelWriter[1]>\", line 1, in <module>\n        with ExcelWriter('path_to_file.xlsx') as writer:\n    NameError: name 'ExcelWriter' is not defined\n**********************************************************************\nLine 53, in pandas.ExcelWriter\nFailed example:\n    with ExcelWriter('path_to_file.xlsx',\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.ExcelWriter[2]>\", line 1\n        with ExcelWriter('path_to_file.xlsx',\n                                            ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 60, in pandas.ExcelWriter\nFailed example:\n    with ExcelWriter('path_to_file.xlsx', mode='a') as writer:\n        df.to_excel(writer, sheet_name='Sheet3')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.ExcelWriter[3]>\", line 1, in <module>\n        with ExcelWriter('path_to_file.xlsx', mode='a') as writer:\n    NameError: name 'ExcelWriter' is not defined\n"], ["EX03", "flake8 error: E902 TokenError: EOF in multi-line statement"], ["EX03", "flake8 error: E999 SyntaxError: invalid syntax"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 42, in pandas.ExcelWriter\nFailed example:\n    with ExcelWriter('path_to_file.xlsx') as writer:\n        df.to_excel(writer)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.ExcelWriter[0]>\", line 1, in <module>\n        with ExcelWriter('path_to_file.xlsx') as writer:\n    NameError: name 'ExcelWriter' is not defined\n**********************************************************************\nLine 47, in pandas.ExcelWriter\nFailed example:\n    with ExcelWriter('path_to_file.xlsx') as writer:\n        df1.to_excel(writer, sheet_name='Sheet1')\n        df2.to_excel(writer, sheet_name='Sheet2')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.ExcelWriter[1]>\", line 1, in <module>\n        with ExcelWriter('path_to_file.xlsx') as writer:\n    NameError: name 'ExcelWriter' is not defined\n**********************************************************************\nLine 53, in pandas.ExcelWriter\nFailed example:\n    with ExcelWriter('path_to_file.xlsx',\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.ExcelWriter[2]>\", line 1\n        with ExcelWriter('path_to_file.xlsx',\n                                            ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 60, in pandas.ExcelWriter\nFailed example:\n    with ExcelWriter('path_to_file.xlsx', mode='a') as writer:\n        df.to_excel(writer, sheet_name='Sheet3')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.ExcelWriter[3]>\", line 1, in <module>\n        with ExcelWriter('path_to_file.xlsx', mode='a') as writer:\n    NameError: name 'ExcelWriter' is not defined\n", "in_api": true, "section": "", "subsection": "Excel", "shared_code_with": ""}, "pandas.read_json": {"type": "function", "docstring": "Convert a JSON string to pandas object.\n\nParameters\n----------\npath_or_buf : a valid JSON str, path object or file-like object\n    Any valid string path is acceptable. The string could be a URL. Valid\n    URL schemes include http, ftp, s3, and file. For file URLs, a host is\n    expected. A local file could be:\n    ``file://localhost/path/to/table.json``.\n\n    If you want to pass in a path object, pandas accepts any\n    ``os.PathLike``.\n\n    By file-like object, we refer to objects with a ``read()`` method,\n    such as a file handler (e.g. via builtin ``open`` function)\n    or ``StringIO``.\norient : string,\n    Indication of expected JSON string format.\n    Compatible JSON strings can be produced by ``to_json()`` with a\n    corresponding orient value.\n    The set of possible orients is:\n\n    - ``'split'`` : dict like\n      ``{index -> [index], columns -> [columns], data -> [values]}``\n    - ``'records'`` : list like\n      ``[{column -> value}, ... , {column -> value}]``\n    - ``'index'`` : dict like ``{index -> {column -> value}}``\n    - ``'columns'`` : dict like ``{column -> {index -> value}}``\n    - ``'values'`` : just the values array\n\n    The allowed and default values depend on the value\n    of the `typ` parameter.\n\n    * when ``typ == 'series'``,\n\n      - allowed orients are ``{'split','records','index'}``\n      - default is ``'index'``\n      - The Series index must be unique for orient ``'index'``.\n\n    * when ``typ == 'frame'``,\n\n      - allowed orients are ``{'split','records','index',\n        'columns','values', 'table'}``\n      - default is ``'columns'``\n      - The DataFrame index must be unique for orients ``'index'`` and\n        ``'columns'``.\n      - The DataFrame columns must be unique for orients ``'index'``,\n        ``'columns'``, and ``'records'``.\n\n    .. versionadded:: 0.23.0\n       'table' as an allowed value for the ``orient`` argument\n\ntyp : {'frame', 'series'}, default 'frame'\n    The type of object to recover.\n\ndtype : bool or dict, default None\n    If True, infer dtypes; if a dict of column to dtype, then use those;\n    if False, then don't infer dtypes at all, applies only to the data.\n\n    For all ``orient`` values except ``'table'``, default is True.\n\n    .. versionchanged:: 0.25.0\n\n       Not applicable for ``orient='table'``.\n\nconvert_axes : bool, default None\n    Try to convert the axes to the proper dtypes.\n\n    For all ``orient`` values except ``'table'``, default is True.\n\n    .. versionchanged:: 0.25.0\n\n       Not applicable for ``orient='table'``.\n\nconvert_dates : bool or list of str, default True\n    List of columns to parse for dates. If True, then try to parse\n    datelike columns. A column label is datelike if\n\n    * it ends with ``'_at'``,\n\n    * it ends with ``'_time'``,\n\n    * it begins with ``'timestamp'``,\n\n    * it is ``'modified'``, or\n\n    * it is ``'date'``.\n\nkeep_default_dates : bool, default True\n    If parsing dates, then parse the default datelike columns.\n\nnumpy : bool, default False\n    Direct decoding to numpy arrays. Supports numeric data only, but\n    non-numeric column and index labels are supported. Note also that the\n    JSON ordering MUST be the same for each term if numpy=True.\n\nprecise_float : bool, default False\n    Set to enable usage of higher precision (strtod) function when\n    decoding string to double values. Default (False) is to use fast but\n    less precise builtin functionality.\n\ndate_unit : str, default None\n    The timestamp unit to detect if converting dates. The default behaviour\n    is to try and detect the correct precision, but if this is not desired\n    then pass one of 's', 'ms', 'us' or 'ns' to force parsing only seconds,\n    milliseconds, microseconds or nanoseconds respectively.\n\nencoding : str, default is 'utf-8'\n    The encoding to use to decode py3 bytes.\n\nlines : bool, default False\n    Read the file as a json object per line.\n\nchunksize : int, optional\n    Return JsonReader object for iteration.\n    See the `line-delimited json docs\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#line-delimited-json>`_\n    for more information on ``chunksize``.\n    This can only be passed if `lines=True`.\n    If this is None, the file will be read into memory all at once.\n\n    .. versionadded:: 0.21.0\n\ncompression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}, default 'infer'\n    For on-the-fly decompression of on-disk data. If 'infer', then use\n    gzip, bz2, zip or xz if path_or_buf is a string ending in\n    '.gz', '.bz2', '.zip', or 'xz', respectively, and no decompression\n    otherwise. If using 'zip', the ZIP file must contain only one data\n    file to be read in. Set to None for no decompression.\n\n    .. versionadded:: 0.21.0\n\nReturns\n-------\nSeries or DataFrame\n    The type returned depends on the value of `typ`.\n\nSee Also\n--------\nDataFrame.to_json : Convert a DataFrame to a JSON string.\nSeries.to_json : Convert a Series to a JSON string.\n\nNotes\n-----\nSpecific to ``orient='table'``, if a :class:`DataFrame` with a literal\n:class:`Index` name of `index` gets written with :func:`to_json`, the\nsubsequent read operation will incorrectly set the :class:`Index` name to\n``None``. This is because `index` is also used by :func:`DataFrame.to_json`\nto denote a missing :class:`Index` name, and the subsequent\n:func:`read_json` operation cannot distinguish between the two. The same\nlimitation is encountered with a :class:`MultiIndex` and any names\nbeginning with ``'level_'``.\n\nExamples\n--------\n\n>>> df = pd.DataFrame([['a', 'b'], ['c', 'd']],\n...                   index=['row 1', 'row 2'],\n...                   columns=['col 1', 'col 2'])\n\nEncoding/decoding a Dataframe using ``'split'`` formatted JSON:\n\n>>> df.to_json(orient='split')\n'{\"columns\":[\"col 1\",\"col 2\"],\n  \"index\":[\"row 1\",\"row 2\"],\n  \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n>>> pd.read_json(_, orient='split')\n      col 1 col 2\nrow 1     a     b\nrow 2     c     d\n\nEncoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n>>> df.to_json(orient='index')\n'{\"row 1\":{\"col 1\":\"a\",\"col 2\":\"b\"},\"row 2\":{\"col 1\":\"c\",\"col 2\":\"d\"}}'\n>>> pd.read_json(_, orient='index')\n      col 1 col 2\nrow 1     a     b\nrow 2     c     d\n\nEncoding/decoding a Dataframe using ``'records'`` formatted JSON.\nNote that index labels are not preserved with this encoding.\n\n>>> df.to_json(orient='records')\n'[{\"col 1\":\"a\",\"col 2\":\"b\"},{\"col 1\":\"c\",\"col 2\":\"d\"}]'\n>>> pd.read_json(_, orient='records')\n  col 1 col 2\n0     a     b\n1     c     d\n\nEncoding with Table Schema\n\n>>> df.to_json(orient='table')\n'{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                        {\"name\": \"col 1\", \"type\": \"string\"},\n                        {\"name\": \"col 2\", \"type\": \"string\"}],\n                \"primaryKey\": \"index\",\n                \"pandas_version\": \"0.20.0\"},\n    \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n            {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'", "deprecated": false, "file": "pandas/io/json/_json.py", "file_line": 334, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/json/_json.py#L334", "errors": [["PR06", "Parameter \"orient\" type should use \"str\" instead of \"string\""], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 164, in pandas.read_json\nFailed example:\n    df.to_json(orient='split')\nExpected:\n    '{\"columns\":[\"col 1\",\"col 2\"],\n      \"index\":[\"row 1\",\"row 2\"],\n      \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\nGot:\n    '{\"columns\":[\"col 1\",\"col 2\"],\"index\":[\"row 1\",\"row 2\"],\"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n**********************************************************************\nLine 194, in pandas.read_json\nFailed example:\n    df.to_json(orient='table')\nExpected:\n    '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                            {\"name\": \"col 1\", \"type\": \"string\"},\n                            {\"name\": \"col 2\", \"type\": \"string\"}],\n                    \"primaryKey\": \"index\",\n                    \"pandas_version\": \"0.20.0\"},\n        \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n                {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'\nGot:\n    '{\"schema\": {\"fields\":[{\"name\":\"index\",\"type\":\"string\"},{\"name\":\"col 1\",\"type\":\"string\"},{\"name\":\"col 2\",\"type\":\"string\"}],\"primaryKey\":[\"index\"],\"pandas_version\":\"0.20.0\"}, \"data\": [{\"index\":\"row 1\",\"col 1\":\"a\",\"col 2\":\"b\"},{\"index\":\"row 2\",\"col 1\":\"c\",\"col 2\":\"d\"}]}'\n"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "**********************************************************************\nLine 164, in pandas.read_json\nFailed example:\n    df.to_json(orient='split')\nExpected:\n    '{\"columns\":[\"col 1\",\"col 2\"],\n      \"index\":[\"row 1\",\"row 2\"],\n      \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\nGot:\n    '{\"columns\":[\"col 1\",\"col 2\"],\"index\":[\"row 1\",\"row 2\"],\"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n**********************************************************************\nLine 194, in pandas.read_json\nFailed example:\n    df.to_json(orient='table')\nExpected:\n    '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                            {\"name\": \"col 1\", \"type\": \"string\"},\n                            {\"name\": \"col 2\", \"type\": \"string\"}],\n                    \"primaryKey\": \"index\",\n                    \"pandas_version\": \"0.20.0\"},\n        \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n                {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'\nGot:\n    '{\"schema\": {\"fields\":[{\"name\":\"index\",\"type\":\"string\"},{\"name\":\"col 1\",\"type\":\"string\"},{\"name\":\"col 2\",\"type\":\"string\"}],\"primaryKey\":[\"index\"],\"pandas_version\":\"0.20.0\"}, \"data\": [{\"index\":\"row 1\",\"col 1\":\"a\",\"col 2\":\"b\"},{\"index\":\"row 2\",\"col 1\":\"c\",\"col 2\":\"d\"}]}'\n", "in_api": true, "section": "", "subsection": "JSON", "shared_code_with": ""}, "pandas.io.json.json_normalize": {"type": "function", "docstring": "Normalize semi-structured JSON data into a flat table.\n\nParameters\n----------\ndata : dict or list of dicts\n    Unserialized JSON objects.\nrecord_path : str or list of str, default None\n    Path in each object to list of records. If not passed, data will be\n    assumed to be an array of records.\nmeta : list of paths (str or list of str), default None\n    Fields to use as metadata for each record in resulting table.\nmeta_prefix : str, default None\n    If True, prefix records with dotted (?) path, e.g. foo.bar.field if\n    meta is ['foo', 'bar'].\nrecord_prefix : str, default None\n    If True, prefix records with dotted (?) path, e.g. foo.bar.field if\n    path to records is ['foo', 'bar'].\nerrors : {'raise', 'ignore'}, default 'raise'\n    Configures error handling.\n\n    * 'ignore' : will ignore KeyError if keys listed in meta are not\n      always present.\n    * 'raise' : will raise KeyError if keys listed in meta are not\n      always present.\n\n    .. versionadded:: 0.20.0\n\nsep : str, default '.'\n    Nested records will generate names separated by sep.\n    e.g., for sep='.', {'foo': {'bar': 0}} -> foo.bar.\n\n    .. versionadded:: 0.20.0\n\nmax_level : int, default None\n    Max number of levels(depth of dict) to normalize.\n    if None, normalizes all levels.\n\n    .. versionadded:: 0.25.0\n\nReturns\n-------\nframe : DataFrame\nNormalize semi-structured JSON data into a flat table.\n\nExamples\n--------\n\n>>> from pandas.io.json import json_normalize\n>>> data = [{'id': 1, 'name': {'first': 'Coleen', 'last': 'Volk'}},\n...         {'name': {'given': 'Mose', 'family': 'Regner'}},\n...         {'id': 2, 'name': 'Faye Raker'}]\n>>> json_normalize(data)\n    id        name name.family name.first name.given name.last\n0  1.0         NaN         NaN     Coleen        NaN      Volk\n1  NaN         NaN      Regner        NaN       Mose       NaN\n2  2.0  Faye Raker         NaN        NaN        NaN       NaN\n\n>>> data = [{'id': 1,\n...          'name': \"Cole Volk\",\n...          'fitness': {'height': 130, 'weight': 60}},\n...         {'name': \"Mose Reg\",\n...          'fitness': {'height': 130, 'weight': 60}},\n...         {'id': 2, 'name': 'Faye Raker',\n...          'fitness': {'height': 130, 'weight': 60}}]\n>>> json_normalize(data, max_level=0)\n            fitness                 id        name\n0   {'height': 130, 'weight': 60}  1.0   Cole Volk\n1   {'height': 130, 'weight': 60}  NaN    Mose Reg\n2   {'height': 130, 'weight': 60}  2.0  Faye Raker\n\nNormalizes nested data upto level 1.\n\n>>> data = [{'id': 1,\n...          'name': \"Cole Volk\",\n...          'fitness': {'height': 130, 'weight': 60}},\n...         {'name': \"Mose Reg\",\n...          'fitness': {'height': 130, 'weight': 60}},\n...         {'id': 2, 'name': 'Faye Raker',\n...          'fitness': {'height': 130, 'weight': 60}}]\n>>> json_normalize(data, max_level=1)\n  fitness.height  fitness.weight   id    name\n0   130              60          1.0    Cole Volk\n1   130              60          NaN    Mose Reg\n2   130              60          2.0    Faye Raker\n\n>>> data = [{'state': 'Florida',\n...          'shortname': 'FL',\n...          'info': {'governor': 'Rick Scott'},\n...          'counties': [{'name': 'Dade', 'population': 12345},\n...                       {'name': 'Broward', 'population': 40000},\n...                       {'name': 'Palm Beach', 'population': 60000}]},\n...         {'state': 'Ohio',\n...          'shortname': 'OH',\n...          'info': {'governor': 'John Kasich'},\n...          'counties': [{'name': 'Summit', 'population': 1234},\n...                       {'name': 'Cuyahoga', 'population': 1337}]}]\n>>> result = json_normalize(data, 'counties', ['state', 'shortname',\n...                                            ['info', 'governor']])\n>>> result\n         name  population    state shortname info.governor\n0        Dade       12345   Florida    FL    Rick Scott\n1     Broward       40000   Florida    FL    Rick Scott\n2  Palm Beach       60000   Florida    FL    Rick Scott\n3      Summit        1234   Ohio       OH    John Kasich\n4    Cuyahoga        1337   Ohio       OH    John Kasich\n\n>>> data = {'A': [1, 2]}\n>>> json_normalize(data, 'A', record_prefix='Prefix.')\n    Prefix.0\n0          1\n1          2\n\nReturns normalized data with columns prefixed with the given string.", "deprecated": false, "file": "pandas/io/json/_normalize.py", "file_line": 114, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/json/_normalize.py#L114", "errors": [["RT03", "Return value has no description"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 53, in pandas.io.json.json_normalize\nFailed example:\n    json_normalize(data)\nExpected:\n        id        name name.family name.first name.given name.last\n    0  1.0         NaN         NaN     Coleen        NaN      Volk\n    1  NaN         NaN      Regner        NaN       Mose       NaN\n    2  2.0  Faye Raker         NaN        NaN        NaN       NaN\nGot:\n        id name.first name.last name.given name.family        name\n    0  1.0     Coleen      Volk        NaN         NaN         NaN\n    1  NaN        NaN       NaN       Mose      Regner         NaN\n    2  2.0        NaN       NaN        NaN         NaN  Faye Raker\n**********************************************************************\nLine 66, in pandas.io.json.json_normalize\nFailed example:\n    json_normalize(data, max_level=0)\nExpected:\n                fitness                 id        name\n    0   {'height': 130, 'weight': 60}  1.0   Cole Volk\n    1   {'height': 130, 'weight': 60}  NaN    Mose Reg\n    2   {'height': 130, 'weight': 60}  2.0  Faye Raker\nGot:\n        id        name                        fitness\n    0  1.0   Cole Volk  {'height': 130, 'weight': 60}\n    1  NaN    Mose Reg  {'height': 130, 'weight': 60}\n    2  2.0  Faye Raker  {'height': 130, 'weight': 60}\n**********************************************************************\nLine 81, in pandas.io.json.json_normalize\nFailed example:\n    json_normalize(data, max_level=1)\nExpected:\n      fitness.height  fitness.weight   id    name\n    0   130              60          1.0    Cole Volk\n    1   130              60          NaN    Mose Reg\n    2   130              60          2.0    Faye Raker\nGot:\n        id        name  fitness.height  fitness.weight\n    0  1.0   Cole Volk             130              60\n    1  NaN    Mose Reg             130              60\n    2  2.0  Faye Raker             130              60\n"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 53, in pandas.io.json.json_normalize\nFailed example:\n    json_normalize(data)\nExpected:\n        id        name name.family name.first name.given name.last\n    0  1.0         NaN         NaN     Coleen        NaN      Volk\n    1  NaN         NaN      Regner        NaN       Mose       NaN\n    2  2.0  Faye Raker         NaN        NaN        NaN       NaN\nGot:\n        id name.first name.last name.given name.family        name\n    0  1.0     Coleen      Volk        NaN         NaN         NaN\n    1  NaN        NaN       NaN       Mose      Regner         NaN\n    2  2.0        NaN       NaN        NaN         NaN  Faye Raker\n**********************************************************************\nLine 66, in pandas.io.json.json_normalize\nFailed example:\n    json_normalize(data, max_level=0)\nExpected:\n                fitness                 id        name\n    0   {'height': 130, 'weight': 60}  1.0   Cole Volk\n    1   {'height': 130, 'weight': 60}  NaN    Mose Reg\n    2   {'height': 130, 'weight': 60}  2.0  Faye Raker\nGot:\n        id        name                        fitness\n    0  1.0   Cole Volk  {'height': 130, 'weight': 60}\n    1  NaN    Mose Reg  {'height': 130, 'weight': 60}\n    2  2.0  Faye Raker  {'height': 130, 'weight': 60}\n**********************************************************************\nLine 81, in pandas.io.json.json_normalize\nFailed example:\n    json_normalize(data, max_level=1)\nExpected:\n      fitness.height  fitness.weight   id    name\n    0   130              60          1.0    Cole Volk\n    1   130              60          NaN    Mose Reg\n    2   130              60          2.0    Faye Raker\nGot:\n        id        name  fitness.height  fitness.weight\n    0  1.0   Cole Volk             130              60\n    1  NaN    Mose Reg             130              60\n    2  2.0  Faye Raker             130              60\n", "in_api": true, "section": "", "subsection": "JSON", "shared_code_with": ""}, "pandas.io.json.build_table_schema": {"type": "function", "docstring": "Create a Table schema from ``data``.\n\nParameters\n----------\ndata : Series, DataFrame\nindex : bool, default True\n    Whether to include ``data.index`` in the schema.\nprimary_key : bool or None, default True\n    column names to designate as the primary key.\n    The default `None` will set `'primaryKey'` to the index\n    level or levels if the index is unique.\nversion : bool, default True\n    Whether to include a field `pandas_version` with the version\n    of pandas that generated the schema.\n\nReturns\n-------\nschema : dict\n\nNotes\n-----\nSee `_as_json_table_type` for conversion types.\nTimedeltas as converted to ISO8601 duration format with\n9 decimal places after the seconds field for nanosecond precision.\n\nCategoricals are converted to the `any` dtype, and use the `enum` field\nconstraint to list the allowed values. The `ordered` attribute is included\nin an `ordered` field.\n\nExamples\n--------\n>>> df = pd.DataFrame(\n...     {'A': [1, 2, 3],\n...      'B': ['a', 'b', 'c'],\n...      'C': pd.date_range('2016-01-01', freq='d', periods=3),\n...     }, index=pd.Index(range(3), name='idx'))\n>>> build_table_schema(df)\n{'fields': [{'name': 'idx', 'type': 'integer'},\n{'name': 'A', 'type': 'integer'},\n{'name': 'B', 'type': 'string'},\n{'name': 'C', 'type': 'datetime'}],\n'pandas_version': '0.20.0',\n'primaryKey': ['idx']}", "deprecated": false, "file": "pandas/io/json/_table_schema.py", "file_line": 192, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/json/_table_schema.py#L192", "errors": [["PR07", "Parameter \"data\" has no description"], ["PR08", "Parameter \"primary_key\" description should start with a capital letter"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 38, in pandas.io.json.build_table_schema\nFailed example:\n    build_table_schema(df)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.io.json.build_table_schema[1]>\", line 1, in <module>\n        build_table_schema(df)\n    NameError: name 'build_table_schema' is not defined\n"], ["EX03", "flake8 error: E124 closing bracket does not match visual indentation"], ["EX03", "flake8 error: F821 undefined name 'build_table_schema'"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 38, in pandas.io.json.build_table_schema\nFailed example:\n    build_table_schema(df)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.io.json.build_table_schema[1]>\", line 1, in <module>\n        build_table_schema(df)\n    NameError: name 'build_table_schema' is not defined\n", "in_api": true, "section": "", "subsection": "JSON", "shared_code_with": ""}, "pandas.read_html": {"type": "function", "docstring": "Read HTML tables into a ``list`` of ``DataFrame`` objects.\n\nParameters\n----------\nio : str, path object or file-like object\n    A URL, a file-like object, or a raw string containing HTML. Note that\n    lxml only accepts the http, ftp and file url protocols. If you have a\n    URL that starts with ``'https'`` you might try removing the ``'s'``.\n\nmatch : str or compiled regular expression, optional\n    The set of tables containing text matching this regex or string will be\n    returned. Unless the HTML is extremely simple you will probably need to\n    pass a non-empty string here. Defaults to '.+' (match any non-empty\n    string). The default value will return all tables contained on a page.\n    This value is converted to a regular expression so that there is\n    consistent behavior between Beautiful Soup and lxml.\n\nflavor : str or None, container of strings\n    The parsing engine to use. 'bs4' and 'html5lib' are synonymous with\n    each other, they are both there for backwards compatibility. The\n    default of ``None`` tries to use ``lxml`` to parse and if that fails it\n    falls back on ``bs4`` + ``html5lib``.\n\nheader : int or list-like or None, optional\n    The row (or list of rows for a :class:`~pandas.MultiIndex`) to use to\n    make the columns headers.\n\nindex_col : int or list-like or None, optional\n    The column (or list of columns) to use to create the index.\n\nskiprows : int or list-like or slice or None, optional\n    0-based. Number of rows to skip after parsing the column integer. If a\n    sequence of integers or a slice is given, will skip the rows indexed by\n    that sequence.  Note that a single element sequence means 'skip the nth\n    row' whereas an integer means 'skip n rows'.\n\nattrs : dict or None, optional\n    This is a dictionary of attributes that you can pass to use to identify\n    the table in the HTML. These are not checked for validity before being\n    passed to lxml or Beautiful Soup. However, these attributes must be\n    valid HTML table attributes to work correctly. For example, ::\n\n        attrs = {'id': 'table'}\n\n    is a valid attribute dictionary because the 'id' HTML tag attribute is\n    a valid HTML attribute for *any* HTML tag as per `this document\n    <http://www.w3.org/TR/html-markup/global-attributes.html>`__. ::\n\n        attrs = {'asdf': 'table'}\n\n    is *not* a valid attribute dictionary because 'asdf' is not a valid\n    HTML attribute even if it is a valid XML attribute.  Valid HTML 4.01\n    table attributes can be found `here\n    <http://www.w3.org/TR/REC-html40/struct/tables.html#h-11.2>`__. A\n    working draft of the HTML 5 spec can be found `here\n    <http://www.w3.org/TR/html-markup/table.html>`__. It contains the\n    latest information on table attributes for the modern web.\n\nparse_dates : bool, optional\n    See :func:`~read_csv` for more details.\n\nthousands : str, optional\n    Separator to use to parse thousands. Defaults to ``','``.\n\nencoding : str or None, optional\n    The encoding used to decode the web page. Defaults to ``None``.``None``\n    preserves the previous encoding behavior, which depends on the\n    underlying parser library (e.g., the parser library will try to use\n    the encoding provided by the document).\n\ndecimal : str, default '.'\n    Character to recognize as decimal point (e.g. use ',' for European\n    data).\n\nconverters : dict, default None\n    Dict of functions for converting values in certain columns. Keys can\n    either be integers or column labels, values are functions that take one\n    input argument, the cell (not column) content, and return the\n    transformed content.\n\nna_values : iterable, default None\n    Custom NA values\n\nkeep_default_na : bool, default True\n    If na_values are specified and keep_default_na is False the default NaN\n    values are overridden, otherwise they're appended to\n\ndisplayed_only : bool, default True\n    Whether elements with \"display: none\" should be parsed\n\nReturns\n-------\ndfs : list of DataFrames\n\nSee Also\n--------\nread_csv\n\nNotes\n-----\nBefore using this function you should read the :ref:`gotchas about the\nHTML parsing libraries <io.html.gotchas>`.\n\nExpect to do some cleanup after you call this function. For example, you\nmight need to manually assign column names if the column names are\nconverted to NaN when you pass the `header=0` argument. We try to assume as\nlittle as possible about the structure of the table and push the\nidiosyncrasies of the HTML contained in the table to the user.\n\nThis function searches for ``<table>`` elements and only for ``<tr>``\nand ``<th>`` rows and ``<td>`` elements within each ``<tr>`` or ``<th>``\nelement in the table. ``<td>`` stands for \"table data\". This function\nattempts to properly handle ``colspan`` and ``rowspan`` attributes.\nIf the function has a ``<thead>`` argument, it is used to construct\nthe header, otherwise the function attempts to find the header within\nthe body (by putting rows with only ``<th>`` elements into the header).\n\n    .. versionadded:: 0.21.0\n\nSimilar to :func:`~read_csv` the `header` argument is applied\n**after** `skiprows` is applied.\n\nThis function will *always* return a list of :class:`DataFrame` *or*\nit will fail, e.g., it will *not* return an empty list.\n\nExamples\n--------\nSee the :ref:`read_html documentation in the IO section of the docs\n<io.read_html>` for some examples of reading in HTML tables.", "deprecated": false, "file": "pandas/io/html.py", "file_line": 923, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/html.py#L923", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["PR06", "Parameter \"flavor\" type should use \"str\" instead of \"string\""], ["PR08", "Parameter \"skiprows\" description should start with a capital letter"], ["PR09", "Parameter \"na_values\" description should finish with \".\""], ["PR09", "Parameter \"keep_default_na\" description should finish with \".\""], ["PR09", "Parameter \"displayed_only\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"read_csv\" reference"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "HTML", "shared_code_with": ""}, "pandas.read_hdf": {"type": "function", "docstring": "Read from the store, close it if we opened it.\n\nRetrieve pandas object stored in file, optionally based on where\ncriteria\n\nParameters\n----------\npath_or_buf : str, path object, pandas.HDFStore or file-like object\n    Any valid string path is acceptable. The string could be a URL. Valid\n    URL schemes include http, ftp, s3, and file. For file URLs, a host is\n    expected. A local file could be: ``file://localhost/path/to/table.h5``.\n\n    If you want to pass in a path object, pandas accepts any\n    ``os.PathLike``.\n\n    Alternatively, pandas accepts an open :class:`pandas.HDFStore` object.\n\n    By file-like object, we refer to objects with a ``read()`` method,\n    such as a file handler (e.g. via builtin ``open`` function)\n    or ``StringIO``.\n\n    .. versionadded:: 0.21.0 support for __fspath__ protocol.\n\nkey : object, optional\n    The group identifier in the store. Can be omitted if the HDF file\n    contains a single pandas object.\nmode : {'r', 'r+', 'a'}, optional\n    Mode to use when opening the file. Ignored if path_or_buf is a\n    :class:`pandas.HDFStore`. Default is 'r'.\nwhere : list, optional\n    A list of Term (or convertible) objects.\nstart : int, optional\n    Row number to start selection.\nstop  : int, optional\n    Row number to stop selection.\ncolumns : list, optional\n    A list of columns names to return.\niterator : bool, optional\n    Return an iterator object.\nchunksize : int, optional\n    Number of rows to include in an iteration when using an iterator.\nerrors : str, default 'strict'\n    Specifies how encoding and decoding errors are to be handled.\n    See the errors argument for :func:`open` for a full list\n    of options.\n**kwargs\n    Additional keyword arguments passed to HDFStore.\n\nReturns\n-------\nitem : object\n    The selected object. Return type depends on the object stored.\n\nSee Also\n--------\nDataFrame.to_hdf : Write a HDF file from a DataFrame.\nHDFStore : Low-level access to HDF files.\n\nExamples\n--------\n>>> df = pd.DataFrame([[1, 1.0, 'a']], columns=['x', 'y', 'z'])\n>>> df.to_hdf('./store.h5', 'data')\n>>> reread = pd.read_hdf('./store.h5')", "deprecated": false, "file": "pandas/io/pytables.py", "file_line": 283, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/pytables.py#L283", "errors": [["PR02", "Unknown parameters {columns, errors, iterator, start, chunksize, where, stop }"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "HDFStore: PyTables (HDF5)", "shared_code_with": ""}, "pandas.HDFStore.put": {"type": "function", "docstring": "Store object in HDFStore\n\nParameters\n----------\nkey      : object\nvalue    : {Series, DataFrame}\nformat   : 'fixed(f)|table(t)', default is 'fixed'\n    fixed(f) : Fixed format\n               Fast writing/reading. Not-appendable, nor searchable\n    table(t) : Table format\n               Write as a PyTables Table structure which may perform\n               worse but allow more flexible operations like searching\n               / selecting subsets of the data\nappend   : boolean, default False\n    This will force Table format, append the input data to the\n    existing.\ndata_columns : list of columns to create as data columns, or True to\n    use all columns. See `here\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#query-via-data-columns>`__.\nencoding : default None, provide an encoding for strings\ndropna   : boolean, default False, do not write an ALL nan row to\n    the store settable by the option 'io.hdf.dropna_table'", "deprecated": false, "file": "pandas/io/pytables.py", "file_line": 930, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/pytables.py#L930", "errors": [["SS03", "Summary does not end with a period"], ["PR01", "Parameters {format, append, **kwargs, value, key} not documented"], ["PR02", "Unknown parameters {append  , data_columns, key     , encoding, format  , value   , dropna  }"], ["PR07", "Parameter \"key     \" has no description"], ["PR07", "Parameter \"value   \" has no description"], ["PR08", "Parameter \"format  \" description should start with a capital letter"], ["PR09", "Parameter \"format  \" description should finish with \".\""], ["PR06", "Parameter \"append  \" type should use \"bool\" instead of \"boolean\""], ["PR08", "Parameter \"data_columns\" description should start with a capital letter"], ["PR06", "Parameter \"encoding\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"encoding\" has no description"], ["PR06", "Parameter \"dropna  \" type should use \"bool\" instead of \"boolean\""], ["PR08", "Parameter \"dropna  \" description should start with a capital letter"], ["PR09", "Parameter \"dropna  \" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "HDFStore: PyTables (HDF5)", "shared_code_with": ""}, "pandas.HDFStore.append": {"type": "function", "docstring": "Append to Table in file. Node must already exist and be Table\nformat.\n\nParameters\n----------\nkey : object\nvalue : {Series, DataFrame}\nformat : 'table' is the default\n    table(t) : table format\n               Write as a PyTables Table structure which may perform\n               worse but allow more flexible operations like searching\n               / selecting subsets of the data\nappend       : boolean, default True, append the input data to the\n    existing\ndata_columns :  list of columns, or True, default None\n    List of columns to create as indexed data columns for on-disk\n    queries, or True to use all columns. By default only the axes\n    of the object are indexed. See `here\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#query-via-data-columns>`__.\nmin_itemsize : dict of columns that specify minimum string sizes\nnan_rep      : string to use as string nan representation\nchunksize    : size to chunk the writing\nexpectedrows : expected TOTAL row size of this table\nencoding     : default None, provide an encoding for strings\ndropna       : boolean, default False, do not write an ALL nan row to\n    the store settable by the option 'io.hdf.dropna_table'\n\nNotes\n-----\nDoes *not* check if data being appended overlaps with existing\ndata in the table, so be careful", "deprecated": false, "file": "pandas/io/pytables.py", "file_line": 1012, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/pytables.py#L1012", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, columns, append, dropna} not documented"], ["PR02", "Unknown parameters {min_itemsize, nan_rep     , data_columns, chunksize   , expectedrows, dropna      , encoding    , append      }"], ["PR07", "Parameter \"key\" has no description"], ["PR07", "Parameter \"value\" has no description"], ["PR08", "Parameter \"format\" description should start with a capital letter"], ["PR09", "Parameter \"format\" description should finish with \".\""], ["PR06", "Parameter \"append      \" type should use \"bool\" instead of \"boolean\""], ["PR08", "Parameter \"append      \" description should start with a capital letter"], ["PR09", "Parameter \"append      \" description should finish with \".\""], ["PR06", "Parameter \"min_itemsize\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"min_itemsize\" has no description"], ["PR06", "Parameter \"nan_rep     \" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"nan_rep     \" has no description"], ["PR07", "Parameter \"chunksize   \" has no description"], ["PR07", "Parameter \"expectedrows\" has no description"], ["PR06", "Parameter \"encoding    \" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"encoding    \" has no description"], ["PR06", "Parameter \"dropna      \" type should use \"bool\" instead of \"boolean\""], ["PR08", "Parameter \"dropna      \" description should start with a capital letter"], ["PR09", "Parameter \"dropna      \" description should finish with \".\""]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "HDFStore: PyTables (HDF5)", "shared_code_with": ""}, "pandas.HDFStore.get": {"type": "function", "docstring": "Retrieve pandas object stored in file\n\nParameters\n----------\nkey : object\n\nReturns\n-------\nobj : same type as object stored in file", "deprecated": false, "file": "pandas/io/pytables.py", "file_line": 704, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/pytables.py#L704", "errors": [["SS03", "Summary does not end with a period"], ["PR07", "Parameter \"key\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "HDFStore: PyTables (HDF5)", "shared_code_with": ""}, "pandas.HDFStore.select": {"type": "function", "docstring": "Retrieve pandas object stored in file, optionally based on where\ncriteria\n\nParameters\n----------\nkey : object\nwhere : list of Term (or convertible) objects, optional\nstart : integer (defaults to None), row number to start selection\nstop  : integer (defaults to None), row number to stop selection\ncolumns : a list of columns that if not None, will limit the return\n    columns\niterator : boolean, return an iterator, default False\nchunksize : nrows to include in iteration, return an iterator\nauto_close : boolean, should automatically close the store when\n    finished, default is False\n\nReturns\n-------\nThe selected object", "deprecated": false, "file": "pandas/io/pytables.py", "file_line": 721, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/pytables.py#L721", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, stop} not documented"], ["PR02", "Unknown parameters {stop }"], ["PR07", "Parameter \"key\" has no description"], ["PR07", "Parameter \"where\" has no description"], ["PR06", "Parameter \"start\" type should use \"int\" instead of \"integer\""], ["PR07", "Parameter \"start\" has no description"], ["PR06", "Parameter \"stop \" type should use \"int\" instead of \"integer\""], ["PR07", "Parameter \"stop \" has no description"], ["PR08", "Parameter \"columns\" description should start with a capital letter"], ["PR09", "Parameter \"columns\" description should finish with \".\""], ["PR06", "Parameter \"iterator\" type should use \"bool\" instead of \"boolean\""], ["PR07", "Parameter \"iterator\" has no description"], ["PR07", "Parameter \"chunksize\" has no description"], ["PR06", "Parameter \"auto_close\" type should use \"bool\" instead of \"boolean\""], ["PR08", "Parameter \"auto_close\" description should start with a capital letter"], ["PR09", "Parameter \"auto_close\" description should finish with \".\""], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "HDFStore: PyTables (HDF5)", "shared_code_with": ""}, "pandas.HDFStore.info": {"type": "function", "docstring": "Print detailed information on the store.\n\n.. versionadded:: 0.21.0\n\nReturns\n-------\nstr", "deprecated": false, "file": "pandas/io/pytables.py", "file_line": 1315, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/pytables.py#L1315", "errors": [["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "HDFStore: PyTables (HDF5)", "shared_code_with": ""}, "pandas.HDFStore.keys": {"type": "function", "docstring": "Return a (potentially unordered) list of the keys corresponding to the\nobjects stored in the HDFStore. These are ABSOLUTE path-names (e.g.\nhave the leading '/'\n\nReturns\n-------\nlist", "deprecated": false, "file": "pandas/io/pytables.py", "file_line": 565, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/pytables.py#L565", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "HDFStore: PyTables (HDF5)", "shared_code_with": ""}, "pandas.HDFStore.groups": {"type": "function", "docstring": "return a list of all the top-level nodes (that are not themselves a\npandas storage object)\n\nReturns\n-------\nlist", "deprecated": false, "file": "pandas/io/pytables.py", "file_line": 1167, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/pytables.py#L1167", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["SS02", "Summary does not start with a capital letter"], ["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "HDFStore: PyTables (HDF5)", "shared_code_with": ""}, "pandas.HDFStore.walk": {"type": "function", "docstring": "Walk the pytables group hierarchy for pandas objects\n\nThis generator will yield the group path, subgroups and pandas object\nnames for each group.\nAny non-pandas PyTables objects that are not a group will be ignored.\n\nThe `where` group itself is listed first (preorder), then each of its\nchild groups (following an alphanumerical order) is also traversed,\nfollowing the same procedure.\n\n.. versionadded:: 0.24.0\n\nParameters\n----------\nwhere : str, optional\n    Group where to start walking.\n    If not supplied, the root group is used.\n\nYields\n------\npath : str\n    Full path to a group (without trailing '/')\ngroups : list of str\n    names of the groups contained in `path`\nleaves : list of str\n    names of the pandas objects contained in `path`", "deprecated": false, "file": "pandas/io/pytables.py", "file_line": 1190, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/pytables.py#L1190", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "HDFStore: PyTables (HDF5)", "shared_code_with": ""}, "pandas.read_feather": {"type": "function", "docstring": "Load a feather-format object from the file path.\n\n.. versionadded:: 0.20.0\n\nParameters\n----------\npath : str, path object or file-like object\n    Any valid string path is acceptable. The string could be a URL. Valid\n    URL schemes include http, ftp, s3, and file. For file URLs, a host is\n    expected. A local file could be:\n    ``file://localhost/path/to/table.feather``.\n\n    If you want to pass in a path object, pandas accepts any\n    ``os.PathLike``.\n\n    By file-like object, we refer to objects with a ``read()`` method,\n    such as a file handler (e.g. via builtin ``open`` function)\n    or ``StringIO``.\ncolumns : sequence, default None\n    If not provided, all columns are read.\n\n    .. versionadded:: 0.24.0\nnthreads : int, default 1\n    Number of CPU threads to use when reading to pandas.DataFrame.\n\n   .. versionadded:: 0.21.0\n   .. deprecated:: 0.24.0\nuse_threads : bool, default True\n    Whether to parallelize reading using multiple threads.\n\n   .. versionadded:: 0.24.0\n\nReturns\n-------\ntype of object stored in file", "deprecated": false, "file": "pandas/util/_decorators.py", "file_line": 69, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/_decorators.py#L69", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {path, use_threads, nthreads, columns}"], ["PR08", "Parameter \"nthreads\" description should start with a capital letter"], ["PR08", "Parameter \"use_threads\" description should start with a capital letter"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Feather", "shared_code_with": ""}, "pandas.read_parquet": {"type": "function", "docstring": "Load a parquet object from the file path, returning a DataFrame.\n\n.. versionadded:: 0.21.0\n\nParameters\n----------\npath : str, path object or file-like object\n    Any valid string path is acceptable. The string could be a URL. Valid\n    URL schemes include http, ftp, s3, and file. For file URLs, a host is\n    expected. A local file could be:\n    ``file://localhost/path/to/table.parquet``.\n\n    If you want to pass in a path object, pandas accepts any\n    ``os.PathLike``.\n\n    By file-like object, we refer to objects with a ``read()`` method,\n    such as a file handler (e.g. via builtin ``open`` function)\n    or ``StringIO``.\nengine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'\n    Parquet library to use. If 'auto', then the option\n    ``io.parquet.engine`` is used. The default ``io.parquet.engine``\n    behavior is to try 'pyarrow', falling back to 'fastparquet' if\n    'pyarrow' is unavailable.\ncolumns : list, default=None\n    If not None, only these columns will be read from the file.\n\n    .. versionadded:: 0.21.1\n**kwargs\n    Any additional kwargs are passed to the engine.\n\nReturns\n-------\nDataFrame", "deprecated": false, "file": "pandas/io/parquet.py", "file_line": 258, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/parquet.py#L258", "errors": [["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Parquet", "shared_code_with": ""}, "pandas.read_sas": {"type": "function", "docstring": "Read SAS files stored as either XPORT or SAS7BDAT format files.\n\nParameters\n----------\nfilepath_or_buffer : str, path object or file-like object\n    Any valid string path is acceptable. The string could be a URL. Valid\n    URL schemes include http, ftp, s3, and file. For file URLs, a host is\n    expected. A local file could be:\n    ``file://localhost/path/to/table.sas``.\n\n    If you want to pass in a path object, pandas accepts any\n    ``os.PathLike``.\n\n    By file-like object, we refer to objects with a ``read()`` method,\n    such as a file handler (e.g. via builtin ``open`` function)\n    or ``StringIO``.\nformat : string {'xport', 'sas7bdat'} or None\n    If None, file format is inferred from file extension. If 'xport' or\n    'sas7bdat', uses the corresponding format.\nindex : identifier of index column, defaults to None\n    Identifier of column that should be used as index of the DataFrame.\nencoding : string, default is None\n    Encoding for text data.  If None, text data are stored as raw bytes.\nchunksize : int\n    Read file `chunksize` lines at a time, returns iterator.\niterator : bool, defaults to False\n    If True, returns an iterator for reading the file incrementally.\n\nReturns\n-------\nDataFrame if iterator=False and chunksize=None, else SAS7BDATReader\nor XportReader", "deprecated": false, "file": "pandas/io/sas/sasreader.py", "file_line": 7, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/sas/sasreader.py#L7", "errors": [["PR06", "Parameter \"format\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"encoding\" type should use \"str\" instead of \"string\""], ["RT03", "Return value has no description"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "SAS", "shared_code_with": ""}, "pandas.read_spss": {"type": "function", "docstring": "Load an SPSS file from the file path, returning a DataFrame.\n\n.. versionadded:: 0.25.0\n\nParameters\n----------\npath : string or Path\n    File path\nusecols : list-like, optional\n    Return a subset of the columns. If None, return all columns.\nconvert_categoricals : bool, default is True\n    Convert categorical columns into pd.Categorical.\n\nReturns\n-------\nDataFrame", "deprecated": false, "file": "pandas/io/spss.py", "file_line": 10, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/spss.py#L10", "errors": [["PR06", "Parameter \"path\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"path\" description should finish with \".\""], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "SPSS", "shared_code_with": ""}, "pandas.read_sql_table": {"type": "function", "docstring": "Read SQL database table into a DataFrame.\n\nGiven a table name and a SQLAlchemy connectable, returns a DataFrame.\nThis function does not support DBAPI connections.\n\nParameters\n----------\ntable_name : str\n    Name of SQL table in database.\ncon : SQLAlchemy connectable or str\n    A database URI could be provided as as str.\n    SQLite DBAPI connection mode not supported.\nschema : str, default None\n    Name of SQL schema in database to query (if database flavor\n    supports this). Uses default schema if None (default).\nindex_col : str or list of str, optional, default: None\n    Column(s) to set as index(MultiIndex).\ncoerce_float : bool, default True\n    Attempts to convert values of non-string, non-numeric objects (like\n    decimal.Decimal) to floating point. Can result in loss of Precision.\nparse_dates : list or dict, default None\n    - List of column names to parse as dates.\n    - Dict of ``{column_name: format string}`` where format string is\n      strftime compatible in case of parsing string times or is one of\n      (D, s, ns, ms, us) in case of parsing integer timestamps.\n    - Dict of ``{column_name: arg dict}``, where the arg dict corresponds\n      to the keyword arguments of :func:`pandas.to_datetime`\n      Especially useful with databases without native Datetime support,\n      such as SQLite.\ncolumns : list, default None\n    List of column names to select from SQL table.\nchunksize : int, default None\n    If specified, returns an iterator where `chunksize` is the number of\n    rows to include in each chunk.\n\nReturns\n-------\nDataFrame\n    A SQL table is returned as two-dimensional data structure with labeled\n    axes.\n\nSee Also\n--------\nread_sql_query : Read SQL query into a DataFrame.\nread_sql : Read SQL query or database table into a DataFrame.\n\nNotes\n-----\nAny datetime values with time zone information will be converted to UTC.\n\nExamples\n--------\n>>> pd.read_sql_table('table_name', 'postgres:///db_name')  # doctest:+SKIP", "deprecated": false, "file": "pandas/io/sql.py", "file_line": 167, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/sql.py#L167", "errors": [["PR08", "Parameter \"parse_dates\" description should start with a capital letter"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "SQL", "shared_code_with": ""}, "pandas.read_sql_query": {"type": "function", "docstring": "Read SQL query into a DataFrame.\n\nReturns a DataFrame corresponding to the result set of the query\nstring. Optionally provide an `index_col` parameter to use one of the\ncolumns as the index, otherwise default integer index will be used.\n\nParameters\n----------\nsql : string SQL query or SQLAlchemy Selectable (select or text object)\n    SQL query to be executed.\ncon : SQLAlchemy connectable(engine/connection), database string URI,\n    or sqlite3 DBAPI2 connection\n    Using SQLAlchemy makes it possible to use any DB supported by that\n    library.\n    If a DBAPI2 object, only sqlite3 is supported.\nindex_col : string or list of strings, optional, default: None\n    Column(s) to set as index(MultiIndex).\ncoerce_float : boolean, default True\n    Attempts to convert values of non-string, non-numeric objects (like\n    decimal.Decimal) to floating point. Useful for SQL result sets.\nparams : list, tuple or dict, optional, default: None\n    List of parameters to pass to execute method.  The syntax used\n    to pass parameters is database driver dependent. Check your\n    database driver documentation for which of the five syntax styles,\n    described in PEP 249's paramstyle, is supported.\n    Eg. for psycopg2, uses %(name)s so use params={'name' : 'value'}\nparse_dates : list or dict, default: None\n    - List of column names to parse as dates.\n    - Dict of ``{column_name: format string}`` where format string is\n      strftime compatible in case of parsing string times, or is one of\n      (D, s, ns, ms, us) in case of parsing integer timestamps.\n    - Dict of ``{column_name: arg dict}``, where the arg dict corresponds\n      to the keyword arguments of :func:`pandas.to_datetime`\n      Especially useful with databases without native Datetime support,\n      such as SQLite.\nchunksize : int, default None\n    If specified, return an iterator where `chunksize` is the number of\n    rows to include in each chunk.\n\nReturns\n-------\nDataFrame\n\nSee Also\n--------\nread_sql_table : Read SQL database table into a DataFrame.\nread_sql\n\nNotes\n-----\nAny datetime values with time zone information parsed via the `parse_dates`\nparameter will be converted to UTC.", "deprecated": false, "file": "pandas/io/sql.py", "file_line": 263, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/sql.py#L263", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["PR06", "Parameter \"sql\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"con\" type should use \"str\" instead of \"string\""], ["PR08", "Parameter \"con\" description should start with a capital letter"], ["PR06", "Parameter \"index_col\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"coerce_float\" type should use \"bool\" instead of \"boolean\""], ["PR09", "Parameter \"params\" description should finish with \".\""], ["PR08", "Parameter \"parse_dates\" description should start with a capital letter"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"read_sql\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "SQL", "shared_code_with": ""}, "pandas.read_sql": {"type": "function", "docstring": "Read SQL query or database table into a DataFrame.\n\nThis function is a convenience wrapper around ``read_sql_table`` and\n``read_sql_query`` (for backward compatibility). It will delegate\nto the specific function depending on the provided input. A SQL query\nwill be routed to ``read_sql_query``, while a database table name will\nbe routed to ``read_sql_table``. Note that the delegated function might\nhave more specific notes about their functionality not listed here.\n\nParameters\n----------\nsql : string or SQLAlchemy Selectable (select or text object)\n    SQL query to be executed or a table name.\ncon : SQLAlchemy connectable (engine/connection) or database string URI\n    or DBAPI2 connection (fallback mode)\n\n    Using SQLAlchemy makes it possible to use any DB supported by that\n    library. If a DBAPI2 object, only sqlite3 is supported.\nindex_col : string or list of strings, optional, default: None\n    Column(s) to set as index(MultiIndex).\ncoerce_float : boolean, default True\n    Attempts to convert values of non-string, non-numeric objects (like\n    decimal.Decimal) to floating point, useful for SQL result sets.\nparams : list, tuple or dict, optional, default: None\n    List of parameters to pass to execute method.  The syntax used\n    to pass parameters is database driver dependent. Check your\n    database driver documentation for which of the five syntax styles,\n    described in PEP 249's paramstyle, is supported.\n    Eg. for psycopg2, uses %(name)s so use params={'name' : 'value'}\nparse_dates : list or dict, default: None\n    - List of column names to parse as dates.\n    - Dict of ``{column_name: format string}`` where format string is\n      strftime compatible in case of parsing string times, or is one of\n      (D, s, ns, ms, us) in case of parsing integer timestamps.\n    - Dict of ``{column_name: arg dict}``, where the arg dict corresponds\n      to the keyword arguments of :func:`pandas.to_datetime`\n      Especially useful with databases without native Datetime support,\n      such as SQLite.\ncolumns : list, default: None\n    List of column names to select from SQL table (only used when reading\n    a table).\nchunksize : int, default None\n    If specified, return an iterator where `chunksize` is the\n    number of rows to include in each chunk.\n\nReturns\n-------\nDataFrame\n\nSee Also\n--------\nread_sql_table : Read SQL database table into a DataFrame.\nread_sql_query : Read SQL query into a DataFrame.", "deprecated": false, "file": "pandas/io/sql.py", "file_line": 336, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/sql.py#L336", "errors": [["PR06", "Parameter \"sql\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"con\" type should use \"str\" instead of \"string\""], ["PR08", "Parameter \"con\" description should start with a capital letter"], ["PR06", "Parameter \"index_col\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"coerce_float\" type should use \"bool\" instead of \"boolean\""], ["PR09", "Parameter \"params\" description should finish with \".\""], ["PR08", "Parameter \"parse_dates\" description should start with a capital letter"], ["RT03", "Return value has no description"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "SQL", "shared_code_with": ""}, "pandas.read_gbq": {"type": "function", "docstring": "Load data from Google BigQuery.\n\nThis function requires the `pandas-gbq package\n<https://pandas-gbq.readthedocs.io>`__.\n\nSee the `How to authenticate with Google BigQuery\n<https://pandas-gbq.readthedocs.io/en/latest/howto/authentication.html>`__\nguide for authentication instructions.\n\nParameters\n----------\nquery : str\n    SQL-Like Query to return data values.\nproject_id : str, optional\n    Google BigQuery Account project ID. Optional when available from\n    the environment.\nindex_col : str, optional\n    Name of result column to use for index in results DataFrame.\ncol_order : list(str), optional\n    List of BigQuery column names in the desired order for results\n    DataFrame.\nreauth : boolean, default False\n    Force Google BigQuery to re-authenticate the user. This is useful\n    if multiple accounts are used.\nauth_local_webserver : boolean, default False\n    Use the `local webserver flow`_ instead of the `console flow`_\n    when getting user credentials.\n\n    .. _local webserver flow:\n        http://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_local_server\n    .. _console flow:\n        http://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_console\n\n    *New in version 0.2.0 of pandas-gbq*.\ndialect : str, default 'legacy'\n    Note: The default value is changing to 'standard' in a future verion.\n\n    SQL syntax dialect to use. Value can be one of:\n\n    ``'legacy'``\n        Use BigQuery's legacy SQL dialect. For more information see\n        `BigQuery Legacy SQL Reference\n        <https://cloud.google.com/bigquery/docs/reference/legacy-sql>`__.\n    ``'standard'``\n        Use BigQuery's standard SQL, which is\n        compliant with the SQL 2011 standard. For more information\n        see `BigQuery Standard SQL Reference\n        <https://cloud.google.com/bigquery/docs/reference/standard-sql/>`__.\n\n    .. versionchanged:: 0.24.0\nlocation : str, optional\n    Location where the query job should run. See the `BigQuery locations\n    documentation\n    <https://cloud.google.com/bigquery/docs/dataset-locations>`__ for a\n    list of available locations. The location must match that of any\n    datasets used in the query.\n\n    *New in version 0.5.0 of pandas-gbq*.\nconfiguration : dict, optional\n    Query config parameters for job processing.\n    For example:\n\n        configuration = {'query': {'useQueryCache': False}}\n\n    For more information see `BigQuery REST API Reference\n    <https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs#configuration.query>`__.\ncredentials : google.auth.credentials.Credentials, optional\n    Credentials for accessing Google APIs. Use this parameter to override\n    default credentials, such as to use Compute Engine\n    :class:`google.auth.compute_engine.Credentials` or Service Account\n    :class:`google.oauth2.service_account.Credentials` directly.\n\n    *New in version 0.8.0 of pandas-gbq*.\n\n    .. versionadded:: 0.24.0\nuse_bqstorage_api : bool, default False\n    Use the `BigQuery Storage API\n    <https://cloud.google.com/bigquery/docs/reference/storage/>`__ to\n    download query results quickly, but at an increased cost. To use this\n    API, first `enable it in the Cloud Console\n    <https://console.cloud.google.com/apis/library/bigquerystorage.googleapis.com>`__.\n    You must also have the `bigquery.readsessions.create\n    <https://cloud.google.com/bigquery/docs/access-control#roles>`__\n    permission on the project you are billing queries to.\n\n    This feature requires version 0.10.0 or later of the ``pandas-gbq``\n    package. It also requires the ``google-cloud-bigquery-storage`` and\n    ``fastavro`` packages.\n\n    .. versionadded:: 0.25.0\nprivate_key : str, deprecated\n    Deprecated in pandas-gbq version 0.8.0. Use the ``credentials``\n    parameter and\n    :func:`google.oauth2.service_account.Credentials.from_service_account_info`\n    or\n    :func:`google.oauth2.service_account.Credentials.from_service_account_file`\n    instead.\n\n    Service account private key in JSON format. Can be file path\n    or string contents. This is useful for remote server\n    authentication (eg. Jupyter/IPython notebook on remote host).\nverbose : None, deprecated\n    Deprecated in pandas-gbq version 0.4.0. Use the `logging module to\n    adjust verbosity instead\n    <https://pandas-gbq.readthedocs.io/en/latest/intro.html#logging>`__.\n\nReturns\n-------\ndf: DataFrame\n    DataFrame representing results of query.\n\nSee Also\n--------\npandas_gbq.read_gbq : This function in the pandas-gbq library.\nDataFrame.to_gbq : Write a DataFrame to Google BigQuery.", "deprecated": false, "file": "pandas/io/gbq.py", "file_line": 16, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/gbq.py#L16", "errors": [["PR06", "Parameter \"reauth\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"auth_local_webserver\" type should use \"bool\" instead of \"boolean\""]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Google BigQuery", "shared_code_with": ""}, "pandas.read_stata": {"type": "function", "docstring": "Read Stata file into DataFrame.\n\nParameters\n----------\nfilepath_or_buffer : str, path object or file-like object\n    Any valid string path is acceptable. The string could be a URL. Valid\n    URL schemes include http, ftp, s3, and file. For file URLs, a host is\n    expected. A local file could be: ``file://localhost/path/to/table.dta``.\n\n    If you want to pass in a path object, pandas accepts any ``os.PathLike``.\n\n    By file-like object, we refer to objects with a ``read()`` method,\n    such as a file handler (e.g. via builtin ``open`` function)\n    or ``StringIO``.\nconvert_dates : boolean, defaults to True\n    Convert date variables to DataFrame time values.\nconvert_categoricals : boolean, defaults to True\n    Read value labels and convert columns to Categorical/Factor variables.\nencoding : string, None or encoding\n    Encoding used to parse the files. None defaults to latin-1.\nindex_col : string, optional, default: None\n    Column to set as index.\nconvert_missing : boolean, defaults to False\n    Flag indicating whether to convert missing values to their Stata\n    representations.  If False, missing values are replaced with nan.\n    If True, columns containing missing values are returned with\n    object data types and missing values are represented by\n    StataMissingValue objects.\npreserve_dtypes : boolean, defaults to True\n    Preserve Stata datatypes. If False, numeric data are upcast to pandas\n    default types for foreign data (float64 or int64).\ncolumns : list or None\n    Columns to retain.  Columns will be returned in the given order.  None\n    returns all columns.\norder_categoricals : boolean, defaults to True\n    Flag indicating whether converted categorical data are ordered.\nchunksize : int, default None\n    Return StataReader object for iterations, returns chunks with\n    given number of lines.\niterator : boolean, default False\n    Return StataReader object.\n\nReturns\n-------\nDataFrame or StataReader\n\nSee Also\n--------\nio.stata.StataReader : Low-level reader for Stata data files.\nDataFrame.to_stata: Export Stata data files.\n\nExamples\n--------\nRead a Stata dta file:\n\n>>> df = pd.read_stata('filename.dta')\n\nRead a Stata dta file in 10,000 line chunks:\n\n>>> itr = pd.read_stata('filename.dta', chunksize=10000)\n>>> for chunk in itr:\n...     do_something(chunk)", "deprecated": false, "file": "pandas/util/_decorators.py", "file_line": 201, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/_decorators.py#L201", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {filepath_or_buffer, order_categoricals, preserve_dtypes, convert_categoricals, convert_dates, columns, iterator, encoding, convert_missing, chunksize, index_col}"], ["PR06", "Parameter \"convert_dates\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"convert_categoricals\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"encoding\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"index_col\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"convert_missing\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"preserve_dtypes\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"order_categoricals\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"iterator\" type should use \"bool\" instead of \"boolean\""], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 57, in pandas.read_stata\nFailed example:\n    df = pd.read_stata('filename.dta')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.read_stata[0]>\", line 1, in <module>\n        df = pd.read_stata('filename.dta')\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/util/_decorators.py\", line 208, in wrapper\n        return func(*args, **kwargs)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/util/_decorators.py\", line 208, in wrapper\n        return func(*args, **kwargs)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/io/stata.py\", line 227, in read_stata\n        chunksize=chunksize,\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/util/_decorators.py\", line 208, in wrapper\n        return func(*args, **kwargs)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/util/_decorators.py\", line 208, in wrapper\n        return func(*args, **kwargs)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/io/stata.py\", line 1093, in __init__\n        self.path_or_buf = open(path_or_buf, \"rb\")\n    FileNotFoundError: [Errno 2] No such file or directory: 'filename.dta'\n**********************************************************************\nLine 61, in pandas.read_stata\nFailed example:\n    itr = pd.read_stata('filename.dta', chunksize=10000)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.read_stata[1]>\", line 1, in <module>\n        itr = pd.read_stata('filename.dta', chunksize=10000)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/util/_decorators.py\", line 208, in wrapper\n        return func(*args, **kwargs)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/util/_decorators.py\", line 208, in wrapper\n        return func(*args, **kwargs)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/io/stata.py\", line 227, in read_stata\n        chunksize=chunksize,\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/util/_decorators.py\", line 208, in wrapper\n        return func(*args, **kwargs)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/util/_decorators.py\", line 208, in wrapper\n        return func(*args, **kwargs)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/io/stata.py\", line 1093, in __init__\n        self.path_or_buf = open(path_or_buf, \"rb\")\n    FileNotFoundError: [Errno 2] No such file or directory: 'filename.dta'\n**********************************************************************\nLine 62, in pandas.read_stata\nFailed example:\n    for chunk in itr:\n        do_something(chunk)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.read_stata[2]>\", line 1, in <module>\n        for chunk in itr:\n    NameError: name 'itr' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'do_something'"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "**********************************************************************\nLine 57, in pandas.read_stata\nFailed example:\n    df = pd.read_stata('filename.dta')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.read_stata[0]>\", line 1, in <module>\n        df = pd.read_stata('filename.dta')\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/util/_decorators.py\", line 208, in wrapper\n        return func(*args, **kwargs)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/util/_decorators.py\", line 208, in wrapper\n        return func(*args, **kwargs)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/io/stata.py\", line 227, in read_stata\n        chunksize=chunksize,\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/util/_decorators.py\", line 208, in wrapper\n        return func(*args, **kwargs)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/util/_decorators.py\", line 208, in wrapper\n        return func(*args, **kwargs)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/io/stata.py\", line 1093, in __init__\n        self.path_or_buf = open(path_or_buf, \"rb\")\n    FileNotFoundError: [Errno 2] No such file or directory: 'filename.dta'\n**********************************************************************\nLine 61, in pandas.read_stata\nFailed example:\n    itr = pd.read_stata('filename.dta', chunksize=10000)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.read_stata[1]>\", line 1, in <module>\n        itr = pd.read_stata('filename.dta', chunksize=10000)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/util/_decorators.py\", line 208, in wrapper\n        return func(*args, **kwargs)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/util/_decorators.py\", line 208, in wrapper\n        return func(*args, **kwargs)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/io/stata.py\", line 227, in read_stata\n        chunksize=chunksize,\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/util/_decorators.py\", line 208, in wrapper\n        return func(*args, **kwargs)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/util/_decorators.py\", line 208, in wrapper\n        return func(*args, **kwargs)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/io/stata.py\", line 1093, in __init__\n        self.path_or_buf = open(path_or_buf, \"rb\")\n    FileNotFoundError: [Errno 2] No such file or directory: 'filename.dta'\n**********************************************************************\nLine 62, in pandas.read_stata\nFailed example:\n    for chunk in itr:\n        do_something(chunk)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.read_stata[2]>\", line 1, in <module>\n        for chunk in itr:\n    NameError: name 'itr' is not defined\n", "in_api": true, "section": "", "subsection": "STATA", "shared_code_with": ""}, "pandas.io.stata.StataReader.data": {"type": "function", "docstring": "Read observations from Stata file, converting them into a dataframe\n\n.. deprecated::\n    This is a legacy method.  Use `read` in new code.\n\nParameters\n----------\nconvert_dates : boolean, defaults to True\n    Convert date variables to DataFrame time values.\nconvert_categoricals : boolean, defaults to True\n    Read value labels and convert columns to Categorical/Factor variables.\nindex_col : string, optional, default: None\n    Column to set as index.\nconvert_missing : boolean, defaults to False\n    Flag indicating whether to convert missing values to their Stata\n    representations.  If False, missing values are replaced with nan.\n    If True, columns containing missing values are returned with\n    object data types and missing values are represented by\n    StataMissingValue objects.\npreserve_dtypes : boolean, defaults to True\n    Preserve Stata datatypes. If False, numeric data are upcast to pandas\n    default types for foreign data (float64 or int64).\ncolumns : list or None\n    Columns to retain.  Columns will be returned in the given order.  None\n    returns all columns.\norder_categoricals : boolean, defaults to True\n    Flag indicating whether converted categorical data are ordered.\n\nReturns\n-------\nDataFrame", "deprecated": true, "file": "pandas/io/stata.py", "file_line": 1536, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/stata.py#L1536", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["SS03", "Summary does not end with a period"], ["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {order_categoricals, preserve_dtypes, convert_dates, columns, convert_missing, convert_categoricals, index_col}"], ["PR06", "Parameter \"convert_dates\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"convert_categoricals\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"index_col\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"convert_missing\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"preserve_dtypes\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"order_categoricals\" type should use \"bool\" instead of \"boolean\""], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "STATA", "shared_code_with": ""}, "pandas.io.stata.StataReader.data_label": {"type": "property", "docstring": "Return data label of Stata file.", "deprecated": false, "file": "pandas/io/stata.py", "file_line": 1858, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/stata.py#L1858", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "STATA", "shared_code_with": ""}, "pandas.io.stata.StataReader.value_labels": {"type": "function", "docstring": "Return a dict, associating each variable name a dict, associating\neach value its corresponding label.\n\nReturns\n-------\ndict", "deprecated": false, "file": "pandas/io/stata.py", "file_line": 1876, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/stata.py#L1876", "errors": [["SS06", "Summary should fit in a single line"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "STATA", "shared_code_with": ""}, "pandas.io.stata.StataReader.variable_labels": {"type": "function", "docstring": "Return variable labels as a dict, associating each variable name\nwith corresponding label.\n\nReturns\n-------\ndict", "deprecated": false, "file": "pandas/io/stata.py", "file_line": 1865, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/stata.py#L1865", "errors": [["SS06", "Summary should fit in a single line"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "STATA", "shared_code_with": ""}, "pandas.io.stata.StataWriter.write_file": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/io/stata.py", "file_line": 2364, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/stata.py#L2364", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "STATA", "shared_code_with": ""}, "pandas.core.resample.Resampler.__iter__": {"type": "function", "docstring": "Resampler iterator.\n\nReturns\n-------\nGenerator yielding sequence of (name, subsetted object)\nfor each group.\n\nSee Also\n--------\nGroupBy.__iter__", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 111, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L111", "errors": [["RT03", "Return value has no description"], ["RT03", "Return value has no description"], ["YD01", "No Yields section found"], ["SA04", "Missing description for See Also \"GroupBy.__iter__\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": ""}, "pandas.core.resample.Resampler.groups": {"type": "property", "docstring": "Dict {group name -> group labels}.", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 419, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L419", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": ""}, "pandas.core.resample.Resampler.indices": {"type": "property", "docstring": "Dict {group name -> group indices}.", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 432, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L432", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": ""}, "pandas.core.resample.Resampler.get_group": {"type": "function", "docstring": "Construct DataFrame from group with provided name.\n\nParameters\n----------\nname : object\n    the name of the group to get as a DataFrame\nobj : DataFrame, default None\n    the DataFrame to take the DataFrame out of.  If\n    it is None, the object groupby was called on will\n    be used\n\nReturns\n-------\ngroup : same type as obj", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 661, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L661", "errors": [["PR08", "Parameter \"name\" description should start with a capital letter"], ["PR09", "Parameter \"name\" description should finish with \".\""], ["PR08", "Parameter \"obj\" description should start with a capital letter"], ["PR09", "Parameter \"obj\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": ""}, "pandas.core.resample.Resampler.apply": {"type": "function", "docstring": "Aggregate using one or more operations over the specified axis.\n\nParameters\n----------\nfunc : function, str, list or dict\n    Function to use for aggregating the data. If a function, must either\n    work when passed a DataFrame or when passed to DataFrame.apply.\n\n    Accepted combinations are:\n\n    - function\n    - string function name\n    - list of functions and/or function names, e.g. ``[np.sum, 'mean']``\n    - dict of axis labels -> functions, function names or list of such.\n\n*args\n    Positional arguments to pass to `func`.\n**kwargs\n    Keyword arguments to pass to `func`.\n\nReturns\n-------\nscalar, Series or DataFrame\n\n    The return can be:\n\n    * scalar : when Series.agg is called with single function\n    * Series : when DataFrame.agg is called with a single function\n    * DataFrame : when DataFrame.agg is called with several functions\n\n    Return scalar, Series or DataFrame.\n\nSee Also\n--------\nDataFrame.groupby.aggregate\nDataFrame.resample.transform\nDataFrame.aggregate\n\nNotes\n-----\n`agg` is an alias for `aggregate`. Use the alias.\n\nA passed user-defined-function will be passed a Series for evaluation.\n\nExamples\n--------\n>>> s = pd.Series([1,2,3,4,5],\n                  index=pd.date_range('20130101', periods=5,freq='s'))\n2013-01-01 00:00:00    1\n2013-01-01 00:00:01    2\n2013-01-01 00:00:02    3\n2013-01-01 00:00:03    4\n2013-01-01 00:00:04    5\nFreq: S, dtype: int64\n\n>>> r = s.resample('2s')\nDatetimeIndexResampler [freq=<2 * Seconds>, axis=0, closed=left,\n                        label=left, convention=start, base=0]\n\n>>> r.agg(np.sum)\n2013-01-01 00:00:00    3\n2013-01-01 00:00:02    7\n2013-01-01 00:00:04    5\nFreq: 2S, dtype: int64\n\n>>> r.agg(['sum','mean','max'])\n                     sum  mean  max\n2013-01-01 00:00:00    3   1.5    2\n2013-01-01 00:00:02    7   3.5    4\n2013-01-01 00:00:04    5   5.0    5\n\n>>> r.agg({'result' : lambda x: x.mean() / x.std(),\n           'total' : np.sum})\n                     total    result\n2013-01-01 00:00:00      3  2.121320\n2013-01-01 00:00:02      7  4.949747\n2013-01-01 00:00:04      5       NaN", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 271, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L271", "errors": [["SA04", "Missing description for See Also \"DataFrame.groupby.aggregate\" reference"], ["SA04", "Missing description for See Also \"DataFrame.resample.transform\" reference"], ["SA04", "Missing description for See Also \"DataFrame.aggregate\" reference"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 48, in pandas.core.resample.Resampler.apply\nFailed example:\n    s = pd.Series([1,2,3,4,5],\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.apply[0]>\", line 1\n        s = pd.Series([1,2,3,4,5],\n                                 ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 57, in pandas.core.resample.Resampler.apply\nFailed example:\n    r = s.resample('2s')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.apply[1]>\", line 1, in <module>\n        r = s.resample('2s')\n    NameError: name 's' is not defined\n**********************************************************************\nLine 61, in pandas.core.resample.Resampler.apply\nFailed example:\n    r.agg(np.sum)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.apply[2]>\", line 1, in <module>\n        r.agg(np.sum)\n    NameError: name 'r' is not defined\n**********************************************************************\nLine 67, in pandas.core.resample.Resampler.apply\nFailed example:\n    r.agg(['sum','mean','max'])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.apply[3]>\", line 1, in <module>\n        r.agg(['sum','mean','max'])\n    NameError: name 'r' is not defined\n**********************************************************************\nLine 73, in pandas.core.resample.Resampler.apply\nFailed example:\n    r.agg({'result' : lambda x: x.mean() / x.std(),\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.apply[4]>\", line 1\n        r.agg({'result' : lambda x: x.mean() / x.std(),\n                                                      ^\n    SyntaxError: unexpected EOF while parsing\n"], ["EX03", "flake8 error: E902 TokenError: EOF in multi-line statement"], ["EX03", "flake8 error: E999 SyntaxError: invalid syntax"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "**********************************************************************\nLine 48, in pandas.core.resample.Resampler.apply\nFailed example:\n    s = pd.Series([1,2,3,4,5],\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.apply[0]>\", line 1\n        s = pd.Series([1,2,3,4,5],\n                                 ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 57, in pandas.core.resample.Resampler.apply\nFailed example:\n    r = s.resample('2s')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.apply[1]>\", line 1, in <module>\n        r = s.resample('2s')\n    NameError: name 's' is not defined\n**********************************************************************\nLine 61, in pandas.core.resample.Resampler.apply\nFailed example:\n    r.agg(np.sum)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.apply[2]>\", line 1, in <module>\n        r.agg(np.sum)\n    NameError: name 'r' is not defined\n**********************************************************************\nLine 67, in pandas.core.resample.Resampler.apply\nFailed example:\n    r.agg(['sum','mean','max'])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.apply[3]>\", line 1, in <module>\n        r.agg(['sum','mean','max'])\n    NameError: name 'r' is not defined\n**********************************************************************\nLine 73, in pandas.core.resample.Resampler.apply\nFailed example:\n    r.agg({'result' : lambda x: x.mean() / x.std(),\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.apply[4]>\", line 1\n        r.agg({'result' : lambda x: x.mean() / x.std(),\n                                                      ^\n    SyntaxError: unexpected EOF while parsing\n", "in_api": true, "section": "", "subsection": "Function application", "shared_code_with": ""}, "pandas.core.resample.Resampler.aggregate": {"type": "function", "docstring": "Aggregate using one or more operations over the specified axis.\n\nParameters\n----------\nfunc : function, str, list or dict\n    Function to use for aggregating the data. If a function, must either\n    work when passed a DataFrame or when passed to DataFrame.apply.\n\n    Accepted combinations are:\n\n    - function\n    - string function name\n    - list of functions and/or function names, e.g. ``[np.sum, 'mean']``\n    - dict of axis labels -> functions, function names or list of such.\n\n*args\n    Positional arguments to pass to `func`.\n**kwargs\n    Keyword arguments to pass to `func`.\n\nReturns\n-------\nscalar, Series or DataFrame\n\n    The return can be:\n\n    * scalar : when Series.agg is called with single function\n    * Series : when DataFrame.agg is called with a single function\n    * DataFrame : when DataFrame.agg is called with several functions\n\n    Return scalar, Series or DataFrame.\n\nSee Also\n--------\nDataFrame.groupby.aggregate\nDataFrame.resample.transform\nDataFrame.aggregate\n\nNotes\n-----\n`agg` is an alias for `aggregate`. Use the alias.\n\nA passed user-defined-function will be passed a Series for evaluation.\n\nExamples\n--------\n>>> s = pd.Series([1,2,3,4,5],\n                  index=pd.date_range('20130101', periods=5,freq='s'))\n2013-01-01 00:00:00    1\n2013-01-01 00:00:01    2\n2013-01-01 00:00:02    3\n2013-01-01 00:00:03    4\n2013-01-01 00:00:04    5\nFreq: S, dtype: int64\n\n>>> r = s.resample('2s')\nDatetimeIndexResampler [freq=<2 * Seconds>, axis=0, closed=left,\n                        label=left, convention=start, base=0]\n\n>>> r.agg(np.sum)\n2013-01-01 00:00:00    3\n2013-01-01 00:00:02    7\n2013-01-01 00:00:04    5\nFreq: 2S, dtype: int64\n\n>>> r.agg(['sum','mean','max'])\n                     sum  mean  max\n2013-01-01 00:00:00    3   1.5    2\n2013-01-01 00:00:02    7   3.5    4\n2013-01-01 00:00:04    5   5.0    5\n\n>>> r.agg({'result' : lambda x: x.mean() / x.std(),\n           'total' : np.sum})\n                     total    result\n2013-01-01 00:00:00      3  2.121320\n2013-01-01 00:00:02      7  4.949747\n2013-01-01 00:00:04      5       NaN", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 271, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L271", "errors": [["SA04", "Missing description for See Also \"DataFrame.groupby.aggregate\" reference"], ["SA04", "Missing description for See Also \"DataFrame.resample.transform\" reference"], ["SA04", "Missing description for See Also \"DataFrame.aggregate\" reference"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 48, in pandas.core.resample.Resampler.aggregate\nFailed example:\n    s = pd.Series([1,2,3,4,5],\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.aggregate[0]>\", line 1\n        s = pd.Series([1,2,3,4,5],\n                                 ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 57, in pandas.core.resample.Resampler.aggregate\nFailed example:\n    r = s.resample('2s')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.aggregate[1]>\", line 1, in <module>\n        r = s.resample('2s')\n    NameError: name 's' is not defined\n**********************************************************************\nLine 61, in pandas.core.resample.Resampler.aggregate\nFailed example:\n    r.agg(np.sum)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.aggregate[2]>\", line 1, in <module>\n        r.agg(np.sum)\n    NameError: name 'r' is not defined\n**********************************************************************\nLine 67, in pandas.core.resample.Resampler.aggregate\nFailed example:\n    r.agg(['sum','mean','max'])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.aggregate[3]>\", line 1, in <module>\n        r.agg(['sum','mean','max'])\n    NameError: name 'r' is not defined\n**********************************************************************\nLine 73, in pandas.core.resample.Resampler.aggregate\nFailed example:\n    r.agg({'result' : lambda x: x.mean() / x.std(),\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.aggregate[4]>\", line 1\n        r.agg({'result' : lambda x: x.mean() / x.std(),\n                                                      ^\n    SyntaxError: unexpected EOF while parsing\n"], ["EX03", "flake8 error: E902 TokenError: EOF in multi-line statement"], ["EX03", "flake8 error: E999 SyntaxError: invalid syntax"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "**********************************************************************\nLine 48, in pandas.core.resample.Resampler.aggregate\nFailed example:\n    s = pd.Series([1,2,3,4,5],\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.aggregate[0]>\", line 1\n        s = pd.Series([1,2,3,4,5],\n                                 ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 57, in pandas.core.resample.Resampler.aggregate\nFailed example:\n    r = s.resample('2s')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.aggregate[1]>\", line 1, in <module>\n        r = s.resample('2s')\n    NameError: name 's' is not defined\n**********************************************************************\nLine 61, in pandas.core.resample.Resampler.aggregate\nFailed example:\n    r.agg(np.sum)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.aggregate[2]>\", line 1, in <module>\n        r.agg(np.sum)\n    NameError: name 'r' is not defined\n**********************************************************************\nLine 67, in pandas.core.resample.Resampler.aggregate\nFailed example:\n    r.agg(['sum','mean','max'])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.aggregate[3]>\", line 1, in <module>\n        r.agg(['sum','mean','max'])\n    NameError: name 'r' is not defined\n**********************************************************************\nLine 73, in pandas.core.resample.Resampler.aggregate\nFailed example:\n    r.agg({'result' : lambda x: x.mean() / x.std(),\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.aggregate[4]>\", line 1\n        r.agg({'result' : lambda x: x.mean() / x.std(),\n                                                      ^\n    SyntaxError: unexpected EOF while parsing\n", "in_api": true, "section": "", "subsection": "Function application", "shared_code_with": "pandas.core.resample.Resampler.apply"}, "pandas.core.resample.Resampler.transform": {"type": "function", "docstring": "Call function producing a like-indexed Series on each group and return\na Series with the transformed values.\n\nParameters\n----------\narg : function\n    To apply to each group. Should return a Series with the same index.\n\nReturns\n-------\ntransformed : Series\n\nExamples\n--------\n>>> resampled.transform(lambda x: (x - x.mean()) / x.std())", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 294, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L294", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 16, in pandas.core.resample.Resampler.transform\nFailed example:\n    resampled.transform(lambda x: (x - x.mean()) / x.std())\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.transform[0]>\", line 1, in <module>\n        resampled.transform(lambda x: (x - x.mean()) / x.std())\n    NameError: name 'resampled' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'resampled'"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 16, in pandas.core.resample.Resampler.transform\nFailed example:\n    resampled.transform(lambda x: (x - x.mean()) / x.std())\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.transform[0]>\", line 1, in <module>\n        resampled.transform(lambda x: (x - x.mean()) / x.std())\n    NameError: name 'resampled' is not defined\n", "in_api": true, "section": "", "subsection": "Function application", "shared_code_with": ""}, "pandas.core.resample.Resampler.pipe": {"type": "function", "docstring": "Apply a function `func` with arguments to this Resampler object and return\nthe function's result.\n\n.. versionadded:: 0.23.0\n\nUse `.pipe` when you want to improve readability by chaining together\nfunctions that expect Series, DataFrames, GroupBy or Resampler objects.\nInstead of writing\n\n>>> h(g(f(df.groupby('group')), arg1=a), arg2=b, arg3=c)\n\nYou can write\n\n>>> (df.groupby('group')\n...    .pipe(f)\n...    .pipe(g, arg1=a)\n...    .pipe(h, arg2=b, arg3=c))\n\nwhich is much more readable.\n\nParameters\n----------\nfunc : callable or tuple of (callable, string)\n    Function to apply to this Resampler object or, alternatively,\n    a `(callable, data_keyword)` tuple where `data_keyword` is a\n    string indicating the keyword of `callable` that expects the\n    Resampler object.\nargs : iterable, optional\n       positional arguments passed into `func`.\nkwargs : dict, optional\n         a dictionary of keyword arguments passed into `func`.\n\nReturns\n-------\nobject : the return type of `func`.\n\nSee Also\n--------\nSeries.pipe : Apply a function with arguments to a series.\nDataFrame.pipe: Apply a function with arguments to a dataframe.\napply : Apply function to each group instead of to the\n    full Resampler object.\n\nNotes\n-----\nSee more `here\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#piping-function-calls>`_\n\nExamples\n--------\n\n    >>> df = pd.DataFrame({'A': [1, 2, 3, 4]},\n    ...                   index=pd.date_range('2012-08-02', periods=4))\n    >>> df\n                A\n    2012-08-02  1\n    2012-08-03  2\n    2012-08-04  3\n    2012-08-05  4\n\n    To get the difference between each 2-day period's maximum and minimum\n    value in one pass, you can do\n\n    >>> df.resample('2D').pipe(lambda x: x.max() - x.min())\n                A\n    2012-08-02  1\n    2012-08-04  1", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 198, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L198", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {kwargs, args}"], ["PR06", "Parameter \"func\" type should use \"str\" instead of \"string\""], ["PR08", "Parameter \"args\" description should start with a capital letter"], ["PR08", "Parameter \"kwargs\" description should start with a capital letter"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 11, in pandas.core.resample.Resampler.pipe\nFailed example:\n    h(g(f(df.groupby('group')), arg1=a), arg2=b, arg3=c)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.pipe[0]>\", line 1, in <module>\n        h(g(f(df.groupby('group')), arg1=a), arg2=b, arg3=c)\n    NameError: name 'h' is not defined\n**********************************************************************\nLine 15, in pandas.core.resample.Resampler.pipe\nFailed example:\n    (df.groupby('group')\n       .pipe(f)\n       .pipe(g, arg1=a)\n       .pipe(h, arg2=b, arg3=c))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.pipe[1]>\", line 1, in <module>\n        (df.groupby('group')\n    NameError: name 'df' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'h' (14 times)"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 11, in pandas.core.resample.Resampler.pipe\nFailed example:\n    h(g(f(df.groupby('group')), arg1=a), arg2=b, arg3=c)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.pipe[0]>\", line 1, in <module>\n        h(g(f(df.groupby('group')), arg1=a), arg2=b, arg3=c)\n    NameError: name 'h' is not defined\n**********************************************************************\nLine 15, in pandas.core.resample.Resampler.pipe\nFailed example:\n    (df.groupby('group')\n       .pipe(f)\n       .pipe(g, arg1=a)\n       .pipe(h, arg2=b, arg3=c))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.resample.Resampler.pipe[1]>\", line 1, in <module>\n        (df.groupby('group')\n    NameError: name 'df' is not defined\n", "in_api": true, "section": "", "subsection": "Function application", "shared_code_with": ""}, "pandas.core.resample.Resampler.ffill": {"type": "function", "docstring": "Forward fill the values.\n\nParameters\n----------\nlimit : integer, optional\n    limit of how many values to fill\n\nReturns\n-------\nAn upsampled Series.\n\nSee Also\n--------\nSeries.fillna\nDataFrame.fillna", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 420, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L420", "errors": [["PR06", "Parameter \"limit\" type should use \"int\" instead of \"integer\""], ["PR08", "Parameter \"limit\" description should start with a capital letter"], ["PR09", "Parameter \"limit\" description should finish with \".\""], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Series.fillna\" reference"], ["SA04", "Missing description for See Also \"DataFrame.fillna\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Upsampling", "shared_code_with": ""}, "pandas.core.resample.Resampler.backfill": {"type": "function", "docstring": "Backward fill the new missing values in the resampled data.\n\nIn statistics, imputation is the process of replacing missing data with\nsubstituted values [1]_. When resampling data, missing values may\nappear (e.g., when the resampling frequency is higher than the original\nfrequency). The backward fill will replace NaN values that appeared in\nthe resampled data with the next value in the original sequence.\nMissing values that existed in the original data will not be modified.\n\nParameters\n----------\nlimit : integer, optional\n    Limit of how many values to fill.\n\nReturns\n-------\nSeries, DataFrame\n    An upsampled Series or DataFrame with backward filled NaN values.\n\nSee Also\n--------\nbfill : Alias of backfill.\nfillna : Fill NaN values using the specified method, which can be\n    'backfill'.\nnearest : Fill NaN values with nearest neighbor starting from center.\npad : Forward fill NaN values.\nSeries.fillna : Fill NaN values in the Series using the\n    specified method, which can be 'backfill'.\nDataFrame.fillna : Fill NaN values in the DataFrame using the\n    specified method, which can be 'backfill'.\n\nReferences\n----------\n.. [1] https://en.wikipedia.org/wiki/Imputation_(statistics)\n\nExamples\n--------\n\nResampling a Series:\n\n>>> s = pd.Series([1, 2, 3],\n...               index=pd.date_range('20180101', periods=3, freq='h'))\n>>> s\n2018-01-01 00:00:00    1\n2018-01-01 01:00:00    2\n2018-01-01 02:00:00    3\nFreq: H, dtype: int64\n\n>>> s.resample('30min').backfill()\n2018-01-01 00:00:00    1\n2018-01-01 00:30:00    2\n2018-01-01 01:00:00    2\n2018-01-01 01:30:00    3\n2018-01-01 02:00:00    3\nFreq: 30T, dtype: int64\n\n>>> s.resample('15min').backfill(limit=2)\n2018-01-01 00:00:00    1.0\n2018-01-01 00:15:00    NaN\n2018-01-01 00:30:00    2.0\n2018-01-01 00:45:00    2.0\n2018-01-01 01:00:00    2.0\n2018-01-01 01:15:00    NaN\n2018-01-01 01:30:00    3.0\n2018-01-01 01:45:00    3.0\n2018-01-01 02:00:00    3.0\nFreq: 15T, dtype: float64\n\nResampling a DataFrame that has missing values:\n\n>>> df = pd.DataFrame({'a': [2, np.nan, 6], 'b': [1, 3, 5]},\n...                   index=pd.date_range('20180101', periods=3,\n...                                       freq='h'))\n>>> df\n                       a  b\n2018-01-01 00:00:00  2.0  1\n2018-01-01 01:00:00  NaN  3\n2018-01-01 02:00:00  6.0  5\n\n>>> df.resample('30min').backfill()\n                       a  b\n2018-01-01 00:00:00  2.0  1\n2018-01-01 00:30:00  NaN  3\n2018-01-01 01:00:00  NaN  3\n2018-01-01 01:30:00  6.0  5\n2018-01-01 02:00:00  6.0  5\n\n>>> df.resample('15min').backfill(limit=2)\n                       a    b\n2018-01-01 00:00:00  2.0  1.0\n2018-01-01 00:15:00  NaN  NaN\n2018-01-01 00:30:00  NaN  3.0\n2018-01-01 00:45:00  NaN  3.0\n2018-01-01 01:00:00  NaN  3.0\n2018-01-01 01:15:00  NaN  NaN\n2018-01-01 01:30:00  6.0  5.0\n2018-01-01 01:45:00  6.0  5.0\n2018-01-01 02:00:00  6.0  5.0", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 504, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L504", "errors": [["PR06", "Parameter \"limit\" type should use \"int\" instead of \"integer\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Upsampling", "shared_code_with": ""}, "pandas.core.resample.Resampler.bfill": {"type": "function", "docstring": "Backward fill the new missing values in the resampled data.\n\nIn statistics, imputation is the process of replacing missing data with\nsubstituted values [1]_. When resampling data, missing values may\nappear (e.g., when the resampling frequency is higher than the original\nfrequency). The backward fill will replace NaN values that appeared in\nthe resampled data with the next value in the original sequence.\nMissing values that existed in the original data will not be modified.\n\nParameters\n----------\nlimit : integer, optional\n    Limit of how many values to fill.\n\nReturns\n-------\nSeries, DataFrame\n    An upsampled Series or DataFrame with backward filled NaN values.\n\nSee Also\n--------\nbfill : Alias of backfill.\nfillna : Fill NaN values using the specified method, which can be\n    'backfill'.\nnearest : Fill NaN values with nearest neighbor starting from center.\npad : Forward fill NaN values.\nSeries.fillna : Fill NaN values in the Series using the\n    specified method, which can be 'backfill'.\nDataFrame.fillna : Fill NaN values in the DataFrame using the\n    specified method, which can be 'backfill'.\n\nReferences\n----------\n.. [1] https://en.wikipedia.org/wiki/Imputation_(statistics)\n\nExamples\n--------\n\nResampling a Series:\n\n>>> s = pd.Series([1, 2, 3],\n...               index=pd.date_range('20180101', periods=3, freq='h'))\n>>> s\n2018-01-01 00:00:00    1\n2018-01-01 01:00:00    2\n2018-01-01 02:00:00    3\nFreq: H, dtype: int64\n\n>>> s.resample('30min').backfill()\n2018-01-01 00:00:00    1\n2018-01-01 00:30:00    2\n2018-01-01 01:00:00    2\n2018-01-01 01:30:00    3\n2018-01-01 02:00:00    3\nFreq: 30T, dtype: int64\n\n>>> s.resample('15min').backfill(limit=2)\n2018-01-01 00:00:00    1.0\n2018-01-01 00:15:00    NaN\n2018-01-01 00:30:00    2.0\n2018-01-01 00:45:00    2.0\n2018-01-01 01:00:00    2.0\n2018-01-01 01:15:00    NaN\n2018-01-01 01:30:00    3.0\n2018-01-01 01:45:00    3.0\n2018-01-01 02:00:00    3.0\nFreq: 15T, dtype: float64\n\nResampling a DataFrame that has missing values:\n\n>>> df = pd.DataFrame({'a': [2, np.nan, 6], 'b': [1, 3, 5]},\n...                   index=pd.date_range('20180101', periods=3,\n...                                       freq='h'))\n>>> df\n                       a  b\n2018-01-01 00:00:00  2.0  1\n2018-01-01 01:00:00  NaN  3\n2018-01-01 02:00:00  6.0  5\n\n>>> df.resample('30min').backfill()\n                       a  b\n2018-01-01 00:00:00  2.0  1\n2018-01-01 00:30:00  NaN  3\n2018-01-01 01:00:00  NaN  3\n2018-01-01 01:30:00  6.0  5\n2018-01-01 02:00:00  6.0  5\n\n>>> df.resample('15min').backfill(limit=2)\n                       a    b\n2018-01-01 00:00:00  2.0  1.0\n2018-01-01 00:15:00  NaN  NaN\n2018-01-01 00:30:00  NaN  3.0\n2018-01-01 00:45:00  NaN  3.0\n2018-01-01 01:00:00  NaN  3.0\n2018-01-01 01:15:00  NaN  NaN\n2018-01-01 01:30:00  6.0  5.0\n2018-01-01 01:45:00  6.0  5.0\n2018-01-01 02:00:00  6.0  5.0", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 504, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L504", "errors": [["PR06", "Parameter \"limit\" type should use \"int\" instead of \"integer\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Upsampling", "shared_code_with": "pandas.core.resample.Resampler.backfill"}, "pandas.core.resample.Resampler.pad": {"type": "function", "docstring": "Forward fill the values.\n\nParameters\n----------\nlimit : integer, optional\n    limit of how many values to fill\n\nReturns\n-------\nAn upsampled Series.\n\nSee Also\n--------\nSeries.fillna\nDataFrame.fillna", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 420, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L420", "errors": [["PR06", "Parameter \"limit\" type should use \"int\" instead of \"integer\""], ["PR08", "Parameter \"limit\" description should start with a capital letter"], ["PR09", "Parameter \"limit\" description should finish with \".\""], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Series.fillna\" reference"], ["SA04", "Missing description for See Also \"DataFrame.fillna\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Upsampling", "shared_code_with": "pandas.core.resample.Resampler.ffill"}, "pandas.core.resample.Resampler.nearest": {"type": "function", "docstring": "Resample by using the nearest value.\n\nWhen resampling data, missing values may appear (e.g., when the\nresampling frequency is higher than the original frequency).\nThe `nearest` method will replace ``NaN`` values that appeared in\nthe resampled data with the value from the nearest member of the\nsequence, based on the index value.\nMissing values that existed in the original data will not be modified.\nIf `limit` is given, fill only this many values in each direction for\neach of the original values.\n\nParameters\n----------\nlimit : int, optional\n    Limit of how many values to fill.\n\n    .. versionadded:: 0.21.0\n\nReturns\n-------\nSeries or DataFrame\n    An upsampled Series or DataFrame with ``NaN`` values filled with\n    their nearest value.\n\nSee Also\n--------\nbackfill : Backward fill the new missing values in the resampled data.\npad : Forward fill ``NaN`` values.\n\nExamples\n--------\n>>> s = pd.Series([1, 2],\n...               index=pd.date_range('20180101',\n...                                   periods=2,\n...                                   freq='1h'))\n>>> s\n2018-01-01 00:00:00    1\n2018-01-01 01:00:00    2\nFreq: H, dtype: int64\n\n>>> s.resample('15min').nearest()\n2018-01-01 00:00:00    1\n2018-01-01 00:15:00    1\n2018-01-01 00:30:00    2\n2018-01-01 00:45:00    2\n2018-01-01 01:00:00    2\nFreq: 15T, dtype: int64\n\nLimit the number of upsampled values imputed by the nearest:\n\n>>> s.resample('15min').nearest(limit=1)\n2018-01-01 00:00:00    1.0\n2018-01-01 00:15:00    1.0\n2018-01-01 00:30:00    NaN\n2018-01-01 00:45:00    2.0\n2018-01-01 01:00:00    2.0\nFreq: 15T, dtype: float64", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 442, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L442", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Upsampling", "shared_code_with": ""}, "pandas.core.resample.Resampler.fillna": {"type": "function", "docstring": "Fill missing values introduced by upsampling.\n\nIn statistics, imputation is the process of replacing missing data with\nsubstituted values [1]_. When resampling data, missing values may\nappear (e.g., when the resampling frequency is higher than the original\nfrequency).\n\nMissing values that existed in the original data will\nnot be modified.\n\nParameters\n----------\nmethod : {'pad', 'backfill', 'ffill', 'bfill', 'nearest'}\n    Method to use for filling holes in resampled data\n\n    * 'pad' or 'ffill': use previous valid observation to fill gap\n      (forward fill).\n    * 'backfill' or 'bfill': use next valid observation to fill gap.\n    * 'nearest': use nearest valid observation to fill gap.\n\nlimit : integer, optional\n    Limit of how many consecutive missing values to fill.\n\nReturns\n-------\nSeries or DataFrame\n    An upsampled Series or DataFrame with missing values filled.\n\nSee Also\n--------\nbackfill : Backward fill NaN values in the resampled data.\npad : Forward fill NaN values in the resampled data.\nnearest : Fill NaN values in the resampled data\n    with nearest neighbor starting from center.\ninterpolate : Fill NaN values using interpolation.\nSeries.fillna : Fill NaN values in the Series using the\n    specified method, which can be 'bfill' and 'ffill'.\nDataFrame.fillna : Fill NaN values in the DataFrame using the\n    specified method, which can be 'bfill' and 'ffill'.\n\nReferences\n----------\n.. [1] https://en.wikipedia.org/wiki/Imputation_(statistics)\n\nExamples\n--------\nResampling a Series:\n\n>>> s = pd.Series([1, 2, 3],\n...               index=pd.date_range('20180101', periods=3, freq='h'))\n>>> s\n2018-01-01 00:00:00    1\n2018-01-01 01:00:00    2\n2018-01-01 02:00:00    3\nFreq: H, dtype: int64\n\nWithout filling the missing values you get:\n\n>>> s.resample(\"30min\").asfreq()\n2018-01-01 00:00:00    1.0\n2018-01-01 00:30:00    NaN\n2018-01-01 01:00:00    2.0\n2018-01-01 01:30:00    NaN\n2018-01-01 02:00:00    3.0\nFreq: 30T, dtype: float64\n\n>>> s.resample('30min').fillna(\"backfill\")\n2018-01-01 00:00:00    1\n2018-01-01 00:30:00    2\n2018-01-01 01:00:00    2\n2018-01-01 01:30:00    3\n2018-01-01 02:00:00    3\nFreq: 30T, dtype: int64\n\n>>> s.resample('15min').fillna(\"backfill\", limit=2)\n2018-01-01 00:00:00    1.0\n2018-01-01 00:15:00    NaN\n2018-01-01 00:30:00    2.0\n2018-01-01 00:45:00    2.0\n2018-01-01 01:00:00    2.0\n2018-01-01 01:15:00    NaN\n2018-01-01 01:30:00    3.0\n2018-01-01 01:45:00    3.0\n2018-01-01 02:00:00    3.0\nFreq: 15T, dtype: float64\n\n>>> s.resample('30min').fillna(\"pad\")\n2018-01-01 00:00:00    1\n2018-01-01 00:30:00    1\n2018-01-01 01:00:00    2\n2018-01-01 01:30:00    2\n2018-01-01 02:00:00    3\nFreq: 30T, dtype: int64\n\n>>> s.resample('30min').fillna(\"nearest\")\n2018-01-01 00:00:00    1\n2018-01-01 00:30:00    2\n2018-01-01 01:00:00    2\n2018-01-01 01:30:00    3\n2018-01-01 02:00:00    3\nFreq: 30T, dtype: int64\n\nMissing values present before the upsampling are not affected.\n\n>>> sm = pd.Series([1, None, 3],\n...               index=pd.date_range('20180101', periods=3, freq='h'))\n>>> sm\n2018-01-01 00:00:00    1.0\n2018-01-01 01:00:00    NaN\n2018-01-01 02:00:00    3.0\nFreq: H, dtype: float64\n\n>>> sm.resample('30min').fillna('backfill')\n2018-01-01 00:00:00    1.0\n2018-01-01 00:30:00    NaN\n2018-01-01 01:00:00    NaN\n2018-01-01 01:30:00    3.0\n2018-01-01 02:00:00    3.0\nFreq: 30T, dtype: float64\n\n>>> sm.resample('30min').fillna('pad')\n2018-01-01 00:00:00    1.0\n2018-01-01 00:30:00    1.0\n2018-01-01 01:00:00    NaN\n2018-01-01 01:30:00    NaN\n2018-01-01 02:00:00    3.0\nFreq: 30T, dtype: float64\n\n>>> sm.resample('30min').fillna('nearest')\n2018-01-01 00:00:00    1.0\n2018-01-01 00:30:00    NaN\n2018-01-01 01:00:00    NaN\n2018-01-01 01:30:00    3.0\n2018-01-01 02:00:00    3.0\nFreq: 30T, dtype: float64\n\nDataFrame resampling is done column-wise. All the same options are\navailable.\n\n>>> df = pd.DataFrame({'a': [2, np.nan, 6], 'b': [1, 3, 5]},\n...                   index=pd.date_range('20180101', periods=3,\n...                                       freq='h'))\n>>> df\n                       a  b\n2018-01-01 00:00:00  2.0  1\n2018-01-01 01:00:00  NaN  3\n2018-01-01 02:00:00  6.0  5\n\n>>> df.resample('30min').fillna(\"bfill\")\n                       a  b\n2018-01-01 00:00:00  2.0  1\n2018-01-01 00:30:00  NaN  3\n2018-01-01 01:00:00  NaN  3\n2018-01-01 01:30:00  6.0  5\n2018-01-01 02:00:00  6.0  5", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 609, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L609", "errors": [["PR06", "Parameter \"limit\" type should use \"int\" instead of \"integer\""], ["EX03", "flake8 error: E128 continuation line under-indented for visual indent"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Upsampling", "shared_code_with": ""}, "pandas.core.resample.Resampler.asfreq": {"type": "function", "docstring": "Return the values at the new freq, essentially a reindex.\n\nParameters\n----------\nfill_value : scalar, optional\n    Value to use for missing values, applied during upsampling (note\n    this does not fill NaNs that already were present).\n\n    .. versionadded:: 0.20.0\n\nReturns\n-------\nDataFrame or Series\n    Values at the specified freq.\n\nSee Also\n--------\nSeries.asfreq\nDataFrame.asfreq", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 796, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L796", "errors": [["SA04", "Missing description for See Also \"Series.asfreq\" reference"], ["SA04", "Missing description for See Also \"DataFrame.asfreq\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Upsampling", "shared_code_with": ""}, "pandas.core.resample.Resampler.interpolate": {"type": "function", "docstring": "Interpolate values according to different methods.\n\nPlease note that only ``method='linear'`` is supported for\nDataFrame/Series with a MultiIndex.\n\nParameters\n----------\nmethod : str, default 'linear'\n    Interpolation technique to use. One of:\n\n    * 'linear': Ignore the index and treat the values as equally\n      spaced. This is the only method supported on MultiIndexes.\n    * 'time': Works on daily and higher resolution data to interpolate\n      given length of interval.\n    * 'index', 'values': use the actual numerical values of the index.\n    * 'pad': Fill in NaNs using existing values.\n    * 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'spline',\n      'barycentric', 'polynomial': Passed to\n      `scipy.interpolate.interp1d`. These methods use the numerical\n      values of the index.  Both 'polynomial' and 'spline' require that\n      you also specify an `order` (int), e.g.\n      ``df.interpolate(method='polynomial', order=5)``.\n    * 'krogh', 'piecewise_polynomial', 'spline', 'pchip', 'akima':\n      Wrappers around the SciPy interpolation methods of similar\n      names. See `Notes`.\n    * 'from_derivatives': Refers to\n      `scipy.interpolate.BPoly.from_derivatives` which\n      replaces 'piecewise_polynomial' interpolation method in\n      scipy 0.18.\naxis : {0 or 'index', 1 or 'columns', None}, default None\n    Axis to interpolate along.\nlimit : int, optional\n    Maximum number of consecutive NaNs to fill. Must be greater than\n    0.\ninplace : bool, default False\n    Update the data in place if possible.\nlimit_direction : {'forward', 'backward', 'both'}, default 'forward'\n    If limit is specified, consecutive NaNs will be filled in this\n    direction.\nlimit_area : {`None`, 'inside', 'outside'}, default None\n    If limit is specified, consecutive NaNs will be filled with this\n    restriction.\n\n    * ``None``: No fill restriction.\n    * 'inside': Only fill NaNs surrounded by valid values\n      (interpolate).\n    * 'outside': Only fill NaNs outside valid values (extrapolate).\n\n    .. versionadded:: 0.23.0\n\ndowncast : optional, 'infer' or None, defaults to None\n    Downcast dtypes if possible.\n**kwargs\n    Keyword arguments to pass on to the interpolating function.\n\nReturns\n-------\nSeries or DataFrame\n    Returns the same object type as the caller, interpolated at\n    some or all ``NaN`` values.\n\nSee Also\n--------\nfillna : Fill missing values using different methods.\nscipy.interpolate.Akima1DInterpolator : Piecewise cubic polynomials\n    (Akima interpolator).\nscipy.interpolate.BPoly.from_derivatives : Piecewise polynomial in the\n    Bernstein basis.\nscipy.interpolate.interp1d : Interpolate a 1-D function.\nscipy.interpolate.KroghInterpolator : Interpolate polynomial (Krogh\n    interpolator).\nscipy.interpolate.PchipInterpolator : PCHIP 1-d monotonic cubic\n    interpolation.\nscipy.interpolate.CubicSpline : Cubic spline data interpolator.\n\nNotes\n-----\nThe 'krogh', 'piecewise_polynomial', 'spline', 'pchip' and 'akima'\nmethods are wrappers around the respective SciPy implementations of\nsimilar names. These use the actual numerical values of the index.\nFor more information on their behavior, see the\n`SciPy documentation\n<http://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation>`__\nand `SciPy tutorial\n<http://docs.scipy.org/doc/scipy/reference/tutorial/interpolate.html>`__.\n\nExamples\n--------\nFilling in ``NaN`` in a :class:`~pandas.Series` via linear\ninterpolation.\n\n>>> s = pd.Series([0, 1, np.nan, 3])\n>>> s\n0    0.0\n1    1.0\n2    NaN\n3    3.0\ndtype: float64\n>>> s.interpolate()\n0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float64\n\nFilling in ``NaN`` in a Series by padding, but filling at most two\nconsecutive ``NaN`` at a time.\n\n>>> s = pd.Series([np.nan, \"single_one\", np.nan,\n...                \"fill_two_more\", np.nan, np.nan, np.nan,\n...                4.71, np.nan])\n>>> s\n0              NaN\n1       single_one\n2              NaN\n3    fill_two_more\n4              NaN\n5              NaN\n6              NaN\n7             4.71\n8              NaN\ndtype: object\n>>> s.interpolate(method='pad', limit=2)\n0              NaN\n1       single_one\n2       single_one\n3    fill_two_more\n4    fill_two_more\n5    fill_two_more\n6              NaN\n7             4.71\n8             4.71\ndtype: object\n\nFilling in ``NaN`` in a Series via polynomial interpolation or splines:\nBoth 'polynomial' and 'spline' methods require that you also specify\nan ``order`` (int).\n\n>>> s = pd.Series([0, 2, np.nan, 8])\n>>> s.interpolate(method='polynomial', order=2)\n0    0.000000\n1    2.000000\n2    4.666667\n3    8.000000\ndtype: float64\n\nFill the DataFrame forward (that is, going down) along each column\nusing linear interpolation.\n\nNote how the last entry in column 'a' is interpolated differently,\nbecause there is no entry after it to use for interpolation.\nNote how the first entry in column 'b' remains ``NaN``, because there\nis no entry before it to use for interpolation.\n\n>>> df = pd.DataFrame([(0.0, np.nan, -1.0, 1.0),\n...                    (np.nan, 2.0, np.nan, np.nan),\n...                    (2.0, 3.0, np.nan, 9.0),\n...                    (np.nan, 4.0, -4.0, 16.0)],\n...                   columns=list('abcd'))\n>>> df\n     a    b    c     d\n0  0.0  NaN -1.0   1.0\n1  NaN  2.0  NaN   NaN\n2  2.0  3.0  NaN   9.0\n3  NaN  4.0 -4.0  16.0\n>>> df.interpolate(method='linear', limit_direction='forward', axis=0)\n     a    b    c     d\n0  0.0  NaN -1.0   1.0\n1  1.0  2.0 -2.0   5.0\n2  2.0  3.0 -3.0   9.0\n3  2.0  4.0 -4.0  16.0\n\nUsing polynomial interpolation.\n\n>>> df['d'].interpolate(method='polynomial', order=2)\n0     1.0\n1     4.0\n2     9.0\n3    16.0\nName: d, dtype: float64", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 769, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L769", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Upsampling", "shared_code_with": ""}, "pandas.core.resample.Resampler.count": {"type": "function", "docstring": "Compute count of group, excluding missing values.\n\nReturns\n-------\nSeries or DataFrame\n    Count of values within each group.\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 913, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L913", "errors": [["PR01", "Parameters {_method} not documented"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": ""}, "pandas.core.resample.Resampler.nunique": {"type": "function", "docstring": "Return number of unique elements in the group.\n\nReturns\n-------\nSeries\n    Number of unique values within each group.", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 922, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L922", "errors": [["PR01", "Parameters {_method} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": ""}, "pandas.core.resample.Resampler.first": {"type": "function", "docstring": "Compute first of group values.\n\nReturns\n-------\nSeries or DataFrame\n    Computed first of values within each group.\n\n        See Also\n        --------\n        Series.groupby\n        DataFrame.groupby", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 903, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L903", "errors": [["PR01", "Parameters {**kwargs, _method, *args} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": ""}, "pandas.core.resample.Resampler.last": {"type": "function", "docstring": "Compute last of group values.\n\nReturns\n-------\nSeries or DataFrame\n    Computed last of values within each group.\n\n        See Also\n        --------\n        Series.groupby\n        DataFrame.groupby", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 903, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L903", "errors": [["PR01", "Parameters {**kwargs, _method, *args} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.core.resample.Resampler.first"}, "pandas.core.resample.Resampler.max": {"type": "function", "docstring": "Compute max of group values.\n\nReturns\n-------\nSeries or DataFrame\n    Computed max of values within each group.\n\n        See Also\n        --------\n        Series.groupby\n        DataFrame.groupby", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 903, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L903", "errors": [["PR01", "Parameters {**kwargs, _method, *args} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.core.resample.Resampler.last"}, "pandas.core.resample.Resampler.mean": {"type": "function", "docstring": "Compute mean of groups, excluding missing values.\n\nReturns\n-------\npandas.Series or pandas.DataFrame\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': [1, 1, 2, 1, 2],\n...                    'B': [np.nan, 2, 3, 4, 5],\n...                    'C': [1, 2, 1, 1, 2]}, columns=['A', 'B', 'C'])\n\nGroupby one column and return the mean of the remaining columns in\neach group.\n\n>>> df.groupby('A').mean()\n     B         C\nA\n1  3.0  1.333333\n2  4.0  1.500000\n\nGroupby two columns and return the mean of the remaining column.\n\n>>> df.groupby(['A', 'B']).mean()\n       C\nA B\n1 2.0  2\n  4.0  1\n2 3.0  1\n  5.0  2\n\nGroupby one column and return the mean of only particular column in\nthe group.\n\n>>> df.groupby('A')['B'].mean()\nA\n1    3.0\n2    4.0\nName: B, dtype: float64", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 903, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L903", "errors": [["PR01", "Parameters {**kwargs, _method, *args} not documented"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.core.resample.Resampler.max"}, "pandas.core.resample.Resampler.median": {"type": "function", "docstring": "Compute median of groups, excluding missing values.\n\nFor multiple groupings, the result index will be a MultiIndex\n\nReturns\n-------\nSeries or DataFrame\n    Median of values within each group.\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 903, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L903", "errors": [["PR01", "Parameters {**kwargs, _method, *args} not documented"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.core.resample.Resampler.mean"}, "pandas.core.resample.Resampler.min": {"type": "function", "docstring": "Compute min of group values.\n\nReturns\n-------\nSeries or DataFrame\n    Computed min of values within each group.\n\n        See Also\n        --------\n        Series.groupby\n        DataFrame.groupby", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 903, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L903", "errors": [["PR01", "Parameters {**kwargs, _method, *args} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.core.resample.Resampler.median"}, "pandas.core.resample.Resampler.ohlc": {"type": "function", "docstring": "Compute sum of values, excluding missing values.\n\nFor multiple groupings, the result index will be a MultiIndex\n\nReturns\n-------\nDataFrame\n    Open, high, low and close values within each group.\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 903, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L903", "errors": [["PR01", "Parameters {**kwargs, _method, *args} not documented"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.core.resample.Resampler.min"}, "pandas.core.resample.Resampler.prod": {"type": "function", "docstring": "Compute prod of group values.\n\nReturns\n-------\nSeries or DataFrame\n    Computed prod of values within each group.\n\n        See Also\n        --------\n        Series.groupby\n        DataFrame.groupby", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 892, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L892", "errors": [["PR01", "Parameters {**kwargs, _method, *args, min_count} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": ""}, "pandas.core.resample.Resampler.size": {"type": "function", "docstring": "Compute group sizes.\n\nReturns\n-------\nSeries\n    Number of rows in each group.\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 854, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L854", "errors": [["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": ""}, "pandas.core.resample.Resampler.sem": {"type": "function", "docstring": "Compute standard error of the mean of groups, excluding missing values.\n\nFor multiple groupings, the result index will be a MultiIndex.\n\nParameters\n----------\nddof : integer, default 1\n    degrees of freedom\n\nReturns\n-------\nSeries or DataFrame\n    Standard error of the mean of values within each group.\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 903, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L903", "errors": [["PR01", "Parameters {**kwargs, _method, *args} not documented"], ["PR02", "Unknown parameters {ddof}"], ["PR06", "Parameter \"ddof\" type should use \"int\" instead of \"integer\""], ["PR08", "Parameter \"ddof\" description should start with a capital letter"], ["PR09", "Parameter \"ddof\" description should finish with \".\""], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.core.resample.Resampler.ohlc"}, "pandas.core.resample.Resampler.std": {"type": "function", "docstring": "Compute standard deviation of groups, excluding missing values.\n\nParameters\n----------\nddof : integer, default 1\n    Degrees of freedom.\n\nReturns\n-------\nDataFrame or Series\n    Standard deviation of values within each group.", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 820, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L820", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR06", "Parameter \"ddof\" type should use \"int\" instead of \"integer\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": ""}, "pandas.core.resample.Resampler.sum": {"type": "function", "docstring": "Compute sum of group values.\n\nReturns\n-------\nSeries or DataFrame\n    Computed sum of values within each group.\n\n        See Also\n        --------\n        Series.groupby\n        DataFrame.groupby", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 892, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L892", "errors": [["PR01", "Parameters {**kwargs, _method, *args, min_count} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.core.resample.Resampler.prod"}, "pandas.core.resample.Resampler.var": {"type": "function", "docstring": "Compute variance of groups, excluding missing values.\n\nParameters\n----------\nddof : integer, default 1\n    degrees of freedom\n\nReturns\n-------\nDataFrame or Series\n    Variance of values within each group.", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 837, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L837", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR06", "Parameter \"ddof\" type should use \"int\" instead of \"integer\""], ["PR08", "Parameter \"ddof\" description should start with a capital letter"], ["PR09", "Parameter \"ddof\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": ""}, "pandas.core.resample.Resampler.quantile": {"type": "function", "docstring": "Return value at the given quantile.\n\n.. versionadded:: 0.24.0\n\nParameters\n----------\nq : float or array-like, default 0.5 (50% quantile)\n\nReturns\n-------\nDataFrame or Series\n    Quantile of values within each group.\n\nSee Also\n--------\nSeries.quantile\nDataFrame.quantile\nDataFrameGroupBy.quantile", "deprecated": false, "file": "pandas/core/resample.py", "file_line": 865, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/resample.py#L865", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR07", "Parameter \"q\" has no description"], ["SA04", "Missing description for See Also \"Series.quantile\" reference"], ["SA04", "Missing description for See Also \"DataFrame.quantile\" reference"], ["SA04", "Missing description for See Also \"DataFrameGroupBy.quantile\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": ""}, "pandas.plotting.andrews_curves": {"type": "function", "docstring": "Generate a matplotlib plot of Andrews curves, for visualising clusters of\nmultivariate data.\n\nAndrews curves have the functional form:\n\nf(t) = x_1/sqrt(2) + x_2 sin(t) + x_3 cos(t) +\n       x_4 sin(2t) + x_5 cos(2t) + ...\n\nWhere x coefficients correspond to the values of each dimension and t is\nlinearly spaced between -pi and +pi. Each row of frame then corresponds to\na single curve.\n\nParameters\n----------\nframe : DataFrame\n    Data to be plotted, preferably normalized to (0.0, 1.0)\nclass_column : Name of the column containing class names\nax : matplotlib axes object, default None\nsamples : Number of points to plot in each curve\ncolor : list or tuple, optional\n    Colors to use for the different classes\ncolormap : str or matplotlib colormap object, default None\n    Colormap to select colors from. If string, load colormap with that name\n    from matplotlib.\nkwds : keywords\n    Options to pass to matplotlib plotting method\n\nReturns\n-------\nclass:`matplotlip.axis.Axes`", "deprecated": false, "file": "pandas/util/_decorators.py", "file_line": 216, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/_decorators.py#L216", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {ax, color, frame, samples, kwds, colormap, class_column}"], ["PR09", "Parameter \"frame\" description should finish with \".\""], ["PR07", "Parameter \"class_column\" has no description"], ["PR07", "Parameter \"ax\" has no description"], ["PR07", "Parameter \"samples\" has no description"], ["PR09", "Parameter \"color\" description should finish with \".\""], ["PR09", "Parameter \"kwds\" description should finish with \".\""], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.plotting.bootstrap_plot": {"type": "function", "docstring": "Bootstrap plot on mean, median and mid-range statistics.\n\nThe bootstrap plot is used to estimate the uncertainty of a statistic\nby relaying on random sampling with replacement [1]_. This function will\ngenerate bootstrapping plots for mean, median and mid-range statistics\nfor the given number of samples of the given size.\n\n.. [1] \"Bootstrapping (statistics)\" in     https://en.wikipedia.org/wiki/Bootstrapping_%28statistics%29\n\nParameters\n----------\nseries : pandas.Series\n    Pandas Series from where to get the samplings for the bootstrapping.\nfig : matplotlib.figure.Figure, default None\n    If given, it will use the `fig` reference for plotting instead of\n    creating a new one with default parameters.\nsize : int, default 50\n    Number of data points to consider during each sampling. It must be\n    greater or equal than the length of the `series`.\nsamples : int, default 500\n    Number of times the bootstrap procedure is performed.\n**kwds :\n    Options to pass to matplotlib plotting method.\n\nReturns\n-------\nmatplotlib.figure.Figure\n    Matplotlib figure.\n\nSee Also\n--------\nDataFrame.plot : Basic plotting for DataFrame objects.\nSeries.plot : Basic plotting for Series objects.\n\nExamples\n--------\n\n.. plot::\n        :context: close-figs\n\n        >>> s = pd.Series(np.random.uniform(size=100))\n        >>> fig = pd.plotting.bootstrap_plot(s)  # doctest: +SKIP", "deprecated": false, "file": "pandas/plotting/_misc.py", "file_line": 264, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_misc.py#L264", "errors": [["PR01", "Parameters {**kwds} not documented"], ["PR02", "Unknown parameters {**kwds :}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.plotting.deregister_matplotlib_converters": {"type": "function", "docstring": "Remove pandas' formatters and converters\n\nRemoves the custom converters added by :func:`register`. This\nattempts to set the state of the registry back to the state before\npandas registered its own units. Converters for pandas' own types like\nTimestamp and Period are removed completely. Converters for types\npandas overwrites, like ``datetime.datetime``, are restored to their\noriginal value.\n\nSee Also\n--------\nregister_matplotlib_converters", "deprecated": false, "file": "pandas/plotting/_misc.py", "file_line": 55, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_misc.py#L55", "errors": [["SS03", "Summary does not end with a period"], ["SA04", "Missing description for See Also \"register_matplotlib_converters\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.plotting.lag_plot": {"type": "function", "docstring": "Lag plot for time series.\n\nParameters\n----------\nseries : Time series\nlag : lag of the scatter plot, default 1\nax : Matplotlib axis object, optional\nkwds : Matplotlib scatter method keyword arguments, optional\n\nReturns\n-------\nclass:`matplotlib.axis.Axes`", "deprecated": false, "file": "pandas/plotting/_misc.py", "file_line": 394, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_misc.py#L394", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["PR01", "Parameters {**kwds} not documented"], ["PR02", "Unknown parameters {kwds}"], ["PR07", "Parameter \"series\" has no description"], ["PR07", "Parameter \"lag\" has no description"], ["PR07", "Parameter \"ax\" has no description"], ["PR07", "Parameter \"kwds\" has no description"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.plotting.parallel_coordinates": {"type": "function", "docstring": "Parallel coordinates plotting.\n\nParameters\n----------\nframe : DataFrame\nclass_column : str\n    Column name containing class names\ncols : list, optional\n    A list of column names to use\nax : matplotlib.axis, optional\n    matplotlib axis object\ncolor : list or tuple, optional\n    Colors to use for the different classes\nuse_columns : bool, optional\n    If true, columns will be used as xticks\nxticks : list or tuple, optional\n    A list of values to use for xticks\ncolormap : str or matplotlib colormap, default None\n    Colormap to use for line colors.\naxvlines : bool, optional\n    If true, vertical lines will be added at each xtick\naxvlines_kwds : keywords, optional\n    Options to be passed to axvline method for vertical lines\nsort_labels : bool, False\n    Sort class_column labels, useful when assigning colors\n\n    .. versionadded:: 0.20.0\n\nkwds : keywords\n    Options to pass to matplotlib plotting method\n\nReturns\n-------\nclass:`matplotlib.axis.Axes`\n\nExamples\n--------\n>>> from matplotlib import pyplot as plt\n>>> df = pd.read_csv('https://raw.github.com/pandas-dev/pandas/master'\n                    '/pandas/tests/data/iris.csv')\n>>> pd.plotting.parallel_coordinates(\n        df, 'Name',\n        color=('#556270', '#4ECDC4', '#C7F464'))\n>>> plt.show()", "deprecated": false, "file": "pandas/util/_decorators.py", "file_line": 316, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/_decorators.py#L316", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {axvlines_kwds, cols, use_columns, ax, sort_labels, color, frame, xticks, axvlines, kwds, colormap, class_column}"], ["PR07", "Parameter \"frame\" has no description"], ["PR09", "Parameter \"class_column\" description should finish with \".\""], ["PR09", "Parameter \"cols\" description should finish with \".\""], ["PR08", "Parameter \"ax\" description should start with a capital letter"], ["PR09", "Parameter \"ax\" description should finish with \".\""], ["PR09", "Parameter \"color\" description should finish with \".\""], ["PR09", "Parameter \"use_columns\" description should finish with \".\""], ["PR09", "Parameter \"xticks\" description should finish with \".\""], ["PR09", "Parameter \"axvlines\" description should finish with \".\""], ["PR09", "Parameter \"axvlines_kwds\" description should finish with \".\""], ["PR09", "Parameter \"sort_labels\" description should finish with \".\""], ["PR09", "Parameter \"kwds\" description should finish with \".\""], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 39, in pandas.plotting.parallel_coordinates\nFailed example:\n    df = pd.read_csv('https://raw.github.com/pandas-dev/pandas/master'\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.plotting.parallel_coordinates[1]>\", line 1\n        df = pd.read_csv('https://raw.github.com/pandas-dev/pandas/master'\n                                                                         ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 41, in pandas.plotting.parallel_coordinates\nFailed example:\n    pd.plotting.parallel_coordinates(\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.plotting.parallel_coordinates[2]>\", line 1\n        pd.plotting.parallel_coordinates(\n                                        ^\n    SyntaxError: unexpected EOF while parsing\n"], ["EX03", "flake8 error: E902 TokenError: EOF in multi-line statement"], ["EX03", "flake8 error: E999 SyntaxError: invalid syntax"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 39, in pandas.plotting.parallel_coordinates\nFailed example:\n    df = pd.read_csv('https://raw.github.com/pandas-dev/pandas/master'\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.plotting.parallel_coordinates[1]>\", line 1\n        df = pd.read_csv('https://raw.github.com/pandas-dev/pandas/master'\n                                                                         ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 41, in pandas.plotting.parallel_coordinates\nFailed example:\n    pd.plotting.parallel_coordinates(\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.plotting.parallel_coordinates[2]>\", line 1\n        pd.plotting.parallel_coordinates(\n                                        ^\n    SyntaxError: unexpected EOF while parsing\n", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.plotting.radviz": {"type": "function", "docstring": "Plot a multidimensional dataset in 2D.\n\nEach Series in the DataFrame is represented as a evenly distributed\nslice on a circle. Each data point is rendered in the circle according to\nthe value on each Series. Highly correlated `Series` in the `DataFrame`\nare placed closer on the unit circle.\n\nRadViz allow to project a N-dimensional data set into a 2D space where the\ninfluence of each dimension can be interpreted as a balance between the\ninfluence of all dimensions.\n\nMore info available at the `original article\n<http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.135.889>`_\ndescribing RadViz.\n\nParameters\n----------\nframe : `DataFrame`\n    Pandas object holding the data.\nclass_column : str\n    Column name containing the name of the data point category.\nax : :class:`matplotlib.axes.Axes`, optional\n    A plot instance to which to add the information.\ncolor : list[str] or tuple[str], optional\n    Assign a color to each category. Example: ['blue', 'green'].\ncolormap : str or :class:`matplotlib.colors.Colormap`, default None\n    Colormap to select colors from. If string, load colormap with that\n    name from matplotlib.\nkwds : optional\n    Options to pass to matplotlib scatter plotting method.\n\nReturns\n-------\nclass:`matplotlib.axes.Axes`\n\nSee Also\n--------\nplotting.andrews_curves : Plot clustering visualization.\n\nExamples\n--------\n.. plot::\n    :context: close-figs\n\n    >>> df = pd.DataFrame({\n    ...         'SepalLength': [6.5, 7.7, 5.1, 5.8, 7.6, 5.0, 5.4, 4.6,\n    ...                         6.7, 4.6],\n    ...         'SepalWidth': [3.0, 3.8, 3.8, 2.7, 3.0, 2.3, 3.0, 3.2,\n    ...                        3.3, 3.6],\n    ...         'PetalLength': [5.5, 6.7, 1.9, 5.1, 6.6, 3.3, 4.5, 1.4,\n    ...                         5.7, 1.0],\n    ...         'PetalWidth': [1.8, 2.2, 0.4, 1.9, 2.1, 1.0, 1.5, 0.2,\n    ...                        2.1, 0.2],\n    ...         'Category': ['virginica', 'virginica', 'setosa',\n    ...                      'virginica', 'virginica', 'versicolor',\n    ...                      'versicolor', 'setosa', 'virginica',\n    ...                      'setosa']\n    ...     })\n    >>> rad_viz = pd.plotting.radviz(df, 'Category')  # doctest: +SKIP", "deprecated": false, "file": "pandas/plotting/_misc.py", "file_line": 143, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_misc.py#L143", "errors": [["PR01", "Parameters {**kwds} not documented"], ["PR02", "Unknown parameters {kwds}"], ["RT03", "Return value has no description"], ["EX03", "flake8 error: E121 continuation line under-indented for hanging indent"], ["EX03", "flake8 error: E126 continuation line over-indented for hanging indent"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.plotting.register_matplotlib_converters": {"type": "function", "docstring": "Register Pandas Formatters and Converters with matplotlib\n\nThis function modifies the global ``matplotlib.units.registry``\ndictionary. Pandas adds custom converters for\n\n* pd.Timestamp\n* pd.Period\n* np.datetime64\n* datetime.datetime\n* datetime.date\n* datetime.time\n\nSee Also\n--------\nderegister_matplotlib_converters", "deprecated": false, "file": "pandas/plotting/_misc.py", "file_line": 33, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_misc.py#L33", "errors": [["SS03", "Summary does not end with a period"], ["PR01", "Parameters {explicit} not documented"], ["SA04", "Missing description for See Also \"deregister_matplotlib_converters\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.plotting.scatter_matrix": {"type": "function", "docstring": "Draw a matrix of scatter plots.\n\nParameters\n----------\nframe : DataFrame\nalpha : float, optional\n    amount of transparency applied\nfigsize : (float,float), optional\n    a tuple (width, height) in inches\nax : Matplotlib axis object, optional\ngrid : bool, optional\n    setting this to True will show the grid\ndiagonal : {'hist', 'kde'}\n    pick between 'kde' and 'hist' for\n    either Kernel Density Estimation or Histogram\n    plot in the diagonal\nmarker : str, optional\n    Matplotlib marker type, default '.'\nhist_kwds : other plotting keyword arguments\n    To be passed to hist function\ndensity_kwds : other plotting keyword arguments\n    To be passed to kernel density estimate plot\nrange_padding : float, optional\n    relative extension of axis range in x and y\n    with respect to (x_max - x_min) or (y_max - y_min),\n    default 0.05\nkwds : other plotting keyword arguments\n    To be passed to scatter function\n\nReturns\n-------\nnumpy.ndarray\n    A matrix of scatter plots.\n\nExamples\n--------\n>>> df = pd.DataFrame(np.random.randn(1000, 4), columns=['A','B','C','D'])\n>>> scatter_matrix(df, alpha=0.2)", "deprecated": false, "file": "pandas/plotting/_misc.py", "file_line": 74, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_misc.py#L74", "errors": [["PR01", "Parameters {**kwds} not documented"], ["PR02", "Unknown parameters {kwds}"], ["PR07", "Parameter \"frame\" has no description"], ["PR08", "Parameter \"alpha\" description should start with a capital letter"], ["PR09", "Parameter \"alpha\" description should finish with \".\""], ["PR08", "Parameter \"figsize\" description should start with a capital letter"], ["PR09", "Parameter \"figsize\" description should finish with \".\""], ["PR07", "Parameter \"ax\" has no description"], ["PR08", "Parameter \"grid\" description should start with a capital letter"], ["PR09", "Parameter \"grid\" description should finish with \".\""], ["PR08", "Parameter \"diagonal\" description should start with a capital letter"], ["PR09", "Parameter \"diagonal\" description should finish with \".\""], ["PR09", "Parameter \"marker\" description should finish with \".\""], ["PR09", "Parameter \"hist_kwds\" description should finish with \".\""], ["PR09", "Parameter \"density_kwds\" description should finish with \".\""], ["PR08", "Parameter \"range_padding\" description should start with a capital letter"], ["PR09", "Parameter \"range_padding\" description should finish with \".\""], ["PR09", "Parameter \"kwds\" description should finish with \".\""], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 39, in pandas.plotting.scatter_matrix\nFailed example:\n    scatter_matrix(df, alpha=0.2)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.plotting.scatter_matrix[1]>\", line 1, in <module>\n        scatter_matrix(df, alpha=0.2)\n    NameError: name 'scatter_matrix' is not defined\n"], ["EX03", "flake8 error: E231 missing whitespace after ',' (3 times)"], ["EX03", "flake8 error: F821 undefined name 'scatter_matrix'"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 39, in pandas.plotting.scatter_matrix\nFailed example:\n    scatter_matrix(df, alpha=0.2)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.plotting.scatter_matrix[1]>\", line 1, in <module>\n        scatter_matrix(df, alpha=0.2)\n    NameError: name 'scatter_matrix' is not defined\n", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.describe_option": {"type": "CallableDynamicDoc", "docstring": "describe_option(pat, _print_desc=False)\n\nPrints the description for one or more registered options.\n\nCall with not arguments to get a listing for all registered options.\n\nAvailable options:\n\n- compute.[use_bottleneck, use_numexpr]\n- display.[chop_threshold, colheader_justify, column_space, date_dayfirst,\n  date_yearfirst, encoding, expand_frame_repr, float_format]\n- display.html.[border, table_schema, use_mathjax]\n- display.[large_repr]\n- display.latex.[escape, longtable, multicolumn, multicolumn_format, multirow,\n  repr]\n- display.[max_categories, max_columns, max_colwidth, max_info_columns,\n  max_info_rows, max_rows, max_seq_items, memory_usage, min_rows, multi_sparse,\n  notebook_repr_html, pprint_nest_depth, precision, show_dimensions]\n- display.unicode.[ambiguous_as_wide, east_asian_width]\n- display.[width]\n- io.excel.ods.[reader]\n- io.excel.xls.[reader, writer]\n- io.excel.xlsm.[reader, writer]\n- io.excel.xlsx.[reader, writer]\n- io.hdf.[default_format, dropna_table]\n- io.parquet.[engine]\n- mode.[chained_assignment, sim_interactive, use_inf_as_na, use_inf_as_null]\n- plotting.[backend]\n- plotting.matplotlib.[register_converters]\n\nParameters\n----------\npat : str\n    Regexp pattern. All matching keys will have their description displayed.\n_print_desc : bool, default True\n    If True (default) the description(s) will be printed to stdout.\n    Otherwise, the description(s) will be returned as a unicode string\n    (for testing).\n\nReturns\n-------\nNone by default, the description(s) as a unicode string if _print_desc\nis False\n\nNotes\n-----\nThe available options with its descriptions:\n\ncompute.use_bottleneck : bool\n    Use the bottleneck library to accelerate if it is installed,\n    the default is True\n    Valid values: False,True\n    [default: True] [currently: True]compute.use_numexpr : bool\n    Use the numexpr library to accelerate computation if it is installed,\n    the default is True\n    Valid values: False,True\n    [default: True] [currently: True]display.chop_threshold : float or None\n    if set to a float value, all float values smaller then the given threshold\n    will be displayed as exactly 0 by repr and friends.\n    [default: None] [currently: None]display.colheader_justify : 'left'/'right'\n    Controls the justification of column headers. used by DataFrameFormatter.\n    [default: right] [currently: right]display.column_space No description available.\n    [default: 12] [currently: 12]display.date_dayfirst : boolean\n    When True, prints and parses dates with the day first, eg 20/01/2005\n    [default: False] [currently: False]display.date_yearfirst : boolean\n    When True, prints and parses dates with the year first, eg 2005/01/20\n    [default: False] [currently: False]display.encoding : str/unicode\n    Defaults to the detected encoding of the console.\n    Specifies the encoding to be used for strings returned by to_string,\n    these are generally strings meant to be displayed on the console.\n    [default: UTF-8] [currently: UTF-8]display.expand_frame_repr : boolean\n    Whether to print out the full DataFrame repr for wide DataFrames across\n    multiple lines, `max_columns` is still respected, but the output will\n    wrap-around across multiple \"pages\" if its width exceeds `display.width`.\n    [default: True] [currently: True]display.float_format : callable\n    The callable should accept a floating point number and return\n    a string with the desired format of the number. This is used\n    in some places like SeriesFormatter.\n    See formats.format.EngFormatter for an example.\n    [default: None] [currently: None]display.html.border : int\n    A ``border=value`` attribute is inserted in the ``<table>`` tag\n    for the DataFrame HTML repr.\n    [default: 1] [currently: 1]display.html.table_schema : boolean\n    Whether to publish a Table Schema representation for frontends\n    that support it.\n    (default: False)\n    [default: False] [currently: False]display.html.use_mathjax : boolean\n    When True, Jupyter notebook will process table contents using MathJax,\n    rendering mathematical expressions enclosed by the dollar symbol.\n    (default: True)\n    [default: True] [currently: True]display.large_repr : 'truncate'/'info'\n    For DataFrames exceeding max_rows/max_cols, the repr (and HTML repr) can\n    show a truncated table (the default from 0.13), or switch to the view from\n    df.info() (the behaviour in earlier versions of pandas).\n    [default: truncate] [currently: truncate]display.latex.escape : bool\n    This specifies if the to_latex method of a Dataframe uses escapes special\n    characters.\n    Valid values: False,True\n    [default: True] [currently: True]display.latex.longtable :bool\n    This specifies if the to_latex method of a Dataframe uses the longtable\n    format.\n    Valid values: False,True\n    [default: False] [currently: False]display.latex.multicolumn : bool\n    This specifies if the to_latex method of a Dataframe uses multicolumns\n    to pretty-print MultiIndex columns.\n    Valid values: False,True\n    [default: True] [currently: True]display.latex.multicolumn_format : bool\n    This specifies if the to_latex method of a Dataframe uses multicolumns\n    to pretty-print MultiIndex columns.\n    Valid values: False,True\n    [default: l] [currently: l]display.latex.multirow : bool\n    This specifies if the to_latex method of a Dataframe uses multirows\n    to pretty-print MultiIndex rows.\n    Valid values: False,True\n    [default: False] [currently: False]display.latex.repr : boolean\n    Whether to produce a latex DataFrame representation for jupyter\n    environments that support it.\n    (default: False)\n    [default: False] [currently: False]display.max_categories : int\n    This sets the maximum number of categories pandas should output when\n    printing out a `Categorical` or a Series of dtype \"category\".\n    [default: 8] [currently: 8]display.max_columns : int\n    If max_cols is exceeded, switch to truncate view. Depending on\n    `large_repr`, objects are either centrally truncated or printed as\n    a summary view. 'None' value means unlimited.\n\n    In case python/IPython is running in a terminal and `large_repr`\n    equals 'truncate' this can be set to 0 and pandas will auto-detect\n    the width of the terminal and print a truncated object which fits\n    the screen width. The IPython notebook, IPython qtconsole, or IDLE\n    do not run in a terminal and hence it is not possible to do\n    correct auto-detection.\n    [default: 0] [currently: 0]display.max_colwidth : int\n    The maximum width in characters of a column in the repr of\n    a pandas data structure. When the column overflows, a \"...\"\n    placeholder is embedded in the output.\n    [default: 50] [currently: 50]display.max_info_columns : int\n    max_info_columns is used in DataFrame.info method to decide if\n    per column information will be printed.\n    [default: 100] [currently: 100]display.max_info_rows : int or None\n    df.info() will usually show null-counts for each column.\n    For large frames this can be quite slow. max_info_rows and max_info_cols\n    limit this null check only to frames with smaller dimensions than\n    specified.\n    [default: 1690785] [currently: 1690785]display.max_rows : int\n    If max_rows is exceeded, switch to truncate view. Depending on\n    `large_repr`, objects are either centrally truncated or printed as\n    a summary view. 'None' value means unlimited.\n\n    In case python/IPython is running in a terminal and `large_repr`\n    equals 'truncate' this can be set to 0 and pandas will auto-detect\n    the height of the terminal and print a truncated object which fits\n    the screen height. The IPython notebook, IPython qtconsole, or\n    IDLE do not run in a terminal and hence it is not possible to do\n    correct auto-detection.\n    [default: 60] [currently: 60]display.max_seq_items : int or None\n    when pretty-printing a long sequence, no more then `max_seq_items`\n    will be printed. If items are omitted, they will be denoted by the\n    addition of \"...\" to the resulting string.\n\n    If set to None, the number of items to be printed is unlimited.\n    [default: 100] [currently: 100]display.memory_usage : bool, string or None\n    This specifies if the memory usage of a DataFrame should be displayed when\n    df.info() is called. Valid values True,False,'deep'\n    [default: True] [currently: True]display.min_rows : int\n    The numbers of rows to show in a truncated view (when `max_rows` is\n    exceeded). Ignored when `max_rows` is set to None or 0. When set to\n    None, follows the value of `max_rows`.\n    [default: 10] [currently: 10]display.multi_sparse : boolean\n    \"sparsify\" MultiIndex display (don't display repeated\n    elements in outer levels within groups)\n    [default: True] [currently: True]display.notebook_repr_html : boolean\n    When True, IPython notebook will use html representation for\n    pandas objects (if it is available).\n    [default: True] [currently: True]display.pprint_nest_depth : int\n    Controls the number of nested levels to process when pretty-printing\n    [default: 3] [currently: 3]display.precision : int\n    Floating point output precision (number of significant digits). This is\n    only a suggestion\n    [default: 6] [currently: 6]display.show_dimensions : boolean or 'truncate'\n    Whether to print out dimensions at the end of DataFrame repr.\n    If 'truncate' is specified, only print out the dimensions if the\n    frame is truncated (e.g. not display all rows and/or columns)\n    [default: truncate] [currently: truncate]display.unicode.ambiguous_as_wide : boolean\n    Whether to use the Unicode East Asian Width to calculate the display text\n    width.\n    Enabling this may affect to the performance (default: False)\n    [default: False] [currently: False]display.unicode.east_asian_width : boolean\n    Whether to use the Unicode East Asian Width to calculate the display text\n    width.\n    Enabling this may affect to the performance (default: False)\n    [default: False] [currently: False]display.width : int\n    Width of the display in characters. In case python/IPython is running in\n    a terminal this can be set to None and pandas will correctly auto-detect\n    the width.\n    Note that the IPython notebook, IPython qtconsole, or IDLE do not run in a\n    terminal and hence it is not possible to correctly detect the width.\n    [default: 80] [currently: 80]io.excel.ods.reader : string\n    The default Excel reader engine for 'ods' files. Available options:\n    auto, odf.\n    [default: auto] [currently: auto]io.excel.xls.reader : string\n    The default Excel reader engine for 'xls' files. Available options:\n    auto, xlrd.\n    [default: auto] [currently: auto]io.excel.xls.writer : string\n    The default Excel writer engine for 'xls' files. Available options:\n    auto, xlwt.\n    [default: auto] [currently: auto]io.excel.xlsm.reader : string\n    The default Excel reader engine for 'xlsm' files. Available options:\n    auto, xlrd, openpyxl.\n    [default: auto] [currently: auto]io.excel.xlsm.writer : string\n    The default Excel writer engine for 'xlsm' files. Available options:\n    auto, openpyxl.\n    [default: auto] [currently: auto]io.excel.xlsx.reader : string\n    The default Excel reader engine for 'xlsx' files. Available options:\n    auto, xlrd, openpyxl.\n    [default: auto] [currently: auto]io.excel.xlsx.writer : string\n    The default Excel writer engine for 'xlsx' files. Available options:\n    auto, openpyxl, xlsxwriter.\n    [default: auto] [currently: auto]io.hdf.default_format : format\n    default format writing format, if None, then\n    put will default to 'fixed' and append will default to 'table'\n    [default: None] [currently: None]io.hdf.dropna_table : boolean\n    drop ALL nan rows when appending to a table\n    [default: False] [currently: False]io.parquet.engine : string\n    The default parquet reader/writer engine. Available options:\n    'auto', 'pyarrow', 'fastparquet', the default is 'auto'\n    [default: auto] [currently: auto]mode.chained_assignment : string\n    Raise an exception, warn, or no action if trying to use chained assignment,\n    The default is warn\n    [default: warn] [currently: warn]mode.sim_interactive : boolean\n    Whether to simulate interactive mode for purposes of testing\n    [default: False] [currently: False]mode.use_inf_as_na : boolean\n    True means treat None, NaN, INF, -INF as NA (old way),\n    False means None and NaN are null, but INF, -INF are not NA\n    (new way).\n    [default: False] [currently: False]mode.use_inf_as_null : boolean\n    use_inf_as_null had been deprecated and will be removed in a future\n    version. Use `use_inf_as_na` instead.\n    [default: False] [currently: False]\n    (Deprecated, use `mode.use_inf_as_na` instead.)plotting.backend : str\n    The plotting backend to use. The default value is \"matplotlib\", the\n    backend provided with pandas. Other backends can be specified by\n    prodiving the name of the module that implements the backend.\n    [default: matplotlib] [currently: matplotlib]plotting.matplotlib.register_converters : bool\n    Whether to register converters with matplotlib's units registry for\n    dates, times, datetimes, and Periods. Toggling to False will remove\n    the converters, restoring any converters that pandas overwrote.\n    [default: True] [currently: True]", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR01", "Parameters {**kwds, *args} not documented"], ["PR02", "Unknown parameters {pat, _print_desc}"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Working with options", "subsection": "", "shared_code_with": "pandas.arrays.IntervalArray.is_empty"}, "pandas.reset_option": {"type": "CallableDynamicDoc", "docstring": "reset_option(pat)\n\nReset one or more options to their default value.\n\nPass \"all\" as argument to reset all options.\n\nAvailable options:\n\n- compute.[use_bottleneck, use_numexpr]\n- display.[chop_threshold, colheader_justify, column_space, date_dayfirst,\n  date_yearfirst, encoding, expand_frame_repr, float_format]\n- display.html.[border, table_schema, use_mathjax]\n- display.[large_repr]\n- display.latex.[escape, longtable, multicolumn, multicolumn_format, multirow,\n  repr]\n- display.[max_categories, max_columns, max_colwidth, max_info_columns,\n  max_info_rows, max_rows, max_seq_items, memory_usage, min_rows, multi_sparse,\n  notebook_repr_html, pprint_nest_depth, precision, show_dimensions]\n- display.unicode.[ambiguous_as_wide, east_asian_width]\n- display.[width]\n- io.excel.ods.[reader]\n- io.excel.xls.[reader, writer]\n- io.excel.xlsm.[reader, writer]\n- io.excel.xlsx.[reader, writer]\n- io.hdf.[default_format, dropna_table]\n- io.parquet.[engine]\n- mode.[chained_assignment, sim_interactive, use_inf_as_na, use_inf_as_null]\n- plotting.[backend]\n- plotting.matplotlib.[register_converters]\n\nParameters\n----------\npat : str/regex\n    If specified only options matching `prefix*` will be reset.\n    Note: partial matches are supported for convenience, but unless you\n    use the full option name (e.g. x.y.z.option_name), your code may break\n    in future versions if new options with similar names are introduced.\n\nReturns\n-------\nNone\n\nNotes\n-----\nThe available options with its descriptions:\n\ncompute.use_bottleneck : bool\n    Use the bottleneck library to accelerate if it is installed,\n    the default is True\n    Valid values: False,True\n    [default: True] [currently: True]compute.use_numexpr : bool\n    Use the numexpr library to accelerate computation if it is installed,\n    the default is True\n    Valid values: False,True\n    [default: True] [currently: True]display.chop_threshold : float or None\n    if set to a float value, all float values smaller then the given threshold\n    will be displayed as exactly 0 by repr and friends.\n    [default: None] [currently: None]display.colheader_justify : 'left'/'right'\n    Controls the justification of column headers. used by DataFrameFormatter.\n    [default: right] [currently: right]display.column_space No description available.\n    [default: 12] [currently: 12]display.date_dayfirst : boolean\n    When True, prints and parses dates with the day first, eg 20/01/2005\n    [default: False] [currently: False]display.date_yearfirst : boolean\n    When True, prints and parses dates with the year first, eg 2005/01/20\n    [default: False] [currently: False]display.encoding : str/unicode\n    Defaults to the detected encoding of the console.\n    Specifies the encoding to be used for strings returned by to_string,\n    these are generally strings meant to be displayed on the console.\n    [default: UTF-8] [currently: UTF-8]display.expand_frame_repr : boolean\n    Whether to print out the full DataFrame repr for wide DataFrames across\n    multiple lines, `max_columns` is still respected, but the output will\n    wrap-around across multiple \"pages\" if its width exceeds `display.width`.\n    [default: True] [currently: True]display.float_format : callable\n    The callable should accept a floating point number and return\n    a string with the desired format of the number. This is used\n    in some places like SeriesFormatter.\n    See formats.format.EngFormatter for an example.\n    [default: None] [currently: None]display.html.border : int\n    A ``border=value`` attribute is inserted in the ``<table>`` tag\n    for the DataFrame HTML repr.\n    [default: 1] [currently: 1]display.html.table_schema : boolean\n    Whether to publish a Table Schema representation for frontends\n    that support it.\n    (default: False)\n    [default: False] [currently: False]display.html.use_mathjax : boolean\n    When True, Jupyter notebook will process table contents using MathJax,\n    rendering mathematical expressions enclosed by the dollar symbol.\n    (default: True)\n    [default: True] [currently: True]display.large_repr : 'truncate'/'info'\n    For DataFrames exceeding max_rows/max_cols, the repr (and HTML repr) can\n    show a truncated table (the default from 0.13), or switch to the view from\n    df.info() (the behaviour in earlier versions of pandas).\n    [default: truncate] [currently: truncate]display.latex.escape : bool\n    This specifies if the to_latex method of a Dataframe uses escapes special\n    characters.\n    Valid values: False,True\n    [default: True] [currently: True]display.latex.longtable :bool\n    This specifies if the to_latex method of a Dataframe uses the longtable\n    format.\n    Valid values: False,True\n    [default: False] [currently: False]display.latex.multicolumn : bool\n    This specifies if the to_latex method of a Dataframe uses multicolumns\n    to pretty-print MultiIndex columns.\n    Valid values: False,True\n    [default: True] [currently: True]display.latex.multicolumn_format : bool\n    This specifies if the to_latex method of a Dataframe uses multicolumns\n    to pretty-print MultiIndex columns.\n    Valid values: False,True\n    [default: l] [currently: l]display.latex.multirow : bool\n    This specifies if the to_latex method of a Dataframe uses multirows\n    to pretty-print MultiIndex rows.\n    Valid values: False,True\n    [default: False] [currently: False]display.latex.repr : boolean\n    Whether to produce a latex DataFrame representation for jupyter\n    environments that support it.\n    (default: False)\n    [default: False] [currently: False]display.max_categories : int\n    This sets the maximum number of categories pandas should output when\n    printing out a `Categorical` or a Series of dtype \"category\".\n    [default: 8] [currently: 8]display.max_columns : int\n    If max_cols is exceeded, switch to truncate view. Depending on\n    `large_repr`, objects are either centrally truncated or printed as\n    a summary view. 'None' value means unlimited.\n\n    In case python/IPython is running in a terminal and `large_repr`\n    equals 'truncate' this can be set to 0 and pandas will auto-detect\n    the width of the terminal and print a truncated object which fits\n    the screen width. The IPython notebook, IPython qtconsole, or IDLE\n    do not run in a terminal and hence it is not possible to do\n    correct auto-detection.\n    [default: 0] [currently: 0]display.max_colwidth : int\n    The maximum width in characters of a column in the repr of\n    a pandas data structure. When the column overflows, a \"...\"\n    placeholder is embedded in the output.\n    [default: 50] [currently: 50]display.max_info_columns : int\n    max_info_columns is used in DataFrame.info method to decide if\n    per column information will be printed.\n    [default: 100] [currently: 100]display.max_info_rows : int or None\n    df.info() will usually show null-counts for each column.\n    For large frames this can be quite slow. max_info_rows and max_info_cols\n    limit this null check only to frames with smaller dimensions than\n    specified.\n    [default: 1690785] [currently: 1690785]display.max_rows : int\n    If max_rows is exceeded, switch to truncate view. Depending on\n    `large_repr`, objects are either centrally truncated or printed as\n    a summary view. 'None' value means unlimited.\n\n    In case python/IPython is running in a terminal and `large_repr`\n    equals 'truncate' this can be set to 0 and pandas will auto-detect\n    the height of the terminal and print a truncated object which fits\n    the screen height. The IPython notebook, IPython qtconsole, or\n    IDLE do not run in a terminal and hence it is not possible to do\n    correct auto-detection.\n    [default: 60] [currently: 60]display.max_seq_items : int or None\n    when pretty-printing a long sequence, no more then `max_seq_items`\n    will be printed. If items are omitted, they will be denoted by the\n    addition of \"...\" to the resulting string.\n\n    If set to None, the number of items to be printed is unlimited.\n    [default: 100] [currently: 100]display.memory_usage : bool, string or None\n    This specifies if the memory usage of a DataFrame should be displayed when\n    df.info() is called. Valid values True,False,'deep'\n    [default: True] [currently: True]display.min_rows : int\n    The numbers of rows to show in a truncated view (when `max_rows` is\n    exceeded). Ignored when `max_rows` is set to None or 0. When set to\n    None, follows the value of `max_rows`.\n    [default: 10] [currently: 10]display.multi_sparse : boolean\n    \"sparsify\" MultiIndex display (don't display repeated\n    elements in outer levels within groups)\n    [default: True] [currently: True]display.notebook_repr_html : boolean\n    When True, IPython notebook will use html representation for\n    pandas objects (if it is available).\n    [default: True] [currently: True]display.pprint_nest_depth : int\n    Controls the number of nested levels to process when pretty-printing\n    [default: 3] [currently: 3]display.precision : int\n    Floating point output precision (number of significant digits). This is\n    only a suggestion\n    [default: 6] [currently: 6]display.show_dimensions : boolean or 'truncate'\n    Whether to print out dimensions at the end of DataFrame repr.\n    If 'truncate' is specified, only print out the dimensions if the\n    frame is truncated (e.g. not display all rows and/or columns)\n    [default: truncate] [currently: truncate]display.unicode.ambiguous_as_wide : boolean\n    Whether to use the Unicode East Asian Width to calculate the display text\n    width.\n    Enabling this may affect to the performance (default: False)\n    [default: False] [currently: False]display.unicode.east_asian_width : boolean\n    Whether to use the Unicode East Asian Width to calculate the display text\n    width.\n    Enabling this may affect to the performance (default: False)\n    [default: False] [currently: False]display.width : int\n    Width of the display in characters. In case python/IPython is running in\n    a terminal this can be set to None and pandas will correctly auto-detect\n    the width.\n    Note that the IPython notebook, IPython qtconsole, or IDLE do not run in a\n    terminal and hence it is not possible to correctly detect the width.\n    [default: 80] [currently: 80]io.excel.ods.reader : string\n    The default Excel reader engine for 'ods' files. Available options:\n    auto, odf.\n    [default: auto] [currently: auto]io.excel.xls.reader : string\n    The default Excel reader engine for 'xls' files. Available options:\n    auto, xlrd.\n    [default: auto] [currently: auto]io.excel.xls.writer : string\n    The default Excel writer engine for 'xls' files. Available options:\n    auto, xlwt.\n    [default: auto] [currently: auto]io.excel.xlsm.reader : string\n    The default Excel reader engine for 'xlsm' files. Available options:\n    auto, xlrd, openpyxl.\n    [default: auto] [currently: auto]io.excel.xlsm.writer : string\n    The default Excel writer engine for 'xlsm' files. Available options:\n    auto, openpyxl.\n    [default: auto] [currently: auto]io.excel.xlsx.reader : string\n    The default Excel reader engine for 'xlsx' files. Available options:\n    auto, xlrd, openpyxl.\n    [default: auto] [currently: auto]io.excel.xlsx.writer : string\n    The default Excel writer engine for 'xlsx' files. Available options:\n    auto, openpyxl, xlsxwriter.\n    [default: auto] [currently: auto]io.hdf.default_format : format\n    default format writing format, if None, then\n    put will default to 'fixed' and append will default to 'table'\n    [default: None] [currently: None]io.hdf.dropna_table : boolean\n    drop ALL nan rows when appending to a table\n    [default: False] [currently: False]io.parquet.engine : string\n    The default parquet reader/writer engine. Available options:\n    'auto', 'pyarrow', 'fastparquet', the default is 'auto'\n    [default: auto] [currently: auto]mode.chained_assignment : string\n    Raise an exception, warn, or no action if trying to use chained assignment,\n    The default is warn\n    [default: warn] [currently: warn]mode.sim_interactive : boolean\n    Whether to simulate interactive mode for purposes of testing\n    [default: False] [currently: False]mode.use_inf_as_na : boolean\n    True means treat None, NaN, INF, -INF as NA (old way),\n    False means None and NaN are null, but INF, -INF are not NA\n    (new way).\n    [default: False] [currently: False]mode.use_inf_as_null : boolean\n    use_inf_as_null had been deprecated and will be removed in a future\n    version. Use `use_inf_as_na` instead.\n    [default: False] [currently: False]\n    (Deprecated, use `mode.use_inf_as_na` instead.)plotting.backend : str\n    The plotting backend to use. The default value is \"matplotlib\", the\n    backend provided with pandas. Other backends can be specified by\n    prodiving the name of the module that implements the backend.\n    [default: matplotlib] [currently: matplotlib]plotting.matplotlib.register_converters : bool\n    Whether to register converters with matplotlib's units registry for\n    dates, times, datetimes, and Periods. Toggling to False will remove\n    the converters, restoring any converters that pandas overwrote.\n    [default: True] [currently: True]", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR01", "Parameters {**kwds, *args} not documented"], ["PR02", "Unknown parameters {pat}"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Working with options", "subsection": "", "shared_code_with": "pandas.describe_option"}, "pandas.get_option": {"type": "CallableDynamicDoc", "docstring": "get_option(pat)\n\nRetrieves the value of the specified option.\n\nAvailable options:\n\n- compute.[use_bottleneck, use_numexpr]\n- display.[chop_threshold, colheader_justify, column_space, date_dayfirst,\n  date_yearfirst, encoding, expand_frame_repr, float_format]\n- display.html.[border, table_schema, use_mathjax]\n- display.[large_repr]\n- display.latex.[escape, longtable, multicolumn, multicolumn_format, multirow,\n  repr]\n- display.[max_categories, max_columns, max_colwidth, max_info_columns,\n  max_info_rows, max_rows, max_seq_items, memory_usage, min_rows, multi_sparse,\n  notebook_repr_html, pprint_nest_depth, precision, show_dimensions]\n- display.unicode.[ambiguous_as_wide, east_asian_width]\n- display.[width]\n- io.excel.ods.[reader]\n- io.excel.xls.[reader, writer]\n- io.excel.xlsm.[reader, writer]\n- io.excel.xlsx.[reader, writer]\n- io.hdf.[default_format, dropna_table]\n- io.parquet.[engine]\n- mode.[chained_assignment, sim_interactive, use_inf_as_na, use_inf_as_null]\n- plotting.[backend]\n- plotting.matplotlib.[register_converters]\n\nParameters\n----------\npat : str\n    Regexp which should match a single option.\n    Note: partial matches are supported for convenience, but unless you use the\n    full option name (e.g. x.y.z.option_name), your code may break in future\n    versions if new options with similar names are introduced.\n\nReturns\n-------\nresult : the value of the option\n\nRaises\n------\nOptionError : if no such option exists\n\nNotes\n-----\nThe available options with its descriptions:\n\ncompute.use_bottleneck : bool\n    Use the bottleneck library to accelerate if it is installed,\n    the default is True\n    Valid values: False,True\n    [default: True] [currently: True]compute.use_numexpr : bool\n    Use the numexpr library to accelerate computation if it is installed,\n    the default is True\n    Valid values: False,True\n    [default: True] [currently: True]display.chop_threshold : float or None\n    if set to a float value, all float values smaller then the given threshold\n    will be displayed as exactly 0 by repr and friends.\n    [default: None] [currently: None]display.colheader_justify : 'left'/'right'\n    Controls the justification of column headers. used by DataFrameFormatter.\n    [default: right] [currently: right]display.column_space No description available.\n    [default: 12] [currently: 12]display.date_dayfirst : boolean\n    When True, prints and parses dates with the day first, eg 20/01/2005\n    [default: False] [currently: False]display.date_yearfirst : boolean\n    When True, prints and parses dates with the year first, eg 2005/01/20\n    [default: False] [currently: False]display.encoding : str/unicode\n    Defaults to the detected encoding of the console.\n    Specifies the encoding to be used for strings returned by to_string,\n    these are generally strings meant to be displayed on the console.\n    [default: UTF-8] [currently: UTF-8]display.expand_frame_repr : boolean\n    Whether to print out the full DataFrame repr for wide DataFrames across\n    multiple lines, `max_columns` is still respected, but the output will\n    wrap-around across multiple \"pages\" if its width exceeds `display.width`.\n    [default: True] [currently: True]display.float_format : callable\n    The callable should accept a floating point number and return\n    a string with the desired format of the number. This is used\n    in some places like SeriesFormatter.\n    See formats.format.EngFormatter for an example.\n    [default: None] [currently: None]display.html.border : int\n    A ``border=value`` attribute is inserted in the ``<table>`` tag\n    for the DataFrame HTML repr.\n    [default: 1] [currently: 1]display.html.table_schema : boolean\n    Whether to publish a Table Schema representation for frontends\n    that support it.\n    (default: False)\n    [default: False] [currently: False]display.html.use_mathjax : boolean\n    When True, Jupyter notebook will process table contents using MathJax,\n    rendering mathematical expressions enclosed by the dollar symbol.\n    (default: True)\n    [default: True] [currently: True]display.large_repr : 'truncate'/'info'\n    For DataFrames exceeding max_rows/max_cols, the repr (and HTML repr) can\n    show a truncated table (the default from 0.13), or switch to the view from\n    df.info() (the behaviour in earlier versions of pandas).\n    [default: truncate] [currently: truncate]display.latex.escape : bool\n    This specifies if the to_latex method of a Dataframe uses escapes special\n    characters.\n    Valid values: False,True\n    [default: True] [currently: True]display.latex.longtable :bool\n    This specifies if the to_latex method of a Dataframe uses the longtable\n    format.\n    Valid values: False,True\n    [default: False] [currently: False]display.latex.multicolumn : bool\n    This specifies if the to_latex method of a Dataframe uses multicolumns\n    to pretty-print MultiIndex columns.\n    Valid values: False,True\n    [default: True] [currently: True]display.latex.multicolumn_format : bool\n    This specifies if the to_latex method of a Dataframe uses multicolumns\n    to pretty-print MultiIndex columns.\n    Valid values: False,True\n    [default: l] [currently: l]display.latex.multirow : bool\n    This specifies if the to_latex method of a Dataframe uses multirows\n    to pretty-print MultiIndex rows.\n    Valid values: False,True\n    [default: False] [currently: False]display.latex.repr : boolean\n    Whether to produce a latex DataFrame representation for jupyter\n    environments that support it.\n    (default: False)\n    [default: False] [currently: False]display.max_categories : int\n    This sets the maximum number of categories pandas should output when\n    printing out a `Categorical` or a Series of dtype \"category\".\n    [default: 8] [currently: 8]display.max_columns : int\n    If max_cols is exceeded, switch to truncate view. Depending on\n    `large_repr`, objects are either centrally truncated or printed as\n    a summary view. 'None' value means unlimited.\n\n    In case python/IPython is running in a terminal and `large_repr`\n    equals 'truncate' this can be set to 0 and pandas will auto-detect\n    the width of the terminal and print a truncated object which fits\n    the screen width. The IPython notebook, IPython qtconsole, or IDLE\n    do not run in a terminal and hence it is not possible to do\n    correct auto-detection.\n    [default: 0] [currently: 0]display.max_colwidth : int\n    The maximum width in characters of a column in the repr of\n    a pandas data structure. When the column overflows, a \"...\"\n    placeholder is embedded in the output.\n    [default: 50] [currently: 50]display.max_info_columns : int\n    max_info_columns is used in DataFrame.info method to decide if\n    per column information will be printed.\n    [default: 100] [currently: 100]display.max_info_rows : int or None\n    df.info() will usually show null-counts for each column.\n    For large frames this can be quite slow. max_info_rows and max_info_cols\n    limit this null check only to frames with smaller dimensions than\n    specified.\n    [default: 1690785] [currently: 1690785]display.max_rows : int\n    If max_rows is exceeded, switch to truncate view. Depending on\n    `large_repr`, objects are either centrally truncated or printed as\n    a summary view. 'None' value means unlimited.\n\n    In case python/IPython is running in a terminal and `large_repr`\n    equals 'truncate' this can be set to 0 and pandas will auto-detect\n    the height of the terminal and print a truncated object which fits\n    the screen height. The IPython notebook, IPython qtconsole, or\n    IDLE do not run in a terminal and hence it is not possible to do\n    correct auto-detection.\n    [default: 60] [currently: 60]display.max_seq_items : int or None\n    when pretty-printing a long sequence, no more then `max_seq_items`\n    will be printed. If items are omitted, they will be denoted by the\n    addition of \"...\" to the resulting string.\n\n    If set to None, the number of items to be printed is unlimited.\n    [default: 100] [currently: 100]display.memory_usage : bool, string or None\n    This specifies if the memory usage of a DataFrame should be displayed when\n    df.info() is called. Valid values True,False,'deep'\n    [default: True] [currently: True]display.min_rows : int\n    The numbers of rows to show in a truncated view (when `max_rows` is\n    exceeded). Ignored when `max_rows` is set to None or 0. When set to\n    None, follows the value of `max_rows`.\n    [default: 10] [currently: 10]display.multi_sparse : boolean\n    \"sparsify\" MultiIndex display (don't display repeated\n    elements in outer levels within groups)\n    [default: True] [currently: True]display.notebook_repr_html : boolean\n    When True, IPython notebook will use html representation for\n    pandas objects (if it is available).\n    [default: True] [currently: True]display.pprint_nest_depth : int\n    Controls the number of nested levels to process when pretty-printing\n    [default: 3] [currently: 3]display.precision : int\n    Floating point output precision (number of significant digits). This is\n    only a suggestion\n    [default: 6] [currently: 6]display.show_dimensions : boolean or 'truncate'\n    Whether to print out dimensions at the end of DataFrame repr.\n    If 'truncate' is specified, only print out the dimensions if the\n    frame is truncated (e.g. not display all rows and/or columns)\n    [default: truncate] [currently: truncate]display.unicode.ambiguous_as_wide : boolean\n    Whether to use the Unicode East Asian Width to calculate the display text\n    width.\n    Enabling this may affect to the performance (default: False)\n    [default: False] [currently: False]display.unicode.east_asian_width : boolean\n    Whether to use the Unicode East Asian Width to calculate the display text\n    width.\n    Enabling this may affect to the performance (default: False)\n    [default: False] [currently: False]display.width : int\n    Width of the display in characters. In case python/IPython is running in\n    a terminal this can be set to None and pandas will correctly auto-detect\n    the width.\n    Note that the IPython notebook, IPython qtconsole, or IDLE do not run in a\n    terminal and hence it is not possible to correctly detect the width.\n    [default: 80] [currently: 80]io.excel.ods.reader : string\n    The default Excel reader engine for 'ods' files. Available options:\n    auto, odf.\n    [default: auto] [currently: auto]io.excel.xls.reader : string\n    The default Excel reader engine for 'xls' files. Available options:\n    auto, xlrd.\n    [default: auto] [currently: auto]io.excel.xls.writer : string\n    The default Excel writer engine for 'xls' files. Available options:\n    auto, xlwt.\n    [default: auto] [currently: auto]io.excel.xlsm.reader : string\n    The default Excel reader engine for 'xlsm' files. Available options:\n    auto, xlrd, openpyxl.\n    [default: auto] [currently: auto]io.excel.xlsm.writer : string\n    The default Excel writer engine for 'xlsm' files. Available options:\n    auto, openpyxl.\n    [default: auto] [currently: auto]io.excel.xlsx.reader : string\n    The default Excel reader engine for 'xlsx' files. Available options:\n    auto, xlrd, openpyxl.\n    [default: auto] [currently: auto]io.excel.xlsx.writer : string\n    The default Excel writer engine for 'xlsx' files. Available options:\n    auto, openpyxl, xlsxwriter.\n    [default: auto] [currently: auto]io.hdf.default_format : format\n    default format writing format, if None, then\n    put will default to 'fixed' and append will default to 'table'\n    [default: None] [currently: None]io.hdf.dropna_table : boolean\n    drop ALL nan rows when appending to a table\n    [default: False] [currently: False]io.parquet.engine : string\n    The default parquet reader/writer engine. Available options:\n    'auto', 'pyarrow', 'fastparquet', the default is 'auto'\n    [default: auto] [currently: auto]mode.chained_assignment : string\n    Raise an exception, warn, or no action if trying to use chained assignment,\n    The default is warn\n    [default: warn] [currently: warn]mode.sim_interactive : boolean\n    Whether to simulate interactive mode for purposes of testing\n    [default: False] [currently: False]mode.use_inf_as_na : boolean\n    True means treat None, NaN, INF, -INF as NA (old way),\n    False means None and NaN are null, but INF, -INF are not NA\n    (new way).\n    [default: False] [currently: False]mode.use_inf_as_null : boolean\n    use_inf_as_null had been deprecated and will be removed in a future\n    version. Use `use_inf_as_na` instead.\n    [default: False] [currently: False]\n    (Deprecated, use `mode.use_inf_as_na` instead.)plotting.backend : str\n    The plotting backend to use. The default value is \"matplotlib\", the\n    backend provided with pandas. Other backends can be specified by\n    prodiving the name of the module that implements the backend.\n    [default: matplotlib] [currently: matplotlib]plotting.matplotlib.register_converters : bool\n    Whether to register converters with matplotlib's units registry for\n    dates, times, datetimes, and Periods. Toggling to False will remove\n    the converters, restoring any converters that pandas overwrote.\n    [default: True] [currently: True]", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR01", "Parameters {**kwds, *args} not documented"], ["PR02", "Unknown parameters {pat}"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Working with options", "subsection": "", "shared_code_with": "pandas.reset_option"}, "pandas.set_option": {"type": "CallableDynamicDoc", "docstring": "set_option(pat, value)\n\nSets the value of the specified option.\n\nAvailable options:\n\n- compute.[use_bottleneck, use_numexpr]\n- display.[chop_threshold, colheader_justify, column_space, date_dayfirst,\n  date_yearfirst, encoding, expand_frame_repr, float_format]\n- display.html.[border, table_schema, use_mathjax]\n- display.[large_repr]\n- display.latex.[escape, longtable, multicolumn, multicolumn_format, multirow,\n  repr]\n- display.[max_categories, max_columns, max_colwidth, max_info_columns,\n  max_info_rows, max_rows, max_seq_items, memory_usage, min_rows, multi_sparse,\n  notebook_repr_html, pprint_nest_depth, precision, show_dimensions]\n- display.unicode.[ambiguous_as_wide, east_asian_width]\n- display.[width]\n- io.excel.ods.[reader]\n- io.excel.xls.[reader, writer]\n- io.excel.xlsm.[reader, writer]\n- io.excel.xlsx.[reader, writer]\n- io.hdf.[default_format, dropna_table]\n- io.parquet.[engine]\n- mode.[chained_assignment, sim_interactive, use_inf_as_na, use_inf_as_null]\n- plotting.[backend]\n- plotting.matplotlib.[register_converters]\n\nParameters\n----------\npat : str\n    Regexp which should match a single option.\n    Note: partial matches are supported for convenience, but unless you use the\n    full option name (e.g. x.y.z.option_name), your code may break in future\n    versions if new options with similar names are introduced.\nvalue : object\n    New value of option.\n\nReturns\n-------\nNone\n\nRaises\n------\nOptionError if no such option exists\n\nNotes\n-----\nThe available options with its descriptions:\n\ncompute.use_bottleneck : bool\n    Use the bottleneck library to accelerate if it is installed,\n    the default is True\n    Valid values: False,True\n    [default: True] [currently: True]compute.use_numexpr : bool\n    Use the numexpr library to accelerate computation if it is installed,\n    the default is True\n    Valid values: False,True\n    [default: True] [currently: True]display.chop_threshold : float or None\n    if set to a float value, all float values smaller then the given threshold\n    will be displayed as exactly 0 by repr and friends.\n    [default: None] [currently: None]display.colheader_justify : 'left'/'right'\n    Controls the justification of column headers. used by DataFrameFormatter.\n    [default: right] [currently: right]display.column_space No description available.\n    [default: 12] [currently: 12]display.date_dayfirst : boolean\n    When True, prints and parses dates with the day first, eg 20/01/2005\n    [default: False] [currently: False]display.date_yearfirst : boolean\n    When True, prints and parses dates with the year first, eg 2005/01/20\n    [default: False] [currently: False]display.encoding : str/unicode\n    Defaults to the detected encoding of the console.\n    Specifies the encoding to be used for strings returned by to_string,\n    these are generally strings meant to be displayed on the console.\n    [default: UTF-8] [currently: UTF-8]display.expand_frame_repr : boolean\n    Whether to print out the full DataFrame repr for wide DataFrames across\n    multiple lines, `max_columns` is still respected, but the output will\n    wrap-around across multiple \"pages\" if its width exceeds `display.width`.\n    [default: True] [currently: True]display.float_format : callable\n    The callable should accept a floating point number and return\n    a string with the desired format of the number. This is used\n    in some places like SeriesFormatter.\n    See formats.format.EngFormatter for an example.\n    [default: None] [currently: None]display.html.border : int\n    A ``border=value`` attribute is inserted in the ``<table>`` tag\n    for the DataFrame HTML repr.\n    [default: 1] [currently: 1]display.html.table_schema : boolean\n    Whether to publish a Table Schema representation for frontends\n    that support it.\n    (default: False)\n    [default: False] [currently: False]display.html.use_mathjax : boolean\n    When True, Jupyter notebook will process table contents using MathJax,\n    rendering mathematical expressions enclosed by the dollar symbol.\n    (default: True)\n    [default: True] [currently: True]display.large_repr : 'truncate'/'info'\n    For DataFrames exceeding max_rows/max_cols, the repr (and HTML repr) can\n    show a truncated table (the default from 0.13), or switch to the view from\n    df.info() (the behaviour in earlier versions of pandas).\n    [default: truncate] [currently: truncate]display.latex.escape : bool\n    This specifies if the to_latex method of a Dataframe uses escapes special\n    characters.\n    Valid values: False,True\n    [default: True] [currently: True]display.latex.longtable :bool\n    This specifies if the to_latex method of a Dataframe uses the longtable\n    format.\n    Valid values: False,True\n    [default: False] [currently: False]display.latex.multicolumn : bool\n    This specifies if the to_latex method of a Dataframe uses multicolumns\n    to pretty-print MultiIndex columns.\n    Valid values: False,True\n    [default: True] [currently: True]display.latex.multicolumn_format : bool\n    This specifies if the to_latex method of a Dataframe uses multicolumns\n    to pretty-print MultiIndex columns.\n    Valid values: False,True\n    [default: l] [currently: l]display.latex.multirow : bool\n    This specifies if the to_latex method of a Dataframe uses multirows\n    to pretty-print MultiIndex rows.\n    Valid values: False,True\n    [default: False] [currently: False]display.latex.repr : boolean\n    Whether to produce a latex DataFrame representation for jupyter\n    environments that support it.\n    (default: False)\n    [default: False] [currently: False]display.max_categories : int\n    This sets the maximum number of categories pandas should output when\n    printing out a `Categorical` or a Series of dtype \"category\".\n    [default: 8] [currently: 8]display.max_columns : int\n    If max_cols is exceeded, switch to truncate view. Depending on\n    `large_repr`, objects are either centrally truncated or printed as\n    a summary view. 'None' value means unlimited.\n\n    In case python/IPython is running in a terminal and `large_repr`\n    equals 'truncate' this can be set to 0 and pandas will auto-detect\n    the width of the terminal and print a truncated object which fits\n    the screen width. The IPython notebook, IPython qtconsole, or IDLE\n    do not run in a terminal and hence it is not possible to do\n    correct auto-detection.\n    [default: 0] [currently: 0]display.max_colwidth : int\n    The maximum width in characters of a column in the repr of\n    a pandas data structure. When the column overflows, a \"...\"\n    placeholder is embedded in the output.\n    [default: 50] [currently: 50]display.max_info_columns : int\n    max_info_columns is used in DataFrame.info method to decide if\n    per column information will be printed.\n    [default: 100] [currently: 100]display.max_info_rows : int or None\n    df.info() will usually show null-counts for each column.\n    For large frames this can be quite slow. max_info_rows and max_info_cols\n    limit this null check only to frames with smaller dimensions than\n    specified.\n    [default: 1690785] [currently: 1690785]display.max_rows : int\n    If max_rows is exceeded, switch to truncate view. Depending on\n    `large_repr`, objects are either centrally truncated or printed as\n    a summary view. 'None' value means unlimited.\n\n    In case python/IPython is running in a terminal and `large_repr`\n    equals 'truncate' this can be set to 0 and pandas will auto-detect\n    the height of the terminal and print a truncated object which fits\n    the screen height. The IPython notebook, IPython qtconsole, or\n    IDLE do not run in a terminal and hence it is not possible to do\n    correct auto-detection.\n    [default: 60] [currently: 60]display.max_seq_items : int or None\n    when pretty-printing a long sequence, no more then `max_seq_items`\n    will be printed. If items are omitted, they will be denoted by the\n    addition of \"...\" to the resulting string.\n\n    If set to None, the number of items to be printed is unlimited.\n    [default: 100] [currently: 100]display.memory_usage : bool, string or None\n    This specifies if the memory usage of a DataFrame should be displayed when\n    df.info() is called. Valid values True,False,'deep'\n    [default: True] [currently: True]display.min_rows : int\n    The numbers of rows to show in a truncated view (when `max_rows` is\n    exceeded). Ignored when `max_rows` is set to None or 0. When set to\n    None, follows the value of `max_rows`.\n    [default: 10] [currently: 10]display.multi_sparse : boolean\n    \"sparsify\" MultiIndex display (don't display repeated\n    elements in outer levels within groups)\n    [default: True] [currently: True]display.notebook_repr_html : boolean\n    When True, IPython notebook will use html representation for\n    pandas objects (if it is available).\n    [default: True] [currently: True]display.pprint_nest_depth : int\n    Controls the number of nested levels to process when pretty-printing\n    [default: 3] [currently: 3]display.precision : int\n    Floating point output precision (number of significant digits). This is\n    only a suggestion\n    [default: 6] [currently: 6]display.show_dimensions : boolean or 'truncate'\n    Whether to print out dimensions at the end of DataFrame repr.\n    If 'truncate' is specified, only print out the dimensions if the\n    frame is truncated (e.g. not display all rows and/or columns)\n    [default: truncate] [currently: truncate]display.unicode.ambiguous_as_wide : boolean\n    Whether to use the Unicode East Asian Width to calculate the display text\n    width.\n    Enabling this may affect to the performance (default: False)\n    [default: False] [currently: False]display.unicode.east_asian_width : boolean\n    Whether to use the Unicode East Asian Width to calculate the display text\n    width.\n    Enabling this may affect to the performance (default: False)\n    [default: False] [currently: False]display.width : int\n    Width of the display in characters. In case python/IPython is running in\n    a terminal this can be set to None and pandas will correctly auto-detect\n    the width.\n    Note that the IPython notebook, IPython qtconsole, or IDLE do not run in a\n    terminal and hence it is not possible to correctly detect the width.\n    [default: 80] [currently: 80]io.excel.ods.reader : string\n    The default Excel reader engine for 'ods' files. Available options:\n    auto, odf.\n    [default: auto] [currently: auto]io.excel.xls.reader : string\n    The default Excel reader engine for 'xls' files. Available options:\n    auto, xlrd.\n    [default: auto] [currently: auto]io.excel.xls.writer : string\n    The default Excel writer engine for 'xls' files. Available options:\n    auto, xlwt.\n    [default: auto] [currently: auto]io.excel.xlsm.reader : string\n    The default Excel reader engine for 'xlsm' files. Available options:\n    auto, xlrd, openpyxl.\n    [default: auto] [currently: auto]io.excel.xlsm.writer : string\n    The default Excel writer engine for 'xlsm' files. Available options:\n    auto, openpyxl.\n    [default: auto] [currently: auto]io.excel.xlsx.reader : string\n    The default Excel reader engine for 'xlsx' files. Available options:\n    auto, xlrd, openpyxl.\n    [default: auto] [currently: auto]io.excel.xlsx.writer : string\n    The default Excel writer engine for 'xlsx' files. Available options:\n    auto, openpyxl, xlsxwriter.\n    [default: auto] [currently: auto]io.hdf.default_format : format\n    default format writing format, if None, then\n    put will default to 'fixed' and append will default to 'table'\n    [default: None] [currently: None]io.hdf.dropna_table : boolean\n    drop ALL nan rows when appending to a table\n    [default: False] [currently: False]io.parquet.engine : string\n    The default parquet reader/writer engine. Available options:\n    'auto', 'pyarrow', 'fastparquet', the default is 'auto'\n    [default: auto] [currently: auto]mode.chained_assignment : string\n    Raise an exception, warn, or no action if trying to use chained assignment,\n    The default is warn\n    [default: warn] [currently: warn]mode.sim_interactive : boolean\n    Whether to simulate interactive mode for purposes of testing\n    [default: False] [currently: False]mode.use_inf_as_na : boolean\n    True means treat None, NaN, INF, -INF as NA (old way),\n    False means None and NaN are null, but INF, -INF are not NA\n    (new way).\n    [default: False] [currently: False]mode.use_inf_as_null : boolean\n    use_inf_as_null had been deprecated and will be removed in a future\n    version. Use `use_inf_as_na` instead.\n    [default: False] [currently: False]\n    (Deprecated, use `mode.use_inf_as_na` instead.)plotting.backend : str\n    The plotting backend to use. The default value is \"matplotlib\", the\n    backend provided with pandas. Other backends can be specified by\n    prodiving the name of the module that implements the backend.\n    [default: matplotlib] [currently: matplotlib]plotting.matplotlib.register_converters : bool\n    Whether to register converters with matplotlib's units registry for\n    dates, times, datetimes, and Periods. Toggling to False will remove\n    the converters, restoring any converters that pandas overwrote.\n    [default: True] [currently: True]", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR01", "Parameters {**kwds, *args} not documented"], ["PR02", "Unknown parameters {pat, value}"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Working with options", "subsection": "", "shared_code_with": "pandas.get_option"}, "pandas.option_context": {"type": "type", "docstring": "Context manager to temporarily set options in the `with` statement context.\n\nYou need to invoke as ``option_context(pat, val, [(pat, val), ...])``.\n\nExamples\n--------\n\n>>> with option_context('display.max_rows', 10, 'display.max_columns', 5):\n...     ...", "deprecated": false, "file": "pandas/_config/config.py", "file_line": 382, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/_config/config.py#L382", "errors": [["PR01", "Parameters {*args} not documented"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 9, in pandas.option_context\nFailed example:\n    with option_context('display.max_rows', 10, 'display.max_columns', 5):\n        ...\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.option_context[0]>\", line 1, in <module>\n        with option_context('display.max_rows', 10, 'display.max_columns', 5):\n    NameError: name 'option_context' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'option_context'"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 9, in pandas.option_context\nFailed example:\n    with option_context('display.max_rows', 10, 'display.max_columns', 5):\n        ...\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.option_context[0]>\", line 1, in <module>\n        with option_context('display.max_rows', 10, 'display.max_columns', 5):\n    NameError: name 'option_context' is not defined\n", "in_api": true, "section": "Working with options", "subsection": "", "shared_code_with": ""}, "pandas.testing.assert_frame_equal": {"type": "function", "docstring": "Check that left and right DataFrame are equal.\n\nThis function is intended to compare two DataFrames and output any\ndifferences. Is is mostly intended for use in unit tests.\nAdditional parameters allow varying the strictness of the\nequality checks performed.\n\nParameters\n----------\nleft : DataFrame\n    First DataFrame to compare.\nright : DataFrame\n    Second DataFrame to compare.\ncheck_dtype : bool, default True\n    Whether to check the DataFrame dtype is identical.\ncheck_index_type : bool / string {'equiv'}, default 'equiv'\n    Whether to check the Index class, dtype and inferred_type\n    are identical.\ncheck_column_type : bool / string {'equiv'}, default 'equiv'\n    Whether to check the columns class, dtype and inferred_type\n    are identical. Is passed as the ``exact`` argument of\n    :func:`assert_index_equal`.\ncheck_frame_type : bool, default True\n    Whether to check the DataFrame class is identical.\ncheck_less_precise : bool or int, default False\n    Specify comparison precision. Only used when check_exact is False.\n    5 digits (False) or 3 digits (True) after decimal points are compared.\n    If int, then specify the digits to compare.\n\n    When comparing two numbers, if the first number has magnitude less\n    than 1e-5, we compare the two numbers directly and check whether\n    they are equivalent within the specified precision. Otherwise, we\n    compare the **ratio** of the second number to the first number and\n    check whether it is equivalent to 1 within the specified precision.\ncheck_names : bool, default True\n    Whether to check that the `names` attribute for both the `index`\n    and `column` attributes of the DataFrame is identical, i.e.\n\n    * left.index.names == right.index.names\n    * left.columns.names == right.columns.names\nby_blocks : bool, default False\n    Specify how to compare internal data. If False, compare by columns.\n    If True, compare by blocks.\ncheck_exact : bool, default False\n    Whether to compare number exactly.\ncheck_datetimelike_compat : bool, default False\n    Compare datetime-like which is comparable ignoring dtype.\ncheck_categorical : bool, default True\n    Whether to compare internal Categorical exactly.\ncheck_like : bool, default False\n    If True, ignore the order of index & columns.\n    Note: index labels must match their respective rows\n    (same as in columns) - same labels must be with the same data.\nobj : str, default 'DataFrame'\n    Specify object name being compared, internally used to show appropriate\n    assertion message.\n\nSee Also\n--------\nassert_series_equal : Equivalent method for asserting Series equality.\nDataFrame.equals : Check DataFrame equality.\n\nExamples\n--------\nThis example shows comparing two DataFrames that are equal\nbut with columns of differing dtypes.\n\n>>> from pandas.util.testing import assert_frame_equal\n>>> df1 = pd.DataFrame({'a': [1, 2], 'b': [3, 4]})\n>>> df2 = pd.DataFrame({'a': [1, 2], 'b': [3.0, 4.0]})\n\ndf1 equals itself.\n\n>>> assert_frame_equal(df1, df1)\n\ndf1 differs from df2 as column 'b' is of a different type.\n\n>>> assert_frame_equal(df1, df2)\nTraceback (most recent call last):\nAssertionError: Attributes are different\n...\nAttribute \"dtype\" are different\n[left]:  int64\n[right]: float64\n\nIgnore differing dtypes in columns with check_dtype.\n\n>>> assert_frame_equal(df1, df2, check_dtype=False)", "deprecated": false, "file": "pandas/util/testing.py", "file_line": 1222, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/testing.py#L1222", "errors": [["PR06", "Parameter \"check_index_type\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"check_column_type\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"check_names\" description should finish with \".\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Testing functions", "subsection": "", "shared_code_with": ""}, "pandas.testing.assert_series_equal": {"type": "function", "docstring": "Check that left and right Series are equal.\n\nParameters\n----------\nleft : Series\nright : Series\ncheck_dtype : bool, default True\n    Whether to check the Series dtype is identical.\ncheck_index_type : bool / string {'equiv'}, default 'equiv'\n    Whether to check the Index class, dtype and inferred_type\n    are identical.\ncheck_series_type : bool, default True\n    Whether to check the Series class is identical.\ncheck_less_precise : bool or int, default False\n    Specify comparison precision. Only used when check_exact is False.\n    5 digits (False) or 3 digits (True) after decimal points are compared.\n    If int, then specify the digits to compare.\n\n    When comparing two numbers, if the first number has magnitude less\n    than 1e-5, we compare the two numbers directly and check whether\n    they are equivalent within the specified precision. Otherwise, we\n    compare the **ratio** of the second number to the first number and\n    check whether it is equivalent to 1 within the specified precision.\ncheck_names : bool, default True\n    Whether to check the Series and Index names attribute.\ncheck_exact : bool, default False\n    Whether to compare number exactly.\ncheck_datetimelike_compat : bool, default False\n    Compare datetime-like which is comparable ignoring dtype.\ncheck_categorical : bool, default True\n    Whether to compare internal Categorical exactly.\nobj : str, default 'Series'\n    Specify object name being compared, internally used to show appropriate\n    assertion message.", "deprecated": false, "file": "pandas/util/testing.py", "file_line": 1071, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/testing.py#L1071", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["PR07", "Parameter \"left\" has no description"], ["PR07", "Parameter \"right\" has no description"], ["PR06", "Parameter \"check_index_type\" type should use \"str\" instead of \"string\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Testing functions", "subsection": "", "shared_code_with": ""}, "pandas.testing.assert_index_equal": {"type": "function", "docstring": "Check that left and right Index are equal.\n\nParameters\n----------\nleft : Index\nright : Index\nexact : bool / string {'equiv'}, default 'equiv'\n    Whether to check the Index class, dtype and inferred_type\n    are identical. If 'equiv', then RangeIndex can be substituted for\n    Int64Index as well.\ncheck_names : bool, default True\n    Whether to check the names attribute.\ncheck_less_precise : bool or int, default False\n    Specify comparison precision. Only used when check_exact is False.\n    5 digits (False) or 3 digits (True) after decimal points are compared.\n    If int, then specify the digits to compare\ncheck_exact : bool, default True\n    Whether to compare number exactly.\ncheck_categorical : bool, default True\n    Whether to compare internal Categorical exactly.\nobj : str, default 'Index'\n    Specify object name being compared, internally used to show appropriate\n    assertion message", "deprecated": false, "file": "pandas/util/testing.py", "file_line": 573, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/testing.py#L573", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["PR07", "Parameter \"left\" has no description"], ["PR07", "Parameter \"right\" has no description"], ["PR06", "Parameter \"exact\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"check_less_precise\" description should finish with \".\""], ["PR09", "Parameter \"obj\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Testing functions", "subsection": "", "shared_code_with": ""}, "pandas.errors.DtypeWarning": {"type": "type", "docstring": "Warning raised when reading different dtypes in a column from a file.\n\nRaised for a dtype incompatibility. This can happen whenever `read_csv`\nor `read_table` encounter non-uniform dtypes in a column(s) of a given\nCSV file.\n\nSee Also\n--------\nread_csv : Read CSV (comma-separated) file into a DataFrame.\nread_table : Read general delimited file into a DataFrame.\n\nNotes\n-----\nThis warning is issued when dealing with larger files because the dtype\nchecking happens per chunk read.\n\nDespite the warning, the CSV file is read with mixed types in a single\ncolumn which will be an object type. See the examples below to better\nunderstand this issue.\n\nExamples\n--------\nThis example creates and reads a large CSV file with a column that contains\n`int` and `str`.\n\n>>> df = pd.DataFrame({'a': (['1'] * 100000 + ['X'] * 100000 +\n...                          ['1'] * 100000),\n...                    'b': ['b'] * 300000})\n>>> df.to_csv('test.csv', index=False)\n>>> df2 = pd.read_csv('test.csv')\n... # DtypeWarning: Columns (0) have mixed types\n\nImportant to notice that ``df2`` will contain both `str` and `int` for the\nsame input, '1'.\n\n>>> df2.iloc[262140, 0]\n'1'\n>>> type(df2.iloc[262140, 0])\n<class 'str'>\n>>> df2.iloc[262150, 0]\n1\n>>> type(df2.iloc[262150, 0])\n<class 'int'>\n\nOne way to solve this issue is using the `dtype` parameter in the\n`read_csv` and `read_table` functions to explicit the conversion:\n\n>>> df2 = pd.read_csv('test.csv', sep=',', dtype={'a': str})\n\nNo warning was issued.\n\n>>> import os\n>>> os.remove('test.csv')", "deprecated": false, "file": "pandas/errors/__init__.py", "file_line": 47, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/errors/__init__.py#L47", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Exceptions and warnings", "subsection": "", "shared_code_with": ""}, "pandas.errors.EmptyDataError": {"type": "type", "docstring": "Exception that is thrown in `pd.read_csv` (by both the C and\nPython engines) when empty data or header is encountered.", "deprecated": false, "file": "pandas/errors/__init__.py", "file_line": 105, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/errors/__init__.py#L105", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Exceptions and warnings", "subsection": "", "shared_code_with": ""}, "pandas.errors.OutOfBoundsDatetime": {"type": "type", "docstring": "Inappropriate argument value (of correct type).", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Exceptions and warnings", "subsection": "", "shared_code_with": "pandas.set_option"}, "pandas.errors.ParserError": {"type": "type", "docstring": "Exception that is raised by an error encountered in parsing file contents.\n\nThis is a generic error raised for errors encountered when functions like\n`read_csv` or `read_html` are parsing contents of a file.\n\nSee Also\n--------\nread_csv : Read CSV (comma-separated) file into a DataFrame.\nread_html : Read HTML table into a DataFrame.", "deprecated": false, "file": "pandas/errors/__init__.py", "file_line": 33, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/errors/__init__.py#L33", "errors": [], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Exceptions and warnings", "subsection": "", "shared_code_with": ""}, "pandas.errors.ParserWarning": {"type": "type", "docstring": "Warning raised when reading a file that doesn't use the default 'c' parser.\n\nRaised by `pd.read_csv` and `pd.read_table` when it is necessary to change\nparsers, generally from the default 'c' parser to 'python'.\n\nIt happens due to a lack of support or functionality for parsing a\nparticular attribute of a CSV file with the requested engine.\n\nCurrently, 'c' unsupported options include the following parameters:\n\n1. `sep` other than a single character (e.g. regex separators)\n2. `skipfooter` higher than 0\n3. `sep=None` with `delim_whitespace=False`\n\nThe warning can be avoided by adding `engine='python'` as a parameter in\n`pd.read_csv` and `pd.read_table` methods.\n\nSee Also\n--------\npd.read_csv : Read CSV (comma-separated) file into DataFrame.\npd.read_table : Read general delimited file into DataFrame.\n\nExamples\n--------\nUsing a `sep` in `pd.read_csv` other than a single character:\n\n>>> import io\n>>> csv = '''a;b;c\n...           1;1,8\n...           1;2,1'''\n>>> df = pd.read_csv(io.StringIO(csv), sep='[;,]')  # doctest: +SKIP\n... # ParserWarning: Falling back to the 'python' engine...\n\nAdding `engine='python'` to `pd.read_csv` removes the Warning:\n\n>>> df = pd.read_csv(io.StringIO(csv), sep='[;,]', engine='python')", "deprecated": false, "file": "pandas/errors/__init__.py", "file_line": 112, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/errors/__init__.py#L112", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Exceptions and warnings", "subsection": "", "shared_code_with": ""}, "pandas.errors.PerformanceWarning": {"type": "type", "docstring": "Warning raised when there is a possible performance impact.", "deprecated": false, "file": "pandas/errors/__init__.py", "file_line": 10, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/errors/__init__.py#L10", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Exceptions and warnings", "subsection": "", "shared_code_with": ""}, "pandas.errors.UnsortedIndexError": {"type": "type", "docstring": "Error raised when attempting to get a slice of a MultiIndex,\nand the index has not been lexsorted. Subclass of `KeyError`.\n\n.. versionadded:: 0.20.0", "deprecated": false, "file": "pandas/errors/__init__.py", "file_line": 24, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/errors/__init__.py#L24", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Exceptions and warnings", "subsection": "", "shared_code_with": ""}, "pandas.errors.UnsupportedFunctionCall": {"type": "type", "docstring": "Exception raised when attempting to call a numpy function\non a pandas object, but that function is not supported by\nthe object e.g. ``np.cumsum(groupby_object)``.", "deprecated": false, "file": "pandas/errors/__init__.py", "file_line": 16, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/errors/__init__.py#L16", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Exceptions and warnings", "subsection": "", "shared_code_with": ""}, "pandas.api.types.union_categoricals": {"type": "function", "docstring": "Combine list-like of Categorical-like, unioning categories. All\ncategories must have the same dtype.\n\nParameters\n----------\nto_union : list-like of Categorical, CategoricalIndex,\n           or Series with dtype='category'\nsort_categories : boolean, default False\n    If true, resulting categories will be lexsorted, otherwise\n    they will be ordered as they appear in the data.\nignore_order : boolean, default False\n    If true, the ordered attribute of the Categoricals will be ignored.\n    Results in an unordered categorical.\n\n    .. versionadded:: 0.20.0\n\nReturns\n-------\nresult : Categorical\n\nRaises\n------\nTypeError\n    - all inputs do not have the same dtype\n    - all inputs do not have the same ordered property\n    - all inputs are ordered and their categories are not identical\n    - sort_categories=True and Categoricals are ordered\nValueError\n    Empty list of categoricals passed\n\nNotes\n-----\n\nTo learn more about categories, see `link\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html#unioning>`__\n\nExamples\n--------\n\n>>> from pandas.api.types import union_categoricals\n\nIf you want to combine categoricals that do not necessarily have\nthe same categories, `union_categoricals` will combine a list-like\nof categoricals. The new categories will be the union of the\ncategories being combined.\n\n>>> a = pd.Categorical([\"b\", \"c\"])\n>>> b = pd.Categorical([\"a\", \"b\"])\n>>> union_categoricals([a, b])\n[b, c, a, b]\nCategories (3, object): [b, c, a]\n\nBy default, the resulting categories will be ordered as they appear\nin the `categories` of the data. If you want the categories to be\nlexsorted, use `sort_categories=True` argument.\n\n>>> union_categoricals([a, b], sort_categories=True)\n[b, c, a, b]\nCategories (3, object): [a, b, c]\n\n`union_categoricals` also works with the case of combining two\ncategoricals of the same categories and order information (e.g. what\nyou could also `append` for).\n\n>>> a = pd.Categorical([\"a\", \"b\"], ordered=True)\n>>> b = pd.Categorical([\"a\", \"b\", \"a\"], ordered=True)\n>>> union_categoricals([a, b])\n[a, b, a, b, a]\nCategories (2, object): [a < b]\n\nRaises `TypeError` because the categories are ordered and not identical.\n\n>>> a = pd.Categorical([\"a\", \"b\"], ordered=True)\n>>> b = pd.Categorical([\"a\", \"b\", \"c\"], ordered=True)\n>>> union_categoricals([a, b])\nTypeError: to union ordered Categoricals, all categories must be the same\n\nNew in version 0.20.0\n\nOrdered categoricals with different categories or orderings can be\ncombined by using the `ignore_ordered=True` argument.\n\n>>> a = pd.Categorical([\"a\", \"b\", \"c\"], ordered=True)\n>>> b = pd.Categorical([\"c\", \"b\", \"a\"], ordered=True)\n>>> union_categoricals([a, b], ignore_order=True)\n[a, b, c, c, b, a]\nCategories (3, object): [a, b, c]\n\n`union_categoricals` also works with a `CategoricalIndex`, or `Series`\ncontaining categorical data, but note that the resulting array will\nalways be a plain `Categorical`\n\n>>> a = pd.Series([\"b\", \"c\"], dtype='category')\n>>> b = pd.Series([\"a\", \"b\"], dtype='category')\n>>> union_categoricals([a, b])\n[b, c, a, b]\nCategories (3, object): [b, c, a]", "deprecated": false, "file": "pandas/core/dtypes/concat.py", "file_line": 187, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/concat.py#L187", "errors": [["SS06", "Summary should fit in a single line"], ["PR08", "Parameter \"to_union\" description should start with a capital letter"], ["PR09", "Parameter \"to_union\" description should finish with \".\""], ["PR06", "Parameter \"sort_categories\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"ignore_order\" type should use \"bool\" instead of \"boolean\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 76, in pandas.api.types.union_categoricals\nFailed example:\n    union_categoricals([a, b])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.union_categoricals[10]>\", line 1, in <module>\n        union_categoricals([a, b])\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/dtypes/concat.py\", line 350, in union_categoricals\n        raise TypeError(msg)\n    TypeError: to union ordered Categoricals, all categories must be the same\n"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 76, in pandas.api.types.union_categoricals\nFailed example:\n    union_categoricals([a, b])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.union_categoricals[10]>\", line 1, in <module>\n        union_categoricals([a, b])\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/dtypes/concat.py\", line 350, in union_categoricals\n        raise TypeError(msg)\n    TypeError: to union ordered Categoricals, all categories must be the same\n", "in_api": true, "section": "Data types related functionality", "subsection": "", "shared_code_with": ""}, "pandas.api.types.infer_dtype": {"type": "builtin_function_or_method", "docstring": "Efficiently infer the type of a passed val, or list-like\narray of values. Return a string describing the type.\n\nParameters\n----------\nvalue : scalar, list, ndarray, or pandas type\nskipna : bool, default False\n    Ignore NaN values when inferring the type.\n\n    .. versionadded:: 0.21.0\n\nReturns\n-------\nstring describing the common type of the input data.\nResults can include:\n\n- string\n- unicode\n- bytes\n- floating\n- integer\n- mixed-integer\n- mixed-integer-float\n- decimal\n- complex\n- categorical\n- boolean\n- datetime64\n- datetime\n- date\n- timedelta64\n- timedelta\n- time\n- period\n- mixed\n\nRaises\n------\nTypeError if ndarray-like but cannot infer the dtype\n\nNotes\n-----\n- 'mixed' is the catchall for anything that is not otherwise\n  specialized\n- 'mixed-integer-float' are floats and integers\n- 'mixed-integer' are integers mixed with non-integers\n\nExamples\n--------\n>>> infer_dtype(['foo', 'bar'])\n'string'\n\n>>> infer_dtype(['a', np.nan, 'b'], skipna=True)\n'string'\n\n>>> infer_dtype(['a', np.nan, 'b'], skipna=False)\n'mixed'\n\n>>> infer_dtype([b'foo', b'bar'])\n'bytes'\n\n>>> infer_dtype([1, 2, 3])\n'integer'\n\n>>> infer_dtype([1, 2, 3.5])\n'mixed-integer-float'\n\n>>> infer_dtype([1.0, 2.0, 3.5])\n'floating'\n\n>>> infer_dtype(['a', 1])\n'mixed-integer'\n\n>>> infer_dtype([Decimal(1), Decimal(2.0)])\n'decimal'\n\n>>> infer_dtype([True, False])\n'boolean'\n\n>>> infer_dtype([True, False, np.nan])\n'mixed'\n\n>>> infer_dtype([pd.Timestamp('20130101')])\n'datetime'\n\n>>> infer_dtype([datetime.date(2013, 1, 1)])\n'date'\n\n>>> infer_dtype([np.datetime64('2013-01-01')])\n'datetime64'\n\n>>> infer_dtype([datetime.timedelta(0, 1, 1)])\n'timedelta'\n\n>>> infer_dtype(pd.Series(list('aabc')).astype('category'))\n'categorical'", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS06", "Summary should fit in a single line"], ["PR02", "Unknown parameters {skipna, value}"], ["PR07", "Parameter \"value\" has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 51, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype(['foo', 'bar'])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[0]>\", line 1, in <module>\n        infer_dtype(['foo', 'bar'])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 54, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype(['a', np.nan, 'b'], skipna=True)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[1]>\", line 1, in <module>\n        infer_dtype(['a', np.nan, 'b'], skipna=True)\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 57, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype(['a', np.nan, 'b'], skipna=False)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[2]>\", line 1, in <module>\n        infer_dtype(['a', np.nan, 'b'], skipna=False)\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 60, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype([b'foo', b'bar'])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[3]>\", line 1, in <module>\n        infer_dtype([b'foo', b'bar'])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 63, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[4]>\", line 1, in <module>\n        infer_dtype([1, 2, 3])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 66, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype([1, 2, 3.5])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[5]>\", line 1, in <module>\n        infer_dtype([1, 2, 3.5])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 69, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype([1.0, 2.0, 3.5])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[6]>\", line 1, in <module>\n        infer_dtype([1.0, 2.0, 3.5])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 72, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype(['a', 1])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[7]>\", line 1, in <module>\n        infer_dtype(['a', 1])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 75, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype([Decimal(1), Decimal(2.0)])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[8]>\", line 1, in <module>\n        infer_dtype([Decimal(1), Decimal(2.0)])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 78, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype([True, False])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[9]>\", line 1, in <module>\n        infer_dtype([True, False])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 81, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype([True, False, np.nan])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[10]>\", line 1, in <module>\n        infer_dtype([True, False, np.nan])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 84, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype([pd.Timestamp('20130101')])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[11]>\", line 1, in <module>\n        infer_dtype([pd.Timestamp('20130101')])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 87, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype([datetime.date(2013, 1, 1)])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[12]>\", line 1, in <module>\n        infer_dtype([datetime.date(2013, 1, 1)])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 90, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype([np.datetime64('2013-01-01')])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[13]>\", line 1, in <module>\n        infer_dtype([np.datetime64('2013-01-01')])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 93, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype([datetime.timedelta(0, 1, 1)])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[14]>\", line 1, in <module>\n        infer_dtype([datetime.timedelta(0, 1, 1)])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 96, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype(pd.Series(list('aabc')).astype('category'))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[15]>\", line 1, in <module>\n        infer_dtype(pd.Series(list('aabc')).astype('category'))\n    NameError: name 'infer_dtype' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'infer_dtype' (20 times)"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 51, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype(['foo', 'bar'])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[0]>\", line 1, in <module>\n        infer_dtype(['foo', 'bar'])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 54, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype(['a', np.nan, 'b'], skipna=True)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[1]>\", line 1, in <module>\n        infer_dtype(['a', np.nan, 'b'], skipna=True)\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 57, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype(['a', np.nan, 'b'], skipna=False)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[2]>\", line 1, in <module>\n        infer_dtype(['a', np.nan, 'b'], skipna=False)\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 60, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype([b'foo', b'bar'])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[3]>\", line 1, in <module>\n        infer_dtype([b'foo', b'bar'])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 63, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[4]>\", line 1, in <module>\n        infer_dtype([1, 2, 3])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 66, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype([1, 2, 3.5])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[5]>\", line 1, in <module>\n        infer_dtype([1, 2, 3.5])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 69, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype([1.0, 2.0, 3.5])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[6]>\", line 1, in <module>\n        infer_dtype([1.0, 2.0, 3.5])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 72, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype(['a', 1])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[7]>\", line 1, in <module>\n        infer_dtype(['a', 1])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 75, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype([Decimal(1), Decimal(2.0)])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[8]>\", line 1, in <module>\n        infer_dtype([Decimal(1), Decimal(2.0)])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 78, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype([True, False])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[9]>\", line 1, in <module>\n        infer_dtype([True, False])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 81, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype([True, False, np.nan])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[10]>\", line 1, in <module>\n        infer_dtype([True, False, np.nan])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 84, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype([pd.Timestamp('20130101')])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[11]>\", line 1, in <module>\n        infer_dtype([pd.Timestamp('20130101')])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 87, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype([datetime.date(2013, 1, 1)])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[12]>\", line 1, in <module>\n        infer_dtype([datetime.date(2013, 1, 1)])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 90, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype([np.datetime64('2013-01-01')])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[13]>\", line 1, in <module>\n        infer_dtype([np.datetime64('2013-01-01')])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 93, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype([datetime.timedelta(0, 1, 1)])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[14]>\", line 1, in <module>\n        infer_dtype([datetime.timedelta(0, 1, 1)])\n    NameError: name 'infer_dtype' is not defined\n**********************************************************************\nLine 96, in pandas.api.types.infer_dtype\nFailed example:\n    infer_dtype(pd.Series(list('aabc')).astype('category'))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.infer_dtype[15]>\", line 1, in <module>\n        infer_dtype(pd.Series(list('aabc')).astype('category'))\n    NameError: name 'infer_dtype' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "", "shared_code_with": "pandas.errors.OutOfBoundsDatetime"}, "pandas.api.types.pandas_dtype": {"type": "function", "docstring": "Convert input into a pandas only dtype object or a numpy dtype object.\n\nParameters\n----------\ndtype : object to be converted\n\nReturns\n-------\nnp.dtype or a pandas dtype\n\nRaises\n------\nTypeError if not a dtype", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 2021, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L2021", "errors": [["PR07", "Parameter \"dtype\" has no description"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Data types related functionality", "subsection": "", "shared_code_with": ""}, "pandas.api.types.is_bool_dtype": {"type": "function", "docstring": "Check whether the provided array or dtype is of a boolean dtype.\n\nParameters\n----------\narr_or_dtype : array-like\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of a boolean dtype.\n\nNotes\n-----\nAn ExtensionArray is considered boolean when the ``_is_boolean``\nattribute is set to True.\n\nExamples\n--------\n>>> is_bool_dtype(str)\nFalse\n>>> is_bool_dtype(int)\nFalse\n>>> is_bool_dtype(bool)\nTrue\n>>> is_bool_dtype(np.bool)\nTrue\n>>> is_bool_dtype(np.array(['a', 'b']))\nFalse\n>>> is_bool_dtype(pd.Series([1, 2]))\nFalse\n>>> is_bool_dtype(np.array([True, False]))\nTrue\n>>> is_bool_dtype(pd.Categorical([True, False]))\nTrue\n>>> is_bool_dtype(pd.SparseArray([True, False]))\nTrue", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 1620, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L1620", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 21, in pandas.api.types.is_bool_dtype\nFailed example:\n    is_bool_dtype(str)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_bool_dtype[0]>\", line 1, in <module>\n        is_bool_dtype(str)\n    NameError: name 'is_bool_dtype' is not defined\n**********************************************************************\nLine 23, in pandas.api.types.is_bool_dtype\nFailed example:\n    is_bool_dtype(int)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_bool_dtype[1]>\", line 1, in <module>\n        is_bool_dtype(int)\n    NameError: name 'is_bool_dtype' is not defined\n**********************************************************************\nLine 25, in pandas.api.types.is_bool_dtype\nFailed example:\n    is_bool_dtype(bool)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_bool_dtype[2]>\", line 1, in <module>\n        is_bool_dtype(bool)\n    NameError: name 'is_bool_dtype' is not defined\n**********************************************************************\nLine 27, in pandas.api.types.is_bool_dtype\nFailed example:\n    is_bool_dtype(np.bool)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_bool_dtype[3]>\", line 1, in <module>\n        is_bool_dtype(np.bool)\n    NameError: name 'is_bool_dtype' is not defined\n**********************************************************************\nLine 29, in pandas.api.types.is_bool_dtype\nFailed example:\n    is_bool_dtype(np.array(['a', 'b']))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_bool_dtype[4]>\", line 1, in <module>\n        is_bool_dtype(np.array(['a', 'b']))\n    NameError: name 'is_bool_dtype' is not defined\n**********************************************************************\nLine 31, in pandas.api.types.is_bool_dtype\nFailed example:\n    is_bool_dtype(pd.Series([1, 2]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_bool_dtype[5]>\", line 1, in <module>\n        is_bool_dtype(pd.Series([1, 2]))\n    NameError: name 'is_bool_dtype' is not defined\n**********************************************************************\nLine 33, in pandas.api.types.is_bool_dtype\nFailed example:\n    is_bool_dtype(np.array([True, False]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_bool_dtype[6]>\", line 1, in <module>\n        is_bool_dtype(np.array([True, False]))\n    NameError: name 'is_bool_dtype' is not defined\n**********************************************************************\nLine 35, in pandas.api.types.is_bool_dtype\nFailed example:\n    is_bool_dtype(pd.Categorical([True, False]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_bool_dtype[7]>\", line 1, in <module>\n        is_bool_dtype(pd.Categorical([True, False]))\n    NameError: name 'is_bool_dtype' is not defined\n**********************************************************************\nLine 37, in pandas.api.types.is_bool_dtype\nFailed example:\n    is_bool_dtype(pd.SparseArray([True, False]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_bool_dtype[8]>\", line 1, in <module>\n        is_bool_dtype(pd.SparseArray([True, False]))\n    NameError: name 'is_bool_dtype' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_bool_dtype' (9 times)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 21, in pandas.api.types.is_bool_dtype\nFailed example:\n    is_bool_dtype(str)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_bool_dtype[0]>\", line 1, in <module>\n        is_bool_dtype(str)\n    NameError: name 'is_bool_dtype' is not defined\n**********************************************************************\nLine 23, in pandas.api.types.is_bool_dtype\nFailed example:\n    is_bool_dtype(int)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_bool_dtype[1]>\", line 1, in <module>\n        is_bool_dtype(int)\n    NameError: name 'is_bool_dtype' is not defined\n**********************************************************************\nLine 25, in pandas.api.types.is_bool_dtype\nFailed example:\n    is_bool_dtype(bool)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_bool_dtype[2]>\", line 1, in <module>\n        is_bool_dtype(bool)\n    NameError: name 'is_bool_dtype' is not defined\n**********************************************************************\nLine 27, in pandas.api.types.is_bool_dtype\nFailed example:\n    is_bool_dtype(np.bool)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_bool_dtype[3]>\", line 1, in <module>\n        is_bool_dtype(np.bool)\n    NameError: name 'is_bool_dtype' is not defined\n**********************************************************************\nLine 29, in pandas.api.types.is_bool_dtype\nFailed example:\n    is_bool_dtype(np.array(['a', 'b']))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_bool_dtype[4]>\", line 1, in <module>\n        is_bool_dtype(np.array(['a', 'b']))\n    NameError: name 'is_bool_dtype' is not defined\n**********************************************************************\nLine 31, in pandas.api.types.is_bool_dtype\nFailed example:\n    is_bool_dtype(pd.Series([1, 2]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_bool_dtype[5]>\", line 1, in <module>\n        is_bool_dtype(pd.Series([1, 2]))\n    NameError: name 'is_bool_dtype' is not defined\n**********************************************************************\nLine 33, in pandas.api.types.is_bool_dtype\nFailed example:\n    is_bool_dtype(np.array([True, False]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_bool_dtype[6]>\", line 1, in <module>\n        is_bool_dtype(np.array([True, False]))\n    NameError: name 'is_bool_dtype' is not defined\n**********************************************************************\nLine 35, in pandas.api.types.is_bool_dtype\nFailed example:\n    is_bool_dtype(pd.Categorical([True, False]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_bool_dtype[7]>\", line 1, in <module>\n        is_bool_dtype(pd.Categorical([True, False]))\n    NameError: name 'is_bool_dtype' is not defined\n**********************************************************************\nLine 37, in pandas.api.types.is_bool_dtype\nFailed example:\n    is_bool_dtype(pd.SparseArray([True, False]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_bool_dtype[8]>\", line 1, in <module>\n        is_bool_dtype(pd.SparseArray([True, False]))\n    NameError: name 'is_bool_dtype' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Dtype introspection", "shared_code_with": ""}, "pandas.api.types.is_categorical_dtype": {"type": "function", "docstring": "Check whether an array-like or dtype is of the Categorical dtype.\n\nParameters\n----------\narr_or_dtype : array-like\n    The array-like or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array-like or dtype is of the Categorical dtype.\n\nExamples\n--------\n>>> is_categorical_dtype(object)\nFalse\n>>> is_categorical_dtype(CategoricalDtype())\nTrue\n>>> is_categorical_dtype([1, 2, 3])\nFalse\n>>> is_categorical_dtype(pd.Categorical([1, 2, 3]))\nTrue\n>>> is_categorical_dtype(pd.CategoricalIndex([1, 2, 3]))\nTrue", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 679, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L679", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 16, in pandas.api.types.is_categorical_dtype\nFailed example:\n    is_categorical_dtype(object)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_categorical_dtype[0]>\", line 1, in <module>\n        is_categorical_dtype(object)\n    NameError: name 'is_categorical_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_categorical_dtype\nFailed example:\n    is_categorical_dtype(CategoricalDtype())\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_categorical_dtype[1]>\", line 1, in <module>\n        is_categorical_dtype(CategoricalDtype())\n    NameError: name 'is_categorical_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_categorical_dtype\nFailed example:\n    is_categorical_dtype([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_categorical_dtype[2]>\", line 1, in <module>\n        is_categorical_dtype([1, 2, 3])\n    NameError: name 'is_categorical_dtype' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_categorical_dtype\nFailed example:\n    is_categorical_dtype(pd.Categorical([1, 2, 3]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_categorical_dtype[3]>\", line 1, in <module>\n        is_categorical_dtype(pd.Categorical([1, 2, 3]))\n    NameError: name 'is_categorical_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_categorical_dtype\nFailed example:\n    is_categorical_dtype(pd.CategoricalIndex([1, 2, 3]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_categorical_dtype[4]>\", line 1, in <module>\n        is_categorical_dtype(pd.CategoricalIndex([1, 2, 3]))\n    NameError: name 'is_categorical_dtype' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_categorical_dtype' (6 times)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 16, in pandas.api.types.is_categorical_dtype\nFailed example:\n    is_categorical_dtype(object)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_categorical_dtype[0]>\", line 1, in <module>\n        is_categorical_dtype(object)\n    NameError: name 'is_categorical_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_categorical_dtype\nFailed example:\n    is_categorical_dtype(CategoricalDtype())\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_categorical_dtype[1]>\", line 1, in <module>\n        is_categorical_dtype(CategoricalDtype())\n    NameError: name 'is_categorical_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_categorical_dtype\nFailed example:\n    is_categorical_dtype([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_categorical_dtype[2]>\", line 1, in <module>\n        is_categorical_dtype([1, 2, 3])\n    NameError: name 'is_categorical_dtype' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_categorical_dtype\nFailed example:\n    is_categorical_dtype(pd.Categorical([1, 2, 3]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_categorical_dtype[3]>\", line 1, in <module>\n        is_categorical_dtype(pd.Categorical([1, 2, 3]))\n    NameError: name 'is_categorical_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_categorical_dtype\nFailed example:\n    is_categorical_dtype(pd.CategoricalIndex([1, 2, 3]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_categorical_dtype[4]>\", line 1, in <module>\n        is_categorical_dtype(pd.CategoricalIndex([1, 2, 3]))\n    NameError: name 'is_categorical_dtype' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Dtype introspection", "shared_code_with": ""}, "pandas.api.types.is_complex_dtype": {"type": "function", "docstring": "Check whether the provided array or dtype is of a complex dtype.\n\nParameters\n----------\narr_or_dtype : array-like\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of a complex dtype.\n\nExamples\n--------\n>>> is_complex_dtype(str)\nFalse\n>>> is_complex_dtype(int)\nFalse\n>>> is_complex_dtype(np.complex)\nTrue\n>>> is_complex_dtype(np.array(['a', 'b']))\nFalse\n>>> is_complex_dtype(pd.Series([1, 2]))\nFalse\n>>> is_complex_dtype(np.array([1 + 1j, 5]))\nTrue", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 1793, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L1793", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 16, in pandas.api.types.is_complex_dtype\nFailed example:\n    is_complex_dtype(str)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_complex_dtype[0]>\", line 1, in <module>\n        is_complex_dtype(str)\n    NameError: name 'is_complex_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_complex_dtype\nFailed example:\n    is_complex_dtype(int)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_complex_dtype[1]>\", line 1, in <module>\n        is_complex_dtype(int)\n    NameError: name 'is_complex_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_complex_dtype\nFailed example:\n    is_complex_dtype(np.complex)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_complex_dtype[2]>\", line 1, in <module>\n        is_complex_dtype(np.complex)\n    NameError: name 'is_complex_dtype' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_complex_dtype\nFailed example:\n    is_complex_dtype(np.array(['a', 'b']))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_complex_dtype[3]>\", line 1, in <module>\n        is_complex_dtype(np.array(['a', 'b']))\n    NameError: name 'is_complex_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_complex_dtype\nFailed example:\n    is_complex_dtype(pd.Series([1, 2]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_complex_dtype[4]>\", line 1, in <module>\n        is_complex_dtype(pd.Series([1, 2]))\n    NameError: name 'is_complex_dtype' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_complex_dtype\nFailed example:\n    is_complex_dtype(np.array([1 + 1j, 5]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_complex_dtype[5]>\", line 1, in <module>\n        is_complex_dtype(np.array([1 + 1j, 5]))\n    NameError: name 'is_complex_dtype' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_complex_dtype' (6 times)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 16, in pandas.api.types.is_complex_dtype\nFailed example:\n    is_complex_dtype(str)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_complex_dtype[0]>\", line 1, in <module>\n        is_complex_dtype(str)\n    NameError: name 'is_complex_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_complex_dtype\nFailed example:\n    is_complex_dtype(int)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_complex_dtype[1]>\", line 1, in <module>\n        is_complex_dtype(int)\n    NameError: name 'is_complex_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_complex_dtype\nFailed example:\n    is_complex_dtype(np.complex)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_complex_dtype[2]>\", line 1, in <module>\n        is_complex_dtype(np.complex)\n    NameError: name 'is_complex_dtype' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_complex_dtype\nFailed example:\n    is_complex_dtype(np.array(['a', 'b']))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_complex_dtype[3]>\", line 1, in <module>\n        is_complex_dtype(np.array(['a', 'b']))\n    NameError: name 'is_complex_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_complex_dtype\nFailed example:\n    is_complex_dtype(pd.Series([1, 2]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_complex_dtype[4]>\", line 1, in <module>\n        is_complex_dtype(pd.Series([1, 2]))\n    NameError: name 'is_complex_dtype' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_complex_dtype\nFailed example:\n    is_complex_dtype(np.array([1 + 1j, 5]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_complex_dtype[5]>\", line 1, in <module>\n        is_complex_dtype(np.array([1 + 1j, 5]))\n    NameError: name 'is_complex_dtype' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Dtype introspection", "shared_code_with": ""}, "pandas.api.types.is_datetime64_any_dtype": {"type": "function", "docstring": "Check whether the provided array or dtype is of the datetime64 dtype.\n\nParameters\n----------\narr_or_dtype : array-like\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of the datetime64 dtype.\n\nExamples\n--------\n>>> is_datetime64_any_dtype(str)\nFalse\n>>> is_datetime64_any_dtype(int)\nFalse\n>>> is_datetime64_any_dtype(np.datetime64)  # can be tz-naive\nTrue\n>>> is_datetime64_any_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\nTrue\n>>> is_datetime64_any_dtype(np.array(['a', 'b']))\nFalse\n>>> is_datetime64_any_dtype(np.array([1, 2]))\nFalse\n>>> is_datetime64_any_dtype(np.array([], dtype=np.datetime64))\nTrue\n>>> is_datetime64_any_dtype(pd.DatetimeIndex([1, 2, 3],\n                            dtype=np.datetime64))\nTrue", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 1164, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L1164", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 16, in pandas.api.types.is_datetime64_any_dtype\nFailed example:\n    is_datetime64_any_dtype(str)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_any_dtype[0]>\", line 1, in <module>\n        is_datetime64_any_dtype(str)\n    NameError: name 'is_datetime64_any_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_datetime64_any_dtype\nFailed example:\n    is_datetime64_any_dtype(int)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_any_dtype[1]>\", line 1, in <module>\n        is_datetime64_any_dtype(int)\n    NameError: name 'is_datetime64_any_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_datetime64_any_dtype\nFailed example:\n    is_datetime64_any_dtype(np.datetime64)  # can be tz-naive\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_any_dtype[2]>\", line 1, in <module>\n        is_datetime64_any_dtype(np.datetime64)  # can be tz-naive\n    NameError: name 'is_datetime64_any_dtype' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_datetime64_any_dtype\nFailed example:\n    is_datetime64_any_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_any_dtype[3]>\", line 1, in <module>\n        is_datetime64_any_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    NameError: name 'is_datetime64_any_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_datetime64_any_dtype\nFailed example:\n    is_datetime64_any_dtype(np.array(['a', 'b']))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_any_dtype[4]>\", line 1, in <module>\n        is_datetime64_any_dtype(np.array(['a', 'b']))\n    NameError: name 'is_datetime64_any_dtype' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_datetime64_any_dtype\nFailed example:\n    is_datetime64_any_dtype(np.array([1, 2]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_any_dtype[5]>\", line 1, in <module>\n        is_datetime64_any_dtype(np.array([1, 2]))\n    NameError: name 'is_datetime64_any_dtype' is not defined\n**********************************************************************\nLine 28, in pandas.api.types.is_datetime64_any_dtype\nFailed example:\n    is_datetime64_any_dtype(np.array([], dtype=np.datetime64))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_any_dtype[6]>\", line 1, in <module>\n        is_datetime64_any_dtype(np.array([], dtype=np.datetime64))\n    NameError: name 'is_datetime64_any_dtype' is not defined\n**********************************************************************\nLine 30, in pandas.api.types.is_datetime64_any_dtype\nFailed example:\n    is_datetime64_any_dtype(pd.DatetimeIndex([1, 2, 3],\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_any_dtype[7]>\", line 1\n        is_datetime64_any_dtype(pd.DatetimeIndex([1, 2, 3],\n                                                          ^\n    SyntaxError: unexpected EOF while parsing\n"], ["EX03", "flake8 error: E902 TokenError: EOF in multi-line statement"], ["EX03", "flake8 error: E999 SyntaxError: unexpected EOF while parsing"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 16, in pandas.api.types.is_datetime64_any_dtype\nFailed example:\n    is_datetime64_any_dtype(str)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_any_dtype[0]>\", line 1, in <module>\n        is_datetime64_any_dtype(str)\n    NameError: name 'is_datetime64_any_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_datetime64_any_dtype\nFailed example:\n    is_datetime64_any_dtype(int)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_any_dtype[1]>\", line 1, in <module>\n        is_datetime64_any_dtype(int)\n    NameError: name 'is_datetime64_any_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_datetime64_any_dtype\nFailed example:\n    is_datetime64_any_dtype(np.datetime64)  # can be tz-naive\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_any_dtype[2]>\", line 1, in <module>\n        is_datetime64_any_dtype(np.datetime64)  # can be tz-naive\n    NameError: name 'is_datetime64_any_dtype' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_datetime64_any_dtype\nFailed example:\n    is_datetime64_any_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_any_dtype[3]>\", line 1, in <module>\n        is_datetime64_any_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    NameError: name 'is_datetime64_any_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_datetime64_any_dtype\nFailed example:\n    is_datetime64_any_dtype(np.array(['a', 'b']))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_any_dtype[4]>\", line 1, in <module>\n        is_datetime64_any_dtype(np.array(['a', 'b']))\n    NameError: name 'is_datetime64_any_dtype' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_datetime64_any_dtype\nFailed example:\n    is_datetime64_any_dtype(np.array([1, 2]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_any_dtype[5]>\", line 1, in <module>\n        is_datetime64_any_dtype(np.array([1, 2]))\n    NameError: name 'is_datetime64_any_dtype' is not defined\n**********************************************************************\nLine 28, in pandas.api.types.is_datetime64_any_dtype\nFailed example:\n    is_datetime64_any_dtype(np.array([], dtype=np.datetime64))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_any_dtype[6]>\", line 1, in <module>\n        is_datetime64_any_dtype(np.array([], dtype=np.datetime64))\n    NameError: name 'is_datetime64_any_dtype' is not defined\n**********************************************************************\nLine 30, in pandas.api.types.is_datetime64_any_dtype\nFailed example:\n    is_datetime64_any_dtype(pd.DatetimeIndex([1, 2, 3],\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_any_dtype[7]>\", line 1\n        is_datetime64_any_dtype(pd.DatetimeIndex([1, 2, 3],\n                                                          ^\n    SyntaxError: unexpected EOF while parsing\n", "in_api": true, "section": "Data types related functionality", "subsection": "Dtype introspection", "shared_code_with": ""}, "pandas.api.types.is_datetime64_dtype": {"type": "function", "docstring": "Check whether an array-like or dtype is of the datetime64 dtype.\n\nParameters\n----------\narr_or_dtype : array-like\n    The array-like or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array-like or dtype is of the datetime64 dtype.\n\nExamples\n--------\n>>> is_datetime64_dtype(object)\nFalse\n>>> is_datetime64_dtype(np.datetime64)\nTrue\n>>> is_datetime64_dtype(np.array([], dtype=int))\nFalse\n>>> is_datetime64_dtype(np.array([], dtype=np.datetime64))\nTrue\n>>> is_datetime64_dtype([1, 2, 3])\nFalse", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 509, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L509", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 16, in pandas.api.types.is_datetime64_dtype\nFailed example:\n    is_datetime64_dtype(object)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_dtype[0]>\", line 1, in <module>\n        is_datetime64_dtype(object)\n    NameError: name 'is_datetime64_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_datetime64_dtype\nFailed example:\n    is_datetime64_dtype(np.datetime64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_dtype[1]>\", line 1, in <module>\n        is_datetime64_dtype(np.datetime64)\n    NameError: name 'is_datetime64_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_datetime64_dtype\nFailed example:\n    is_datetime64_dtype(np.array([], dtype=int))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_dtype[2]>\", line 1, in <module>\n        is_datetime64_dtype(np.array([], dtype=int))\n    NameError: name 'is_datetime64_dtype' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_datetime64_dtype\nFailed example:\n    is_datetime64_dtype(np.array([], dtype=np.datetime64))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_dtype[3]>\", line 1, in <module>\n        is_datetime64_dtype(np.array([], dtype=np.datetime64))\n    NameError: name 'is_datetime64_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_datetime64_dtype\nFailed example:\n    is_datetime64_dtype([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_dtype[4]>\", line 1, in <module>\n        is_datetime64_dtype([1, 2, 3])\n    NameError: name 'is_datetime64_dtype' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_datetime64_dtype' (5 times)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 16, in pandas.api.types.is_datetime64_dtype\nFailed example:\n    is_datetime64_dtype(object)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_dtype[0]>\", line 1, in <module>\n        is_datetime64_dtype(object)\n    NameError: name 'is_datetime64_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_datetime64_dtype\nFailed example:\n    is_datetime64_dtype(np.datetime64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_dtype[1]>\", line 1, in <module>\n        is_datetime64_dtype(np.datetime64)\n    NameError: name 'is_datetime64_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_datetime64_dtype\nFailed example:\n    is_datetime64_dtype(np.array([], dtype=int))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_dtype[2]>\", line 1, in <module>\n        is_datetime64_dtype(np.array([], dtype=int))\n    NameError: name 'is_datetime64_dtype' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_datetime64_dtype\nFailed example:\n    is_datetime64_dtype(np.array([], dtype=np.datetime64))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_dtype[3]>\", line 1, in <module>\n        is_datetime64_dtype(np.array([], dtype=np.datetime64))\n    NameError: name 'is_datetime64_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_datetime64_dtype\nFailed example:\n    is_datetime64_dtype([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_dtype[4]>\", line 1, in <module>\n        is_datetime64_dtype([1, 2, 3])\n    NameError: name 'is_datetime64_dtype' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Dtype introspection", "shared_code_with": ""}, "pandas.api.types.is_datetime64_ns_dtype": {"type": "function", "docstring": "Check whether the provided array or dtype is of the datetime64[ns] dtype.\n\nParameters\n----------\narr_or_dtype : array-like\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of the datetime64[ns] dtype.\n\nExamples\n--------\n>>> is_datetime64_ns_dtype(str)\nFalse\n>>> is_datetime64_ns_dtype(int)\nFalse\n>>> is_datetime64_ns_dtype(np.datetime64)  # no unit\nFalse\n>>> is_datetime64_ns_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\nTrue\n>>> is_datetime64_ns_dtype(np.array(['a', 'b']))\nFalse\n>>> is_datetime64_ns_dtype(np.array([1, 2]))\nFalse\n>>> is_datetime64_ns_dtype(np.array([], dtype=np.datetime64))  # no unit\nFalse\n>>> is_datetime64_ns_dtype(np.array([],\n                           dtype=\"datetime64[ps]\"))  # wrong unit\nFalse\n>>> is_datetime64_ns_dtype(pd.DatetimeIndex([1, 2, 3],\n                           dtype=np.datetime64))  # has 'ns' unit\nTrue", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 1204, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L1204", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 16, in pandas.api.types.is_datetime64_ns_dtype\nFailed example:\n    is_datetime64_ns_dtype(str)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_ns_dtype[0]>\", line 1, in <module>\n        is_datetime64_ns_dtype(str)\n    NameError: name 'is_datetime64_ns_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_datetime64_ns_dtype\nFailed example:\n    is_datetime64_ns_dtype(int)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_ns_dtype[1]>\", line 1, in <module>\n        is_datetime64_ns_dtype(int)\n    NameError: name 'is_datetime64_ns_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_datetime64_ns_dtype\nFailed example:\n    is_datetime64_ns_dtype(np.datetime64)  # no unit\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_ns_dtype[2]>\", line 1, in <module>\n        is_datetime64_ns_dtype(np.datetime64)  # no unit\n    NameError: name 'is_datetime64_ns_dtype' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_datetime64_ns_dtype\nFailed example:\n    is_datetime64_ns_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_ns_dtype[3]>\", line 1, in <module>\n        is_datetime64_ns_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    NameError: name 'is_datetime64_ns_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_datetime64_ns_dtype\nFailed example:\n    is_datetime64_ns_dtype(np.array(['a', 'b']))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_ns_dtype[4]>\", line 1, in <module>\n        is_datetime64_ns_dtype(np.array(['a', 'b']))\n    NameError: name 'is_datetime64_ns_dtype' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_datetime64_ns_dtype\nFailed example:\n    is_datetime64_ns_dtype(np.array([1, 2]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_ns_dtype[5]>\", line 1, in <module>\n        is_datetime64_ns_dtype(np.array([1, 2]))\n    NameError: name 'is_datetime64_ns_dtype' is not defined\n**********************************************************************\nLine 28, in pandas.api.types.is_datetime64_ns_dtype\nFailed example:\n    is_datetime64_ns_dtype(np.array([], dtype=np.datetime64))  # no unit\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_ns_dtype[6]>\", line 1, in <module>\n        is_datetime64_ns_dtype(np.array([], dtype=np.datetime64))  # no unit\n    NameError: name 'is_datetime64_ns_dtype' is not defined\n**********************************************************************\nLine 30, in pandas.api.types.is_datetime64_ns_dtype\nFailed example:\n    is_datetime64_ns_dtype(np.array([],\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_ns_dtype[7]>\", line 1\n        is_datetime64_ns_dtype(np.array([],\n                                          ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 33, in pandas.api.types.is_datetime64_ns_dtype\nFailed example:\n    is_datetime64_ns_dtype(pd.DatetimeIndex([1, 2, 3],\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_ns_dtype[8]>\", line 1\n        is_datetime64_ns_dtype(pd.DatetimeIndex([1, 2, 3],\n                                                         ^\n    SyntaxError: unexpected EOF while parsing\n"], ["EX03", "flake8 error: E902 TokenError: EOF in multi-line statement"], ["EX03", "flake8 error: E999 SyntaxError: unexpected EOF while parsing"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 16, in pandas.api.types.is_datetime64_ns_dtype\nFailed example:\n    is_datetime64_ns_dtype(str)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_ns_dtype[0]>\", line 1, in <module>\n        is_datetime64_ns_dtype(str)\n    NameError: name 'is_datetime64_ns_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_datetime64_ns_dtype\nFailed example:\n    is_datetime64_ns_dtype(int)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_ns_dtype[1]>\", line 1, in <module>\n        is_datetime64_ns_dtype(int)\n    NameError: name 'is_datetime64_ns_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_datetime64_ns_dtype\nFailed example:\n    is_datetime64_ns_dtype(np.datetime64)  # no unit\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_ns_dtype[2]>\", line 1, in <module>\n        is_datetime64_ns_dtype(np.datetime64)  # no unit\n    NameError: name 'is_datetime64_ns_dtype' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_datetime64_ns_dtype\nFailed example:\n    is_datetime64_ns_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_ns_dtype[3]>\", line 1, in <module>\n        is_datetime64_ns_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    NameError: name 'is_datetime64_ns_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_datetime64_ns_dtype\nFailed example:\n    is_datetime64_ns_dtype(np.array(['a', 'b']))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_ns_dtype[4]>\", line 1, in <module>\n        is_datetime64_ns_dtype(np.array(['a', 'b']))\n    NameError: name 'is_datetime64_ns_dtype' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_datetime64_ns_dtype\nFailed example:\n    is_datetime64_ns_dtype(np.array([1, 2]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_ns_dtype[5]>\", line 1, in <module>\n        is_datetime64_ns_dtype(np.array([1, 2]))\n    NameError: name 'is_datetime64_ns_dtype' is not defined\n**********************************************************************\nLine 28, in pandas.api.types.is_datetime64_ns_dtype\nFailed example:\n    is_datetime64_ns_dtype(np.array([], dtype=np.datetime64))  # no unit\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_ns_dtype[6]>\", line 1, in <module>\n        is_datetime64_ns_dtype(np.array([], dtype=np.datetime64))  # no unit\n    NameError: name 'is_datetime64_ns_dtype' is not defined\n**********************************************************************\nLine 30, in pandas.api.types.is_datetime64_ns_dtype\nFailed example:\n    is_datetime64_ns_dtype(np.array([],\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_ns_dtype[7]>\", line 1\n        is_datetime64_ns_dtype(np.array([],\n                                          ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 33, in pandas.api.types.is_datetime64_ns_dtype\nFailed example:\n    is_datetime64_ns_dtype(pd.DatetimeIndex([1, 2, 3],\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64_ns_dtype[8]>\", line 1\n        is_datetime64_ns_dtype(pd.DatetimeIndex([1, 2, 3],\n                                                         ^\n    SyntaxError: unexpected EOF while parsing\n", "in_api": true, "section": "Data types related functionality", "subsection": "Dtype introspection", "shared_code_with": ""}, "pandas.api.types.is_datetime64tz_dtype": {"type": "function", "docstring": "Check whether an array-like or dtype is of a DatetimeTZDtype dtype.\n\nParameters\n----------\narr_or_dtype : array-like\n    The array-like or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array-like or dtype is of a DatetimeTZDtype dtype.\n\nExamples\n--------\n>>> is_datetime64tz_dtype(object)\nFalse\n>>> is_datetime64tz_dtype([1, 2, 3])\nFalse\n>>> is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3]))  # tz-naive\nFalse\n>>> is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\nTrue\n\n>>> dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n>>> s = pd.Series([], dtype=dtype)\n>>> is_datetime64tz_dtype(dtype)\nTrue\n>>> is_datetime64tz_dtype(s)\nTrue", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 540, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L540", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 16, in pandas.api.types.is_datetime64tz_dtype\nFailed example:\n    is_datetime64tz_dtype(object)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64tz_dtype[0]>\", line 1, in <module>\n        is_datetime64tz_dtype(object)\n    NameError: name 'is_datetime64tz_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_datetime64tz_dtype\nFailed example:\n    is_datetime64tz_dtype([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64tz_dtype[1]>\", line 1, in <module>\n        is_datetime64tz_dtype([1, 2, 3])\n    NameError: name 'is_datetime64tz_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_datetime64tz_dtype\nFailed example:\n    is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3]))  # tz-naive\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64tz_dtype[2]>\", line 1, in <module>\n        is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3]))  # tz-naive\n    NameError: name 'is_datetime64tz_dtype' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_datetime64tz_dtype\nFailed example:\n    is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64tz_dtype[3]>\", line 1, in <module>\n        is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    NameError: name 'is_datetime64tz_dtype' is not defined\n**********************************************************************\nLine 25, in pandas.api.types.is_datetime64tz_dtype\nFailed example:\n    dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64tz_dtype[4]>\", line 1, in <module>\n        dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n    NameError: name 'DatetimeTZDtype' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_datetime64tz_dtype\nFailed example:\n    s = pd.Series([], dtype=dtype)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64tz_dtype[5]>\", line 1, in <module>\n        s = pd.Series([], dtype=dtype)\n    NameError: name 'dtype' is not defined\n**********************************************************************\nLine 27, in pandas.api.types.is_datetime64tz_dtype\nFailed example:\n    is_datetime64tz_dtype(dtype)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64tz_dtype[6]>\", line 1, in <module>\n        is_datetime64tz_dtype(dtype)\n    NameError: name 'is_datetime64tz_dtype' is not defined\n**********************************************************************\nLine 29, in pandas.api.types.is_datetime64tz_dtype\nFailed example:\n    is_datetime64tz_dtype(s)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64tz_dtype[7]>\", line 1, in <module>\n        is_datetime64tz_dtype(s)\n    NameError: name 'is_datetime64tz_dtype' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_datetime64tz_dtype' (7 times)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 16, in pandas.api.types.is_datetime64tz_dtype\nFailed example:\n    is_datetime64tz_dtype(object)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64tz_dtype[0]>\", line 1, in <module>\n        is_datetime64tz_dtype(object)\n    NameError: name 'is_datetime64tz_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_datetime64tz_dtype\nFailed example:\n    is_datetime64tz_dtype([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64tz_dtype[1]>\", line 1, in <module>\n        is_datetime64tz_dtype([1, 2, 3])\n    NameError: name 'is_datetime64tz_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_datetime64tz_dtype\nFailed example:\n    is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3]))  # tz-naive\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64tz_dtype[2]>\", line 1, in <module>\n        is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3]))  # tz-naive\n    NameError: name 'is_datetime64tz_dtype' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_datetime64tz_dtype\nFailed example:\n    is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64tz_dtype[3]>\", line 1, in <module>\n        is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    NameError: name 'is_datetime64tz_dtype' is not defined\n**********************************************************************\nLine 25, in pandas.api.types.is_datetime64tz_dtype\nFailed example:\n    dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64tz_dtype[4]>\", line 1, in <module>\n        dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n    NameError: name 'DatetimeTZDtype' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_datetime64tz_dtype\nFailed example:\n    s = pd.Series([], dtype=dtype)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64tz_dtype[5]>\", line 1, in <module>\n        s = pd.Series([], dtype=dtype)\n    NameError: name 'dtype' is not defined\n**********************************************************************\nLine 27, in pandas.api.types.is_datetime64tz_dtype\nFailed example:\n    is_datetime64tz_dtype(dtype)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64tz_dtype[6]>\", line 1, in <module>\n        is_datetime64tz_dtype(dtype)\n    NameError: name 'is_datetime64tz_dtype' is not defined\n**********************************************************************\nLine 29, in pandas.api.types.is_datetime64tz_dtype\nFailed example:\n    is_datetime64tz_dtype(s)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetime64tz_dtype[7]>\", line 1, in <module>\n        is_datetime64tz_dtype(s)\n    NameError: name 'is_datetime64tz_dtype' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Dtype introspection", "shared_code_with": ""}, "pandas.api.types.is_extension_type": {"type": "function", "docstring": "Check whether an array-like is of a pandas extension class instance.\n\nExtension classes include categoricals, pandas sparse objects (i.e.\nclasses represented within the pandas library and not ones external\nto it like scipy sparse matrices), and datetime-like arrays.\n\nParameters\n----------\narr : array-like\n    The array-like to check.\n\nReturns\n-------\nboolean\n    Whether or not the array-like is of a pandas extension class instance.\n\nExamples\n--------\n>>> is_extension_type([1, 2, 3])\nFalse\n>>> is_extension_type(np.array([1, 2, 3]))\nFalse\n>>>\n>>> cat = pd.Categorical([1, 2, 3])\n>>>\n>>> is_extension_type(cat)\nTrue\n>>> is_extension_type(pd.Series(cat))\nTrue\n>>> is_extension_type(pd.SparseArray([1, 2, 3]))\nTrue\n>>> is_extension_type(pd.SparseSeries([1, 2, 3]))\nTrue\n>>>\n>>> from scipy.sparse import bsr_matrix\n>>> is_extension_type(bsr_matrix([1, 2, 3]))\nFalse\n>>> is_extension_type(pd.DatetimeIndex([1, 2, 3]))\nFalse\n>>> is_extension_type(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\nTrue\n>>>\n>>> dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n>>> s = pd.Series([], dtype=dtype)\n>>> is_extension_type(s)\nTrue", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 1685, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L1685", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 20, in pandas.api.types.is_extension_type\nFailed example:\n    is_extension_type([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[0]>\", line 1, in <module>\n        is_extension_type([1, 2, 3])\n    NameError: name 'is_extension_type' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_extension_type\nFailed example:\n    is_extension_type(np.array([1, 2, 3]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[1]>\", line 1, in <module>\n        is_extension_type(np.array([1, 2, 3]))\n    NameError: name 'is_extension_type' is not defined\n**********************************************************************\nLine 27, in pandas.api.types.is_extension_type\nFailed example:\n    is_extension_type(cat)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[3]>\", line 1, in <module>\n        is_extension_type(cat)\n    NameError: name 'is_extension_type' is not defined\n**********************************************************************\nLine 29, in pandas.api.types.is_extension_type\nFailed example:\n    is_extension_type(pd.Series(cat))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[4]>\", line 1, in <module>\n        is_extension_type(pd.Series(cat))\n    NameError: name 'is_extension_type' is not defined\n**********************************************************************\nLine 31, in pandas.api.types.is_extension_type\nFailed example:\n    is_extension_type(pd.SparseArray([1, 2, 3]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[5]>\", line 1, in <module>\n        is_extension_type(pd.SparseArray([1, 2, 3]))\n    NameError: name 'is_extension_type' is not defined\n**********************************************************************\nLine 33, in pandas.api.types.is_extension_type\nFailed example:\n    is_extension_type(pd.SparseSeries([1, 2, 3]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[6]>\", line 1, in <module>\n        is_extension_type(pd.SparseSeries([1, 2, 3]))\n    NameError: name 'is_extension_type' is not defined\n**********************************************************************\nLine 37, in pandas.api.types.is_extension_type\nFailed example:\n    is_extension_type(bsr_matrix([1, 2, 3]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[8]>\", line 1, in <module>\n        is_extension_type(bsr_matrix([1, 2, 3]))\n    NameError: name 'is_extension_type' is not defined\n**********************************************************************\nLine 39, in pandas.api.types.is_extension_type\nFailed example:\n    is_extension_type(pd.DatetimeIndex([1, 2, 3]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[9]>\", line 1, in <module>\n        is_extension_type(pd.DatetimeIndex([1, 2, 3]))\n    NameError: name 'is_extension_type' is not defined\n**********************************************************************\nLine 41, in pandas.api.types.is_extension_type\nFailed example:\n    is_extension_type(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[10]>\", line 1, in <module>\n        is_extension_type(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    NameError: name 'is_extension_type' is not defined\n**********************************************************************\nLine 44, in pandas.api.types.is_extension_type\nFailed example:\n    dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[11]>\", line 1, in <module>\n        dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n    NameError: name 'DatetimeTZDtype' is not defined\n**********************************************************************\nLine 45, in pandas.api.types.is_extension_type\nFailed example:\n    s = pd.Series([], dtype=dtype)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[12]>\", line 1, in <module>\n        s = pd.Series([], dtype=dtype)\n    NameError: name 'dtype' is not defined\n**********************************************************************\nLine 46, in pandas.api.types.is_extension_type\nFailed example:\n    is_extension_type(s)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[13]>\", line 1, in <module>\n        is_extension_type(s)\n    NameError: name 'is_extension_type' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_extension_type' (11 times)"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 20, in pandas.api.types.is_extension_type\nFailed example:\n    is_extension_type([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[0]>\", line 1, in <module>\n        is_extension_type([1, 2, 3])\n    NameError: name 'is_extension_type' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_extension_type\nFailed example:\n    is_extension_type(np.array([1, 2, 3]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[1]>\", line 1, in <module>\n        is_extension_type(np.array([1, 2, 3]))\n    NameError: name 'is_extension_type' is not defined\n**********************************************************************\nLine 27, in pandas.api.types.is_extension_type\nFailed example:\n    is_extension_type(cat)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[3]>\", line 1, in <module>\n        is_extension_type(cat)\n    NameError: name 'is_extension_type' is not defined\n**********************************************************************\nLine 29, in pandas.api.types.is_extension_type\nFailed example:\n    is_extension_type(pd.Series(cat))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[4]>\", line 1, in <module>\n        is_extension_type(pd.Series(cat))\n    NameError: name 'is_extension_type' is not defined\n**********************************************************************\nLine 31, in pandas.api.types.is_extension_type\nFailed example:\n    is_extension_type(pd.SparseArray([1, 2, 3]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[5]>\", line 1, in <module>\n        is_extension_type(pd.SparseArray([1, 2, 3]))\n    NameError: name 'is_extension_type' is not defined\n**********************************************************************\nLine 33, in pandas.api.types.is_extension_type\nFailed example:\n    is_extension_type(pd.SparseSeries([1, 2, 3]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[6]>\", line 1, in <module>\n        is_extension_type(pd.SparseSeries([1, 2, 3]))\n    NameError: name 'is_extension_type' is not defined\n**********************************************************************\nLine 37, in pandas.api.types.is_extension_type\nFailed example:\n    is_extension_type(bsr_matrix([1, 2, 3]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[8]>\", line 1, in <module>\n        is_extension_type(bsr_matrix([1, 2, 3]))\n    NameError: name 'is_extension_type' is not defined\n**********************************************************************\nLine 39, in pandas.api.types.is_extension_type\nFailed example:\n    is_extension_type(pd.DatetimeIndex([1, 2, 3]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[9]>\", line 1, in <module>\n        is_extension_type(pd.DatetimeIndex([1, 2, 3]))\n    NameError: name 'is_extension_type' is not defined\n**********************************************************************\nLine 41, in pandas.api.types.is_extension_type\nFailed example:\n    is_extension_type(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[10]>\", line 1, in <module>\n        is_extension_type(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    NameError: name 'is_extension_type' is not defined\n**********************************************************************\nLine 44, in pandas.api.types.is_extension_type\nFailed example:\n    dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[11]>\", line 1, in <module>\n        dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n    NameError: name 'DatetimeTZDtype' is not defined\n**********************************************************************\nLine 45, in pandas.api.types.is_extension_type\nFailed example:\n    s = pd.Series([], dtype=dtype)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[12]>\", line 1, in <module>\n        s = pd.Series([], dtype=dtype)\n    NameError: name 'dtype' is not defined\n**********************************************************************\nLine 46, in pandas.api.types.is_extension_type\nFailed example:\n    is_extension_type(s)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_extension_type[13]>\", line 1, in <module>\n        is_extension_type(s)\n    NameError: name 'is_extension_type' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Dtype introspection", "shared_code_with": ""}, "pandas.api.types.is_extension_array_dtype": {"type": "function", "docstring": "Check if an object is a pandas extension array type.\n\nSee the :ref:`Use Guide <extending.extension-types>` for more.\n\nParameters\n----------\narr_or_dtype : object\n    For array-like input, the ``.dtype`` attribute will\n    be extracted.\n\nReturns\n-------\nbool\n    Whether the `arr_or_dtype` is an extension array type.\n\nNotes\n-----\nThis checks whether an object implements the pandas extension\narray interface. In pandas, this includes:\n\n* Categorical\n* Sparse\n* Interval\n* Period\n* DatetimeArray\n* TimedeltaArray\n\nThird-party libraries may implement arrays or types satisfying\nthis interface as well.\n\nExamples\n--------\n>>> from pandas.api.types import is_extension_array_dtype\n>>> arr = pd.Categorical(['a', 'b'])\n>>> is_extension_array_dtype(arr)\nTrue\n>>> is_extension_array_dtype(arr.dtype)\nTrue\n\n>>> arr = np.array(['a', 'b'])\n>>> is_extension_array_dtype(arr.dtype)\nFalse", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 1744, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L1744", "errors": [], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Data types related functionality", "subsection": "Dtype introspection", "shared_code_with": ""}, "pandas.api.types.is_float_dtype": {"type": "function", "docstring": "Check whether the provided array or dtype is of a float dtype.\n\nThis function is internal and should not be exposed in the public API.\n\nParameters\n----------\narr_or_dtype : array-like\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of a float dtype.\n\nExamples\n--------\n>>> is_float_dtype(str)\nFalse\n>>> is_float_dtype(int)\nFalse\n>>> is_float_dtype(float)\nTrue\n>>> is_float_dtype(np.array(['a', 'b']))\nFalse\n>>> is_float_dtype(pd.Series([1, 2]))\nFalse\n>>> is_float_dtype(pd.Index([1, 2.]))\nTrue", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 1586, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L1586", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 18, in pandas.api.types.is_float_dtype\nFailed example:\n    is_float_dtype(str)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_float_dtype[0]>\", line 1, in <module>\n        is_float_dtype(str)\n    NameError: name 'is_float_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_float_dtype\nFailed example:\n    is_float_dtype(int)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_float_dtype[1]>\", line 1, in <module>\n        is_float_dtype(int)\n    NameError: name 'is_float_dtype' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_float_dtype\nFailed example:\n    is_float_dtype(float)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_float_dtype[2]>\", line 1, in <module>\n        is_float_dtype(float)\n    NameError: name 'is_float_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_float_dtype\nFailed example:\n    is_float_dtype(np.array(['a', 'b']))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_float_dtype[3]>\", line 1, in <module>\n        is_float_dtype(np.array(['a', 'b']))\n    NameError: name 'is_float_dtype' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_float_dtype\nFailed example:\n    is_float_dtype(pd.Series([1, 2]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_float_dtype[4]>\", line 1, in <module>\n        is_float_dtype(pd.Series([1, 2]))\n    NameError: name 'is_float_dtype' is not defined\n**********************************************************************\nLine 28, in pandas.api.types.is_float_dtype\nFailed example:\n    is_float_dtype(pd.Index([1, 2.]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_float_dtype[5]>\", line 1, in <module>\n        is_float_dtype(pd.Index([1, 2.]))\n    NameError: name 'is_float_dtype' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_float_dtype' (6 times)"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 18, in pandas.api.types.is_float_dtype\nFailed example:\n    is_float_dtype(str)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_float_dtype[0]>\", line 1, in <module>\n        is_float_dtype(str)\n    NameError: name 'is_float_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_float_dtype\nFailed example:\n    is_float_dtype(int)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_float_dtype[1]>\", line 1, in <module>\n        is_float_dtype(int)\n    NameError: name 'is_float_dtype' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_float_dtype\nFailed example:\n    is_float_dtype(float)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_float_dtype[2]>\", line 1, in <module>\n        is_float_dtype(float)\n    NameError: name 'is_float_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_float_dtype\nFailed example:\n    is_float_dtype(np.array(['a', 'b']))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_float_dtype[3]>\", line 1, in <module>\n        is_float_dtype(np.array(['a', 'b']))\n    NameError: name 'is_float_dtype' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_float_dtype\nFailed example:\n    is_float_dtype(pd.Series([1, 2]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_float_dtype[4]>\", line 1, in <module>\n        is_float_dtype(pd.Series([1, 2]))\n    NameError: name 'is_float_dtype' is not defined\n**********************************************************************\nLine 28, in pandas.api.types.is_float_dtype\nFailed example:\n    is_float_dtype(pd.Index([1, 2.]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_float_dtype[5]>\", line 1, in <module>\n        is_float_dtype(pd.Index([1, 2.]))\n    NameError: name 'is_float_dtype' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Dtype introspection", "shared_code_with": ""}, "pandas.api.types.is_int64_dtype": {"type": "function", "docstring": "Check whether the provided array or dtype is of the int64 dtype.\n\nParameters\n----------\narr_or_dtype : array-like\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of the int64 dtype.\n\nNotes\n-----\nDepending on system architecture, the return value of `is_int64_dtype(\nint)` will be True if the OS uses 64-bit integers and False if the OS\nuses 32-bit integers.\n\nExamples\n--------\n>>> is_int64_dtype(str)\nFalse\n>>> is_int64_dtype(np.int32)\nFalse\n>>> is_int64_dtype(np.int64)\nTrue\n>>> is_int64_dtype('int8')\nFalse\n>>> is_int64_dtype('Int8')\nFalse\n>>> is_int64_dtype(pd.Int64Dtype)\nTrue\n>>> is_int64_dtype(float)\nFalse\n>>> is_int64_dtype(np.uint64)  # unsigned\nFalse\n>>> is_int64_dtype(np.array(['a', 'b']))\nFalse\n>>> is_int64_dtype(np.array([1, 2], dtype=np.int64))\nTrue\n>>> is_int64_dtype(pd.Index([1, 2.]))  # float\nFalse\n>>> is_int64_dtype(np.array([1, 2], dtype=np.uint32))  # unsigned\nFalse", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 1113, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L1113", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 22, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype(str)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[0]>\", line 1, in <module>\n        is_int64_dtype(str)\n    NameError: name 'is_int64_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype(np.int32)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[1]>\", line 1, in <module>\n        is_int64_dtype(np.int32)\n    NameError: name 'is_int64_dtype' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype(np.int64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[2]>\", line 1, in <module>\n        is_int64_dtype(np.int64)\n    NameError: name 'is_int64_dtype' is not defined\n**********************************************************************\nLine 28, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype('int8')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[3]>\", line 1, in <module>\n        is_int64_dtype('int8')\n    NameError: name 'is_int64_dtype' is not defined\n**********************************************************************\nLine 30, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype('Int8')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[4]>\", line 1, in <module>\n        is_int64_dtype('Int8')\n    NameError: name 'is_int64_dtype' is not defined\n**********************************************************************\nLine 32, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype(pd.Int64Dtype)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[5]>\", line 1, in <module>\n        is_int64_dtype(pd.Int64Dtype)\n    NameError: name 'is_int64_dtype' is not defined\n**********************************************************************\nLine 34, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype(float)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[6]>\", line 1, in <module>\n        is_int64_dtype(float)\n    NameError: name 'is_int64_dtype' is not defined\n**********************************************************************\nLine 36, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype(np.uint64)  # unsigned\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[7]>\", line 1, in <module>\n        is_int64_dtype(np.uint64)  # unsigned\n    NameError: name 'is_int64_dtype' is not defined\n**********************************************************************\nLine 38, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype(np.array(['a', 'b']))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[8]>\", line 1, in <module>\n        is_int64_dtype(np.array(['a', 'b']))\n    NameError: name 'is_int64_dtype' is not defined\n**********************************************************************\nLine 40, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype(np.array([1, 2], dtype=np.int64))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[9]>\", line 1, in <module>\n        is_int64_dtype(np.array([1, 2], dtype=np.int64))\n    NameError: name 'is_int64_dtype' is not defined\n**********************************************************************\nLine 42, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype(pd.Index([1, 2.]))  # float\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[10]>\", line 1, in <module>\n        is_int64_dtype(pd.Index([1, 2.]))  # float\n    NameError: name 'is_int64_dtype' is not defined\n**********************************************************************\nLine 44, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype(np.array([1, 2], dtype=np.uint32))  # unsigned\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[11]>\", line 1, in <module>\n        is_int64_dtype(np.array([1, 2], dtype=np.uint32))  # unsigned\n    NameError: name 'is_int64_dtype' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_int64_dtype' (12 times)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 22, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype(str)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[0]>\", line 1, in <module>\n        is_int64_dtype(str)\n    NameError: name 'is_int64_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype(np.int32)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[1]>\", line 1, in <module>\n        is_int64_dtype(np.int32)\n    NameError: name 'is_int64_dtype' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype(np.int64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[2]>\", line 1, in <module>\n        is_int64_dtype(np.int64)\n    NameError: name 'is_int64_dtype' is not defined\n**********************************************************************\nLine 28, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype('int8')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[3]>\", line 1, in <module>\n        is_int64_dtype('int8')\n    NameError: name 'is_int64_dtype' is not defined\n**********************************************************************\nLine 30, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype('Int8')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[4]>\", line 1, in <module>\n        is_int64_dtype('Int8')\n    NameError: name 'is_int64_dtype' is not defined\n**********************************************************************\nLine 32, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype(pd.Int64Dtype)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[5]>\", line 1, in <module>\n        is_int64_dtype(pd.Int64Dtype)\n    NameError: name 'is_int64_dtype' is not defined\n**********************************************************************\nLine 34, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype(float)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[6]>\", line 1, in <module>\n        is_int64_dtype(float)\n    NameError: name 'is_int64_dtype' is not defined\n**********************************************************************\nLine 36, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype(np.uint64)  # unsigned\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[7]>\", line 1, in <module>\n        is_int64_dtype(np.uint64)  # unsigned\n    NameError: name 'is_int64_dtype' is not defined\n**********************************************************************\nLine 38, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype(np.array(['a', 'b']))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[8]>\", line 1, in <module>\n        is_int64_dtype(np.array(['a', 'b']))\n    NameError: name 'is_int64_dtype' is not defined\n**********************************************************************\nLine 40, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype(np.array([1, 2], dtype=np.int64))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[9]>\", line 1, in <module>\n        is_int64_dtype(np.array([1, 2], dtype=np.int64))\n    NameError: name 'is_int64_dtype' is not defined\n**********************************************************************\nLine 42, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype(pd.Index([1, 2.]))  # float\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[10]>\", line 1, in <module>\n        is_int64_dtype(pd.Index([1, 2.]))  # float\n    NameError: name 'is_int64_dtype' is not defined\n**********************************************************************\nLine 44, in pandas.api.types.is_int64_dtype\nFailed example:\n    is_int64_dtype(np.array([1, 2], dtype=np.uint32))  # unsigned\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_int64_dtype[11]>\", line 1, in <module>\n        is_int64_dtype(np.array([1, 2], dtype=np.uint32))  # unsigned\n    NameError: name 'is_int64_dtype' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Dtype introspection", "shared_code_with": ""}, "pandas.api.types.is_integer_dtype": {"type": "function", "docstring": "Check whether the provided array or dtype is of an integer dtype.\n\nUnlike in `in_any_int_dtype`, timedelta64 instances will return False.\n\n.. versionchanged:: 0.24.0\n\n   The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n   as integer by this function.\n\nParameters\n----------\narr_or_dtype : array-like\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of an integer dtype and\n    not an instance of timedelta64.\n\nExamples\n--------\n>>> is_integer_dtype(str)\nFalse\n>>> is_integer_dtype(int)\nTrue\n>>> is_integer_dtype(float)\nFalse\n>>> is_integer_dtype(np.uint64)\nTrue\n>>> is_integer_dtype('int8')\nTrue\n>>> is_integer_dtype('Int8')\nTrue\n>>> is_integer_dtype(pd.Int8Dtype)\nTrue\n>>> is_integer_dtype(np.datetime64)\nFalse\n>>> is_integer_dtype(np.timedelta64)\nFalse\n>>> is_integer_dtype(np.array(['a', 'b']))\nFalse\n>>> is_integer_dtype(pd.Series([1, 2]))\nTrue\n>>> is_integer_dtype(np.array([], dtype=np.timedelta64))\nFalse\n>>> is_integer_dtype(pd.Index([1, 2.]))  # float\nFalse", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 952, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L952", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 24, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype(str)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[0]>\", line 1, in <module>\n        is_integer_dtype(str)\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype(int)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[1]>\", line 1, in <module>\n        is_integer_dtype(int)\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 28, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype(float)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[2]>\", line 1, in <module>\n        is_integer_dtype(float)\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 30, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype(np.uint64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[3]>\", line 1, in <module>\n        is_integer_dtype(np.uint64)\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 32, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype('int8')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[4]>\", line 1, in <module>\n        is_integer_dtype('int8')\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 34, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype('Int8')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[5]>\", line 1, in <module>\n        is_integer_dtype('Int8')\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 36, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype(pd.Int8Dtype)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[6]>\", line 1, in <module>\n        is_integer_dtype(pd.Int8Dtype)\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 38, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype(np.datetime64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[7]>\", line 1, in <module>\n        is_integer_dtype(np.datetime64)\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 40, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype(np.timedelta64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[8]>\", line 1, in <module>\n        is_integer_dtype(np.timedelta64)\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 42, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype(np.array(['a', 'b']))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[9]>\", line 1, in <module>\n        is_integer_dtype(np.array(['a', 'b']))\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 44, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype(pd.Series([1, 2]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[10]>\", line 1, in <module>\n        is_integer_dtype(pd.Series([1, 2]))\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 46, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype(np.array([], dtype=np.timedelta64))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[11]>\", line 1, in <module>\n        is_integer_dtype(np.array([], dtype=np.timedelta64))\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 48, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype(pd.Index([1, 2.]))  # float\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[12]>\", line 1, in <module>\n        is_integer_dtype(pd.Index([1, 2.]))  # float\n    NameError: name 'is_integer_dtype' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_integer_dtype' (13 times)"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 24, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype(str)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[0]>\", line 1, in <module>\n        is_integer_dtype(str)\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype(int)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[1]>\", line 1, in <module>\n        is_integer_dtype(int)\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 28, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype(float)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[2]>\", line 1, in <module>\n        is_integer_dtype(float)\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 30, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype(np.uint64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[3]>\", line 1, in <module>\n        is_integer_dtype(np.uint64)\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 32, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype('int8')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[4]>\", line 1, in <module>\n        is_integer_dtype('int8')\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 34, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype('Int8')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[5]>\", line 1, in <module>\n        is_integer_dtype('Int8')\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 36, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype(pd.Int8Dtype)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[6]>\", line 1, in <module>\n        is_integer_dtype(pd.Int8Dtype)\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 38, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype(np.datetime64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[7]>\", line 1, in <module>\n        is_integer_dtype(np.datetime64)\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 40, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype(np.timedelta64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[8]>\", line 1, in <module>\n        is_integer_dtype(np.timedelta64)\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 42, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype(np.array(['a', 'b']))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[9]>\", line 1, in <module>\n        is_integer_dtype(np.array(['a', 'b']))\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 44, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype(pd.Series([1, 2]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[10]>\", line 1, in <module>\n        is_integer_dtype(pd.Series([1, 2]))\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 46, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype(np.array([], dtype=np.timedelta64))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[11]>\", line 1, in <module>\n        is_integer_dtype(np.array([], dtype=np.timedelta64))\n    NameError: name 'is_integer_dtype' is not defined\n**********************************************************************\nLine 48, in pandas.api.types.is_integer_dtype\nFailed example:\n    is_integer_dtype(pd.Index([1, 2.]))  # float\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_integer_dtype[12]>\", line 1, in <module>\n        is_integer_dtype(pd.Index([1, 2.]))  # float\n    NameError: name 'is_integer_dtype' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Dtype introspection", "shared_code_with": ""}, "pandas.api.types.is_interval_dtype": {"type": "function", "docstring": "Check whether an array-like or dtype is of the Interval dtype.\n\nParameters\n----------\narr_or_dtype : array-like\n    The array-like or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array-like or dtype is of the Interval dtype.\n\nExamples\n--------\n>>> is_interval_dtype(object)\nFalse\n>>> is_interval_dtype(IntervalDtype())\nTrue\n>>> is_interval_dtype([1, 2, 3])\nFalse\n>>>\n>>> interval = pd.Interval(1, 2, closed=\"right\")\n>>> is_interval_dtype(interval)\nFalse\n>>> is_interval_dtype(pd.IntervalIndex([interval]))\nTrue", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 643, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L643", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 16, in pandas.api.types.is_interval_dtype\nFailed example:\n    is_interval_dtype(object)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_interval_dtype[0]>\", line 1, in <module>\n        is_interval_dtype(object)\n    NameError: name 'is_interval_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_interval_dtype\nFailed example:\n    is_interval_dtype(IntervalDtype())\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_interval_dtype[1]>\", line 1, in <module>\n        is_interval_dtype(IntervalDtype())\n    NameError: name 'is_interval_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_interval_dtype\nFailed example:\n    is_interval_dtype([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_interval_dtype[2]>\", line 1, in <module>\n        is_interval_dtype([1, 2, 3])\n    NameError: name 'is_interval_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_interval_dtype\nFailed example:\n    is_interval_dtype(interval)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_interval_dtype[4]>\", line 1, in <module>\n        is_interval_dtype(interval)\n    NameError: name 'is_interval_dtype' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_interval_dtype\nFailed example:\n    is_interval_dtype(pd.IntervalIndex([interval]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_interval_dtype[5]>\", line 1, in <module>\n        is_interval_dtype(pd.IntervalIndex([interval]))\n    NameError: name 'is_interval_dtype' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_interval_dtype' (6 times)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 16, in pandas.api.types.is_interval_dtype\nFailed example:\n    is_interval_dtype(object)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_interval_dtype[0]>\", line 1, in <module>\n        is_interval_dtype(object)\n    NameError: name 'is_interval_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_interval_dtype\nFailed example:\n    is_interval_dtype(IntervalDtype())\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_interval_dtype[1]>\", line 1, in <module>\n        is_interval_dtype(IntervalDtype())\n    NameError: name 'is_interval_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_interval_dtype\nFailed example:\n    is_interval_dtype([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_interval_dtype[2]>\", line 1, in <module>\n        is_interval_dtype([1, 2, 3])\n    NameError: name 'is_interval_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_interval_dtype\nFailed example:\n    is_interval_dtype(interval)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_interval_dtype[4]>\", line 1, in <module>\n        is_interval_dtype(interval)\n    NameError: name 'is_interval_dtype' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_interval_dtype\nFailed example:\n    is_interval_dtype(pd.IntervalIndex([interval]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_interval_dtype[5]>\", line 1, in <module>\n        is_interval_dtype(pd.IntervalIndex([interval]))\n    NameError: name 'is_interval_dtype' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Dtype introspection", "shared_code_with": ""}, "pandas.api.types.is_numeric_dtype": {"type": "function", "docstring": "Check whether the provided array or dtype is of a numeric dtype.\n\nParameters\n----------\narr_or_dtype : array-like\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of a numeric dtype.\n\nExamples\n--------\n>>> is_numeric_dtype(str)\nFalse\n>>> is_numeric_dtype(int)\nTrue\n>>> is_numeric_dtype(float)\nTrue\n>>> is_numeric_dtype(np.uint64)\nTrue\n>>> is_numeric_dtype(np.datetime64)\nFalse\n>>> is_numeric_dtype(np.timedelta64)\nFalse\n>>> is_numeric_dtype(np.array(['a', 'b']))\nFalse\n>>> is_numeric_dtype(pd.Series([1, 2]))\nTrue\n>>> is_numeric_dtype(pd.Index([1, 2.]))\nTrue\n>>> is_numeric_dtype(np.array([], dtype=np.timedelta64))\nFalse", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 1511, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L1511", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 16, in pandas.api.types.is_numeric_dtype\nFailed example:\n    is_numeric_dtype(str)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_numeric_dtype[0]>\", line 1, in <module>\n        is_numeric_dtype(str)\n    NameError: name 'is_numeric_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_numeric_dtype\nFailed example:\n    is_numeric_dtype(int)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_numeric_dtype[1]>\", line 1, in <module>\n        is_numeric_dtype(int)\n    NameError: name 'is_numeric_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_numeric_dtype\nFailed example:\n    is_numeric_dtype(float)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_numeric_dtype[2]>\", line 1, in <module>\n        is_numeric_dtype(float)\n    NameError: name 'is_numeric_dtype' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_numeric_dtype\nFailed example:\n    is_numeric_dtype(np.uint64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_numeric_dtype[3]>\", line 1, in <module>\n        is_numeric_dtype(np.uint64)\n    NameError: name 'is_numeric_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_numeric_dtype\nFailed example:\n    is_numeric_dtype(np.datetime64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_numeric_dtype[4]>\", line 1, in <module>\n        is_numeric_dtype(np.datetime64)\n    NameError: name 'is_numeric_dtype' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_numeric_dtype\nFailed example:\n    is_numeric_dtype(np.timedelta64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_numeric_dtype[5]>\", line 1, in <module>\n        is_numeric_dtype(np.timedelta64)\n    NameError: name 'is_numeric_dtype' is not defined\n**********************************************************************\nLine 28, in pandas.api.types.is_numeric_dtype\nFailed example:\n    is_numeric_dtype(np.array(['a', 'b']))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_numeric_dtype[6]>\", line 1, in <module>\n        is_numeric_dtype(np.array(['a', 'b']))\n    NameError: name 'is_numeric_dtype' is not defined\n**********************************************************************\nLine 30, in pandas.api.types.is_numeric_dtype\nFailed example:\n    is_numeric_dtype(pd.Series([1, 2]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_numeric_dtype[7]>\", line 1, in <module>\n        is_numeric_dtype(pd.Series([1, 2]))\n    NameError: name 'is_numeric_dtype' is not defined\n**********************************************************************\nLine 32, in pandas.api.types.is_numeric_dtype\nFailed example:\n    is_numeric_dtype(pd.Index([1, 2.]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_numeric_dtype[8]>\", line 1, in <module>\n        is_numeric_dtype(pd.Index([1, 2.]))\n    NameError: name 'is_numeric_dtype' is not defined\n**********************************************************************\nLine 34, in pandas.api.types.is_numeric_dtype\nFailed example:\n    is_numeric_dtype(np.array([], dtype=np.timedelta64))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_numeric_dtype[9]>\", line 1, in <module>\n        is_numeric_dtype(np.array([], dtype=np.timedelta64))\n    NameError: name 'is_numeric_dtype' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_numeric_dtype' (10 times)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 16, in pandas.api.types.is_numeric_dtype\nFailed example:\n    is_numeric_dtype(str)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_numeric_dtype[0]>\", line 1, in <module>\n        is_numeric_dtype(str)\n    NameError: name 'is_numeric_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_numeric_dtype\nFailed example:\n    is_numeric_dtype(int)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_numeric_dtype[1]>\", line 1, in <module>\n        is_numeric_dtype(int)\n    NameError: name 'is_numeric_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_numeric_dtype\nFailed example:\n    is_numeric_dtype(float)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_numeric_dtype[2]>\", line 1, in <module>\n        is_numeric_dtype(float)\n    NameError: name 'is_numeric_dtype' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_numeric_dtype\nFailed example:\n    is_numeric_dtype(np.uint64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_numeric_dtype[3]>\", line 1, in <module>\n        is_numeric_dtype(np.uint64)\n    NameError: name 'is_numeric_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_numeric_dtype\nFailed example:\n    is_numeric_dtype(np.datetime64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_numeric_dtype[4]>\", line 1, in <module>\n        is_numeric_dtype(np.datetime64)\n    NameError: name 'is_numeric_dtype' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_numeric_dtype\nFailed example:\n    is_numeric_dtype(np.timedelta64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_numeric_dtype[5]>\", line 1, in <module>\n        is_numeric_dtype(np.timedelta64)\n    NameError: name 'is_numeric_dtype' is not defined\n**********************************************************************\nLine 28, in pandas.api.types.is_numeric_dtype\nFailed example:\n    is_numeric_dtype(np.array(['a', 'b']))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_numeric_dtype[6]>\", line 1, in <module>\n        is_numeric_dtype(np.array(['a', 'b']))\n    NameError: name 'is_numeric_dtype' is not defined\n**********************************************************************\nLine 30, in pandas.api.types.is_numeric_dtype\nFailed example:\n    is_numeric_dtype(pd.Series([1, 2]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_numeric_dtype[7]>\", line 1, in <module>\n        is_numeric_dtype(pd.Series([1, 2]))\n    NameError: name 'is_numeric_dtype' is not defined\n**********************************************************************\nLine 32, in pandas.api.types.is_numeric_dtype\nFailed example:\n    is_numeric_dtype(pd.Index([1, 2.]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_numeric_dtype[8]>\", line 1, in <module>\n        is_numeric_dtype(pd.Index([1, 2.]))\n    NameError: name 'is_numeric_dtype' is not defined\n**********************************************************************\nLine 34, in pandas.api.types.is_numeric_dtype\nFailed example:\n    is_numeric_dtype(np.array([], dtype=np.timedelta64))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_numeric_dtype[9]>\", line 1, in <module>\n        is_numeric_dtype(np.array([], dtype=np.timedelta64))\n    NameError: name 'is_numeric_dtype' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Dtype introspection", "shared_code_with": ""}, "pandas.api.types.is_object_dtype": {"type": "function", "docstring": "Check whether an array-like or dtype is of the object dtype.\n\nParameters\n----------\narr_or_dtype : array-like\n    The array-like or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array-like or dtype is of the object dtype.\n\nExamples\n--------\n>>> is_object_dtype(object)\nTrue\n>>> is_object_dtype(int)\nFalse\n>>> is_object_dtype(np.array([], dtype=object))\nTrue\n>>> is_object_dtype(np.array([], dtype=int))\nFalse\n>>> is_object_dtype([1, 2, 3])\nFalse", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 226, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L226", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 16, in pandas.api.types.is_object_dtype\nFailed example:\n    is_object_dtype(object)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_object_dtype[0]>\", line 1, in <module>\n        is_object_dtype(object)\n    NameError: name 'is_object_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_object_dtype\nFailed example:\n    is_object_dtype(int)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_object_dtype[1]>\", line 1, in <module>\n        is_object_dtype(int)\n    NameError: name 'is_object_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_object_dtype\nFailed example:\n    is_object_dtype(np.array([], dtype=object))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_object_dtype[2]>\", line 1, in <module>\n        is_object_dtype(np.array([], dtype=object))\n    NameError: name 'is_object_dtype' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_object_dtype\nFailed example:\n    is_object_dtype(np.array([], dtype=int))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_object_dtype[3]>\", line 1, in <module>\n        is_object_dtype(np.array([], dtype=int))\n    NameError: name 'is_object_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_object_dtype\nFailed example:\n    is_object_dtype([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_object_dtype[4]>\", line 1, in <module>\n        is_object_dtype([1, 2, 3])\n    NameError: name 'is_object_dtype' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_object_dtype' (5 times)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 16, in pandas.api.types.is_object_dtype\nFailed example:\n    is_object_dtype(object)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_object_dtype[0]>\", line 1, in <module>\n        is_object_dtype(object)\n    NameError: name 'is_object_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_object_dtype\nFailed example:\n    is_object_dtype(int)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_object_dtype[1]>\", line 1, in <module>\n        is_object_dtype(int)\n    NameError: name 'is_object_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_object_dtype\nFailed example:\n    is_object_dtype(np.array([], dtype=object))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_object_dtype[2]>\", line 1, in <module>\n        is_object_dtype(np.array([], dtype=object))\n    NameError: name 'is_object_dtype' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_object_dtype\nFailed example:\n    is_object_dtype(np.array([], dtype=int))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_object_dtype[3]>\", line 1, in <module>\n        is_object_dtype(np.array([], dtype=int))\n    NameError: name 'is_object_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_object_dtype\nFailed example:\n    is_object_dtype([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_object_dtype[4]>\", line 1, in <module>\n        is_object_dtype([1, 2, 3])\n    NameError: name 'is_object_dtype' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Dtype introspection", "shared_code_with": ""}, "pandas.api.types.is_period_dtype": {"type": "function", "docstring": "Check whether an array-like or dtype is of the Period dtype.\n\nParameters\n----------\narr_or_dtype : array-like\n    The array-like or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array-like or dtype is of the Period dtype.\n\nExamples\n--------\n>>> is_period_dtype(object)\nFalse\n>>> is_period_dtype(PeriodDtype(freq=\"D\"))\nTrue\n>>> is_period_dtype([1, 2, 3])\nFalse\n>>> is_period_dtype(pd.Period(\"2017-01-01\"))\nFalse\n>>> is_period_dtype(pd.PeriodIndex([], freq=\"A\"))\nTrue", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 609, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L609", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 16, in pandas.api.types.is_period_dtype\nFailed example:\n    is_period_dtype(object)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_period_dtype[0]>\", line 1, in <module>\n        is_period_dtype(object)\n    NameError: name 'is_period_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_period_dtype\nFailed example:\n    is_period_dtype(PeriodDtype(freq=\"D\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_period_dtype[1]>\", line 1, in <module>\n        is_period_dtype(PeriodDtype(freq=\"D\"))\n    NameError: name 'is_period_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_period_dtype\nFailed example:\n    is_period_dtype([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_period_dtype[2]>\", line 1, in <module>\n        is_period_dtype([1, 2, 3])\n    NameError: name 'is_period_dtype' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_period_dtype\nFailed example:\n    is_period_dtype(pd.Period(\"2017-01-01\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_period_dtype[3]>\", line 1, in <module>\n        is_period_dtype(pd.Period(\"2017-01-01\"))\n    NameError: name 'is_period_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_period_dtype\nFailed example:\n    is_period_dtype(pd.PeriodIndex([], freq=\"A\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_period_dtype[4]>\", line 1, in <module>\n        is_period_dtype(pd.PeriodIndex([], freq=\"A\"))\n    NameError: name 'is_period_dtype' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_period_dtype' (6 times)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 16, in pandas.api.types.is_period_dtype\nFailed example:\n    is_period_dtype(object)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_period_dtype[0]>\", line 1, in <module>\n        is_period_dtype(object)\n    NameError: name 'is_period_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_period_dtype\nFailed example:\n    is_period_dtype(PeriodDtype(freq=\"D\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_period_dtype[1]>\", line 1, in <module>\n        is_period_dtype(PeriodDtype(freq=\"D\"))\n    NameError: name 'is_period_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_period_dtype\nFailed example:\n    is_period_dtype([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_period_dtype[2]>\", line 1, in <module>\n        is_period_dtype([1, 2, 3])\n    NameError: name 'is_period_dtype' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_period_dtype\nFailed example:\n    is_period_dtype(pd.Period(\"2017-01-01\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_period_dtype[3]>\", line 1, in <module>\n        is_period_dtype(pd.Period(\"2017-01-01\"))\n    NameError: name 'is_period_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_period_dtype\nFailed example:\n    is_period_dtype(pd.PeriodIndex([], freq=\"A\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_period_dtype[4]>\", line 1, in <module>\n        is_period_dtype(pd.PeriodIndex([], freq=\"A\"))\n    NameError: name 'is_period_dtype' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Dtype introspection", "shared_code_with": ""}, "pandas.api.types.is_signed_integer_dtype": {"type": "function", "docstring": "Check whether the provided array or dtype is of a signed integer dtype.\n\nUnlike in `in_any_int_dtype`, timedelta64 instances will return False.\n\n.. versionchanged:: 0.24.0\n\n   The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n   as integer by this function.\n\nParameters\n----------\narr_or_dtype : array-like\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of a signed integer dtype\n    and not an instance of timedelta64.\n\nExamples\n--------\n>>> is_signed_integer_dtype(str)\nFalse\n>>> is_signed_integer_dtype(int)\nTrue\n>>> is_signed_integer_dtype(float)\nFalse\n>>> is_signed_integer_dtype(np.uint64)  # unsigned\nFalse\n>>> is_signed_integer_dtype('int8')\nTrue\n>>> is_signed_integer_dtype('Int8')\nTrue\n>>> is_signed_dtype(pd.Int8Dtype)\nTrue\n>>> is_signed_integer_dtype(np.datetime64)\nFalse\n>>> is_signed_integer_dtype(np.timedelta64)\nFalse\n>>> is_signed_integer_dtype(np.array(['a', 'b']))\nFalse\n>>> is_signed_integer_dtype(pd.Series([1, 2]))\nTrue\n>>> is_signed_integer_dtype(np.array([], dtype=np.timedelta64))\nFalse\n>>> is_signed_integer_dtype(pd.Index([1, 2.]))  # float\nFalse\n>>> is_signed_integer_dtype(np.array([1, 2], dtype=np.uint32))  # unsigned\nFalse", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 1007, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L1007", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 24, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype(str)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[0]>\", line 1, in <module>\n        is_signed_integer_dtype(str)\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype(int)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[1]>\", line 1, in <module>\n        is_signed_integer_dtype(int)\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 28, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype(float)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[2]>\", line 1, in <module>\n        is_signed_integer_dtype(float)\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 30, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype(np.uint64)  # unsigned\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[3]>\", line 1, in <module>\n        is_signed_integer_dtype(np.uint64)  # unsigned\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 32, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype('int8')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[4]>\", line 1, in <module>\n        is_signed_integer_dtype('int8')\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 34, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype('Int8')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[5]>\", line 1, in <module>\n        is_signed_integer_dtype('Int8')\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 36, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_dtype(pd.Int8Dtype)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[6]>\", line 1, in <module>\n        is_signed_dtype(pd.Int8Dtype)\n    NameError: name 'is_signed_dtype' is not defined\n**********************************************************************\nLine 38, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype(np.datetime64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[7]>\", line 1, in <module>\n        is_signed_integer_dtype(np.datetime64)\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 40, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype(np.timedelta64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[8]>\", line 1, in <module>\n        is_signed_integer_dtype(np.timedelta64)\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 42, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype(np.array(['a', 'b']))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[9]>\", line 1, in <module>\n        is_signed_integer_dtype(np.array(['a', 'b']))\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 44, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype(pd.Series([1, 2]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[10]>\", line 1, in <module>\n        is_signed_integer_dtype(pd.Series([1, 2]))\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 46, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype(np.array([], dtype=np.timedelta64))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[11]>\", line 1, in <module>\n        is_signed_integer_dtype(np.array([], dtype=np.timedelta64))\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 48, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype(pd.Index([1, 2.]))  # float\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[12]>\", line 1, in <module>\n        is_signed_integer_dtype(pd.Index([1, 2.]))  # float\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 50, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype(np.array([1, 2], dtype=np.uint32))  # unsigned\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[13]>\", line 1, in <module>\n        is_signed_integer_dtype(np.array([1, 2], dtype=np.uint32))  # unsigned\n    NameError: name 'is_signed_integer_dtype' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_signed_integer_dtype' (14 times)"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 24, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype(str)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[0]>\", line 1, in <module>\n        is_signed_integer_dtype(str)\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype(int)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[1]>\", line 1, in <module>\n        is_signed_integer_dtype(int)\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 28, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype(float)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[2]>\", line 1, in <module>\n        is_signed_integer_dtype(float)\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 30, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype(np.uint64)  # unsigned\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[3]>\", line 1, in <module>\n        is_signed_integer_dtype(np.uint64)  # unsigned\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 32, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype('int8')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[4]>\", line 1, in <module>\n        is_signed_integer_dtype('int8')\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 34, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype('Int8')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[5]>\", line 1, in <module>\n        is_signed_integer_dtype('Int8')\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 36, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_dtype(pd.Int8Dtype)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[6]>\", line 1, in <module>\n        is_signed_dtype(pd.Int8Dtype)\n    NameError: name 'is_signed_dtype' is not defined\n**********************************************************************\nLine 38, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype(np.datetime64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[7]>\", line 1, in <module>\n        is_signed_integer_dtype(np.datetime64)\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 40, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype(np.timedelta64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[8]>\", line 1, in <module>\n        is_signed_integer_dtype(np.timedelta64)\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 42, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype(np.array(['a', 'b']))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[9]>\", line 1, in <module>\n        is_signed_integer_dtype(np.array(['a', 'b']))\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 44, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype(pd.Series([1, 2]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[10]>\", line 1, in <module>\n        is_signed_integer_dtype(pd.Series([1, 2]))\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 46, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype(np.array([], dtype=np.timedelta64))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[11]>\", line 1, in <module>\n        is_signed_integer_dtype(np.array([], dtype=np.timedelta64))\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 48, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype(pd.Index([1, 2.]))  # float\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[12]>\", line 1, in <module>\n        is_signed_integer_dtype(pd.Index([1, 2.]))  # float\n    NameError: name 'is_signed_integer_dtype' is not defined\n**********************************************************************\nLine 50, in pandas.api.types.is_signed_integer_dtype\nFailed example:\n    is_signed_integer_dtype(np.array([1, 2], dtype=np.uint32))  # unsigned\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_signed_integer_dtype[13]>\", line 1, in <module>\n        is_signed_integer_dtype(np.array([1, 2], dtype=np.uint32))  # unsigned\n    NameError: name 'is_signed_integer_dtype' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Dtype introspection", "shared_code_with": ""}, "pandas.api.types.is_string_dtype": {"type": "function", "docstring": "Check whether the provided array or dtype is of the string dtype.\n\nParameters\n----------\narr_or_dtype : array-like\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of the string dtype.\n\nExamples\n--------\n>>> is_string_dtype(str)\nTrue\n>>> is_string_dtype(object)\nTrue\n>>> is_string_dtype(int)\nFalse\n>>>\n>>> is_string_dtype(np.array(['a', 'b']))\nTrue\n>>> is_string_dtype(pd.Series([1, 2]))\nFalse", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 712, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L712", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 16, in pandas.api.types.is_string_dtype\nFailed example:\n    is_string_dtype(str)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_string_dtype[0]>\", line 1, in <module>\n        is_string_dtype(str)\n    NameError: name 'is_string_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_string_dtype\nFailed example:\n    is_string_dtype(object)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_string_dtype[1]>\", line 1, in <module>\n        is_string_dtype(object)\n    NameError: name 'is_string_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_string_dtype\nFailed example:\n    is_string_dtype(int)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_string_dtype[2]>\", line 1, in <module>\n        is_string_dtype(int)\n    NameError: name 'is_string_dtype' is not defined\n**********************************************************************\nLine 23, in pandas.api.types.is_string_dtype\nFailed example:\n    is_string_dtype(np.array(['a', 'b']))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_string_dtype[3]>\", line 1, in <module>\n        is_string_dtype(np.array(['a', 'b']))\n    NameError: name 'is_string_dtype' is not defined\n**********************************************************************\nLine 25, in pandas.api.types.is_string_dtype\nFailed example:\n    is_string_dtype(pd.Series([1, 2]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_string_dtype[4]>\", line 1, in <module>\n        is_string_dtype(pd.Series([1, 2]))\n    NameError: name 'is_string_dtype' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_string_dtype' (5 times)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 16, in pandas.api.types.is_string_dtype\nFailed example:\n    is_string_dtype(str)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_string_dtype[0]>\", line 1, in <module>\n        is_string_dtype(str)\n    NameError: name 'is_string_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_string_dtype\nFailed example:\n    is_string_dtype(object)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_string_dtype[1]>\", line 1, in <module>\n        is_string_dtype(object)\n    NameError: name 'is_string_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_string_dtype\nFailed example:\n    is_string_dtype(int)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_string_dtype[2]>\", line 1, in <module>\n        is_string_dtype(int)\n    NameError: name 'is_string_dtype' is not defined\n**********************************************************************\nLine 23, in pandas.api.types.is_string_dtype\nFailed example:\n    is_string_dtype(np.array(['a', 'b']))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_string_dtype[3]>\", line 1, in <module>\n        is_string_dtype(np.array(['a', 'b']))\n    NameError: name 'is_string_dtype' is not defined\n**********************************************************************\nLine 25, in pandas.api.types.is_string_dtype\nFailed example:\n    is_string_dtype(pd.Series([1, 2]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_string_dtype[4]>\", line 1, in <module>\n        is_string_dtype(pd.Series([1, 2]))\n    NameError: name 'is_string_dtype' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Dtype introspection", "shared_code_with": ""}, "pandas.api.types.is_timedelta64_dtype": {"type": "function", "docstring": "Check whether an array-like or dtype is of the timedelta64 dtype.\n\nParameters\n----------\narr_or_dtype : array-like\n    The array-like or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array-like or dtype is of the timedelta64 dtype.\n\nExamples\n--------\n>>> is_timedelta64_dtype(object)\nFalse\n>>> is_timedelta64_dtype(np.timedelta64)\nTrue\n>>> is_timedelta64_dtype([1, 2, 3])\nFalse\n>>> is_timedelta64_dtype(pd.Series([], dtype=\"timedelta64[ns]\"))\nTrue\n>>> is_timedelta64_dtype('0 days')\nFalse", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 578, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L578", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 16, in pandas.api.types.is_timedelta64_dtype\nFailed example:\n    is_timedelta64_dtype(object)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_timedelta64_dtype[0]>\", line 1, in <module>\n        is_timedelta64_dtype(object)\n    NameError: name 'is_timedelta64_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_timedelta64_dtype\nFailed example:\n    is_timedelta64_dtype(np.timedelta64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_timedelta64_dtype[1]>\", line 1, in <module>\n        is_timedelta64_dtype(np.timedelta64)\n    NameError: name 'is_timedelta64_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_timedelta64_dtype\nFailed example:\n    is_timedelta64_dtype([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_timedelta64_dtype[2]>\", line 1, in <module>\n        is_timedelta64_dtype([1, 2, 3])\n    NameError: name 'is_timedelta64_dtype' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_timedelta64_dtype\nFailed example:\n    is_timedelta64_dtype(pd.Series([], dtype=\"timedelta64[ns]\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_timedelta64_dtype[3]>\", line 1, in <module>\n        is_timedelta64_dtype(pd.Series([], dtype=\"timedelta64[ns]\"))\n    NameError: name 'is_timedelta64_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_timedelta64_dtype\nFailed example:\n    is_timedelta64_dtype('0 days')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_timedelta64_dtype[4]>\", line 1, in <module>\n        is_timedelta64_dtype('0 days')\n    NameError: name 'is_timedelta64_dtype' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_timedelta64_dtype' (5 times)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 16, in pandas.api.types.is_timedelta64_dtype\nFailed example:\n    is_timedelta64_dtype(object)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_timedelta64_dtype[0]>\", line 1, in <module>\n        is_timedelta64_dtype(object)\n    NameError: name 'is_timedelta64_dtype' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_timedelta64_dtype\nFailed example:\n    is_timedelta64_dtype(np.timedelta64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_timedelta64_dtype[1]>\", line 1, in <module>\n        is_timedelta64_dtype(np.timedelta64)\n    NameError: name 'is_timedelta64_dtype' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_timedelta64_dtype\nFailed example:\n    is_timedelta64_dtype([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_timedelta64_dtype[2]>\", line 1, in <module>\n        is_timedelta64_dtype([1, 2, 3])\n    NameError: name 'is_timedelta64_dtype' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_timedelta64_dtype\nFailed example:\n    is_timedelta64_dtype(pd.Series([], dtype=\"timedelta64[ns]\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_timedelta64_dtype[3]>\", line 1, in <module>\n        is_timedelta64_dtype(pd.Series([], dtype=\"timedelta64[ns]\"))\n    NameError: name 'is_timedelta64_dtype' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_timedelta64_dtype\nFailed example:\n    is_timedelta64_dtype('0 days')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_timedelta64_dtype[4]>\", line 1, in <module>\n        is_timedelta64_dtype('0 days')\n    NameError: name 'is_timedelta64_dtype' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Dtype introspection", "shared_code_with": ""}, "pandas.api.types.is_timedelta64_ns_dtype": {"type": "function", "docstring": "Check whether the provided array or dtype is of the timedelta64[ns] dtype.\n\nThis is a very specific dtype, so generic ones like `np.timedelta64`\nwill return False if passed into this function.\n\nParameters\n----------\narr_or_dtype : array-like\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of the timedelta64[ns] dtype.\n\nExamples\n--------\n>>> is_timedelta64_ns_dtype(np.dtype('m8[ns]'))\nTrue\n>>> is_timedelta64_ns_dtype(np.dtype('m8[ps]'))  # Wrong frequency\nFalse\n>>> is_timedelta64_ns_dtype(np.array([1, 2], dtype='m8[ns]'))\nTrue\n>>> is_timedelta64_ns_dtype(np.array([1, 2], dtype=np.timedelta64))\nFalse", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 1254, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L1254", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 19, in pandas.api.types.is_timedelta64_ns_dtype\nFailed example:\n    is_timedelta64_ns_dtype(np.dtype('m8[ns]'))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_timedelta64_ns_dtype[0]>\", line 1, in <module>\n        is_timedelta64_ns_dtype(np.dtype('m8[ns]'))\n    NameError: name 'is_timedelta64_ns_dtype' is not defined\n**********************************************************************\nLine 21, in pandas.api.types.is_timedelta64_ns_dtype\nFailed example:\n    is_timedelta64_ns_dtype(np.dtype('m8[ps]'))  # Wrong frequency\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_timedelta64_ns_dtype[1]>\", line 1, in <module>\n        is_timedelta64_ns_dtype(np.dtype('m8[ps]'))  # Wrong frequency\n    NameError: name 'is_timedelta64_ns_dtype' is not defined\n**********************************************************************\nLine 23, in pandas.api.types.is_timedelta64_ns_dtype\nFailed example:\n    is_timedelta64_ns_dtype(np.array([1, 2], dtype='m8[ns]'))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_timedelta64_ns_dtype[2]>\", line 1, in <module>\n        is_timedelta64_ns_dtype(np.array([1, 2], dtype='m8[ns]'))\n    NameError: name 'is_timedelta64_ns_dtype' is not defined\n**********************************************************************\nLine 25, in pandas.api.types.is_timedelta64_ns_dtype\nFailed example:\n    is_timedelta64_ns_dtype(np.array([1, 2], dtype=np.timedelta64))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_timedelta64_ns_dtype[3]>\", line 1, in <module>\n        is_timedelta64_ns_dtype(np.array([1, 2], dtype=np.timedelta64))\n    NameError: name 'is_timedelta64_ns_dtype' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_timedelta64_ns_dtype' (4 times)"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 19, in pandas.api.types.is_timedelta64_ns_dtype\nFailed example:\n    is_timedelta64_ns_dtype(np.dtype('m8[ns]'))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_timedelta64_ns_dtype[0]>\", line 1, in <module>\n        is_timedelta64_ns_dtype(np.dtype('m8[ns]'))\n    NameError: name 'is_timedelta64_ns_dtype' is not defined\n**********************************************************************\nLine 21, in pandas.api.types.is_timedelta64_ns_dtype\nFailed example:\n    is_timedelta64_ns_dtype(np.dtype('m8[ps]'))  # Wrong frequency\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_timedelta64_ns_dtype[1]>\", line 1, in <module>\n        is_timedelta64_ns_dtype(np.dtype('m8[ps]'))  # Wrong frequency\n    NameError: name 'is_timedelta64_ns_dtype' is not defined\n**********************************************************************\nLine 23, in pandas.api.types.is_timedelta64_ns_dtype\nFailed example:\n    is_timedelta64_ns_dtype(np.array([1, 2], dtype='m8[ns]'))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_timedelta64_ns_dtype[2]>\", line 1, in <module>\n        is_timedelta64_ns_dtype(np.array([1, 2], dtype='m8[ns]'))\n    NameError: name 'is_timedelta64_ns_dtype' is not defined\n**********************************************************************\nLine 25, in pandas.api.types.is_timedelta64_ns_dtype\nFailed example:\n    is_timedelta64_ns_dtype(np.array([1, 2], dtype=np.timedelta64))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_timedelta64_ns_dtype[3]>\", line 1, in <module>\n        is_timedelta64_ns_dtype(np.array([1, 2], dtype=np.timedelta64))\n    NameError: name 'is_timedelta64_ns_dtype' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Dtype introspection", "shared_code_with": ""}, "pandas.api.types.is_unsigned_integer_dtype": {"type": "function", "docstring": "Check whether the provided array or dtype is of an unsigned integer dtype.\n\n.. versionchanged:: 0.24.0\n\n   The nullable Integer dtypes (e.g. pandas.UInt64Dtype) are also\n   considered as integer by this function.\n\nParameters\n----------\narr_or_dtype : array-like\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of an unsigned integer dtype.\n\nExamples\n--------\n>>> is_unsigned_integer_dtype(str)\nFalse\n>>> is_unsigned_integer_dtype(int)  # signed\nFalse\n>>> is_unsigned_integer_dtype(float)\nFalse\n>>> is_unsigned_integer_dtype(np.uint64)\nTrue\n>>> is_unsigned_integer_dtype('uint8')\nTrue\n>>> is_unsigned_integer_dtype('UInt8')\nTrue\n>>> is_unsigned_integer_dtype(pd.UInt8Dtype)\nTrue\n>>> is_unsigned_integer_dtype(np.array(['a', 'b']))\nFalse\n>>> is_unsigned_integer_dtype(pd.Series([1, 2]))  # signed\nFalse\n>>> is_unsigned_integer_dtype(pd.Index([1, 2.]))  # float\nFalse\n>>> is_unsigned_integer_dtype(np.array([1, 2], dtype=np.uint32))\nTrue", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 1064, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L1064", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 21, in pandas.api.types.is_unsigned_integer_dtype\nFailed example:\n    is_unsigned_integer_dtype(str)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_unsigned_integer_dtype[0]>\", line 1, in <module>\n        is_unsigned_integer_dtype(str)\n    NameError: name 'is_unsigned_integer_dtype' is not defined\n**********************************************************************\nLine 23, in pandas.api.types.is_unsigned_integer_dtype\nFailed example:\n    is_unsigned_integer_dtype(int)  # signed\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_unsigned_integer_dtype[1]>\", line 1, in <module>\n        is_unsigned_integer_dtype(int)  # signed\n    NameError: name 'is_unsigned_integer_dtype' is not defined\n**********************************************************************\nLine 25, in pandas.api.types.is_unsigned_integer_dtype\nFailed example:\n    is_unsigned_integer_dtype(float)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_unsigned_integer_dtype[2]>\", line 1, in <module>\n        is_unsigned_integer_dtype(float)\n    NameError: name 'is_unsigned_integer_dtype' is not defined\n**********************************************************************\nLine 27, in pandas.api.types.is_unsigned_integer_dtype\nFailed example:\n    is_unsigned_integer_dtype(np.uint64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_unsigned_integer_dtype[3]>\", line 1, in <module>\n        is_unsigned_integer_dtype(np.uint64)\n    NameError: name 'is_unsigned_integer_dtype' is not defined\n**********************************************************************\nLine 29, in pandas.api.types.is_unsigned_integer_dtype\nFailed example:\n    is_unsigned_integer_dtype('uint8')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_unsigned_integer_dtype[4]>\", line 1, in <module>\n        is_unsigned_integer_dtype('uint8')\n    NameError: name 'is_unsigned_integer_dtype' is not defined\n**********************************************************************\nLine 31, in pandas.api.types.is_unsigned_integer_dtype\nFailed example:\n    is_unsigned_integer_dtype('UInt8')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_unsigned_integer_dtype[5]>\", line 1, in <module>\n        is_unsigned_integer_dtype('UInt8')\n    NameError: name 'is_unsigned_integer_dtype' is not defined\n**********************************************************************\nLine 33, in pandas.api.types.is_unsigned_integer_dtype\nFailed example:\n    is_unsigned_integer_dtype(pd.UInt8Dtype)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_unsigned_integer_dtype[6]>\", line 1, in <module>\n        is_unsigned_integer_dtype(pd.UInt8Dtype)\n    NameError: name 'is_unsigned_integer_dtype' is not defined\n**********************************************************************\nLine 35, in pandas.api.types.is_unsigned_integer_dtype\nFailed example:\n    is_unsigned_integer_dtype(np.array(['a', 'b']))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_unsigned_integer_dtype[7]>\", line 1, in <module>\n        is_unsigned_integer_dtype(np.array(['a', 'b']))\n    NameError: name 'is_unsigned_integer_dtype' is not defined\n**********************************************************************\nLine 37, in pandas.api.types.is_unsigned_integer_dtype\nFailed example:\n    is_unsigned_integer_dtype(pd.Series([1, 2]))  # signed\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_unsigned_integer_dtype[8]>\", line 1, in <module>\n        is_unsigned_integer_dtype(pd.Series([1, 2]))  # signed\n    NameError: name 'is_unsigned_integer_dtype' is not defined\n**********************************************************************\nLine 39, in pandas.api.types.is_unsigned_integer_dtype\nFailed example:\n    is_unsigned_integer_dtype(pd.Index([1, 2.]))  # float\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_unsigned_integer_dtype[9]>\", line 1, in <module>\n        is_unsigned_integer_dtype(pd.Index([1, 2.]))  # float\n    NameError: name 'is_unsigned_integer_dtype' is not defined\n**********************************************************************\nLine 41, in pandas.api.types.is_unsigned_integer_dtype\nFailed example:\n    is_unsigned_integer_dtype(np.array([1, 2], dtype=np.uint32))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_unsigned_integer_dtype[10]>\", line 1, in <module>\n        is_unsigned_integer_dtype(np.array([1, 2], dtype=np.uint32))\n    NameError: name 'is_unsigned_integer_dtype' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_unsigned_integer_dtype' (11 times)"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 21, in pandas.api.types.is_unsigned_integer_dtype\nFailed example:\n    is_unsigned_integer_dtype(str)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_unsigned_integer_dtype[0]>\", line 1, in <module>\n        is_unsigned_integer_dtype(str)\n    NameError: name 'is_unsigned_integer_dtype' is not defined\n**********************************************************************\nLine 23, in pandas.api.types.is_unsigned_integer_dtype\nFailed example:\n    is_unsigned_integer_dtype(int)  # signed\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_unsigned_integer_dtype[1]>\", line 1, in <module>\n        is_unsigned_integer_dtype(int)  # signed\n    NameError: name 'is_unsigned_integer_dtype' is not defined\n**********************************************************************\nLine 25, in pandas.api.types.is_unsigned_integer_dtype\nFailed example:\n    is_unsigned_integer_dtype(float)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_unsigned_integer_dtype[2]>\", line 1, in <module>\n        is_unsigned_integer_dtype(float)\n    NameError: name 'is_unsigned_integer_dtype' is not defined\n**********************************************************************\nLine 27, in pandas.api.types.is_unsigned_integer_dtype\nFailed example:\n    is_unsigned_integer_dtype(np.uint64)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_unsigned_integer_dtype[3]>\", line 1, in <module>\n        is_unsigned_integer_dtype(np.uint64)\n    NameError: name 'is_unsigned_integer_dtype' is not defined\n**********************************************************************\nLine 29, in pandas.api.types.is_unsigned_integer_dtype\nFailed example:\n    is_unsigned_integer_dtype('uint8')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_unsigned_integer_dtype[4]>\", line 1, in <module>\n        is_unsigned_integer_dtype('uint8')\n    NameError: name 'is_unsigned_integer_dtype' is not defined\n**********************************************************************\nLine 31, in pandas.api.types.is_unsigned_integer_dtype\nFailed example:\n    is_unsigned_integer_dtype('UInt8')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_unsigned_integer_dtype[5]>\", line 1, in <module>\n        is_unsigned_integer_dtype('UInt8')\n    NameError: name 'is_unsigned_integer_dtype' is not defined\n**********************************************************************\nLine 33, in pandas.api.types.is_unsigned_integer_dtype\nFailed example:\n    is_unsigned_integer_dtype(pd.UInt8Dtype)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_unsigned_integer_dtype[6]>\", line 1, in <module>\n        is_unsigned_integer_dtype(pd.UInt8Dtype)\n    NameError: name 'is_unsigned_integer_dtype' is not defined\n**********************************************************************\nLine 35, in pandas.api.types.is_unsigned_integer_dtype\nFailed example:\n    is_unsigned_integer_dtype(np.array(['a', 'b']))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_unsigned_integer_dtype[7]>\", line 1, in <module>\n        is_unsigned_integer_dtype(np.array(['a', 'b']))\n    NameError: name 'is_unsigned_integer_dtype' is not defined\n**********************************************************************\nLine 37, in pandas.api.types.is_unsigned_integer_dtype\nFailed example:\n    is_unsigned_integer_dtype(pd.Series([1, 2]))  # signed\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_unsigned_integer_dtype[8]>\", line 1, in <module>\n        is_unsigned_integer_dtype(pd.Series([1, 2]))  # signed\n    NameError: name 'is_unsigned_integer_dtype' is not defined\n**********************************************************************\nLine 39, in pandas.api.types.is_unsigned_integer_dtype\nFailed example:\n    is_unsigned_integer_dtype(pd.Index([1, 2.]))  # float\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_unsigned_integer_dtype[9]>\", line 1, in <module>\n        is_unsigned_integer_dtype(pd.Index([1, 2.]))  # float\n    NameError: name 'is_unsigned_integer_dtype' is not defined\n**********************************************************************\nLine 41, in pandas.api.types.is_unsigned_integer_dtype\nFailed example:\n    is_unsigned_integer_dtype(np.array([1, 2], dtype=np.uint32))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_unsigned_integer_dtype[10]>\", line 1, in <module>\n        is_unsigned_integer_dtype(np.array([1, 2], dtype=np.uint32))\n    NameError: name 'is_unsigned_integer_dtype' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Dtype introspection", "shared_code_with": ""}, "pandas.api.types.is_sparse": {"type": "function", "docstring": "Check whether an array-like is a 1-D pandas sparse array.\n\nCheck that the one-dimensional array-like is a pandas sparse array.\nReturns True if it is a pandas sparse array, not another type of\nsparse array.\n\nParameters\n----------\narr : array-like\n    Array-like to check.\n\nReturns\n-------\nbool\n    Whether or not the array-like is a pandas sparse array.\n\nSee Also\n--------\nDataFrame.to_sparse : Convert DataFrame to a SparseDataFrame.\nSeries.to_sparse : Convert Series to SparseSeries.\nSeries.to_dense : Return dense representation of a Series.\n\nExamples\n--------\nReturns `True` if the parameter is a 1-D pandas sparse array.\n\n>>> is_sparse(pd.SparseArray([0, 0, 1, 0]))\nTrue\n>>> is_sparse(pd.SparseSeries([0, 0, 1, 0]))\nTrue\n\nReturns `False` if the parameter is not sparse.\n\n>>> is_sparse(np.array([0, 0, 1, 0]))\nFalse\n>>> is_sparse(pd.Series([0, 1, 0, 0]))\nFalse\n\nReturns `False` if the parameter is not a pandas sparse array.\n\n>>> from scipy.sparse import bsr_matrix\n>>> is_sparse(bsr_matrix([0, 1, 0, 0]))\nFalse\n\nReturns `False` if the parameter has more than one dimension.\n\n>>> df = pd.SparseDataFrame([389., 24., 80.5, np.nan],\n                            columns=['max_speed'],\n                            index=['falcon', 'parrot', 'lion', 'monkey'])\n>>> is_sparse(df)\nFalse\n>>> is_sparse(df.max_speed)\nTrue", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 256, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L256", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 28, in pandas.api.types.is_sparse\nFailed example:\n    is_sparse(pd.SparseArray([0, 0, 1, 0]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_sparse[0]>\", line 1, in <module>\n        is_sparse(pd.SparseArray([0, 0, 1, 0]))\n    NameError: name 'is_sparse' is not defined\n**********************************************************************\nLine 30, in pandas.api.types.is_sparse\nFailed example:\n    is_sparse(pd.SparseSeries([0, 0, 1, 0]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_sparse[1]>\", line 1, in <module>\n        is_sparse(pd.SparseSeries([0, 0, 1, 0]))\n    NameError: name 'is_sparse' is not defined\n**********************************************************************\nLine 35, in pandas.api.types.is_sparse\nFailed example:\n    is_sparse(np.array([0, 0, 1, 0]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_sparse[2]>\", line 1, in <module>\n        is_sparse(np.array([0, 0, 1, 0]))\n    NameError: name 'is_sparse' is not defined\n**********************************************************************\nLine 37, in pandas.api.types.is_sparse\nFailed example:\n    is_sparse(pd.Series([0, 1, 0, 0]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_sparse[3]>\", line 1, in <module>\n        is_sparse(pd.Series([0, 1, 0, 0]))\n    NameError: name 'is_sparse' is not defined\n**********************************************************************\nLine 43, in pandas.api.types.is_sparse\nFailed example:\n    is_sparse(bsr_matrix([0, 1, 0, 0]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_sparse[5]>\", line 1, in <module>\n        is_sparse(bsr_matrix([0, 1, 0, 0]))\n    NameError: name 'is_sparse' is not defined\n**********************************************************************\nLine 48, in pandas.api.types.is_sparse\nFailed example:\n    df = pd.SparseDataFrame([389., 24., 80.5, np.nan],\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_sparse[6]>\", line 1\n        df = pd.SparseDataFrame([389., 24., 80.5, np.nan],\n                                                         ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 51, in pandas.api.types.is_sparse\nFailed example:\n    is_sparse(df)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_sparse[7]>\", line 1, in <module>\n        is_sparse(df)\n    NameError: name 'is_sparse' is not defined\n**********************************************************************\nLine 53, in pandas.api.types.is_sparse\nFailed example:\n    is_sparse(df.max_speed)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_sparse[8]>\", line 1, in <module>\n        is_sparse(df.max_speed)\n    NameError: name 'is_sparse' is not defined\n"], ["EX03", "flake8 error: E902 TokenError: EOF in multi-line statement"], ["EX03", "flake8 error: E999 SyntaxError: invalid syntax"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 28, in pandas.api.types.is_sparse\nFailed example:\n    is_sparse(pd.SparseArray([0, 0, 1, 0]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_sparse[0]>\", line 1, in <module>\n        is_sparse(pd.SparseArray([0, 0, 1, 0]))\n    NameError: name 'is_sparse' is not defined\n**********************************************************************\nLine 30, in pandas.api.types.is_sparse\nFailed example:\n    is_sparse(pd.SparseSeries([0, 0, 1, 0]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_sparse[1]>\", line 1, in <module>\n        is_sparse(pd.SparseSeries([0, 0, 1, 0]))\n    NameError: name 'is_sparse' is not defined\n**********************************************************************\nLine 35, in pandas.api.types.is_sparse\nFailed example:\n    is_sparse(np.array([0, 0, 1, 0]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_sparse[2]>\", line 1, in <module>\n        is_sparse(np.array([0, 0, 1, 0]))\n    NameError: name 'is_sparse' is not defined\n**********************************************************************\nLine 37, in pandas.api.types.is_sparse\nFailed example:\n    is_sparse(pd.Series([0, 1, 0, 0]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_sparse[3]>\", line 1, in <module>\n        is_sparse(pd.Series([0, 1, 0, 0]))\n    NameError: name 'is_sparse' is not defined\n**********************************************************************\nLine 43, in pandas.api.types.is_sparse\nFailed example:\n    is_sparse(bsr_matrix([0, 1, 0, 0]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_sparse[5]>\", line 1, in <module>\n        is_sparse(bsr_matrix([0, 1, 0, 0]))\n    NameError: name 'is_sparse' is not defined\n**********************************************************************\nLine 48, in pandas.api.types.is_sparse\nFailed example:\n    df = pd.SparseDataFrame([389., 24., 80.5, np.nan],\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_sparse[6]>\", line 1\n        df = pd.SparseDataFrame([389., 24., 80.5, np.nan],\n                                                         ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 51, in pandas.api.types.is_sparse\nFailed example:\n    is_sparse(df)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_sparse[7]>\", line 1, in <module>\n        is_sparse(df)\n    NameError: name 'is_sparse' is not defined\n**********************************************************************\nLine 53, in pandas.api.types.is_sparse\nFailed example:\n    is_sparse(df.max_speed)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_sparse[8]>\", line 1, in <module>\n        is_sparse(df.max_speed)\n    NameError: name 'is_sparse' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Dtype introspection", "shared_code_with": ""}, "pandas.api.types.is_dict_like": {"type": "function", "docstring": "Check if the object is dict-like.\n\nParameters\n----------\nobj : The object to check\n\nReturns\n-------\nis_dict_like : bool\n    Whether `obj` has dict-like properties.\n\nExamples\n--------\n>>> is_dict_like({1: 2})\nTrue\n>>> is_dict_like([1, 2, 3])\nFalse\n>>> is_dict_like(dict)\nFalse\n>>> is_dict_like(dict())\nTrue", "deprecated": false, "file": "pandas/core/dtypes/inference.py", "file_line": 327, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/inference.py#L327", "errors": [["PR07", "Parameter \"obj\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 15, in pandas.api.types.is_dict_like\nFailed example:\n    is_dict_like({1: 2})\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_dict_like[0]>\", line 1, in <module>\n        is_dict_like({1: 2})\n    NameError: name 'is_dict_like' is not defined\n**********************************************************************\nLine 17, in pandas.api.types.is_dict_like\nFailed example:\n    is_dict_like([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_dict_like[1]>\", line 1, in <module>\n        is_dict_like([1, 2, 3])\n    NameError: name 'is_dict_like' is not defined\n**********************************************************************\nLine 19, in pandas.api.types.is_dict_like\nFailed example:\n    is_dict_like(dict)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_dict_like[2]>\", line 1, in <module>\n        is_dict_like(dict)\n    NameError: name 'is_dict_like' is not defined\n**********************************************************************\nLine 21, in pandas.api.types.is_dict_like\nFailed example:\n    is_dict_like(dict())\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_dict_like[3]>\", line 1, in <module>\n        is_dict_like(dict())\n    NameError: name 'is_dict_like' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_dict_like' (4 times)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 15, in pandas.api.types.is_dict_like\nFailed example:\n    is_dict_like({1: 2})\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_dict_like[0]>\", line 1, in <module>\n        is_dict_like({1: 2})\n    NameError: name 'is_dict_like' is not defined\n**********************************************************************\nLine 17, in pandas.api.types.is_dict_like\nFailed example:\n    is_dict_like([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_dict_like[1]>\", line 1, in <module>\n        is_dict_like([1, 2, 3])\n    NameError: name 'is_dict_like' is not defined\n**********************************************************************\nLine 19, in pandas.api.types.is_dict_like\nFailed example:\n    is_dict_like(dict)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_dict_like[2]>\", line 1, in <module>\n        is_dict_like(dict)\n    NameError: name 'is_dict_like' is not defined\n**********************************************************************\nLine 21, in pandas.api.types.is_dict_like\nFailed example:\n    is_dict_like(dict())\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_dict_like[3]>\", line 1, in <module>\n        is_dict_like(dict())\n    NameError: name 'is_dict_like' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Iterable introspection", "shared_code_with": ""}, "pandas.api.types.is_file_like": {"type": "function", "docstring": "Check if the object is a file-like object.\n\nFor objects to be considered file-like, they must\nbe an iterator AND have either a `read` and/or `write`\nmethod as an attribute.\n\nNote: file-like objects must be iterable, but\niterable objects need not be file-like.\n\n.. versionadded:: 0.20.0\n\nParameters\n----------\nobj : The object to check\n\nReturns\n-------\nis_file_like : bool\n    Whether `obj` has file-like properties.\n\nExamples\n--------\n>>> buffer(StringIO(\"data\"))\n>>> is_file_like(buffer)\nTrue\n>>> is_file_like([1, 2, 3])\nFalse", "deprecated": false, "file": "pandas/core/dtypes/inference.py", "file_line": 154, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/inference.py#L154", "errors": [["PR07", "Parameter \"obj\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 24, in pandas.api.types.is_file_like\nFailed example:\n    buffer(StringIO(\"data\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_file_like[0]>\", line 1, in <module>\n        buffer(StringIO(\"data\"))\n    NameError: name 'buffer' is not defined\n**********************************************************************\nLine 25, in pandas.api.types.is_file_like\nFailed example:\n    is_file_like(buffer)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_file_like[1]>\", line 1, in <module>\n        is_file_like(buffer)\n    NameError: name 'is_file_like' is not defined\n**********************************************************************\nLine 27, in pandas.api.types.is_file_like\nFailed example:\n    is_file_like([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_file_like[2]>\", line 1, in <module>\n        is_file_like([1, 2, 3])\n    NameError: name 'is_file_like' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'buffer' (5 times)"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 24, in pandas.api.types.is_file_like\nFailed example:\n    buffer(StringIO(\"data\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_file_like[0]>\", line 1, in <module>\n        buffer(StringIO(\"data\"))\n    NameError: name 'buffer' is not defined\n**********************************************************************\nLine 25, in pandas.api.types.is_file_like\nFailed example:\n    is_file_like(buffer)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_file_like[1]>\", line 1, in <module>\n        is_file_like(buffer)\n    NameError: name 'is_file_like' is not defined\n**********************************************************************\nLine 27, in pandas.api.types.is_file_like\nFailed example:\n    is_file_like([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_file_like[2]>\", line 1, in <module>\n        is_file_like([1, 2, 3])\n    NameError: name 'is_file_like' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Iterable introspection", "shared_code_with": ""}, "pandas.api.types.is_list_like": {"type": "builtin_function_or_method", "docstring": "Check if the object is list-like.\n\nObjects that are considered list-like are for example Python\nlists, tuples, sets, NumPy arrays, and Pandas Series.\n\nStrings and datetime objects, however, are not considered list-like.\n\nParameters\n----------\nobj : The object to check\nallow_sets : boolean, default True\n    If this parameter is False, sets will not be considered list-like\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nis_list_like : bool\n    Whether `obj` has list-like properties.\n\nExamples\n--------\n>>> is_list_like([1, 2, 3])\nTrue\n>>> is_list_like({1, 2, 3})\nTrue\n>>> is_list_like(datetime(2017, 1, 1))\nFalse\n>>> is_list_like(\"foo\")\nFalse\n>>> is_list_like(1)\nFalse\n>>> is_list_like(np.array([2]))\nTrue\n>>> is_list_like(np.array(2)))\nFalse", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR02", "Unknown parameters {allow_sets, obj}"], ["PR07", "Parameter \"obj\" has no description"], ["PR06", "Parameter \"allow_sets\" type should use \"bool\" instead of \"boolean\""], ["PR09", "Parameter \"allow_sets\" description should finish with \".\""], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 24, in pandas.api.types.is_list_like\nFailed example:\n    is_list_like([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_list_like[0]>\", line 1, in <module>\n        is_list_like([1, 2, 3])\n    NameError: name 'is_list_like' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_list_like\nFailed example:\n    is_list_like({1, 2, 3})\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_list_like[1]>\", line 1, in <module>\n        is_list_like({1, 2, 3})\n    NameError: name 'is_list_like' is not defined\n**********************************************************************\nLine 28, in pandas.api.types.is_list_like\nFailed example:\n    is_list_like(datetime(2017, 1, 1))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_list_like[2]>\", line 1, in <module>\n        is_list_like(datetime(2017, 1, 1))\n    NameError: name 'is_list_like' is not defined\n**********************************************************************\nLine 30, in pandas.api.types.is_list_like\nFailed example:\n    is_list_like(\"foo\")\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_list_like[3]>\", line 1, in <module>\n        is_list_like(\"foo\")\n    NameError: name 'is_list_like' is not defined\n**********************************************************************\nLine 32, in pandas.api.types.is_list_like\nFailed example:\n    is_list_like(1)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_list_like[4]>\", line 1, in <module>\n        is_list_like(1)\n    NameError: name 'is_list_like' is not defined\n**********************************************************************\nLine 34, in pandas.api.types.is_list_like\nFailed example:\n    is_list_like(np.array([2]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_list_like[5]>\", line 1, in <module>\n        is_list_like(np.array([2]))\n    NameError: name 'is_list_like' is not defined\n**********************************************************************\nLine 36, in pandas.api.types.is_list_like\nFailed example:\n    is_list_like(np.array(2)))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_list_like[6]>\", line 1\n        is_list_like(np.array(2)))\n                                 ^\n    SyntaxError: invalid syntax\n"], ["EX03", "flake8 error: E902 TokenError: EOF in multi-line statement"], ["EX03", "flake8 error: E999 SyntaxError: invalid syntax"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 24, in pandas.api.types.is_list_like\nFailed example:\n    is_list_like([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_list_like[0]>\", line 1, in <module>\n        is_list_like([1, 2, 3])\n    NameError: name 'is_list_like' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_list_like\nFailed example:\n    is_list_like({1, 2, 3})\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_list_like[1]>\", line 1, in <module>\n        is_list_like({1, 2, 3})\n    NameError: name 'is_list_like' is not defined\n**********************************************************************\nLine 28, in pandas.api.types.is_list_like\nFailed example:\n    is_list_like(datetime(2017, 1, 1))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_list_like[2]>\", line 1, in <module>\n        is_list_like(datetime(2017, 1, 1))\n    NameError: name 'is_list_like' is not defined\n**********************************************************************\nLine 30, in pandas.api.types.is_list_like\nFailed example:\n    is_list_like(\"foo\")\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_list_like[3]>\", line 1, in <module>\n        is_list_like(\"foo\")\n    NameError: name 'is_list_like' is not defined\n**********************************************************************\nLine 32, in pandas.api.types.is_list_like\nFailed example:\n    is_list_like(1)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_list_like[4]>\", line 1, in <module>\n        is_list_like(1)\n    NameError: name 'is_list_like' is not defined\n**********************************************************************\nLine 34, in pandas.api.types.is_list_like\nFailed example:\n    is_list_like(np.array([2]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_list_like[5]>\", line 1, in <module>\n        is_list_like(np.array([2]))\n    NameError: name 'is_list_like' is not defined\n**********************************************************************\nLine 36, in pandas.api.types.is_list_like\nFailed example:\n    is_list_like(np.array(2)))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_list_like[6]>\", line 1\n        is_list_like(np.array(2)))\n                                 ^\n    SyntaxError: invalid syntax\n", "in_api": true, "section": "Data types related functionality", "subsection": "Iterable introspection", "shared_code_with": "pandas.api.types.infer_dtype"}, "pandas.api.types.is_named_tuple": {"type": "function", "docstring": "Check if the object is a named tuple.\n\nParameters\n----------\nobj : The object to check\n\nReturns\n-------\nis_named_tuple : bool\n    Whether `obj` is a named tuple.\n\nExamples\n--------\n>>> Point = namedtuple(\"Point\", [\"x\", \"y\"])\n>>> p = Point(1, 2)\n>>>\n>>> is_named_tuple(p)\nTrue\n>>> is_named_tuple((1, 2))\nFalse", "deprecated": false, "file": "pandas/core/dtypes/inference.py", "file_line": 359, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/inference.py#L359", "errors": [["PR07", "Parameter \"obj\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 15, in pandas.api.types.is_named_tuple\nFailed example:\n    Point = namedtuple(\"Point\", [\"x\", \"y\"])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_named_tuple[0]>\", line 1, in <module>\n        Point = namedtuple(\"Point\", [\"x\", \"y\"])\n    NameError: name 'namedtuple' is not defined\n**********************************************************************\nLine 16, in pandas.api.types.is_named_tuple\nFailed example:\n    p = Point(1, 2)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_named_tuple[1]>\", line 1, in <module>\n        p = Point(1, 2)\n    NameError: name 'Point' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_named_tuple\nFailed example:\n    is_named_tuple(p)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_named_tuple[2]>\", line 1, in <module>\n        is_named_tuple(p)\n    NameError: name 'is_named_tuple' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_named_tuple\nFailed example:\n    is_named_tuple((1, 2))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_named_tuple[3]>\", line 1, in <module>\n        is_named_tuple((1, 2))\n    NameError: name 'is_named_tuple' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'namedtuple' (3 times)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 15, in pandas.api.types.is_named_tuple\nFailed example:\n    Point = namedtuple(\"Point\", [\"x\", \"y\"])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_named_tuple[0]>\", line 1, in <module>\n        Point = namedtuple(\"Point\", [\"x\", \"y\"])\n    NameError: name 'namedtuple' is not defined\n**********************************************************************\nLine 16, in pandas.api.types.is_named_tuple\nFailed example:\n    p = Point(1, 2)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_named_tuple[1]>\", line 1, in <module>\n        p = Point(1, 2)\n    NameError: name 'Point' is not defined\n**********************************************************************\nLine 18, in pandas.api.types.is_named_tuple\nFailed example:\n    is_named_tuple(p)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_named_tuple[2]>\", line 1, in <module>\n        is_named_tuple(p)\n    NameError: name 'is_named_tuple' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_named_tuple\nFailed example:\n    is_named_tuple((1, 2))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_named_tuple[3]>\", line 1, in <module>\n        is_named_tuple((1, 2))\n    NameError: name 'is_named_tuple' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Iterable introspection", "shared_code_with": ""}, "pandas.api.types.is_iterator": {"type": "function", "docstring": "Check if the object is an iterator.\n\nFor example, lists are considered iterators\nbut not strings or datetime objects.\n\nParameters\n----------\nobj : The object to check\n\nReturns\n-------\nis_iter : bool\n    Whether `obj` is an iterator.\n\nExamples\n--------\n>>> is_iterator([1, 2, 3])\nTrue\n>>> is_iterator(datetime(2017, 1, 1))\nFalse\n>>> is_iterator(\"foo\")\nFalse\n>>> is_iterator(1)\nFalse", "deprecated": false, "file": "pandas/core/dtypes/inference.py", "file_line": 120, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/inference.py#L120", "errors": [["PR07", "Parameter \"obj\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 18, in pandas.api.types.is_iterator\nFailed example:\n    is_iterator([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_iterator[0]>\", line 1, in <module>\n        is_iterator([1, 2, 3])\n    NameError: name 'is_iterator' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_iterator\nFailed example:\n    is_iterator(datetime(2017, 1, 1))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_iterator[1]>\", line 1, in <module>\n        is_iterator(datetime(2017, 1, 1))\n    NameError: name 'is_iterator' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_iterator\nFailed example:\n    is_iterator(\"foo\")\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_iterator[2]>\", line 1, in <module>\n        is_iterator(\"foo\")\n    NameError: name 'is_iterator' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_iterator\nFailed example:\n    is_iterator(1)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_iterator[3]>\", line 1, in <module>\n        is_iterator(1)\n    NameError: name 'is_iterator' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_iterator' (5 times)"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 18, in pandas.api.types.is_iterator\nFailed example:\n    is_iterator([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_iterator[0]>\", line 1, in <module>\n        is_iterator([1, 2, 3])\n    NameError: name 'is_iterator' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_iterator\nFailed example:\n    is_iterator(datetime(2017, 1, 1))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_iterator[1]>\", line 1, in <module>\n        is_iterator(datetime(2017, 1, 1))\n    NameError: name 'is_iterator' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_iterator\nFailed example:\n    is_iterator(\"foo\")\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_iterator[2]>\", line 1, in <module>\n        is_iterator(\"foo\")\n    NameError: name 'is_iterator' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_iterator\nFailed example:\n    is_iterator(1)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_iterator[3]>\", line 1, in <module>\n        is_iterator(1)\n    NameError: name 'is_iterator' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Iterable introspection", "shared_code_with": ""}, "pandas.api.types.is_bool": {"type": "builtin_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Data types related functionality", "subsection": "Scalar introspection", "shared_code_with": "pandas.api.types.is_list_like"}, "pandas.api.types.is_categorical": {"type": "function", "docstring": "Check whether an array-like is a Categorical instance.\n\nParameters\n----------\narr : array-like\n    The array-like to check.\n\nReturns\n-------\nboolean\n    Whether or not the array-like is of a Categorical instance.\n\nExamples\n--------\n>>> is_categorical([1, 2, 3])\nFalse\n\nCategoricals, Series Categoricals, and CategoricalIndex will return True.\n\n>>> cat = pd.Categorical([1, 2, 3])\n>>> is_categorical(cat)\nTrue\n>>> is_categorical(pd.Series(cat))\nTrue\n>>> is_categorical(pd.CategoricalIndex([1, 2, 3]))\nTrue", "deprecated": false, "file": "pandas/core/dtypes/common.py", "file_line": 358, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L358", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 16, in pandas.api.types.is_categorical\nFailed example:\n    is_categorical([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_categorical[0]>\", line 1, in <module>\n        is_categorical([1, 2, 3])\n    NameError: name 'is_categorical' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_categorical\nFailed example:\n    is_categorical(cat)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_categorical[2]>\", line 1, in <module>\n        is_categorical(cat)\n    NameError: name 'is_categorical' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_categorical\nFailed example:\n    is_categorical(pd.Series(cat))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_categorical[3]>\", line 1, in <module>\n        is_categorical(pd.Series(cat))\n    NameError: name 'is_categorical' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_categorical\nFailed example:\n    is_categorical(pd.CategoricalIndex([1, 2, 3]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_categorical[4]>\", line 1, in <module>\n        is_categorical(pd.CategoricalIndex([1, 2, 3]))\n    NameError: name 'is_categorical' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_categorical' (4 times)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 16, in pandas.api.types.is_categorical\nFailed example:\n    is_categorical([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_categorical[0]>\", line 1, in <module>\n        is_categorical([1, 2, 3])\n    NameError: name 'is_categorical' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_categorical\nFailed example:\n    is_categorical(cat)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_categorical[2]>\", line 1, in <module>\n        is_categorical(cat)\n    NameError: name 'is_categorical' is not defined\n**********************************************************************\nLine 24, in pandas.api.types.is_categorical\nFailed example:\n    is_categorical(pd.Series(cat))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_categorical[3]>\", line 1, in <module>\n        is_categorical(pd.Series(cat))\n    NameError: name 'is_categorical' is not defined\n**********************************************************************\nLine 26, in pandas.api.types.is_categorical\nFailed example:\n    is_categorical(pd.CategoricalIndex([1, 2, 3]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_categorical[4]>\", line 1, in <module>\n        is_categorical(pd.CategoricalIndex([1, 2, 3]))\n    NameError: name 'is_categorical' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Scalar introspection", "shared_code_with": ""}, "pandas.api.types.is_complex": {"type": "builtin_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Data types related functionality", "subsection": "Scalar introspection", "shared_code_with": "pandas.api.types.is_bool"}, "pandas.api.types.is_datetimetz": {"type": "function", "docstring": "Check whether an array-like is a datetime array-like with a timezone\ncomponent in its dtype.\n\n.. deprecated:: 0.24.0\n\nParameters\n----------\narr : array-like\n    The array-like to check.\n\nReturns\n-------\nboolean\n    Whether or not the array-like is a datetime array-like with a\n    timezone component in its dtype.\n\nExamples\n--------\n>>> is_datetimetz([1, 2, 3])\nFalse\n\nAlthough the following examples are both DatetimeIndex objects,\nthe first one returns False because it has no timezone component\nunlike the second one, which returns True.\n\n>>> is_datetimetz(pd.DatetimeIndex([1, 2, 3]))\nFalse\n>>> is_datetimetz(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\nTrue\n\nThe object need not be a DatetimeIndex object. It just needs to have\na dtype which has a timezone component.\n\n>>> dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n>>> s = pd.Series([], dtype=dtype)\n>>> is_datetimetz(s)\nTrue", "deprecated": true, "file": "pandas/core/dtypes/common.py", "file_line": 391, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L391", "errors": [["SS06", "Summary should fit in a single line"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 20, in pandas.api.types.is_datetimetz\nFailed example:\n    is_datetimetz([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetimetz[0]>\", line 1, in <module>\n        is_datetimetz([1, 2, 3])\n    NameError: name 'is_datetimetz' is not defined\n**********************************************************************\nLine 27, in pandas.api.types.is_datetimetz\nFailed example:\n    is_datetimetz(pd.DatetimeIndex([1, 2, 3]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetimetz[1]>\", line 1, in <module>\n        is_datetimetz(pd.DatetimeIndex([1, 2, 3]))\n    NameError: name 'is_datetimetz' is not defined\n**********************************************************************\nLine 29, in pandas.api.types.is_datetimetz\nFailed example:\n    is_datetimetz(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetimetz[2]>\", line 1, in <module>\n        is_datetimetz(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    NameError: name 'is_datetimetz' is not defined\n**********************************************************************\nLine 35, in pandas.api.types.is_datetimetz\nFailed example:\n    dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetimetz[3]>\", line 1, in <module>\n        dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n    NameError: name 'DatetimeTZDtype' is not defined\n**********************************************************************\nLine 36, in pandas.api.types.is_datetimetz\nFailed example:\n    s = pd.Series([], dtype=dtype)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetimetz[4]>\", line 1, in <module>\n        s = pd.Series([], dtype=dtype)\n    NameError: name 'dtype' is not defined\n**********************************************************************\nLine 37, in pandas.api.types.is_datetimetz\nFailed example:\n    is_datetimetz(s)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetimetz[5]>\", line 1, in <module>\n        is_datetimetz(s)\n    NameError: name 'is_datetimetz' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_datetimetz' (5 times)"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 20, in pandas.api.types.is_datetimetz\nFailed example:\n    is_datetimetz([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetimetz[0]>\", line 1, in <module>\n        is_datetimetz([1, 2, 3])\n    NameError: name 'is_datetimetz' is not defined\n**********************************************************************\nLine 27, in pandas.api.types.is_datetimetz\nFailed example:\n    is_datetimetz(pd.DatetimeIndex([1, 2, 3]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetimetz[1]>\", line 1, in <module>\n        is_datetimetz(pd.DatetimeIndex([1, 2, 3]))\n    NameError: name 'is_datetimetz' is not defined\n**********************************************************************\nLine 29, in pandas.api.types.is_datetimetz\nFailed example:\n    is_datetimetz(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetimetz[2]>\", line 1, in <module>\n        is_datetimetz(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    NameError: name 'is_datetimetz' is not defined\n**********************************************************************\nLine 35, in pandas.api.types.is_datetimetz\nFailed example:\n    dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetimetz[3]>\", line 1, in <module>\n        dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n    NameError: name 'DatetimeTZDtype' is not defined\n**********************************************************************\nLine 36, in pandas.api.types.is_datetimetz\nFailed example:\n    s = pd.Series([], dtype=dtype)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetimetz[4]>\", line 1, in <module>\n        s = pd.Series([], dtype=dtype)\n    NameError: name 'dtype' is not defined\n**********************************************************************\nLine 37, in pandas.api.types.is_datetimetz\nFailed example:\n    is_datetimetz(s)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_datetimetz[5]>\", line 1, in <module>\n        is_datetimetz(s)\n    NameError: name 'is_datetimetz' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Scalar introspection", "shared_code_with": ""}, "pandas.api.types.is_float": {"type": "builtin_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Data types related functionality", "subsection": "Scalar introspection", "shared_code_with": "pandas.api.types.is_complex"}, "pandas.api.types.is_hashable": {"type": "function", "docstring": "Return True if hash(obj) will succeed, False otherwise.\n\nSome types will pass a test against collections.abc.Hashable but fail when\nthey are actually hashed with hash().\n\nDistinguish between these and other types by trying the call to hash() and\nseeing if they raise TypeError.\n\nReturns\n-------\nbool\n\nExamples\n--------\n>>> a = ([],)\n>>> isinstance(a, collections.abc.Hashable)\nTrue\n>>> is_hashable(a)\nFalse", "deprecated": false, "file": "pandas/core/dtypes/inference.py", "file_line": 386, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/inference.py#L386", "errors": [["PR01", "Parameters {obj} not documented"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 17, in pandas.api.types.is_hashable\nFailed example:\n    isinstance(a, collections.abc.Hashable)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_hashable[1]>\", line 1, in <module>\n        isinstance(a, collections.abc.Hashable)\n    NameError: name 'collections' is not defined\n**********************************************************************\nLine 19, in pandas.api.types.is_hashable\nFailed example:\n    is_hashable(a)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_hashable[2]>\", line 1, in <module>\n        is_hashable(a)\n    NameError: name 'is_hashable' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'collections' (2 times)"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 17, in pandas.api.types.is_hashable\nFailed example:\n    isinstance(a, collections.abc.Hashable)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_hashable[1]>\", line 1, in <module>\n        isinstance(a, collections.abc.Hashable)\n    NameError: name 'collections' is not defined\n**********************************************************************\nLine 19, in pandas.api.types.is_hashable\nFailed example:\n    is_hashable(a)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_hashable[2]>\", line 1, in <module>\n        is_hashable(a)\n    NameError: name 'is_hashable' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Scalar introspection", "shared_code_with": ""}, "pandas.api.types.is_integer": {"type": "builtin_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Data types related functionality", "subsection": "Scalar introspection", "shared_code_with": "pandas.api.types.is_float"}, "pandas.api.types.is_interval": {"type": "builtin_function_or_method", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Data types related functionality", "subsection": "Scalar introspection", "shared_code_with": "pandas.api.types.is_integer"}, "pandas.api.types.is_number": {"type": "function", "docstring": "Check if the object is a number.\n\nReturns True when the object is a number, and False if is not.\n\nParameters\n----------\nobj : any type\n    The object to check if is a number.\n\nReturns\n-------\nis_number : bool\n    Whether `obj` is a number or not.\n\nSee Also\n--------\napi.types.is_integer: Checks a subgroup of numbers.\n\nExamples\n--------\n>>> pd.api.types.is_number(1)\nTrue\n>>> pd.api.types.is_number(7.15)\nTrue\n\nBooleans are valid because they are int subclass.\n\n>>> pd.api.types.is_number(False)\nTrue\n\n>>> pd.api.types.is_number(\"foo\")\nFalse\n>>> pd.api.types.is_number(\"5\")\nFalse", "deprecated": false, "file": "pandas/core/dtypes/inference.py", "file_line": 29, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/inference.py#L29", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Data types related functionality", "subsection": "Scalar introspection", "shared_code_with": ""}, "pandas.api.types.is_period": {"type": "function", "docstring": "Check whether an array-like is a periodical index.\n\n.. deprecated:: 0.24.0\n\nParameters\n----------\narr : array-like\n    The array-like to check.\n\nReturns\n-------\nboolean\n    Whether or not the array-like is a periodical index.\n\nExamples\n--------\n>>> is_period([1, 2, 3])\nFalse\n>>> is_period(pd.Index([1, 2, 3]))\nFalse\n>>> is_period(pd.PeriodIndex([\"2017-01-01\"], freq=\"D\"))\nTrue", "deprecated": true, "file": "pandas/core/dtypes/common.py", "file_line": 472, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/common.py#L472", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 18, in pandas.api.types.is_period\nFailed example:\n    is_period([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_period[0]>\", line 1, in <module>\n        is_period([1, 2, 3])\n    NameError: name 'is_period' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_period\nFailed example:\n    is_period(pd.Index([1, 2, 3]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_period[1]>\", line 1, in <module>\n        is_period(pd.Index([1, 2, 3]))\n    NameError: name 'is_period' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_period\nFailed example:\n    is_period(pd.PeriodIndex([\"2017-01-01\"], freq=\"D\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_period[2]>\", line 1, in <module>\n        is_period(pd.PeriodIndex([\"2017-01-01\"], freq=\"D\"))\n    NameError: name 'is_period' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_period' (3 times)"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 18, in pandas.api.types.is_period\nFailed example:\n    is_period([1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_period[0]>\", line 1, in <module>\n        is_period([1, 2, 3])\n    NameError: name 'is_period' is not defined\n**********************************************************************\nLine 20, in pandas.api.types.is_period\nFailed example:\n    is_period(pd.Index([1, 2, 3]))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_period[1]>\", line 1, in <module>\n        is_period(pd.Index([1, 2, 3]))\n    NameError: name 'is_period' is not defined\n**********************************************************************\nLine 22, in pandas.api.types.is_period\nFailed example:\n    is_period(pd.PeriodIndex([\"2017-01-01\"], freq=\"D\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_period[2]>\", line 1, in <module>\n        is_period(pd.PeriodIndex([\"2017-01-01\"], freq=\"D\"))\n    NameError: name 'is_period' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Scalar introspection", "shared_code_with": ""}, "pandas.api.types.is_re": {"type": "function", "docstring": "Check if the object is a regex pattern instance.\n\nParameters\n----------\nobj : The object to check\n\nReturns\n-------\nis_regex : bool\n    Whether `obj` is a regex pattern.\n\nExamples\n--------\n>>> is_re(re.compile(\".*\"))\nTrue\n>>> is_re(\"foo\")\nFalse", "deprecated": false, "file": "pandas/core/dtypes/inference.py", "file_line": 194, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/inference.py#L194", "errors": [["PR07", "Parameter \"obj\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 15, in pandas.api.types.is_re\nFailed example:\n    is_re(re.compile(\".*\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_re[0]>\", line 1, in <module>\n        is_re(re.compile(\".*\"))\n    NameError: name 'is_re' is not defined\n**********************************************************************\nLine 17, in pandas.api.types.is_re\nFailed example:\n    is_re(\"foo\")\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_re[1]>\", line 1, in <module>\n        is_re(\"foo\")\n    NameError: name 'is_re' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_re' (3 times)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 15, in pandas.api.types.is_re\nFailed example:\n    is_re(re.compile(\".*\"))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_re[0]>\", line 1, in <module>\n        is_re(re.compile(\".*\"))\n    NameError: name 'is_re' is not defined\n**********************************************************************\nLine 17, in pandas.api.types.is_re\nFailed example:\n    is_re(\"foo\")\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_re[1]>\", line 1, in <module>\n        is_re(\"foo\")\n    NameError: name 'is_re' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Scalar introspection", "shared_code_with": ""}, "pandas.api.types.is_re_compilable": {"type": "function", "docstring": "Check if the object can be compiled into a regex pattern instance.\n\nParameters\n----------\nobj : The object to check\n\nReturns\n-------\nis_regex_compilable : bool\n    Whether `obj` can be compiled as a regex pattern.\n\nExamples\n--------\n>>> is_re_compilable(\".*\")\nTrue\n>>> is_re_compilable(1)\nFalse", "deprecated": false, "file": "pandas/core/dtypes/inference.py", "file_line": 217, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/inference.py#L217", "errors": [["PR07", "Parameter \"obj\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 15, in pandas.api.types.is_re_compilable\nFailed example:\n    is_re_compilable(\".*\")\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_re_compilable[0]>\", line 1, in <module>\n        is_re_compilable(\".*\")\n    NameError: name 'is_re_compilable' is not defined\n**********************************************************************\nLine 17, in pandas.api.types.is_re_compilable\nFailed example:\n    is_re_compilable(1)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_re_compilable[1]>\", line 1, in <module>\n        is_re_compilable(1)\n    NameError: name 'is_re_compilable' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'is_re_compilable' (2 times)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 15, in pandas.api.types.is_re_compilable\nFailed example:\n    is_re_compilable(\".*\")\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_re_compilable[0]>\", line 1, in <module>\n        is_re_compilable(\".*\")\n    NameError: name 'is_re_compilable' is not defined\n**********************************************************************\nLine 17, in pandas.api.types.is_re_compilable\nFailed example:\n    is_re_compilable(1)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_re_compilable[1]>\", line 1, in <module>\n        is_re_compilable(1)\n    NameError: name 'is_re_compilable' is not defined\n", "in_api": true, "section": "Data types related functionality", "subsection": "Scalar introspection", "shared_code_with": ""}, "pandas.api.types.is_scalar": {"type": "builtin_function_or_method", "docstring": "Return True if given value is scalar.\n\nParameters\n----------\nval : object\n    This includes:\n\n    - numpy array scalar (e.g. np.int64)\n    - Python builtin numerics\n    - Python builtin byte arrays and strings\n    - None\n    - datetime.datetime\n    - datetime.timedelta\n    - Period\n    - decimal.Decimal\n    - Interval\n    - DateOffset\n    - Fraction\n    - Number\n\nReturns\n-------\nbool\n    Return True if given object is scalar, False otherwise\n\nExamples\n--------\n>>> dt = pd.datetime.datetime(2018, 10, 3)\n>>> pd.is_scalar(dt)\nTrue\n\n>>> pd.api.types.is_scalar([2, 3])\nFalse\n\n>>> pd.api.types.is_scalar({0: 1, 2: 3})\nFalse\n\n>>> pd.api.types.is_scalar((0, 2))\nFalse\n\npandas supports PEP 3141 numbers:\n\n>>> from fractions import Fraction\n>>> pd.api.types.is_scalar(Fraction(3, 5))\nTrue", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR02", "Unknown parameters {val}"], ["PR09", "Parameter \"val\" description should finish with \".\""], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 29, in pandas.api.types.is_scalar\nFailed example:\n    dt = pd.datetime.datetime(2018, 10, 3)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_scalar[0]>\", line 1, in <module>\n        dt = pd.datetime.datetime(2018, 10, 3)\n    AttributeError: type object 'datetime.datetime' has no attribute 'datetime'\n**********************************************************************\nLine 30, in pandas.api.types.is_scalar\nFailed example:\n    pd.is_scalar(dt)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_scalar[1]>\", line 1, in <module>\n        pd.is_scalar(dt)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/__init__.py\", line 214, in __getattr__\n        raise AttributeError(\"module 'pandas' has no attribute '{}'\".format(name))\n    AttributeError: module 'pandas' has no attribute 'is_scalar'\n"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 29, in pandas.api.types.is_scalar\nFailed example:\n    dt = pd.datetime.datetime(2018, 10, 3)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_scalar[0]>\", line 1, in <module>\n        dt = pd.datetime.datetime(2018, 10, 3)\n    AttributeError: type object 'datetime.datetime' has no attribute 'datetime'\n**********************************************************************\nLine 30, in pandas.api.types.is_scalar\nFailed example:\n    pd.is_scalar(dt)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.types.is_scalar[1]>\", line 1, in <module>\n        pd.is_scalar(dt)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/__init__.py\", line 214, in __getattr__\n        raise AttributeError(\"module 'pandas' has no attribute '{}'\".format(name))\n    AttributeError: module 'pandas' has no attribute 'is_scalar'\n", "in_api": true, "section": "Data types related functionality", "subsection": "Scalar introspection", "shared_code_with": "pandas.api.types.is_interval"}, "pandas.melt": {"type": "function", "docstring": "Unpivot a DataFrame from wide format to long format, optionally\nleaving identifier variables set.\n\nThis function is useful to massage a DataFrame into a format where one\nor more columns are identifier variables (`id_vars`), while all other\ncolumns, considered measured variables (`value_vars`), are \"unpivoted\" to\nthe row axis, leaving just two non-identifier columns, 'variable' and\n'value'.\n\nParameters\n----------\nframe : DataFrame\nid_vars : tuple, list, or ndarray, optional\n    Column(s) to use as identifier variables.\nvalue_vars : tuple, list, or ndarray, optional\n    Column(s) to unpivot. If not specified, uses all columns that\n    are not set as `id_vars`.\nvar_name : scalar\n    Name to use for the 'variable' column. If None it uses\n    ``frame.columns.name`` or 'variable'.\nvalue_name : scalar, default 'value'\n    Name to use for the 'value' column.\ncol_level : int or string, optional\n    If columns are a MultiIndex then use this level to melt.\n\nReturns\n-------\nDataFrame\n    Unpivoted DataFrame.\n\nSee Also\n--------\nDataFrame.melt\npivot_table\nDataFrame.pivot\nSeries.explode\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': {0: 'a', 1: 'b', 2: 'c'},\n...                    'B': {0: 1, 1: 3, 2: 5},\n...                    'C': {0: 2, 1: 4, 2: 6}})\n>>> df\n   A  B  C\n0  a  1  2\n1  b  3  4\n2  c  5  6\n\n>>> pd.melt(df, id_vars=['A'], value_vars=['B'])\n   A variable  value\n0  a        B      1\n1  b        B      3\n2  c        B      5\n\n>>> pd.melt(df, id_vars=['A'], value_vars=['B', 'C'])\n   A variable  value\n0  a        B      1\n1  b        B      3\n2  c        B      5\n3  a        C      2\n4  b        C      4\n5  c        C      6\n\nThe names of 'variable' and 'value' columns can be customized:\n\n>>> pd.melt(df, id_vars=['A'], value_vars=['B'],\n...         var_name='myVarname', value_name='myValname')\n   A myVarname  myValname\n0  a         B          1\n1  b         B          3\n2  c         B          5\n\nIf you have multi-index columns:\n\n>>> df.columns = [list('ABC'), list('DEF')]\n>>> df\n   A  B  C\n   D  E  F\n0  a  1  2\n1  b  3  4\n2  c  5  6\n\n>>> pd.melt(df, col_level=0, id_vars=['A'], value_vars=['B'])\n   A variable  value\n0  a        B      1\n1  b        B      3\n2  c        B      5\n\n>>> pd.melt(df, id_vars=[('A', 'D')], value_vars=[('B', 'E')])\n  (A, D) variable_0 variable_1  value\n0      a          B          E      1\n1      b          B          E      3\n2      c          B          E      5", "deprecated": false, "file": "pandas/core/reshape/melt.py", "file_line": 19, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/reshape/melt.py#L19", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"frame\" has no description"], ["PR06", "Parameter \"col_level\" type should use \"str\" instead of \"string\""], ["SA04", "Missing description for See Also \"DataFrame.melt\" reference"], ["SA04", "Missing description for See Also \"pivot_table\" reference"], ["SA04", "Missing description for See Also \"DataFrame.pivot\" reference"], ["SA04", "Missing description for See Also \"Series.explode\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Data manipulations", "shared_code_with": ""}, "pandas.pivot": {"type": "function", "docstring": "Return reshaped DataFrame organized by given index / column values.\n\nReshape data (produce a \"pivot\" table) based on column values. Uses\nunique values from specified `index` / `columns` to form axes of the\nresulting DataFrame. This function does not support data\naggregation, multiple values will result in a MultiIndex in the\ncolumns. See the :ref:`User Guide <reshaping>` for more on reshaping.\n\nParameters\n----------\ndata : DataFrame\nindex : string or object, optional\n    Column to use to make new frame's index. If None, uses\n    existing index.\ncolumns : string or object\n    Column to use to make new frame's columns.\nvalues : string, object or a list of the previous, optional\n    Column(s) to use for populating new frame's values. If not\n    specified, all remaining columns will be used and the result will\n    have hierarchically indexed columns.\n\n    .. versionchanged:: 0.23.0\n       Also accept list of column names.\n\nReturns\n-------\nDataFrame\n    Returns reshaped DataFrame.\n\nRaises\n------\nValueError:\n    When there are any `index`, `columns` combinations with multiple\n    values. `DataFrame.pivot_table` when you need to aggregate.\n\nSee Also\n--------\nDataFrame.pivot_table : Generalization of pivot that can handle\n    duplicate values for one index/column pair.\nDataFrame.unstack : Pivot based on the index values instead of a\n    column.\n\nNotes\n-----\nFor finer-tuned control, see hierarchical indexing documentation along\nwith the related stack/unstack methods.\n\nExamples\n--------\n>>> df = pd.DataFrame({'foo': ['one', 'one', 'one', 'two', 'two',\n...                            'two'],\n...                    'bar': ['A', 'B', 'C', 'A', 'B', 'C'],\n...                    'baz': [1, 2, 3, 4, 5, 6],\n...                    'zoo': ['x', 'y', 'z', 'q', 'w', 't']})\n>>> df\n    foo   bar  baz  zoo\n0   one   A    1    x\n1   one   B    2    y\n2   one   C    3    z\n3   two   A    4    q\n4   two   B    5    w\n5   two   C    6    t\n\n>>> df.pivot(index='foo', columns='bar', values='baz')\nbar  A   B   C\nfoo\none  1   2   3\ntwo  4   5   6\n\n>>> df.pivot(index='foo', columns='bar')['baz']\nbar  A   B   C\nfoo\none  1   2   3\ntwo  4   5   6\n\n>>> df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])\n      baz       zoo\nbar   A  B  C   A  B  C\nfoo\none   1  2  3   x  y  z\ntwo   4  5  6   q  w  t\n\nA ValueError is raised if there are any duplicates.\n\n>>> df = pd.DataFrame({\"foo\": ['one', 'one', 'two', 'two'],\n...                    \"bar\": ['A', 'A', 'B', 'C'],\n...                    \"baz\": [1, 2, 3, 4]})\n>>> df\n   foo bar  baz\n0  one   A    1\n1  one   A    2\n2  two   B    3\n3  two   C    4\n\nNotice that the first two rows are the same for our `index`\nand `columns` arguments.\n\n>>> df.pivot(index='foo', columns='bar', values='baz')\nTraceback (most recent call last):\n   ...\nValueError: Index contains duplicate entries, cannot reshape", "deprecated": false, "file": "pandas/core/reshape/pivot.py", "file_line": 407, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/reshape/pivot.py#L407", "errors": [["PR07", "Parameter \"data\" has no description"], ["PR06", "Parameter \"index\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"columns\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"values\" type should use \"str\" instead of \"string\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Data manipulations", "shared_code_with": ""}, "pandas.pivot_table": {"type": "function", "docstring": "Create a spreadsheet-style pivot table as a DataFrame. The levels in\nthe pivot table will be stored in MultiIndex objects (hierarchical\nindexes) on the index and columns of the result DataFrame.\n\nParameters\n----------\ndata : DataFrame\nvalues : column to aggregate, optional\nindex : column, Grouper, array, or list of the previous\n    If an array is passed, it must be the same length as the data. The\n    list can contain any of the other types (except list).\n    Keys to group by on the pivot table index.  If an array is passed,\n    it is being used as the same manner as column values.\ncolumns : column, Grouper, array, or list of the previous\n    If an array is passed, it must be the same length as the data. The\n    list can contain any of the other types (except list).\n    Keys to group by on the pivot table column.  If an array is passed,\n    it is being used as the same manner as column values.\naggfunc : function, list of functions, dict, default numpy.mean\n    If list of functions passed, the resulting pivot table will have\n    hierarchical columns whose top level are the function names\n    (inferred from the function objects themselves)\n    If dict is passed, the key is column to aggregate and value\n    is function or list of functions\nfill_value : scalar, default None\n    Value to replace missing values with\nmargins : boolean, default False\n    Add all row / columns (e.g. for subtotal / grand totals)\ndropna : boolean, default True\n    Do not include columns whose entries are all NaN\nmargins_name : string, default 'All'\n    Name of the row / column that will contain the totals\n    when margins is True.\nobserved : boolean, default False\n    This only applies if any of the groupers are Categoricals.\n    If True: only show observed values for categorical groupers.\n    If False: show all values for categorical groupers.\n\n    .. versionchanged:: 0.25.0\n\nReturns\n-------\nDataFrame\n\nSee Also\n--------\nDataFrame.pivot : Pivot without aggregation that can handle\n    non-numeric data.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\",\n...                          \"bar\", \"bar\", \"bar\", \"bar\"],\n...                    \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\",\n...                          \"one\", \"one\", \"two\", \"two\"],\n...                    \"C\": [\"small\", \"large\", \"large\", \"small\",\n...                          \"small\", \"large\", \"small\", \"small\",\n...                          \"large\"],\n...                    \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7],\n...                    \"E\": [2, 4, 5, 5, 6, 6, 8, 9, 9]})\n>>> df\n     A    B      C  D  E\n0  foo  one  small  1  2\n1  foo  one  large  2  4\n2  foo  one  large  2  5\n3  foo  two  small  3  5\n4  foo  two  small  3  6\n5  bar  one  large  4  6\n6  bar  one  small  5  8\n7  bar  two  small  6  9\n8  bar  two  large  7  9\n\nThis first example aggregates values by taking the sum.\n\n>>> table = pd.pivot_table(df, values='D', index=['A', 'B'],\n...                     columns=['C'], aggfunc=np.sum)\n>>> table\nC        large  small\nA   B\nbar one    4.0    5.0\n    two    7.0    6.0\nfoo one    4.0    1.0\n    two    NaN    6.0\n\nWe can also fill missing values using the `fill_value` parameter.\n\n>>> table = pd.pivot_table(df, values='D', index=['A', 'B'],\n...                     columns=['C'], aggfunc=np.sum, fill_value=0)\n>>> table\nC        large  small\nA   B\nbar one      4      5\n    two      7      6\nfoo one      4      1\n    two      0      6\n\nThe next example aggregates by taking the mean across multiple columns.\n\n>>> table = pd.pivot_table(df, values=['D', 'E'], index=['A', 'C'],\n...                     aggfunc={'D': np.mean,\n...                              'E': np.mean})\n>>> table\n                D         E\nA   C\nbar large  5.500000  7.500000\n    small  5.500000  8.500000\nfoo large  2.000000  4.500000\n    small  2.333333  4.333333\n\nWe can also calculate multiple types of aggregations for any given\nvalue column.\n\n>>> table = pd.pivot_table(df, values=['D', 'E'], index=['A', 'C'],\n...                     aggfunc={'D': np.mean,\n...                              'E': [min, max, np.mean]})\n>>> table\n                D    E\n            mean  max      mean  min\nA   C\nbar large  5.500000  9.0  7.500000  6.0\n    small  5.500000  9.0  8.500000  8.0\nfoo large  2.000000  5.0  4.500000  4.0\n    small  2.333333  6.0  4.333333  2.0", "deprecated": false, "file": "pandas/core/reshape/pivot.py", "file_line": 20, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/reshape/pivot.py#L20", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"data\" has no description"], ["PR07", "Parameter \"values\" has no description"], ["PR09", "Parameter \"aggfunc\" description should finish with \".\""], ["PR09", "Parameter \"fill_value\" description should finish with \".\""], ["PR06", "Parameter \"margins\" type should use \"bool\" instead of \"boolean\""], ["PR09", "Parameter \"margins\" description should finish with \".\""], ["PR06", "Parameter \"dropna\" type should use \"bool\" instead of \"boolean\""], ["PR09", "Parameter \"dropna\" description should finish with \".\""], ["PR06", "Parameter \"margins_name\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"observed\" type should use \"bool\" instead of \"boolean\""], ["RT03", "Return value has no description"], ["EX03", "flake8 error: E128 continuation line under-indented for visual indent (4 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Data manipulations", "shared_code_with": ""}, "pandas.crosstab": {"type": "function", "docstring": "Compute a simple cross tabulation of two (or more) factors. By default\ncomputes a frequency table of the factors unless an array of values and an\naggregation function are passed.\n\nParameters\n----------\nindex : array-like, Series, or list of arrays/Series\n    Values to group by in the rows.\ncolumns : array-like, Series, or list of arrays/Series\n    Values to group by in the columns.\nvalues : array-like, optional\n    Array of values to aggregate according to the factors.\n    Requires `aggfunc` be specified.\nrownames : sequence, default None\n    If passed, must match number of row arrays passed.\ncolnames : sequence, default None\n    If passed, must match number of column arrays passed.\naggfunc : function, optional\n    If specified, requires `values` be specified as well.\nmargins : bool, default False\n    Add row/column margins (subtotals).\nmargins_name : str, default 'All'\n    Name of the row/column that will contain the totals\n    when margins is True.\n\n    .. versionadded:: 0.21.0\n\ndropna : bool, default True\n    Do not include columns whose entries are all NaN.\nnormalize : bool, {'all', 'index', 'columns'}, or {0,1}, default False\n    Normalize by dividing all values by the sum of values.\n\n    - If passed 'all' or `True`, will normalize over all values.\n    - If passed 'index' will normalize over each row.\n    - If passed 'columns' will normalize over each column.\n    - If margins is `True`, will also normalize margin values.\n\nReturns\n-------\nDataFrame\n    Cross tabulation of the data.\n\nSee Also\n--------\nDataFrame.pivot : Reshape data based on column values.\npivot_table : Create a pivot table as a DataFrame.\n\nNotes\n-----\nAny Series passed will have their name attributes used unless row or column\nnames for the cross-tabulation are specified.\n\nAny input passed containing Categorical data will have **all** of its\ncategories included in the cross-tabulation, even if the actual data does\nnot contain any instances of a particular category.\n\nIn the event that there aren't overlapping indexes an empty DataFrame will\nbe returned.\n\nExamples\n--------\n>>> a = np.array([\"foo\", \"foo\", \"foo\", \"foo\", \"bar\", \"bar\",\n...               \"bar\", \"bar\", \"foo\", \"foo\", \"foo\"], dtype=object)\n>>> b = np.array([\"one\", \"one\", \"one\", \"two\", \"one\", \"one\",\n...               \"one\", \"two\", \"two\", \"two\", \"one\"], dtype=object)\n>>> c = np.array([\"dull\", \"dull\", \"shiny\", \"dull\", \"dull\", \"shiny\",\n...               \"shiny\", \"dull\", \"shiny\", \"shiny\", \"shiny\"],\n...              dtype=object)\n>>> pd.crosstab(a, [b, c], rownames=['a'], colnames=['b', 'c'])\nb   one        two\nc   dull shiny dull shiny\na\nbar    1     2    1     0\nfoo    2     2    1     2\n\nHere 'c' and 'f' are not represented in the data and will not be\nshown in the output because dropna is True by default. Set\ndropna=False to preserve categories with no data.\n\n>>> foo = pd.Categorical(['a', 'b'], categories=['a', 'b', 'c'])\n>>> bar = pd.Categorical(['d', 'e'], categories=['d', 'e', 'f'])\n>>> pd.crosstab(foo, bar)\ncol_0  d  e\nrow_0\na      1  0\nb      0  1\n>>> pd.crosstab(foo, bar, dropna=False)\ncol_0  d  e  f\nrow_0\na      1  0  0\nb      0  1  0\nc      0  0  0", "deprecated": false, "file": "pandas/core/reshape/pivot.py", "file_line": 431, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/reshape/pivot.py#L431", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Data manipulations", "shared_code_with": ""}, "pandas.cut": {"type": "function", "docstring": "Bin values into discrete intervals.\n\nUse `cut` when you need to segment and sort data values into bins. This\nfunction is also useful for going from a continuous variable to a\ncategorical variable. For example, `cut` could convert ages to groups of\nage ranges. Supports binning into an equal number of bins, or a\npre-specified array of bins.\n\nParameters\n----------\nx : array-like\n    The input array to be binned. Must be 1-dimensional.\nbins : int, sequence of scalars, or IntervalIndex\n    The criteria to bin by.\n\n    * int : Defines the number of equal-width bins in the range of `x`. The\n      range of `x` is extended by .1% on each side to include the minimum\n      and maximum values of `x`.\n    * sequence of scalars : Defines the bin edges allowing for non-uniform\n      width. No extension of the range of `x` is done.\n    * IntervalIndex : Defines the exact bins to be used. Note that\n      IntervalIndex for `bins` must be non-overlapping.\n\nright : bool, default True\n    Indicates whether `bins` includes the rightmost edge or not. If\n    ``right == True`` (the default), then the `bins` ``[1, 2, 3, 4]``\n    indicate (1,2], (2,3], (3,4]. This argument is ignored when\n    `bins` is an IntervalIndex.\nlabels : array or bool, optional\n    Specifies the labels for the returned bins. Must be the same length as\n    the resulting bins. If False, returns only integer indicators of the\n    bins. This affects the type of the output container (see below).\n    This argument is ignored when `bins` is an IntervalIndex.\nretbins : bool, default False\n    Whether to return the bins or not. Useful when bins is provided\n    as a scalar.\nprecision : int, default 3\n    The precision at which to store and display the bins labels.\ninclude_lowest : bool, default False\n    Whether the first interval should be left-inclusive or not.\nduplicates : {default 'raise', 'drop'}, optional\n    If bin edges are not unique, raise ValueError or drop non-uniques.\n\n    .. versionadded:: 0.23.0\n\nReturns\n-------\nout : Categorical, Series, or ndarray\n    An array-like object representing the respective bin for each value\n    of `x`. The type depends on the value of `labels`.\n\n    * True (default) : returns a Series for Series `x` or a\n      Categorical for all other inputs. The values stored within\n      are Interval dtype.\n\n    * sequence of scalars : returns a Series for Series `x` or a\n      Categorical for all other inputs. The values stored within\n      are whatever the type in the sequence is.\n\n    * False : returns an ndarray of integers.\n\nbins : numpy.ndarray or IntervalIndex.\n    The computed or specified bins. Only returned when `retbins=True`.\n    For scalar or sequence `bins`, this is an ndarray with the computed\n    bins. If set `duplicates=drop`, `bins` will drop non-unique bin. For\n    an IntervalIndex `bins`, this is equal to `bins`.\n\nSee Also\n--------\nqcut : Discretize variable into equal-sized buckets based on rank\n    or based on sample quantiles.\nCategorical : Array type for storing data that come from a\n    fixed set of values.\nSeries : One-dimensional array with axis labels (including time series).\nIntervalIndex : Immutable Index implementing an ordered, sliceable set.\n\nNotes\n-----\nAny NA values will be NA in the result. Out of bounds values will be NA in\nthe resulting Series or Categorical object.\n\nExamples\n--------\nDiscretize into three equal-sized bins.\n\n>>> pd.cut(np.array([1, 7, 5, 4, 6, 3]), 3)\n... # doctest: +ELLIPSIS\n[(0.994, 3.0], (5.0, 7.0], (3.0, 5.0], (3.0, 5.0], (5.0, 7.0], ...\nCategories (3, interval[float64]): [(0.994, 3.0] < (3.0, 5.0] ...\n\n>>> pd.cut(np.array([1, 7, 5, 4, 6, 3]), 3, retbins=True)\n... # doctest: +ELLIPSIS\n([(0.994, 3.0], (5.0, 7.0], (3.0, 5.0], (3.0, 5.0], (5.0, 7.0], ...\nCategories (3, interval[float64]): [(0.994, 3.0] < (3.0, 5.0] ...\narray([0.994, 3.   , 5.   , 7.   ]))\n\nDiscovers the same bins, but assign them specific labels. Notice that\nthe returned Categorical's categories are `labels` and is ordered.\n\n>>> pd.cut(np.array([1, 7, 5, 4, 6, 3]),\n...        3, labels=[\"bad\", \"medium\", \"good\"])\n[bad, good, medium, medium, good, bad]\nCategories (3, object): [bad < medium < good]\n\n``labels=False`` implies you just want the bins back.\n\n>>> pd.cut([0, 1, 1, 2], bins=4, labels=False)\narray([0, 1, 1, 3])\n\nPassing a Series as an input returns a Series with categorical dtype:\n\n>>> s = pd.Series(np.array([2, 4, 6, 8, 10]),\n...               index=['a', 'b', 'c', 'd', 'e'])\n>>> pd.cut(s, 3)\n... # doctest: +ELLIPSIS\na    (1.992, 4.667]\nb    (1.992, 4.667]\nc    (4.667, 7.333]\nd     (7.333, 10.0]\ne     (7.333, 10.0]\ndtype: category\nCategories (3, interval[float64]): [(1.992, 4.667] < (4.667, ...\n\nPassing a Series as an input returns a Series with mapping value.\nIt is used to map numerically to intervals based on bins.\n\n>>> s = pd.Series(np.array([2, 4, 6, 8, 10]),\n...               index=['a', 'b', 'c', 'd', 'e'])\n>>> pd.cut(s, [0, 2, 4, 6, 8, 10], labels=False, retbins=True, right=False)\n... # doctest: +ELLIPSIS\n(a    0.0\n b    1.0\n c    2.0\n d    3.0\n e    4.0\n dtype: float64, array([0, 2, 4, 6, 8]))\n\nUse `drop` optional when bins is not unique\n\n>>> pd.cut(s, [0, 2, 4, 6, 10, 10], labels=False, retbins=True,\n...        right=False, duplicates='drop')\n... # doctest: +ELLIPSIS\n(a    0.0\n b    1.0\n c    2.0\n d    3.0\n e    3.0\n dtype: float64, array([0, 2, 4, 6, 8]))\n\nPassing an IntervalIndex for `bins` results in those categories exactly.\nNotice that values not covered by the IntervalIndex are set to NaN. 0\nis to the left of the first bin (which is closed on the right), and 1.5\nfalls between two bins.\n\n>>> bins = pd.IntervalIndex.from_tuples([(0, 1), (2, 3), (4, 5)])\n>>> pd.cut([0, 0.5, 1.5, 2.5, 4.5], bins)\n[NaN, (0, 1], NaN, (2, 3], (4, 5]]\nCategories (3, interval[int64]): [(0, 1] < (2, 3] < (4, 5]]", "deprecated": false, "file": "pandas/core/reshape/tile.py", "file_line": 37, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/reshape/tile.py#L37", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 130, in pandas.cut\nFailed example:\n    pd.cut(s, [0, 2, 4, 6, 8, 10], labels=False, retbins=True, right=False)\n    # doctest: +ELLIPSIS\nExpected:\n    (a    0.0\n     b    1.0\n     c    2.0\n     d    3.0\n     e    4.0\n     dtype: float64, array([0, 2, 4, 6, 8]))\nGot:\n    (a    1.0\n    b    2.0\n    c    3.0\n    d    4.0\n    e    NaN\n    dtype: float64, array([ 0,  2,  4,  6,  8, 10]))\n**********************************************************************\nLine 141, in pandas.cut\nFailed example:\n    pd.cut(s, [0, 2, 4, 6, 10, 10], labels=False, retbins=True,\n           right=False, duplicates='drop')\n    # doctest: +ELLIPSIS\nExpected:\n    (a    0.0\n     b    1.0\n     c    2.0\n     d    3.0\n     e    3.0\n     dtype: float64, array([0, 2, 4, 6, 8]))\nGot:\n    (a    1.0\n    b    2.0\n    c    3.0\n    d    3.0\n    e    NaN\n    dtype: float64, array([ 0,  2,  4,  6, 10]))\n**********************************************************************\nLine 157, in pandas.cut\nFailed example:\n    pd.cut([0, 0.5, 1.5, 2.5, 4.5], bins)\nExpected:\n    [NaN, (0, 1], NaN, (2, 3], (4, 5]]\n    Categories (3, interval[int64]): [(0, 1] < (2, 3] < (4, 5]]\nGot:\n    [NaN, (0.0, 1.0], NaN, (2.0, 3.0], (4.0, 5.0]]\n    Categories (3, interval[int64]): [(0, 1] < (2, 3] < (4, 5]]\n"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 130, in pandas.cut\nFailed example:\n    pd.cut(s, [0, 2, 4, 6, 8, 10], labels=False, retbins=True, right=False)\n    # doctest: +ELLIPSIS\nExpected:\n    (a    0.0\n     b    1.0\n     c    2.0\n     d    3.0\n     e    4.0\n     dtype: float64, array([0, 2, 4, 6, 8]))\nGot:\n    (a    1.0\n    b    2.0\n    c    3.0\n    d    4.0\n    e    NaN\n    dtype: float64, array([ 0,  2,  4,  6,  8, 10]))\n**********************************************************************\nLine 141, in pandas.cut\nFailed example:\n    pd.cut(s, [0, 2, 4, 6, 10, 10], labels=False, retbins=True,\n           right=False, duplicates='drop')\n    # doctest: +ELLIPSIS\nExpected:\n    (a    0.0\n     b    1.0\n     c    2.0\n     d    3.0\n     e    3.0\n     dtype: float64, array([0, 2, 4, 6, 8]))\nGot:\n    (a    1.0\n    b    2.0\n    c    3.0\n    d    3.0\n    e    NaN\n    dtype: float64, array([ 0,  2,  4,  6, 10]))\n**********************************************************************\nLine 157, in pandas.cut\nFailed example:\n    pd.cut([0, 0.5, 1.5, 2.5, 4.5], bins)\nExpected:\n    [NaN, (0, 1], NaN, (2, 3], (4, 5]]\n    Categories (3, interval[int64]): [(0, 1] < (2, 3] < (4, 5]]\nGot:\n    [NaN, (0.0, 1.0], NaN, (2.0, 3.0], (4.0, 5.0]]\n    Categories (3, interval[int64]): [(0, 1] < (2, 3] < (4, 5]]\n", "in_api": true, "section": "", "subsection": "Data manipulations", "shared_code_with": ""}, "pandas.qcut": {"type": "function", "docstring": "Quantile-based discretization function. Discretize variable into\nequal-sized buckets based on rank or based on sample quantiles. For example\n1000 values for 10 quantiles would produce a Categorical object indicating\nquantile membership for each data point.\n\nParameters\n----------\nx : 1d ndarray or Series\nq : integer or array of quantiles\n    Number of quantiles. 10 for deciles, 4 for quartiles, etc. Alternately\n    array of quantiles, e.g. [0, .25, .5, .75, 1.] for quartiles\nlabels : array or boolean, default None\n    Used as labels for the resulting bins. Must be of the same length as\n    the resulting bins. If False, return only integer indicators of the\n    bins.\nretbins : bool, optional\n    Whether to return the (bins, labels) or not. Can be useful if bins\n    is given as a scalar.\nprecision : int, optional\n    The precision at which to store and display the bins labels\nduplicates : {default 'raise', 'drop'}, optional\n    If bin edges are not unique, raise ValueError or drop non-uniques.\n\n    .. versionadded:: 0.20.0\n\nReturns\n-------\nout : Categorical or Series or array of integers if labels is False\n    The return type (Categorical or Series) depends on the input: a Series\n    of type category if input is a Series else Categorical. Bins are\n    represented as categories when categorical data is returned.\nbins : ndarray of floats\n    Returned only if `retbins` is True.\n\nNotes\n-----\nOut of bounds values will be NA in the resulting Categorical object\n\nExamples\n--------\n>>> pd.qcut(range(5), 4)\n... # doctest: +ELLIPSIS\n[(-0.001, 1.0], (-0.001, 1.0], (1.0, 2.0], (2.0, 3.0], (3.0, 4.0]]\nCategories (4, interval[float64]): [(-0.001, 1.0] < (1.0, 2.0] ...\n\n>>> pd.qcut(range(5), 3, labels=[\"good\", \"medium\", \"bad\"])\n... # doctest: +SKIP\n[good, good, medium, bad, bad]\nCategories (3, object): [good < medium < bad]\n\n>>> pd.qcut(range(5), 4, labels=False)\narray([0, 0, 1, 2, 3])", "deprecated": false, "file": "pandas/core/reshape/tile.py", "file_line": 277, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/reshape/tile.py#L277", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"x\" has no description"], ["PR06", "Parameter \"q\" type should use \"int\" instead of \"integer\""], ["PR09", "Parameter \"q\" description should finish with \".\""], ["PR06", "Parameter \"labels\" type should use \"bool\" instead of \"boolean\""], ["PR09", "Parameter \"precision\" description should finish with \".\""]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Data manipulations", "shared_code_with": ""}, "pandas.merge": {"type": "function", "docstring": "Merge DataFrame or named Series objects with a database-style join.\n\nThe join is done on columns or indexes. If joining columns on\ncolumns, the DataFrame indexes *will be ignored*. Otherwise if joining indexes\non indexes or indexes on a column or columns, the index will be passed on.\n\nParameters\n----------\nleft : DataFrame\nright : DataFrame or named Series\n    Object to merge with.\nhow : {'left', 'right', 'outer', 'inner'}, default 'inner'\n    Type of merge to be performed.\n\n    * left: use only keys from left frame, similar to a SQL left outer join;\n      preserve key order.\n    * right: use only keys from right frame, similar to a SQL right outer join;\n      preserve key order.\n    * outer: use union of keys from both frames, similar to a SQL full outer\n      join; sort keys lexicographically.\n    * inner: use intersection of keys from both frames, similar to a SQL inner\n      join; preserve the order of the left keys.\non : label or list\n    Column or index level names to join on. These must be found in both\n    DataFrames. If `on` is None and not merging on indexes then this defaults\n    to the intersection of the columns in both DataFrames.\nleft_on : label or list, or array-like\n    Column or index level names to join on in the left DataFrame. Can also\n    be an array or list of arrays of the length of the left DataFrame.\n    These arrays are treated as if they are columns.\nright_on : label or list, or array-like\n    Column or index level names to join on in the right DataFrame. Can also\n    be an array or list of arrays of the length of the right DataFrame.\n    These arrays are treated as if they are columns.\nleft_index : bool, default False\n    Use the index from the left DataFrame as the join key(s). If it is a\n    MultiIndex, the number of keys in the other DataFrame (either the index\n    or a number of columns) must match the number of levels.\nright_index : bool, default False\n    Use the index from the right DataFrame as the join key. Same caveats as\n    left_index.\nsort : bool, default False\n    Sort the join keys lexicographically in the result DataFrame. If False,\n    the order of the join keys depends on the join type (how keyword).\nsuffixes : tuple of (str, str), default ('_x', '_y')\n    Suffix to apply to overlapping column names in the left and right\n    side, respectively. To raise an exception on overlapping columns use\n    (False, False).\ncopy : bool, default True\n    If False, avoid copy if possible.\nindicator : bool or str, default False\n    If True, adds a column to output DataFrame called \"_merge\" with\n    information on the source of each row.\n    If string, column with information on source of each row will be added to\n    output DataFrame, and column will be named value of string.\n    Information column is Categorical-type and takes on a value of \"left_only\"\n    for observations whose merge key only appears in 'left' DataFrame,\n    \"right_only\" for observations whose merge key only appears in 'right'\n    DataFrame, and \"both\" if the observation's merge key is found in both.\n\nvalidate : str, optional\n    If specified, checks if merge is of specified type.\n\n    * \"one_to_one\" or \"1:1\": check if merge keys are unique in both\n      left and right datasets.\n    * \"one_to_many\" or \"1:m\": check if merge keys are unique in left\n      dataset.\n    * \"many_to_one\" or \"m:1\": check if merge keys are unique in right\n      dataset.\n    * \"many_to_many\" or \"m:m\": allowed, but does not result in checks.\n\n    .. versionadded:: 0.21.0\n\nReturns\n-------\nDataFrame\n    A DataFrame of the two merged objects.\n\nSee Also\n--------\nmerge_ordered : Merge with optional filling/interpolation.\nmerge_asof : Merge on nearest keys.\nDataFrame.join : Similar method using indices.\n\nNotes\n-----\nSupport for specifying index levels as the `on`, `left_on`, and\n`right_on` parameters was added in version 0.23.0\nSupport for merging named Series objects was added in version 0.24.0\n\nExamples\n--------\n\n>>> df1 = pd.DataFrame({'lkey': ['foo', 'bar', 'baz', 'foo'],\n...                     'value': [1, 2, 3, 5]})\n>>> df2 = pd.DataFrame({'rkey': ['foo', 'bar', 'baz', 'foo'],\n...                     'value': [5, 6, 7, 8]})\n>>> df1\n    lkey value\n0   foo      1\n1   bar      2\n2   baz      3\n3   foo      5\n>>> df2\n    rkey value\n0   foo      5\n1   bar      6\n2   baz      7\n3   foo      8\n\nMerge df1 and df2 on the lkey and rkey columns. The value columns have\nthe default suffixes, _x and _y, appended.\n\n>>> df1.merge(df2, left_on='lkey', right_on='rkey')\n  lkey  value_x rkey  value_y\n0  foo        1  foo        5\n1  foo        1  foo        8\n2  foo        5  foo        5\n3  foo        5  foo        8\n4  bar        2  bar        6\n5  baz        3  baz        7\n\nMerge DataFrames df1 and df2 with specified left and right suffixes\nappended to any overlapping columns.\n\n>>> df1.merge(df2, left_on='lkey', right_on='rkey',\n...           suffixes=('_left', '_right'))\n  lkey  value_left rkey  value_right\n0  foo           1  foo            5\n1  foo           1  foo            8\n2  foo           5  foo            5\n3  foo           5  foo            8\n4  bar           2  bar            6\n5  baz           3  baz            7\n\nMerge DataFrames df1 and df2, but raise an exception if the DataFrames have\nany overlapping columns.\n\n>>> df1.merge(df2, left_on='lkey', right_on='rkey', suffixes=(False, False))\nTraceback (most recent call last):\n...\nValueError: columns overlap but no suffix specified:\n    Index(['value'], dtype='object')", "deprecated": false, "file": "pandas/core/reshape/merge.py", "file_line": 52, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/reshape/merge.py#L52", "errors": [["PR07", "Parameter \"left\" has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Data manipulations", "shared_code_with": ""}, "pandas.merge_ordered": {"type": "function", "docstring": "Perform merge with optional filling/interpolation designed for ordered\ndata like time series data. Optionally perform group-wise merge (see\nexamples)\n\nParameters\n----------\nleft : DataFrame\nright : DataFrame\non : label or list\n    Field names to join on. Must be found in both DataFrames.\nleft_on : label or list, or array-like\n    Field names to join on in left DataFrame. Can be a vector or list of\n    vectors of the length of the DataFrame to use a particular vector as\n    the join key instead of columns\nright_on : label or list, or array-like\n    Field names to join on in right DataFrame or vector/list of vectors per\n    left_on docs\nleft_by : column name or list of column names\n    Group left DataFrame by group columns and merge piece by piece with\n    right DataFrame\nright_by : column name or list of column names\n    Group right DataFrame by group columns and merge piece by piece with\n    left DataFrame\nfill_method : {'ffill', None}, default None\n    Interpolation method for data\nsuffixes : Sequence, default is (\"_x\", \"_y\")\n    A length-2 sequence where each element is optionally a string\n    indicating the suffix to add to overlapping column names in\n    `left` and `right` respectively. Pass a value of `None` instead\n    of a string to indicate that the column name from `left` or\n    `right` should be left as-is, with no suffix. At least one of the\n    values must not be None.\n\n    .. versionchanged:: 0.25.0\nhow : {'left', 'right', 'outer', 'inner'}, default 'outer'\n    * left: use only keys from left frame (SQL: left outer join)\n    * right: use only keys from right frame (SQL: right outer join)\n    * outer: use union of keys from both frames (SQL: full outer join)\n    * inner: use intersection of keys from both frames (SQL: inner join)\n\nReturns\n-------\nmerged : DataFrame\n    The output type will the be same as 'left', if it is a subclass\n    of DataFrame.\n\nSee Also\n--------\nmerge\nmerge_asof\n\nExamples\n--------\n>>> A                      >>> B\n      key  lvalue group        key  rvalue\n0   a       1     a        0     b       1\n1   c       2     a        1     c       2\n2   e       3     a        2     d       3\n3   a       1     b\n4   c       2     b\n5   e       3     b\n\n>>> merge_ordered(A, B, fill_method='ffill', left_by='group')\n  group key  lvalue  rvalue\n0     a   a       1     NaN\n1     a   b       1     1.0\n2     a   c       2     2.0\n3     a   d       2     3.0\n4     a   e       3     3.0\n5     b   a       1     NaN\n6     b   b       1     1.0\n7     b   c       2     2.0\n8     b   d       2     3.0\n9     b   e       3     3.0", "deprecated": false, "file": "pandas/core/reshape/merge.py", "file_line": 167, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/reshape/merge.py#L167", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"left\" has no description"], ["PR07", "Parameter \"right\" has no description"], ["PR09", "Parameter \"left_on\" description should finish with \".\""], ["PR09", "Parameter \"right_on\" description should finish with \".\""], ["PR09", "Parameter \"left_by\" description should finish with \".\""], ["PR09", "Parameter \"right_by\" description should finish with \".\""], ["PR09", "Parameter \"fill_method\" description should finish with \".\""], ["PR08", "Parameter \"how\" description should start with a capital letter"], ["PR09", "Parameter \"how\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["SA04", "Missing description for See Also \"merge\" reference"], ["SA04", "Missing description for See Also \"merge_asof\" reference"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 55, in pandas.merge_ordered\nFailed example:\n    A                      >>> B\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.merge_ordered[0]>\", line 1\n        A                      >>> B\n                                 ^\n    SyntaxError: invalid syntax\n**********************************************************************\nLine 64, in pandas.merge_ordered\nFailed example:\n    merge_ordered(A, B, fill_method='ffill', left_by='group')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.merge_ordered[1]>\", line 1, in <module>\n        merge_ordered(A, B, fill_method='ffill', left_by='group')\n    NameError: name 'merge_ordered' is not defined\n"], ["EX03", "flake8 error: E221 multiple spaces before operator"], ["EX03", "flake8 error: E225 missing whitespace around operator"], ["EX03", "flake8 error: E999 SyntaxError: invalid syntax"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 55, in pandas.merge_ordered\nFailed example:\n    A                      >>> B\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.merge_ordered[0]>\", line 1\n        A                      >>> B\n                                 ^\n    SyntaxError: invalid syntax\n**********************************************************************\nLine 64, in pandas.merge_ordered\nFailed example:\n    merge_ordered(A, B, fill_method='ffill', left_by='group')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.merge_ordered[1]>\", line 1, in <module>\n        merge_ordered(A, B, fill_method='ffill', left_by='group')\n    NameError: name 'merge_ordered' is not defined\n", "in_api": true, "section": "", "subsection": "Data manipulations", "shared_code_with": ""}, "pandas.merge_asof": {"type": "function", "docstring": "Perform an asof merge. This is similar to a left-join except that we\nmatch on nearest key rather than equal keys.\n\nBoth DataFrames must be sorted by the key.\n\nFor each row in the left DataFrame:\n\n  - A \"backward\" search selects the last row in the right DataFrame whose\n    'on' key is less than or equal to the left's key.\n\n  - A \"forward\" search selects the first row in the right DataFrame whose\n    'on' key is greater than or equal to the left's key.\n\n  - A \"nearest\" search selects the row in the right DataFrame whose 'on'\n    key is closest in absolute distance to the left's key.\n\nThe default is \"backward\" and is compatible in versions below 0.20.0.\nThe direction parameter was added in version 0.20.0 and introduces\n\"forward\" and \"nearest\".\n\nOptionally match on equivalent keys with 'by' before searching with 'on'.\n\nParameters\n----------\nleft : DataFrame\nright : DataFrame\non : label\n    Field name to join on. Must be found in both DataFrames.\n    The data MUST be ordered. Furthermore this must be a numeric column,\n    such as datetimelike, integer, or float. On or left_on/right_on\n    must be given.\nleft_on : label\n    Field name to join on in left DataFrame.\nright_on : label\n    Field name to join on in right DataFrame.\nleft_index : boolean\n    Use the index of the left DataFrame as the join key.\nright_index : boolean\n    Use the index of the right DataFrame as the join key.\nby : column name or list of column names\n    Match on these columns before performing merge operation.\nleft_by : column name\n    Field names to match on in the left DataFrame.\nright_by : column name\n    Field names to match on in the right DataFrame.\nsuffixes : 2-length sequence (tuple, list, ...)\n    Suffix to apply to overlapping column names in the left and right\n    side, respectively.\ntolerance : integer or Timedelta, optional, default None\n    Select asof tolerance within this range; must be compatible\n    with the merge index.\nallow_exact_matches : boolean, default True\n\n    - If True, allow matching with the same 'on' value\n      (i.e. less-than-or-equal-to / greater-than-or-equal-to)\n    - If False, don't match the same 'on' value\n      (i.e., strictly less-than / strictly greater-than)\n\ndirection : 'backward' (default), 'forward', or 'nearest'\n    Whether to search for prior, subsequent, or closest matches.\n\n    .. versionadded:: 0.20.0\n\nReturns\n-------\nmerged : DataFrame\n\nSee Also\n--------\nmerge\nmerge_ordered\n\nExamples\n--------\n>>> left = pd.DataFrame({'a': [1, 5, 10], 'left_val': ['a', 'b', 'c']})\n>>> left\n    a left_val\n0   1        a\n1   5        b\n2  10        c\n\n>>> right = pd.DataFrame({'a': [1, 2, 3, 6, 7],\n...                       'right_val': [1, 2, 3, 6, 7]})\n>>> right\n   a  right_val\n0  1          1\n1  2          2\n2  3          3\n3  6          6\n4  7          7\n\n>>> pd.merge_asof(left, right, on='a')\n    a left_val  right_val\n0   1        a          1\n1   5        b          3\n2  10        c          7\n\n>>> pd.merge_asof(left, right, on='a', allow_exact_matches=False)\n    a left_val  right_val\n0   1        a        NaN\n1   5        b        3.0\n2  10        c        7.0\n\n>>> pd.merge_asof(left, right, on='a', direction='forward')\n    a left_val  right_val\n0   1        a        1.0\n1   5        b        6.0\n2  10        c        NaN\n\n>>> pd.merge_asof(left, right, on='a', direction='nearest')\n    a left_val  right_val\n0   1        a          1\n1   5        b          6\n2  10        c          7\n\nWe can use indexed DataFrames as well.\n\n>>> left = pd.DataFrame({'left_val': ['a', 'b', 'c']}, index=[1, 5, 10])\n>>> left\n   left_val\n1         a\n5         b\n10        c\n\n>>> right = pd.DataFrame({'right_val': [1, 2, 3, 6, 7]},\n...                      index=[1, 2, 3, 6, 7])\n>>> right\n   right_val\n1          1\n2          2\n3          3\n6          6\n7          7\n\n>>> pd.merge_asof(left, right, left_index=True, right_index=True)\n   left_val  right_val\n1         a          1\n5         b          3\n10        c          7\n\nHere is a real-world times-series example\n\n>>> quotes\n                     time ticker     bid     ask\n0 2016-05-25 13:30:00.023   GOOG  720.50  720.93\n1 2016-05-25 13:30:00.023   MSFT   51.95   51.96\n2 2016-05-25 13:30:00.030   MSFT   51.97   51.98\n3 2016-05-25 13:30:00.041   MSFT   51.99   52.00\n4 2016-05-25 13:30:00.048   GOOG  720.50  720.93\n5 2016-05-25 13:30:00.049   AAPL   97.99   98.01\n6 2016-05-25 13:30:00.072   GOOG  720.50  720.88\n7 2016-05-25 13:30:00.075   MSFT   52.01   52.03\n\n>>> trades\n                     time ticker   price  quantity\n0 2016-05-25 13:30:00.023   MSFT   51.95        75\n1 2016-05-25 13:30:00.038   MSFT   51.95       155\n2 2016-05-25 13:30:00.048   GOOG  720.77       100\n3 2016-05-25 13:30:00.048   GOOG  720.92       100\n4 2016-05-25 13:30:00.048   AAPL   98.00       100\n\nBy default we are taking the asof of the quotes\n\n>>> pd.merge_asof(trades, quotes,\n...                       on='time',\n...                       by='ticker')\n                     time ticker   price  quantity     bid     ask\n0 2016-05-25 13:30:00.023   MSFT   51.95        75   51.95   51.96\n1 2016-05-25 13:30:00.038   MSFT   51.95       155   51.97   51.98\n2 2016-05-25 13:30:00.048   GOOG  720.77       100  720.50  720.93\n3 2016-05-25 13:30:00.048   GOOG  720.92       100  720.50  720.93\n4 2016-05-25 13:30:00.048   AAPL   98.00       100     NaN     NaN\n\nWe only asof within 2ms between the quote time and the trade time\n\n>>> pd.merge_asof(trades, quotes,\n...                       on='time',\n...                       by='ticker',\n...                       tolerance=pd.Timedelta('2ms'))\n                     time ticker   price  quantity     bid     ask\n0 2016-05-25 13:30:00.023   MSFT   51.95        75   51.95   51.96\n1 2016-05-25 13:30:00.038   MSFT   51.95       155     NaN     NaN\n2 2016-05-25 13:30:00.048   GOOG  720.77       100  720.50  720.93\n3 2016-05-25 13:30:00.048   GOOG  720.92       100  720.50  720.93\n4 2016-05-25 13:30:00.048   AAPL   98.00       100     NaN     NaN\n\nWe only asof within 10ms between the quote time and the trade time\nand we exclude exact matches on time. However *prior* data will\npropagate forward\n\n>>> pd.merge_asof(trades, quotes,\n...                       on='time',\n...                       by='ticker',\n...                       tolerance=pd.Timedelta('10ms'),\n...                       allow_exact_matches=False)\n                     time ticker   price  quantity     bid     ask\n0 2016-05-25 13:30:00.023   MSFT   51.95        75     NaN     NaN\n1 2016-05-25 13:30:00.038   MSFT   51.95       155   51.97   51.98\n2 2016-05-25 13:30:00.048   GOOG  720.77       100     NaN     NaN\n3 2016-05-25 13:30:00.048   GOOG  720.92       100     NaN     NaN\n4 2016-05-25 13:30:00.048   AAPL   98.00       100     NaN     NaN", "deprecated": false, "file": "pandas/core/reshape/merge.py", "file_line": 290, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/reshape/merge.py#L290", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"left\" has no description"], ["PR07", "Parameter \"right\" has no description"], ["PR06", "Parameter \"left_index\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"right_index\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"tolerance\" type should use \"int\" instead of \"integer\""], ["PR06", "Parameter \"allow_exact_matches\" type should use \"bool\" instead of \"boolean\""], ["PR08", "Parameter \"allow_exact_matches\" description should start with a capital letter"], ["PR09", "Parameter \"allow_exact_matches\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"merge\" reference"], ["SA04", "Missing description for See Also \"merge_ordered\" reference"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 144, in pandas.merge_asof\nFailed example:\n    quotes\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.merge_asof[13]>\", line 1, in <module>\n        quotes\n    NameError: name 'quotes' is not defined\n**********************************************************************\nLine 155, in pandas.merge_asof\nFailed example:\n    trades\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.merge_asof[14]>\", line 1, in <module>\n        trades\n    NameError: name 'trades' is not defined\n**********************************************************************\nLine 165, in pandas.merge_asof\nFailed example:\n    pd.merge_asof(trades, quotes,\n                          on='time',\n                          by='ticker')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.merge_asof[15]>\", line 1, in <module>\n        pd.merge_asof(trades, quotes,\n    NameError: name 'trades' is not defined\n**********************************************************************\nLine 177, in pandas.merge_asof\nFailed example:\n    pd.merge_asof(trades, quotes,\n                          on='time',\n                          by='ticker',\n                          tolerance=pd.Timedelta('2ms'))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.merge_asof[16]>\", line 1, in <module>\n        pd.merge_asof(trades, quotes,\n    NameError: name 'trades' is not defined\n**********************************************************************\nLine 192, in pandas.merge_asof\nFailed example:\n    pd.merge_asof(trades, quotes,\n                          on='time',\n                          by='ticker',\n                          tolerance=pd.Timedelta('10ms'),\n                          allow_exact_matches=False)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.merge_asof[17]>\", line 1, in <module>\n        pd.merge_asof(trades, quotes,\n    NameError: name 'trades' is not defined\n"], ["EX03", "flake8 error: E127 continuation line over-indented for visual indent (9 times)"], ["EX03", "flake8 error: F821 undefined name 'quotes' (8 times)"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 144, in pandas.merge_asof\nFailed example:\n    quotes\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.merge_asof[13]>\", line 1, in <module>\n        quotes\n    NameError: name 'quotes' is not defined\n**********************************************************************\nLine 155, in pandas.merge_asof\nFailed example:\n    trades\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.merge_asof[14]>\", line 1, in <module>\n        trades\n    NameError: name 'trades' is not defined\n**********************************************************************\nLine 165, in pandas.merge_asof\nFailed example:\n    pd.merge_asof(trades, quotes,\n                          on='time',\n                          by='ticker')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.merge_asof[15]>\", line 1, in <module>\n        pd.merge_asof(trades, quotes,\n    NameError: name 'trades' is not defined\n**********************************************************************\nLine 177, in pandas.merge_asof\nFailed example:\n    pd.merge_asof(trades, quotes,\n                          on='time',\n                          by='ticker',\n                          tolerance=pd.Timedelta('2ms'))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.merge_asof[16]>\", line 1, in <module>\n        pd.merge_asof(trades, quotes,\n    NameError: name 'trades' is not defined\n**********************************************************************\nLine 192, in pandas.merge_asof\nFailed example:\n    pd.merge_asof(trades, quotes,\n                          on='time',\n                          by='ticker',\n                          tolerance=pd.Timedelta('10ms'),\n                          allow_exact_matches=False)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.merge_asof[17]>\", line 1, in <module>\n        pd.merge_asof(trades, quotes,\n    NameError: name 'trades' is not defined\n", "in_api": true, "section": "", "subsection": "Data manipulations", "shared_code_with": ""}, "pandas.concat": {"type": "function", "docstring": "Concatenate pandas objects along a particular axis with optional set logic\nalong the other axes.\n\nCan also add a layer of hierarchical indexing on the concatenation axis,\nwhich may be useful if the labels are the same (or overlapping) on\nthe passed axis number.\n\nParameters\n----------\nobjs : a sequence or mapping of Series or DataFrame objects\n    If a dict is passed, the sorted keys will be used as the `keys`\n    argument, unless it is passed, in which case the values will be\n    selected (see below). Any None objects will be dropped silently unless\n    they are all None in which case a ValueError will be raised.\naxis : {0/'index', 1/'columns'}, default 0\n    The axis to concatenate along.\njoin : {'inner', 'outer'}, default 'outer'\n    How to handle indexes on other axis (or axes).\njoin_axes : list of Index objects\n    .. deprecated:: 0.25.0\n\n    Specific indexes to use for the other n - 1 axes instead of performing\n    inner/outer set logic. Use .reindex() before or after concatenation\n    as a replacement.\nignore_index : bool, default False\n    If True, do not use the index values along the concatenation axis. The\n    resulting axis will be labeled 0, ..., n - 1. This is useful if you are\n    concatenating objects where the concatenation axis does not have\n    meaningful indexing information. Note the index values on the other\n    axes are still respected in the join.\nkeys : sequence, default None\n    If multiple levels passed, should contain tuples. Construct\n    hierarchical index using the passed keys as the outermost level.\nlevels : list of sequences, default None\n    Specific levels (unique values) to use for constructing a\n    MultiIndex. Otherwise they will be inferred from the keys.\nnames : list, default None\n    Names for the levels in the resulting hierarchical index.\nverify_integrity : bool, default False\n    Check whether the new concatenated axis contains duplicates. This can\n    be very expensive relative to the actual data concatenation.\nsort : bool, default None\n    Sort non-concatenation axis if it is not already aligned when `join`\n    is 'outer'. The current default of sorting is deprecated and will\n    change to not-sorting in a future version of pandas.\n\n    Explicitly pass ``sort=True`` to silence the warning and sort.\n    Explicitly pass ``sort=False`` to silence the warning and not sort.\n\n    This has no effect when ``join='inner'``, which already preserves\n    the order of the non-concatenation axis.\n\n    .. versionadded:: 0.23.0\n\ncopy : bool, default True\n    If False, do not copy data unnecessarily.\n\nReturns\n-------\nobject, type of objs\n    When concatenating all ``Series`` along the index (axis=0), a\n    ``Series`` is returned. When ``objs`` contains at least one\n    ``DataFrame``, a ``DataFrame`` is returned. When concatenating along\n    the columns (axis=1), a ``DataFrame`` is returned.\n\nSee Also\n--------\nSeries.append : Concatenate Series.\nDataFrame.append : Concatenate DataFrames.\nDataFrame.join : Join DataFrames using indexes.\nDataFrame.merge : Merge DataFrames by indexes or columns.\n\nNotes\n-----\nThe keys, levels, and names arguments are all optional.\n\nA walkthrough of how this method fits in with other tools for combining\npandas objects can be found `here\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html>`__.\n\nExamples\n--------\nCombine two ``Series``.\n\n>>> s1 = pd.Series(['a', 'b'])\n>>> s2 = pd.Series(['c', 'd'])\n>>> pd.concat([s1, s2])\n0    a\n1    b\n0    c\n1    d\ndtype: object\n\nClear the existing index and reset it in the result\nby setting the ``ignore_index`` option to ``True``.\n\n>>> pd.concat([s1, s2], ignore_index=True)\n0    a\n1    b\n2    c\n3    d\ndtype: object\n\nAdd a hierarchical index at the outermost level of\nthe data with the ``keys`` option.\n\n>>> pd.concat([s1, s2], keys=['s1', 's2'])\ns1  0    a\n    1    b\ns2  0    c\n    1    d\ndtype: object\n\nLabel the index keys you create with the ``names`` option.\n\n>>> pd.concat([s1, s2], keys=['s1', 's2'],\n...           names=['Series name', 'Row ID'])\nSeries name  Row ID\ns1           0         a\n             1         b\ns2           0         c\n             1         d\ndtype: object\n\nCombine two ``DataFrame`` objects with identical columns.\n\n>>> df1 = pd.DataFrame([['a', 1], ['b', 2]],\n...                    columns=['letter', 'number'])\n>>> df1\n  letter  number\n0      a       1\n1      b       2\n>>> df2 = pd.DataFrame([['c', 3], ['d', 4]],\n...                    columns=['letter', 'number'])\n>>> df2\n  letter  number\n0      c       3\n1      d       4\n>>> pd.concat([df1, df2])\n  letter  number\n0      a       1\n1      b       2\n0      c       3\n1      d       4\n\nCombine ``DataFrame`` objects with overlapping columns\nand return everything. Columns outside the intersection will\nbe filled with ``NaN`` values.\n\n>>> df3 = pd.DataFrame([['c', 3, 'cat'], ['d', 4, 'dog']],\n...                    columns=['letter', 'number', 'animal'])\n>>> df3\n  letter  number animal\n0      c       3    cat\n1      d       4    dog\n>>> pd.concat([df1, df3], sort=False)\n  letter  number animal\n0      a       1    NaN\n1      b       2    NaN\n0      c       3    cat\n1      d       4    dog\n\nCombine ``DataFrame`` objects with overlapping columns\nand return only those that are shared by passing ``inner`` to\nthe ``join`` keyword argument.\n\n>>> pd.concat([df1, df3], join=\"inner\")\n  letter  number\n0      a       1\n1      b       2\n0      c       3\n1      d       4\n\nCombine ``DataFrame`` objects horizontally along the x axis by\npassing in ``axis=1``.\n\n>>> df4 = pd.DataFrame([['bird', 'polly'], ['monkey', 'george']],\n...                    columns=['animal', 'name'])\n>>> pd.concat([df1, df4], axis=1)\n  letter  number  animal    name\n0      a       1    bird   polly\n1      b       2  monkey  george\n\nPrevent the result from including duplicate index values with the\n``verify_integrity`` option.\n\n>>> df5 = pd.DataFrame([1], index=['a'])\n>>> df5\n   0\na  1\n>>> df6 = pd.DataFrame([2], index=['a'])\n>>> df6\n   0\na  2\n>>> pd.concat([df5, df6], verify_integrity=True)\nTraceback (most recent call last):\n    ...\nValueError: Indexes have overlapping values: ['a']", "deprecated": false, "file": "pandas/core/reshape/concat.py", "file_line": 31, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/reshape/concat.py#L31", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"join_axes\" has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Data manipulations", "shared_code_with": ""}, "pandas.get_dummies": {"type": "function", "docstring": "Convert categorical variable into dummy/indicator variables.\n\nParameters\n----------\ndata : array-like, Series, or DataFrame\n    Data of which to get dummy indicators.\nprefix : str, list of str, or dict of str, default None\n    String to append DataFrame column names.\n    Pass a list with length equal to the number of columns\n    when calling get_dummies on a DataFrame. Alternatively, `prefix`\n    can be a dictionary mapping column names to prefixes.\nprefix_sep : str, default '_'\n    If appending prefix, separator/delimiter to use. Or pass a\n    list or dictionary as with `prefix`.\ndummy_na : bool, default False\n    Add a column to indicate NaNs, if False NaNs are ignored.\ncolumns : list-like, default None\n    Column names in the DataFrame to be encoded.\n    If `columns` is None then all the columns with\n    `object` or `category` dtype will be converted.\nsparse : bool, default False\n    Whether the dummy-encoded columns should be backed by\n    a :class:`SparseArray` (True) or a regular NumPy array (False).\ndrop_first : bool, default False\n    Whether to get k-1 dummies out of k categorical levels by removing the\n    first level.\ndtype : dtype, default np.uint8\n    Data type for new columns. Only a single dtype is allowed.\n\n    .. versionadded:: 0.23.0\n\nReturns\n-------\nDataFrame\n    Dummy-coded data.\n\nSee Also\n--------\nSeries.str.get_dummies : Convert Series to dummy codes.\n\nExamples\n--------\n>>> s = pd.Series(list('abca'))\n\n>>> pd.get_dummies(s)\n   a  b  c\n0  1  0  0\n1  0  1  0\n2  0  0  1\n3  1  0  0\n\n>>> s1 = ['a', 'b', np.nan]\n\n>>> pd.get_dummies(s1)\n   a  b\n0  1  0\n1  0  1\n2  0  0\n\n>>> pd.get_dummies(s1, dummy_na=True)\n   a  b  NaN\n0  1  0    0\n1  0  1    0\n2  0  0    1\n\n>>> df = pd.DataFrame({'A': ['a', 'b', 'a'], 'B': ['b', 'a', 'c'],\n...                    'C': [1, 2, 3]})\n\n>>> pd.get_dummies(df, prefix=['col1', 'col2'])\n   C  col1_a  col1_b  col2_a  col2_b  col2_c\n0  1       1       0       0       1       0\n1  2       0       1       1       0       0\n2  3       1       0       0       0       1\n\n>>> pd.get_dummies(pd.Series(list('abcaa')))\n   a  b  c\n0  1  0  0\n1  0  1  0\n2  0  0  1\n3  1  0  0\n4  1  0  0\n\n>>> pd.get_dummies(pd.Series(list('abcaa')), drop_first=True)\n   b  c\n0  0  0\n1  1  0\n2  0  1\n3  0  0\n4  0  0\n\n>>> pd.get_dummies(pd.Series(list('abc')), dtype=float)\n     a    b    c\n0  1.0  0.0  0.0\n1  0.0  1.0  0.0\n2  0.0  0.0  1.0", "deprecated": false, "file": "pandas/core/reshape/reshape.py", "file_line": 750, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/reshape/reshape.py#L750", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Data manipulations", "shared_code_with": ""}, "pandas.factorize": {"type": "function", "docstring": "Encode the object as an enumerated type or categorical variable.\n\nThis method is useful for obtaining a numeric representation of an\narray when all that matters is identifying distinct values. `factorize`\nis available as both a top-level function :func:`pandas.factorize`,\nand as a method :meth:`Series.factorize` and :meth:`Index.factorize`.\n\nParameters\n----------\nvalues : sequence\n    A 1-D sequence. Sequences that aren't pandas objects are\n    coerced to ndarrays before factorization.\nsort : bool, default False\n    Sort `uniques` and shuffle `labels` to maintain the\n    relationship.\norder : None\n    .. deprecated:: 0.23.0\n\n       This parameter has no effect and is deprecated.\n\nna_sentinel : int, default -1\n    Value to mark \"not found\".\nsize_hint : int, optional\n    Hint to the hashtable sizer.\n\nReturns\n-------\nlabels : ndarray\n    An integer ndarray that's an indexer into `uniques`.\n    ``uniques.take(labels)`` will have the same values as `values`.\nuniques : ndarray, Index, or Categorical\n    The unique valid values. When `values` is Categorical, `uniques`\n    is a Categorical. When `values` is some other pandas object, an\n    `Index` is returned. Otherwise, a 1-D ndarray is returned.\n\n    .. note ::\n\n       Even if there's a missing value in `values`, `uniques` will\n       *not* contain an entry for it.\n\nSee Also\n--------\ncut : Discretize continuous-valued array.\nunique : Find the unique value in an array.\n\nExamples\n--------\nThese examples all show factorize as a top-level method like\n``pd.factorize(values)``. The results are identical for methods like\n:meth:`Series.factorize`.\n\n>>> labels, uniques = pd.factorize(['b', 'b', 'a', 'c', 'b'])\n>>> labels\narray([0, 0, 1, 2, 0])\n>>> uniques\narray(['b', 'a', 'c'], dtype=object)\n\nWith ``sort=True``, the `uniques` will be sorted, and `labels` will be\nshuffled so that the relationship is the maintained.\n\n>>> labels, uniques = pd.factorize(['b', 'b', 'a', 'c', 'b'], sort=True)\n>>> labels\narray([1, 1, 0, 2, 1])\n>>> uniques\narray(['a', 'b', 'c'], dtype=object)\n\nMissing values are indicated in `labels` with `na_sentinel`\n(``-1`` by default). Note that missing values are never\nincluded in `uniques`.\n\n>>> labels, uniques = pd.factorize(['b', None, 'a', 'c', 'b'])\n>>> labels\narray([ 0, -1,  1,  2,  0])\n>>> uniques\narray(['b', 'a', 'c'], dtype=object)\n\nThus far, we've only factorized lists (which are internally coerced to\nNumPy arrays). When factorizing pandas objects, the type of `uniques`\nwill differ. For Categoricals, a `Categorical` is returned.\n\n>>> cat = pd.Categorical(['a', 'a', 'c'], categories=['a', 'b', 'c'])\n>>> labels, uniques = pd.factorize(cat)\n>>> labels\narray([0, 0, 1])\n>>> uniques\n[a, c]\nCategories (3, object): [a, b, c]\n\nNotice that ``'b'`` is in ``uniques.categories``, despite not being\npresent in ``cat.values``.\n\nFor all other pandas objects, an Index of the appropriate type is\nreturned.\n\n>>> cat = pd.Series(['a', 'a', 'c'])\n>>> labels, uniques = pd.factorize(cat)\n>>> labels\narray([0, 0, 1])\n>>> uniques\nIndex(['a', 'c'], dtype='object')", "deprecated": false, "file": "pandas/util/_decorators.py", "file_line": 607, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/_decorators.py#L607", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {values, size_hint, na_sentinel, sort, order}"], ["PR07", "Parameter \"order\" has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Data manipulations", "shared_code_with": ""}, "pandas.unique": {"type": "function", "docstring": "Hash table-based unique. Uniques are returned in order\nof appearance. This does NOT sort.\n\nSignificantly faster than numpy.unique. Includes NA values.\n\nParameters\n----------\nvalues : 1d array-like\n\nReturns\n-------\nnumpy.ndarray or ExtensionArray\n\n    The return can be:\n\n    * Index : when the input is an Index\n    * Categorical : when the input is a Categorical dtype\n    * ndarray : when the input is a Series/ndarray\n\n    Return numpy.ndarray or ExtensionArray.\n\nSee Also\n--------\nIndex.unique\nSeries.unique\n\nExamples\n--------\n>>> pd.unique(pd.Series([2, 1, 3, 3]))\narray([2, 1, 3])\n\n>>> pd.unique(pd.Series([2] + [1] * 5))\narray([2, 1])\n\n>>> pd.unique(pd.Series([pd.Timestamp('20160101'),\n...                     pd.Timestamp('20160101')]))\narray(['2016-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\n>>> pd.unique(pd.Series([pd.Timestamp('20160101', tz='US/Eastern'),\n...                      pd.Timestamp('20160101', tz='US/Eastern')]))\narray([Timestamp('2016-01-01 00:00:00-0500', tz='US/Eastern')],\n      dtype=object)\n\n>>> pd.unique(pd.Index([pd.Timestamp('20160101', tz='US/Eastern'),\n...                     pd.Timestamp('20160101', tz='US/Eastern')]))\nDatetimeIndex(['2016-01-01 00:00:00-05:00'],\n...           dtype='datetime64[ns, US/Eastern]', freq=None)\n\n>>> pd.unique(list('baabc'))\narray(['b', 'a', 'c'], dtype=object)\n\nAn unordered Categorical will return categories in the\norder of appearance.\n\n>>> pd.unique(pd.Series(pd.Categorical(list('baabc'))))\n[b, a, c]\nCategories (3, object): [b, a, c]\n\n>>> pd.unique(pd.Series(pd.Categorical(list('baabc'),\n...                                    categories=list('abc'))))\n[b, a, c]\nCategories (3, object): [b, a, c]\n\nAn ordered Categorical preserves the category ordering.\n\n>>> pd.unique(pd.Series(pd.Categorical(list('baabc'),\n...                                    categories=list('abc'),\n...                                    ordered=True)))\n[b, a, c]\nCategories (3, object): [a < b < c]\n\nAn array of tuples\n\n>>> pd.unique([('a', 'b'), ('b', 'a'), ('a', 'c'), ('b', 'a')])\narray([('a', 'b'), ('b', 'a'), ('a', 'c')], dtype=object)", "deprecated": false, "file": "pandas/core/algorithms.py", "file_line": 313, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/algorithms.py#L313", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"values\" has no description"], ["SA04", "Missing description for See Also \"Index.unique\" reference"], ["SA04", "Missing description for See Also \"Series.unique\" reference"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 40, in pandas.unique\nFailed example:\n    pd.unique(pd.Series([pd.Timestamp('20160101', tz='US/Eastern'),\n                         pd.Timestamp('20160101', tz='US/Eastern')]))\nExpected:\n    array([Timestamp('2016-01-01 00:00:00-0500', tz='US/Eastern')],\n          dtype=object)\nGot:\n    <DatetimeArray>\n    ['2016-01-01 00:00:00-05:00']\n    Length: 1, dtype: datetime64[ns, US/Eastern]\n**********************************************************************\nLine 45, in pandas.unique\nFailed example:\n    pd.unique(pd.Index([pd.Timestamp('20160101', tz='US/Eastern'),\n                        pd.Timestamp('20160101', tz='US/Eastern')]))\nExpected:\n    DatetimeIndex(['2016-01-01 00:00:00-05:00'],\n    ...           dtype='datetime64[ns, US/Eastern]', freq=None)\nGot:\n    DatetimeIndex(['2016-01-01 00:00:00-05:00'], dtype='datetime64[ns, US/Eastern]', freq=None)\n"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 40, in pandas.unique\nFailed example:\n    pd.unique(pd.Series([pd.Timestamp('20160101', tz='US/Eastern'),\n                         pd.Timestamp('20160101', tz='US/Eastern')]))\nExpected:\n    array([Timestamp('2016-01-01 00:00:00-0500', tz='US/Eastern')],\n          dtype=object)\nGot:\n    <DatetimeArray>\n    ['2016-01-01 00:00:00-05:00']\n    Length: 1, dtype: datetime64[ns, US/Eastern]\n**********************************************************************\nLine 45, in pandas.unique\nFailed example:\n    pd.unique(pd.Index([pd.Timestamp('20160101', tz='US/Eastern'),\n                        pd.Timestamp('20160101', tz='US/Eastern')]))\nExpected:\n    DatetimeIndex(['2016-01-01 00:00:00-05:00'],\n    ...           dtype='datetime64[ns, US/Eastern]', freq=None)\nGot:\n    DatetimeIndex(['2016-01-01 00:00:00-05:00'], dtype='datetime64[ns, US/Eastern]', freq=None)\n", "in_api": true, "section": "", "subsection": "Data manipulations", "shared_code_with": ""}, "pandas.wide_to_long": {"type": "function", "docstring": "Wide panel to long format. Less flexible but more user-friendly than melt.\n\nWith stubnames ['A', 'B'], this function expects to find one or more\ngroup of columns with format\nA-suffix1, A-suffix2,..., B-suffix1, B-suffix2,...\nYou specify what you want to call this suffix in the resulting long format\nwith `j` (for example `j='year'`)\n\nEach row of these wide variables are assumed to be uniquely identified by\n`i` (can be a single column name or a list of column names)\n\nAll remaining variables in the data frame are left intact.\n\nParameters\n----------\ndf : DataFrame\n    The wide-format DataFrame\nstubnames : str or list-like\n    The stub name(s). The wide format variables are assumed to\n    start with the stub names.\ni : str or list-like\n    Column(s) to use as id variable(s)\nj : str\n    The name of the sub-observation variable. What you wish to name your\n    suffix in the long format.\nsep : str, default \"\"\n    A character indicating the separation of the variable names\n    in the wide format, to be stripped from the names in the long format.\n    For example, if your column names are A-suffix1, A-suffix2, you\n    can strip the hyphen by specifying `sep='-'`\n\n    .. versionadded:: 0.20.0\n\nsuffix : str, default '\\\\d+'\n    A regular expression capturing the wanted suffixes. '\\\\d+' captures\n    numeric suffixes. Suffixes with no numbers could be specified with the\n    negated character class '\\\\D+'. You can also further disambiguate\n    suffixes, for example, if your wide variables are of the form\n    A-one, B-two,.., and you have an unrelated column A-rating, you can\n    ignore the last one by specifying `suffix='(!?one|two)'`\n\n    .. versionadded:: 0.20.0\n\n    .. versionchanged:: 0.23.0\n        When all suffixes are numeric, they are cast to int64/float64.\n\nReturns\n-------\nDataFrame\n    A DataFrame that contains each stub name as a variable, with new index\n    (i, j).\n\nNotes\n-----\nAll extra variables are left untouched. This simply uses\n`pandas.melt` under the hood, but is hard-coded to \"do the right thing\"\nin a typical case.\n\nExamples\n--------\n>>> np.random.seed(123)\n>>> df = pd.DataFrame({\"A1970\" : {0 : \"a\", 1 : \"b\", 2 : \"c\"},\n...                    \"A1980\" : {0 : \"d\", 1 : \"e\", 2 : \"f\"},\n...                    \"B1970\" : {0 : 2.5, 1 : 1.2, 2 : .7},\n...                    \"B1980\" : {0 : 3.2, 1 : 1.3, 2 : .1},\n...                    \"X\"     : dict(zip(range(3), np.random.randn(3)))\n...                   })\n>>> df[\"id\"] = df.index\n>>> df\n  A1970 A1980  B1970  B1980         X  id\n0     a     d    2.5    3.2 -1.085631   0\n1     b     e    1.2    1.3  0.997345   1\n2     c     f    0.7    0.1  0.282978   2\n>>> pd.wide_to_long(df, [\"A\", \"B\"], i=\"id\", j=\"year\")\n... # doctest: +NORMALIZE_WHITESPACE\n                X  A    B\nid year\n0  1970 -1.085631  a  2.5\n1  1970  0.997345  b  1.2\n2  1970  0.282978  c  0.7\n0  1980 -1.085631  d  3.2\n1  1980  0.997345  e  1.3\n2  1980  0.282978  f  0.1\n\nWith multiple id columns\n\n>>> df = pd.DataFrame({\n...     'famid': [1, 1, 1, 2, 2, 2, 3, 3, 3],\n...     'birth': [1, 2, 3, 1, 2, 3, 1, 2, 3],\n...     'ht1': [2.8, 2.9, 2.2, 2, 1.8, 1.9, 2.2, 2.3, 2.1],\n...     'ht2': [3.4, 3.8, 2.9, 3.2, 2.8, 2.4, 3.3, 3.4, 2.9]\n... })\n>>> df\n   famid  birth  ht1  ht2\n0      1      1  2.8  3.4\n1      1      2  2.9  3.8\n2      1      3  2.2  2.9\n3      2      1  2.0  3.2\n4      2      2  1.8  2.8\n5      2      3  1.9  2.4\n6      3      1  2.2  3.3\n7      3      2  2.3  3.4\n8      3      3  2.1  2.9\n>>> l = pd.wide_to_long(df, stubnames='ht', i=['famid', 'birth'], j='age')\n>>> l\n... # doctest: +NORMALIZE_WHITESPACE\n                  ht\nfamid birth age\n1     1     1    2.8\n            2    3.4\n      2     1    2.9\n            2    3.8\n      3     1    2.2\n            2    2.9\n2     1     1    2.0\n            2    3.2\n      2     1    1.8\n            2    2.8\n      3     1    1.9\n            2    2.4\n3     1     1    2.2\n            2    3.3\n      2     1    2.3\n            2    3.4\n      3     1    2.1\n            2    2.9\n\nGoing from long back to wide just takes some creative use of `unstack`\n\n>>> w = l.unstack()\n>>> w.columns = w.columns.map('{0[0]}{0[1]}'.format)\n>>> w.reset_index()\n   famid  birth  ht1  ht2\n0      1      1  2.8  3.4\n1      1      2  2.9  3.8\n2      1      3  2.2  2.9\n3      2      1  2.0  3.2\n4      2      2  1.8  2.8\n5      2      3  1.9  2.4\n6      3      1  2.2  3.3\n7      3      2  2.3  3.4\n8      3      3  2.1  2.9\n\nLess wieldy column names are also handled\n\n>>> np.random.seed(0)\n>>> df = pd.DataFrame({'A(weekly)-2010': np.random.rand(3),\n...                    'A(weekly)-2011': np.random.rand(3),\n...                    'B(weekly)-2010': np.random.rand(3),\n...                    'B(weekly)-2011': np.random.rand(3),\n...                    'X' : np.random.randint(3, size=3)})\n>>> df['id'] = df.index\n>>> df # doctest: +NORMALIZE_WHITESPACE, +ELLIPSIS\n   A(weekly)-2010  A(weekly)-2011  B(weekly)-2010  B(weekly)-2011  X  id\n0        0.548814        0.544883        0.437587        0.383442  0   0\n1        0.715189        0.423655        0.891773        0.791725  1   1\n2        0.602763        0.645894        0.963663        0.528895  1   2\n\n>>> pd.wide_to_long(df, ['A(weekly)', 'B(weekly)'], i='id',\n...                 j='year', sep='-')\n... # doctest: +NORMALIZE_WHITESPACE\n         X  A(weekly)  B(weekly)\nid year\n0  2010  0   0.548814   0.437587\n1  2010  1   0.715189   0.891773\n2  2010  1   0.602763   0.963663\n0  2011  0   0.544883   0.383442\n1  2011  1   0.423655   0.791725\n2  2011  1   0.645894   0.528895\n\nIf we have many columns, we could also use a regex to find our\nstubnames and pass that list on to wide_to_long\n\n>>> stubnames = sorted(\n...     set([match[0] for match in df.columns.str.findall(\n...         r'[A-B]\\(.*\\)').values if match != [] ])\n... )\n>>> list(stubnames)\n['A(weekly)', 'B(weekly)']\n\nAll of the above examples have integers as suffixes. It is possible to\nhave non-integers as suffixes.\n\n>>> df = pd.DataFrame({\n...     'famid': [1, 1, 1, 2, 2, 2, 3, 3, 3],\n...     'birth': [1, 2, 3, 1, 2, 3, 1, 2, 3],\n...     'ht_one': [2.8, 2.9, 2.2, 2, 1.8, 1.9, 2.2, 2.3, 2.1],\n...     'ht_two': [3.4, 3.8, 2.9, 3.2, 2.8, 2.4, 3.3, 3.4, 2.9]\n... })\n>>> df\n   famid  birth  ht_one  ht_two\n0      1      1     2.8     3.4\n1      1      2     2.9     3.8\n2      1      3     2.2     2.9\n3      2      1     2.0     3.2\n4      2      2     1.8     2.8\n5      2      3     1.9     2.4\n6      3      1     2.2     3.3\n7      3      2     2.3     3.4\n8      3      3     2.1     2.9\n\n>>> l = pd.wide_to_long(df, stubnames='ht', i=['famid', 'birth'], j='age',\n...                     sep='_', suffix='\\w+')\n>>> l\n... # doctest: +NORMALIZE_WHITESPACE\n                  ht\nfamid birth age\n1     1     one  2.8\n            two  3.4\n      2     one  2.9\n            two  3.8\n      3     one  2.2\n            two  2.9\n2     1     one  2.0\n            two  3.2\n      2     one  1.8\n            two  2.8\n      3     one  1.9\n            two  2.4\n3     1     one  2.2\n            two  3.3\n      2     one  2.3\n            two  3.4\n      3     one  2.1\n            two  2.9", "deprecated": false, "file": "pandas/core/reshape/melt.py", "file_line": 191, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/reshape/melt.py#L191", "errors": [["PR09", "Parameter \"df\" description should finish with \".\""], ["PR09", "Parameter \"i\" description should finish with \".\""], ["PR09", "Parameter \"sep\" description should finish with \".\""], ["PR09", "Parameter \"suffix\" description should finish with \".\""], ["EX03", "flake8 error: C403 Unnecessary list comprehension - rewrite as a set comprehension."], ["EX03", "flake8 error: E124 closing bracket does not match visual indentation"], ["EX03", "flake8 error: E202 whitespace before ']'"], ["EX03", "flake8 error: E261 at least two spaces before inline comment"], ["EX03", "flake8 error: E741 ambiguous variable name 'l' (2 times)"], ["EX03", "flake8 error: W605 invalid escape sequence '\\w'"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Data manipulations", "shared_code_with": ""}, "pandas.isna": {"type": "function", "docstring": "Detect missing values for an array-like object.\n\nThis function takes a scalar or array-like object and indicates\nwhether values are missing (``NaN`` in numeric arrays, ``None`` or ``NaN``\nin object arrays, ``NaT`` in datetimelike).\n\nParameters\n----------\nobj : scalar or array-like\n    Object to check for null or missing values.\n\nReturns\n-------\nbool or array-like of bool\n    For scalar input, returns a scalar boolean.\n    For array input, returns an array of boolean indicating whether each\n    corresponding element is missing.\n\nSee Also\n--------\nnotna : Boolean inverse of pandas.isna.\nSeries.isna : Detect missing values in a Series.\nDataFrame.isna : Detect missing values in a DataFrame.\nIndex.isna : Detect missing values in an Index.\n\nExamples\n--------\nScalar arguments (including strings) result in a scalar boolean.\n\n>>> pd.isna('dog')\nFalse\n\n>>> pd.isna(np.nan)\nTrue\n\nndarrays result in an ndarray of booleans.\n\n>>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n>>> array\narray([[ 1., nan,  3.],\n       [ 4.,  5., nan]])\n>>> pd.isna(array)\narray([[False,  True, False],\n       [False, False,  True]])\n\nFor indexes, an ndarray of booleans is returned.\n\n>>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n...                           \"2017-07-08\"])\n>>> index\nDatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n              dtype='datetime64[ns]', freq=None)\n>>> pd.isna(index)\narray([False, False,  True, False])\n\nFor Series and DataFrame, the same type is returned, containing booleans.\n\n>>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n>>> df\n     0     1    2\n0  ant   bee  cat\n1  dog  None  fly\n>>> pd.isna(df)\n       0      1      2\n0  False  False  False\n1  False   True  False\n\n>>> pd.isna(df[1])\n0    False\n1     True\nName: 1, dtype: bool", "deprecated": false, "file": "pandas/core/dtypes/missing.py", "file_line": 50, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/missing.py#L50", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Top-level missing data", "shared_code_with": ""}, "pandas.isnull": {"type": "function", "docstring": "Detect missing values for an array-like object.\n\nThis function takes a scalar or array-like object and indicates\nwhether values are missing (``NaN`` in numeric arrays, ``None`` or ``NaN``\nin object arrays, ``NaT`` in datetimelike).\n\nParameters\n----------\nobj : scalar or array-like\n    Object to check for null or missing values.\n\nReturns\n-------\nbool or array-like of bool\n    For scalar input, returns a scalar boolean.\n    For array input, returns an array of boolean indicating whether each\n    corresponding element is missing.\n\nSee Also\n--------\nnotna : Boolean inverse of pandas.isna.\nSeries.isna : Detect missing values in a Series.\nDataFrame.isna : Detect missing values in a DataFrame.\nIndex.isna : Detect missing values in an Index.\n\nExamples\n--------\nScalar arguments (including strings) result in a scalar boolean.\n\n>>> pd.isna('dog')\nFalse\n\n>>> pd.isna(np.nan)\nTrue\n\nndarrays result in an ndarray of booleans.\n\n>>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n>>> array\narray([[ 1., nan,  3.],\n       [ 4.,  5., nan]])\n>>> pd.isna(array)\narray([[False,  True, False],\n       [False, False,  True]])\n\nFor indexes, an ndarray of booleans is returned.\n\n>>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n...                           \"2017-07-08\"])\n>>> index\nDatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n              dtype='datetime64[ns]', freq=None)\n>>> pd.isna(index)\narray([False, False,  True, False])\n\nFor Series and DataFrame, the same type is returned, containing booleans.\n\n>>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n>>> df\n     0     1    2\n0  ant   bee  cat\n1  dog  None  fly\n>>> pd.isna(df)\n       0      1      2\n0  False  False  False\n1  False   True  False\n\n>>> pd.isna(df[1])\n0    False\n1     True\nName: 1, dtype: bool", "deprecated": false, "file": "pandas/core/dtypes/missing.py", "file_line": 50, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/missing.py#L50", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Top-level missing data", "shared_code_with": "pandas.isna"}, "pandas.notna": {"type": "function", "docstring": "Detect non-missing values for an array-like object.\n\nThis function takes a scalar or array-like object and indicates\nwhether values are valid (not missing, which is ``NaN`` in numeric\narrays, ``None`` or ``NaN`` in object arrays, ``NaT`` in datetimelike).\n\nParameters\n----------\nobj : array-like or object value\n    Object to check for *not* null or *non*-missing values.\n\nReturns\n-------\nbool or array-like of bool\n    For scalar input, returns a scalar boolean.\n    For array input, returns an array of boolean indicating whether each\n    corresponding element is valid.\n\nSee Also\n--------\nisna : Boolean inverse of pandas.notna.\nSeries.notna : Detect valid values in a Series.\nDataFrame.notna : Detect valid values in a DataFrame.\nIndex.notna : Detect valid values in an Index.\n\nExamples\n--------\nScalar arguments (including strings) result in a scalar boolean.\n\n>>> pd.notna('dog')\nTrue\n\n>>> pd.notna(np.nan)\nFalse\n\nndarrays result in an ndarray of booleans.\n\n>>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n>>> array\narray([[ 1., nan,  3.],\n       [ 4.,  5., nan]])\n>>> pd.notna(array)\narray([[ True, False,  True],\n       [ True,  True, False]])\n\nFor indexes, an ndarray of booleans is returned.\n\n>>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n...                          \"2017-07-08\"])\n>>> index\nDatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n              dtype='datetime64[ns]', freq=None)\n>>> pd.notna(index)\narray([ True,  True, False,  True])\n\nFor Series and DataFrame, the same type is returned, containing booleans.\n\n>>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n>>> df\n     0     1    2\n0  ant   bee  cat\n1  dog  None  fly\n>>> pd.notna(df)\n      0      1     2\n0  True   True  True\n1  True  False  True\n\n>>> pd.notna(df[1])\n0     True\n1    False\nName: 1, dtype: bool", "deprecated": false, "file": "pandas/core/dtypes/missing.py", "file_line": 289, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/missing.py#L289", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Top-level missing data", "shared_code_with": ""}, "pandas.notnull": {"type": "function", "docstring": "Detect non-missing values for an array-like object.\n\nThis function takes a scalar or array-like object and indicates\nwhether values are valid (not missing, which is ``NaN`` in numeric\narrays, ``None`` or ``NaN`` in object arrays, ``NaT`` in datetimelike).\n\nParameters\n----------\nobj : array-like or object value\n    Object to check for *not* null or *non*-missing values.\n\nReturns\n-------\nbool or array-like of bool\n    For scalar input, returns a scalar boolean.\n    For array input, returns an array of boolean indicating whether each\n    corresponding element is valid.\n\nSee Also\n--------\nisna : Boolean inverse of pandas.notna.\nSeries.notna : Detect valid values in a Series.\nDataFrame.notna : Detect valid values in a DataFrame.\nIndex.notna : Detect valid values in an Index.\n\nExamples\n--------\nScalar arguments (including strings) result in a scalar boolean.\n\n>>> pd.notna('dog')\nTrue\n\n>>> pd.notna(np.nan)\nFalse\n\nndarrays result in an ndarray of booleans.\n\n>>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n>>> array\narray([[ 1., nan,  3.],\n       [ 4.,  5., nan]])\n>>> pd.notna(array)\narray([[ True, False,  True],\n       [ True,  True, False]])\n\nFor indexes, an ndarray of booleans is returned.\n\n>>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n...                          \"2017-07-08\"])\n>>> index\nDatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n              dtype='datetime64[ns]', freq=None)\n>>> pd.notna(index)\narray([ True,  True, False,  True])\n\nFor Series and DataFrame, the same type is returned, containing booleans.\n\n>>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n>>> df\n     0     1    2\n0  ant   bee  cat\n1  dog  None  fly\n>>> pd.notna(df)\n      0      1     2\n0  True   True  True\n1  True  False  True\n\n>>> pd.notna(df[1])\n0     True\n1    False\nName: 1, dtype: bool", "deprecated": false, "file": "pandas/core/dtypes/missing.py", "file_line": 289, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/missing.py#L289", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Top-level missing data", "shared_code_with": "pandas.notna"}, "pandas.to_numeric": {"type": "function", "docstring": "Convert argument to a numeric type.\n\nThe default return dtype is `float64` or `int64`\ndepending on the data supplied. Use the `downcast` parameter\nto obtain other dtypes.\n\nPlease note that precision loss may occur if really large numbers\nare passed in. Due to the internal limitations of `ndarray`, if\nnumbers smaller than `-9223372036854775808` (np.iinfo(np.int64).min)\nor larger than `18446744073709551615` (np.iinfo(np.uint64).max) are\npassed in, it is very likely they will be converted to float so that\nthey can stored in an `ndarray`. These warnings apply similarly to\n`Series` since it internally leverages `ndarray`.\n\nParameters\n----------\narg : scalar, list, tuple, 1-d array, or Series\nerrors : {'ignore', 'raise', 'coerce'}, default 'raise'\n    - If 'raise', then invalid parsing will raise an exception\n    - If 'coerce', then invalid parsing will be set as NaN\n    - If 'ignore', then invalid parsing will return the input\ndowncast : {'integer', 'signed', 'unsigned', 'float'} , default None\n    If not None, and if the data has been successfully cast to a\n    numerical dtype (or if the data was numeric to begin with),\n    downcast that resulting data to the smallest numerical dtype\n    possible according to the following rules:\n\n    - 'integer' or 'signed': smallest signed int dtype (min.: np.int8)\n    - 'unsigned': smallest unsigned int dtype (min.: np.uint8)\n    - 'float': smallest float dtype (min.: np.float32)\n\n    As this behaviour is separate from the core conversion to\n    numeric values, any errors raised during the downcasting\n    will be surfaced regardless of the value of the 'errors' input.\n\n    In addition, downcasting will only occur if the size\n    of the resulting data's dtype is strictly larger than\n    the dtype it is to be cast to, so if none of the dtypes\n    checked satisfy that specification, no downcasting will be\n    performed on the data.\n\nReturns\n-------\nret : numeric if parsing succeeded.\n    Return type depends on input.  Series if Series, otherwise ndarray.\n\nSee Also\n--------\nDataFrame.astype : Cast argument to a specified dtype.\nto_datetime : Convert argument to datetime.\nto_timedelta : Convert argument to timedelta.\nnumpy.ndarray.astype : Cast a numpy array to a specified type.\n\nExamples\n--------\nTake separate series and convert to numeric, coercing when told to\n\n>>> s = pd.Series(['1.0', '2', -3])\n>>> pd.to_numeric(s)\n0    1.0\n1    2.0\n2   -3.0\ndtype: float64\n>>> pd.to_numeric(s, downcast='float')\n0    1.0\n1    2.0\n2   -3.0\ndtype: float32\n>>> pd.to_numeric(s, downcast='signed')\n0    1\n1    2\n2   -3\ndtype: int8\n>>> s = pd.Series(['apple', '1.0', '2', -3])\n>>> pd.to_numeric(s, errors='ignore')\n0    apple\n1      1.0\n2        2\n3       -3\ndtype: object\n>>> pd.to_numeric(s, errors='coerce')\n0    NaN\n1    1.0\n2    2.0\n3   -3.0\ndtype: float64", "deprecated": false, "file": "pandas/core/tools/numeric.py", "file_line": 19, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/tools/numeric.py#L19", "errors": [["PR07", "Parameter \"arg\" has no description"], ["PR08", "Parameter \"errors\" description should start with a capital letter"], ["PR09", "Parameter \"errors\" description should finish with \".\""], ["PR06", "Parameter \"downcast\" type should use \"int\" instead of \"integer\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Top-level conversions", "shared_code_with": ""}, "pandas.to_datetime": {"type": "function", "docstring": "Convert argument to datetime.\n\nParameters\n----------\narg : integer, float, string, datetime, list, tuple, 1-d array, Series\n       or DataFrame/dict-like\n\nerrors : {'ignore', 'raise', 'coerce'}, default 'raise'\n\n    - If 'raise', then invalid parsing will raise an exception\n    - If 'coerce', then invalid parsing will be set as NaT\n    - If 'ignore', then invalid parsing will return the input\ndayfirst : boolean, default False\n    Specify a date parse order if `arg` is str or its list-likes.\n    If True, parses dates with the day first, eg 10/11/12 is parsed as\n    2012-11-10.\n    Warning: dayfirst=True is not strict, but will prefer to parse\n    with day first (this is a known bug, based on dateutil behavior).\nyearfirst : boolean, default False\n    Specify a date parse order if `arg` is str or its list-likes.\n\n    - If True parses dates with the year first, eg 10/11/12 is parsed as\n      2010-11-12.\n    - If both dayfirst and yearfirst are True, yearfirst is preceded (same\n      as dateutil).\n\n    Warning: yearfirst=True is not strict, but will prefer to parse\n    with year first (this is a known bug, based on dateutil behavior).\n\n    .. versionadded:: 0.16.1\n\nutc : boolean, default None\n    Return UTC DatetimeIndex if True (converting any tz-aware\n    datetime.datetime objects as well).\nbox : boolean, default True\n\n    - If True returns a DatetimeIndex or Index-like object\n    - If False returns ndarray of values.\n\n    .. deprecated:: 0.25.0\n        Use :meth:`Series.to_numpy` or :meth:`Timestamp.to_datetime64`\n        instead to get an ndarray of values or numpy.datetime64,\n        respectively.\n\nformat : string, default None\n    strftime to parse time, eg \"%d/%m/%Y\", note that \"%f\" will parse\n    all the way up to nanoseconds.\n    See strftime documentation for more information on choices:\n    https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior\nexact : boolean, True by default\n\n    - If True, require an exact format match.\n    - If False, allow the format to match anywhere in the target string.\n\nunit : string, default 'ns'\n    unit of the arg (D,s,ms,us,ns) denote the unit, which is an\n    integer or float number. This will be based off the origin.\n    Example, with unit='ms' and origin='unix' (the default), this\n    would calculate the number of milliseconds to the unix epoch start.\ninfer_datetime_format : boolean, default False\n    If True and no `format` is given, attempt to infer the format of the\n    datetime strings, and if it can be inferred, switch to a faster\n    method of parsing them. In some cases this can increase the parsing\n    speed by ~5-10x.\norigin : scalar, default is 'unix'\n    Define the reference date. The numeric values would be parsed as number\n    of units (defined by `unit`) since this reference date.\n\n    - If 'unix' (or POSIX) time; origin is set to 1970-01-01.\n    - If 'julian', unit must be 'D', and origin is set to beginning of\n      Julian Calendar. Julian day number 0 is assigned to the day starting\n      at noon on January 1, 4713 BC.\n    - If Timestamp convertible, origin is set to Timestamp identified by\n      origin.\n\n    .. versionadded:: 0.20.0\ncache : boolean, default True\n    If True, use a cache of unique, converted dates to apply the datetime\n    conversion. May produce significant speed-up when parsing duplicate\n    date strings, especially ones with timezone offsets.\n\n    .. versionadded:: 0.23.0\n\n    .. versionchanged:: 0.25.0\n        - changed default value from False to True\n\nReturns\n-------\nret : datetime if parsing succeeded.\n    Return type depends on input:\n\n    - list-like: DatetimeIndex\n    - Series: Series of datetime64 dtype\n    - scalar: Timestamp\n\n    In case when it is not possible to return designated types (e.g. when\n    any element of input is before Timestamp.min or after Timestamp.max)\n    return will have datetime.datetime type (or corresponding\n    array/Series).\n\nSee Also\n--------\nDataFrame.astype : Cast argument to a specified dtype.\nto_timedelta : Convert argument to timedelta.\n\nExamples\n--------\nAssembling a datetime from multiple columns of a DataFrame. The keys can be\ncommon abbreviations like ['year', 'month', 'day', 'minute', 'second',\n'ms', 'us', 'ns']) or plurals of the same\n\n>>> df = pd.DataFrame({'year': [2015, 2016],\n...                    'month': [2, 3],\n...                    'day': [4, 5]})\n>>> pd.to_datetime(df)\n0   2015-02-04\n1   2016-03-05\ndtype: datetime64[ns]\n\nIf a date does not meet the `timestamp limitations\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html\n#timeseries-timestamp-limits>`_, passing errors='ignore'\nwill return the original input instead of raising any exception.\n\nPassing errors='coerce' will force an out-of-bounds date to NaT,\nin addition to forcing non-dates (or non-parseable dates) to NaT.\n\n>>> pd.to_datetime('13000101', format='%Y%m%d', errors='ignore')\ndatetime.datetime(1300, 1, 1, 0, 0)\n>>> pd.to_datetime('13000101', format='%Y%m%d', errors='coerce')\nNaT\n\nPassing infer_datetime_format=True can often-times speedup a parsing\nif its not an ISO8601 format exactly, but in a regular format.\n\n>>> s = pd.Series(['3/11/2000', '3/12/2000', '3/13/2000'] * 1000)\n>>> s.head()\n0    3/11/2000\n1    3/12/2000\n2    3/13/2000\n3    3/11/2000\n4    3/12/2000\ndtype: object\n\n>>> %timeit pd.to_datetime(s,infer_datetime_format=True)  # doctest: +SKIP\n100 loops, best of 3: 10.4 ms per loop\n\n>>> %timeit pd.to_datetime(s,infer_datetime_format=False)  # doctest: +SKIP\n1 loop, best of 3: 471 ms per loop\n\nUsing a unix epoch time\n\n>>> pd.to_datetime(1490195805, unit='s')\nTimestamp('2017-03-22 15:16:45')\n>>> pd.to_datetime(1490195805433502912, unit='ns')\nTimestamp('2017-03-22 15:16:45.433502912')\n\n.. warning:: For float arg, precision rounding might happen. To prevent\n    unexpected behavior use a fixed-width exact type.\n\nUsing a non-unix epoch origin\n\n>>> pd.to_datetime([1, 2, 3], unit='D',\n...                origin=pd.Timestamp('1960-01-01'))\nDatetimeIndex(['1960-01-02', '1960-01-03', '1960-01-04'], dtype='datetime64[ns]', freq=None)", "deprecated": false, "file": "pandas/util/_decorators.py", "file_line": 560, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/_decorators.py#L560", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {infer_datetime_format, origin, format, errors, utc, cache, unit, box, exact, arg, dayfirst, yearfirst}"], ["PR06", "Parameter \"arg\" type should use \"int\" instead of \"integer\""], ["PR06", "Parameter \"arg\" type should use \"str\" instead of \"string\""], ["PR08", "Parameter \"arg\" description should start with a capital letter"], ["PR09", "Parameter \"arg\" description should finish with \".\""], ["PR08", "Parameter \"errors\" description should start with a capital letter"], ["PR09", "Parameter \"errors\" description should finish with \".\""], ["PR06", "Parameter \"dayfirst\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"yearfirst\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"utc\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"box\" type should use \"bool\" instead of \"boolean\""], ["PR08", "Parameter \"box\" description should start with a capital letter"], ["PR06", "Parameter \"format\" type should use \"str\" instead of \"string\""], ["PR08", "Parameter \"format\" description should start with a capital letter"], ["PR09", "Parameter \"format\" description should finish with \".\""], ["PR06", "Parameter \"exact\" type should use \"bool\" instead of \"boolean\""], ["PR08", "Parameter \"exact\" description should start with a capital letter"], ["PR06", "Parameter \"unit\" type should use \"str\" instead of \"string\""], ["PR08", "Parameter \"unit\" description should start with a capital letter"], ["PR06", "Parameter \"infer_datetime_format\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"cache\" type should use \"bool\" instead of \"boolean\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["EX03", "flake8 error: E231 missing whitespace after ',' (2 times)"], ["EX03", "flake8 error: E999 SyntaxError: invalid syntax"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Top-level dealing with datetimelike", "shared_code_with": ""}, "pandas.to_timedelta": {"type": "function", "docstring": "Convert argument to timedelta.\n\nTimedeltas are absolute differences in times, expressed in difference\nunits (e.g. days, hours, minutes, seconds). This method converts\nan argument from a recognized timedelta format / value into\na Timedelta type.\n\nParameters\n----------\narg : str, timedelta, list-like or Series\n    The data to be converted to timedelta.\nunit : str, default 'ns'\n    Denotes the unit of the arg. Possible values:\n    ('Y', 'M', 'W', 'D', 'days', 'day', 'hours', hour', 'hr',\n    'h', 'm', 'minute', 'min', 'minutes', 'T', 'S', 'seconds',\n    'sec', 'second', 'ms', 'milliseconds', 'millisecond',\n    'milli', 'millis', 'L', 'us', 'microseconds', 'microsecond',\n    'micro', 'micros', 'U', 'ns', 'nanoseconds', 'nano', 'nanos',\n    'nanosecond', 'N').\nbox : bool, default True\n    - If True returns a Timedelta/TimedeltaIndex of the results.\n    - If False returns a numpy.timedelta64 or numpy.darray of\n      values of dtype timedelta64[ns].\n\n    .. deprecated:: 0.25.0\n        Use :meth:`Series.to_numpy` or :meth:`Timedelta.to_timedelta64`\n        instead to get an ndarray of values or numpy.timedelta64,\n        respectively.\n\nerrors : {'ignore', 'raise', 'coerce'}, default 'raise'\n    - If 'raise', then invalid parsing will raise an exception.\n    - If 'coerce', then invalid parsing will be set as NaT.\n    - If 'ignore', then invalid parsing will return the input.\n\nReturns\n-------\ntimedelta64 or numpy.array of timedelta64\n    Output type returned if parsing succeeded.\n\nSee Also\n--------\nDataFrame.astype : Cast argument to a specified dtype.\nto_datetime : Convert argument to datetime.\n\nExamples\n--------\n\nParsing a single string to a Timedelta:\n\n>>> pd.to_timedelta('1 days 06:05:01.00003')\nTimedelta('1 days 06:05:01.000030')\n>>> pd.to_timedelta('15.5us')\nTimedelta('0 days 00:00:00.000015')\n\nParsing a list or array of strings:\n\n>>> pd.to_timedelta(['1 days 06:05:01.00003', '15.5us', 'nan'])\nTimedeltaIndex(['1 days 06:05:01.000030', '0 days 00:00:00.000015', NaT],\n               dtype='timedelta64[ns]', freq=None)\n\nConverting numbers by specifying the `unit` keyword argument:\n\n>>> pd.to_timedelta(np.arange(5), unit='s')\nTimedeltaIndex(['00:00:00', '00:00:01', '00:00:02',\n                '00:00:03', '00:00:04'],\n               dtype='timedelta64[ns]', freq=None)\n>>> pd.to_timedelta(np.arange(5), unit='d')\nTimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days'],\n               dtype='timedelta64[ns]', freq=None)\n\nReturning an ndarray by using the 'box' keyword argument:\n\n>>> pd.to_timedelta(np.arange(5), box=False)\narray([0, 1, 2, 3, 4], dtype='timedelta64[ns]')", "deprecated": false, "file": "pandas/util/_decorators.py", "file_line": 19, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/_decorators.py#L19", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {unit, box, arg, errors}"], ["PR08", "Parameter \"box\" description should start with a capital letter"], ["PR08", "Parameter \"errors\" description should start with a capital letter"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Top-level dealing with datetimelike", "shared_code_with": ""}, "pandas.date_range": {"type": "function", "docstring": "Return a fixed frequency DatetimeIndex.\n\nParameters\n----------\nstart : str or datetime-like, optional\n    Left bound for generating dates.\nend : str or datetime-like, optional\n    Right bound for generating dates.\nperiods : integer, optional\n    Number of periods to generate.\nfreq : str or DateOffset, default 'D'\n    Frequency strings can have multiples, e.g. '5H'. See\n    :ref:`here <timeseries.offset_aliases>` for a list of\n    frequency aliases.\ntz : str or tzinfo, optional\n    Time zone name for returning localized DatetimeIndex, for example\n    'Asia/Hong_Kong'. By default, the resulting DatetimeIndex is\n    timezone-naive.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nname : str, default None\n    Name of the resulting DatetimeIndex.\nclosed : {None, 'left', 'right'}, optional\n    Make the interval closed with respect to the given frequency to\n    the 'left', 'right', or both sides (None, the default).\n**kwargs\n    For compatibility. Has no effect on the result.\n\nReturns\n-------\nrng : DatetimeIndex\n\nSee Also\n--------\nDatetimeIndex : An immutable container for datetimes.\ntimedelta_range : Return a fixed frequency TimedeltaIndex.\nperiod_range : Return a fixed frequency PeriodIndex.\ninterval_range : Return a fixed frequency IntervalIndex.\n\nNotes\n-----\nOf the four parameters ``start``, ``end``, ``periods``, and ``freq``,\nexactly three must be specified. If ``freq`` is omitted, the resulting\n``DatetimeIndex`` will have ``periods`` linearly spaced elements between\n``start`` and ``end`` (closed on both sides).\n\nTo learn more about the frequency strings, please see `this link\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\nExamples\n--------\n**Specifying the values**\n\nThe next four examples generate the same `DatetimeIndex`, but vary\nthe combination of `start`, `end` and `periods`.\n\nSpecify `start` and `end`, with the default daily frequency.\n\n>>> pd.date_range(start='1/1/2018', end='1/08/2018')\nDatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n               '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-08'],\n              dtype='datetime64[ns]', freq='D')\n\nSpecify `start` and `periods`, the number of periods (days).\n\n>>> pd.date_range(start='1/1/2018', periods=8)\nDatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n               '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-08'],\n              dtype='datetime64[ns]', freq='D')\n\nSpecify `end` and `periods`, the number of periods (days).\n\n>>> pd.date_range(end='1/1/2018', periods=8)\nDatetimeIndex(['2017-12-25', '2017-12-26', '2017-12-27', '2017-12-28',\n               '2017-12-29', '2017-12-30', '2017-12-31', '2018-01-01'],\n              dtype='datetime64[ns]', freq='D')\n\nSpecify `start`, `end`, and `periods`; the frequency is generated\nautomatically (linearly spaced).\n\n>>> pd.date_range(start='2018-04-24', end='2018-04-27', periods=3)\nDatetimeIndex(['2018-04-24 00:00:00', '2018-04-25 12:00:00',\n               '2018-04-27 00:00:00'],\n              dtype='datetime64[ns]', freq=None)\n\n**Other Parameters**\n\nChanged the `freq` (frequency) to ``'M'`` (month end frequency).\n\n>>> pd.date_range(start='1/1/2018', periods=5, freq='M')\nDatetimeIndex(['2018-01-31', '2018-02-28', '2018-03-31', '2018-04-30',\n               '2018-05-31'],\n              dtype='datetime64[ns]', freq='M')\n\nMultiples are allowed\n\n>>> pd.date_range(start='1/1/2018', periods=5, freq='3M')\nDatetimeIndex(['2018-01-31', '2018-04-30', '2018-07-31', '2018-10-31',\n               '2019-01-31'],\n              dtype='datetime64[ns]', freq='3M')\n\n`freq` can also be specified as an Offset object.\n\n>>> pd.date_range(start='1/1/2018', periods=5, freq=pd.offsets.MonthEnd(3))\nDatetimeIndex(['2018-01-31', '2018-04-30', '2018-07-31', '2018-10-31',\n               '2019-01-31'],\n              dtype='datetime64[ns]', freq='3M')\n\nSpecify `tz` to set the timezone.\n\n>>> pd.date_range(start='1/1/2018', periods=5, tz='Asia/Tokyo')\nDatetimeIndex(['2018-01-01 00:00:00+09:00', '2018-01-02 00:00:00+09:00',\n               '2018-01-03 00:00:00+09:00', '2018-01-04 00:00:00+09:00',\n               '2018-01-05 00:00:00+09:00'],\n              dtype='datetime64[ns, Asia/Tokyo]', freq='D')\n\n`closed` controls whether to include `start` and `end` that are on the\nboundary. The default includes boundary points on either end.\n\n>>> pd.date_range(start='2017-01-01', end='2017-01-04', closed=None)\nDatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03', '2017-01-04'],\n              dtype='datetime64[ns]', freq='D')\n\nUse ``closed='left'`` to exclude `end` if it falls on the boundary.\n\n>>> pd.date_range(start='2017-01-01', end='2017-01-04', closed='left')\nDatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03'],\n              dtype='datetime64[ns]', freq='D')\n\nUse ``closed='right'`` to exclude `start` if it falls on the boundary.\n\n>>> pd.date_range(start='2017-01-01', end='2017-01-04', closed='right')\nDatetimeIndex(['2017-01-02', '2017-01-03', '2017-01-04'],\n              dtype='datetime64[ns]', freq='D')", "deprecated": false, "file": "pandas/core/indexes/datetimes.py", "file_line": 1418, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/datetimes.py#L1418", "errors": [["PR06", "Parameter \"periods\" type should use \"int\" instead of \"integer\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Top-level dealing with datetimelike", "shared_code_with": ""}, "pandas.bdate_range": {"type": "function", "docstring": "Return a fixed frequency DatetimeIndex, with business day as the default\nfrequency\n\nParameters\n----------\nstart : string or datetime-like, default None\n    Left bound for generating dates.\nend : string or datetime-like, default None\n    Right bound for generating dates.\nperiods : integer, default None\n    Number of periods to generate.\nfreq : string or DateOffset, default 'B' (business daily)\n    Frequency strings can have multiples, e.g. '5H'.\ntz : string or None\n    Time zone name for returning localized DatetimeIndex, for example\n    Asia/Beijing.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nname : string, default None\n    Name of the resulting DatetimeIndex.\nweekmask : string or None, default None\n    Weekmask of valid business days, passed to ``numpy.busdaycalendar``,\n    only used when custom frequency strings are passed.  The default\n    value None is equivalent to 'Mon Tue Wed Thu Fri'.\n\n    .. versionadded:: 0.21.0\n\nholidays : list-like or None, default None\n    Dates to exclude from the set of valid business days, passed to\n    ``numpy.busdaycalendar``, only used when custom frequency strings\n    are passed.\n\n    .. versionadded:: 0.21.0\n\nclosed : string, default None\n    Make the interval closed with respect to the given frequency to\n    the 'left', 'right', or both sides (None).\n**kwargs\n    For compatibility. Has no effect on the result.\n\nReturns\n-------\nDatetimeIndex\n\nNotes\n-----\nOf the four parameters: ``start``, ``end``, ``periods``, and ``freq``,\nexactly three must be specified.  Specifying ``freq`` is a requirement\nfor ``bdate_range``.  Use ``date_range`` if specifying ``freq`` is not\ndesired.\n\nTo learn more about the frequency strings, please see `this link\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\nExamples\n--------\nNote how the two weekend days are skipped in the result.\n\n>>> pd.bdate_range(start='1/1/2018', end='1/08/2018')\nDatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n           '2018-01-05', '2018-01-08'],\n          dtype='datetime64[ns]', freq='B')", "deprecated": false, "file": "pandas/core/indexes/datetimes.py", "file_line": 1582, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/datetimes.py#L1582", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["PR06", "Parameter \"start\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"end\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"periods\" type should use \"int\" instead of \"integer\""], ["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"tz\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"name\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"weekmask\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"closed\" type should use \"str\" instead of \"string\""], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Top-level dealing with datetimelike", "shared_code_with": ""}, "pandas.period_range": {"type": "function", "docstring": "Return a fixed frequency PeriodIndex, with day (calendar) as the default\nfrequency\n\nParameters\n----------\nstart : string or period-like, default None\n    Left bound for generating periods\nend : string or period-like, default None\n    Right bound for generating periods\nperiods : integer, default None\n    Number of periods to generate\nfreq : string or DateOffset, optional\n    Frequency alias. By default the freq is taken from `start` or `end`\n    if those are Period objects. Otherwise, the default is ``\"D\"`` for\n    daily frequency.\n\nname : string, default None\n    Name of the resulting PeriodIndex\n\nReturns\n-------\nprng : PeriodIndex\n\nNotes\n-----\nOf the three parameters: ``start``, ``end``, and ``periods``, exactly two\nmust be specified.\n\nTo learn more about the frequency strings, please see `this link\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\nExamples\n--------\n\n>>> pd.period_range(start='2017-01-01', end='2018-01-01', freq='M')\nPeriodIndex(['2017-01', '2017-02', '2017-03', '2017-04', '2017-05',\n             '2017-06', '2017-06', '2017-07', '2017-08', '2017-09',\n             '2017-10', '2017-11', '2017-12', '2018-01'],\n            dtype='period[M]', freq='M')\n\nIf ``start`` or ``end`` are ``Period`` objects, they will be used as anchor\nendpoints for a ``PeriodIndex`` with frequency matching that of the\n``period_range`` constructor.\n\n>>> pd.period_range(start=pd.Period('2017Q1', freq='Q'),\n...                 end=pd.Period('2017Q2', freq='Q'), freq='M')\nPeriodIndex(['2017-03', '2017-04', '2017-05', '2017-06'],\n            dtype='period[M]', freq='M')", "deprecated": false, "file": "pandas/core/indexes/period.py", "file_line": 994, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/period.py#L994", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["PR06", "Parameter \"start\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"start\" description should finish with \".\""], ["PR06", "Parameter \"end\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"end\" description should finish with \".\""], ["PR06", "Parameter \"periods\" type should use \"int\" instead of \"integer\""], ["PR09", "Parameter \"periods\" description should finish with \".\""], ["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"name\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"name\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 36, in pandas.period_range\nFailed example:\n    pd.period_range(start='2017-01-01', end='2018-01-01', freq='M')\nExpected:\n    PeriodIndex(['2017-01', '2017-02', '2017-03', '2017-04', '2017-05',\n                 '2017-06', '2017-06', '2017-07', '2017-08', '2017-09',\n                 '2017-10', '2017-11', '2017-12', '2018-01'],\n                dtype='period[M]', freq='M')\nGot:\n    PeriodIndex(['2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06',\n                 '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12',\n                 '2018-01'],\n                dtype='period[M]', freq='M')\n"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 36, in pandas.period_range\nFailed example:\n    pd.period_range(start='2017-01-01', end='2018-01-01', freq='M')\nExpected:\n    PeriodIndex(['2017-01', '2017-02', '2017-03', '2017-04', '2017-05',\n                 '2017-06', '2017-06', '2017-07', '2017-08', '2017-09',\n                 '2017-10', '2017-11', '2017-12', '2018-01'],\n                dtype='period[M]', freq='M')\nGot:\n    PeriodIndex(['2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06',\n                 '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12',\n                 '2018-01'],\n                dtype='period[M]', freq='M')\n", "in_api": true, "section": "", "subsection": "Top-level dealing with datetimelike", "shared_code_with": ""}, "pandas.timedelta_range": {"type": "function", "docstring": "Return a fixed frequency TimedeltaIndex, with day as the default\nfrequency\n\nParameters\n----------\nstart : string or timedelta-like, default None\n    Left bound for generating timedeltas\nend : string or timedelta-like, default None\n    Right bound for generating timedeltas\nperiods : integer, default None\n    Number of periods to generate\nfreq : string or DateOffset, default 'D'\n    Frequency strings can have multiples, e.g. '5H'\nname : string, default None\n    Name of the resulting TimedeltaIndex\nclosed : string, default None\n    Make the interval closed with respect to the given frequency to\n    the 'left', 'right', or both sides (None)\n\nReturns\n-------\nrng : TimedeltaIndex\n\nNotes\n-----\nOf the four parameters ``start``, ``end``, ``periods``, and ``freq``,\nexactly three must be specified. If ``freq`` is omitted, the resulting\n``TimedeltaIndex`` will have ``periods`` linearly spaced elements between\n``start`` and ``end`` (closed on both sides).\n\nTo learn more about the frequency strings, please see `this link\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\nExamples\n--------\n\n>>> pd.timedelta_range(start='1 day', periods=4)\nTimedeltaIndex(['1 days', '2 days', '3 days', '4 days'],\n               dtype='timedelta64[ns]', freq='D')\n\nThe ``closed`` parameter specifies which endpoint is included.  The default\nbehavior is to include both endpoints.\n\n>>> pd.timedelta_range(start='1 day', periods=4, closed='right')\nTimedeltaIndex(['2 days', '3 days', '4 days'],\n               dtype='timedelta64[ns]', freq='D')\n\nThe ``freq`` parameter specifies the frequency of the TimedeltaIndex.\nOnly fixed frequencies can be passed, non-fixed frequencies such as\n'M' (month end) will raise.\n\n>>> pd.timedelta_range(start='1 day', end='2 days', freq='6H')\nTimedeltaIndex(['1 days 00:00:00', '1 days 06:00:00', '1 days 12:00:00',\n                '1 days 18:00:00', '2 days 00:00:00'],\n               dtype='timedelta64[ns]', freq='6H')\n\nSpecify ``start``, ``end``, and ``periods``; the frequency is generated\nautomatically (linearly spaced).\n\n>>> pd.timedelta_range(start='1 day', end='5 days', periods=4)\nTimedeltaIndex(['1 days 00:00:00', '2 days 08:00:00', '3 days 16:00:00',\n            '5 days 00:00:00'],\n           dtype='timedelta64[ns]', freq=None)", "deprecated": false, "file": "pandas/core/indexes/timedeltas.py", "file_line": 711, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/timedeltas.py#L711", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["PR06", "Parameter \"start\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"start\" description should finish with \".\""], ["PR06", "Parameter \"end\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"end\" description should finish with \".\""], ["PR06", "Parameter \"periods\" type should use \"int\" instead of \"integer\""], ["PR09", "Parameter \"periods\" description should finish with \".\""], ["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"freq\" description should finish with \".\""], ["PR06", "Parameter \"name\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"name\" description should finish with \".\""], ["PR06", "Parameter \"closed\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"closed\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Top-level dealing with datetimelike", "shared_code_with": ""}, "pandas.infer_freq": {"type": "function", "docstring": "Infer the most likely frequency given the input index. If the frequency is\nuncertain, a warning will be printed.\n\nParameters\n----------\nindex : DatetimeIndex or TimedeltaIndex\n  if passed a Series will use the values of the series (NOT THE INDEX)\nwarn : boolean, default True\n\nReturns\n-------\nstr or None\n    None if no discernible frequency\n    TypeError if the index is not datetime-like\n    ValueError if there are less than three values.", "deprecated": false, "file": "pandas/tseries/frequencies.py", "file_line": 217, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/frequencies.py#L217", "errors": [["SS06", "Summary should fit in a single line"], ["PR08", "Parameter \"index\" description should start with a capital letter"], ["PR09", "Parameter \"index\" description should finish with \".\""], ["PR06", "Parameter \"warn\" type should use \"bool\" instead of \"boolean\""], ["PR07", "Parameter \"warn\" has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Top-level dealing with datetimelike", "shared_code_with": ""}, "pandas.interval_range": {"type": "function", "docstring": "Return a fixed frequency IntervalIndex\n\nParameters\n----------\nstart : numeric or datetime-like, default None\n    Left bound for generating intervals\nend : numeric or datetime-like, default None\n    Right bound for generating intervals\nperiods : integer, default None\n    Number of periods to generate\nfreq : numeric, string, or DateOffset, default None\n    The length of each interval. Must be consistent with the type of start\n    and end, e.g. 2 for numeric, or '5H' for datetime-like.  Default is 1\n    for numeric and 'D' for datetime-like.\nname : string, default None\n    Name of the resulting IntervalIndex\nclosed : {'left', 'right', 'both', 'neither'}, default 'right'\n    Whether the intervals are closed on the left-side, right-side, both\n    or neither.\n\nReturns\n-------\nrng : IntervalIndex\n\nSee Also\n--------\nIntervalIndex : An Index of intervals that are all closed on the same side.\n\nNotes\n-----\nOf the four parameters ``start``, ``end``, ``periods``, and ``freq``,\nexactly three must be specified. If ``freq`` is omitted, the resulting\n``IntervalIndex`` will have ``periods`` linearly spaced elements between\n``start`` and ``end``, inclusively.\n\nTo learn more about datetime-like frequency strings, please see `this link\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\nExamples\n--------\nNumeric ``start`` and  ``end`` is supported.\n\n>>> pd.interval_range(start=0, end=5)\nIntervalIndex([(0, 1], (1, 2], (2, 3], (3, 4], (4, 5]],\n              closed='right', dtype='interval[int64]')\n\nAdditionally, datetime-like input is also supported.\n\n>>> pd.interval_range(start=pd.Timestamp('2017-01-01'),\n...                   end=pd.Timestamp('2017-01-04'))\nIntervalIndex([(2017-01-01, 2017-01-02], (2017-01-02, 2017-01-03],\n               (2017-01-03, 2017-01-04]],\n              closed='right', dtype='interval[datetime64[ns]]')\n\nThe ``freq`` parameter specifies the frequency between the left and right.\nendpoints of the individual intervals within the ``IntervalIndex``.  For\nnumeric ``start`` and ``end``, the frequency must also be numeric.\n\n>>> pd.interval_range(start=0, periods=4, freq=1.5)\nIntervalIndex([(0.0, 1.5], (1.5, 3.0], (3.0, 4.5], (4.5, 6.0]],\n              closed='right', dtype='interval[float64]')\n\nSimilarly, for datetime-like ``start`` and ``end``, the frequency must be\nconvertible to a DateOffset.\n\n>>> pd.interval_range(start=pd.Timestamp('2017-01-01'),\n...                   periods=3, freq='MS')\nIntervalIndex([(2017-01-01, 2017-02-01], (2017-02-01, 2017-03-01],\n               (2017-03-01, 2017-04-01]],\n              closed='right', dtype='interval[datetime64[ns]]')\n\nSpecify ``start``, ``end``, and ``periods``; the frequency is generated\nautomatically (linearly spaced).\n\n>>> pd.interval_range(start=0, end=6, periods=4)\nIntervalIndex([(0.0, 1.5], (1.5, 3.0], (3.0, 4.5], (4.5, 6.0]],\n          closed='right',\n          dtype='interval[float64]')\n\nThe ``closed`` parameter specifies which endpoints of the individual\nintervals within the ``IntervalIndex`` are closed.\n\n>>> pd.interval_range(end=5, periods=4, closed='both')\nIntervalIndex([[1, 2], [2, 3], [3, 4], [4, 5]],\n              closed='both', dtype='interval[int64]')", "deprecated": false, "file": "pandas/core/indexes/interval.py", "file_line": 1309, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/interval.py#L1309", "errors": [["SS03", "Summary does not end with a period"], ["PR09", "Parameter \"start\" description should finish with \".\""], ["PR09", "Parameter \"end\" description should finish with \".\""], ["PR06", "Parameter \"periods\" type should use \"int\" instead of \"integer\""], ["PR09", "Parameter \"periods\" description should finish with \".\""], ["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"name\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"name\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Top-level dealing with intervals", "shared_code_with": ""}, "pandas.eval": {"type": "function", "docstring": "Evaluate a Python expression as a string using various backends.\n\nThe following arithmetic operations are supported: ``+``, ``-``, ``*``,\n``/``, ``**``, ``%``, ``//`` (python engine only) along with the following\nboolean operations: ``|`` (or), ``&`` (and), and ``~`` (not).\nAdditionally, the ``'pandas'`` parser allows the use of :keyword:`and`,\n:keyword:`or`, and :keyword:`not` with the same semantics as the\ncorresponding bitwise operators.  :class:`~pandas.Series` and\n:class:`~pandas.DataFrame` objects are supported and behave as they would\nwith plain ol' Python evaluation.\n\nParameters\n----------\nexpr : str or unicode\n    The expression to evaluate. This string cannot contain any Python\n    `statements\n    <https://docs.python.org/3/reference/simple_stmts.html#simple-statements>`__,\n    only Python `expressions\n    <https://docs.python.org/3/reference/simple_stmts.html#expression-statements>`__.\nparser : string, default 'pandas', {'pandas', 'python'}\n    The parser to use to construct the syntax tree from the expression. The\n    default of ``'pandas'`` parses code slightly different than standard\n    Python. Alternatively, you can parse an expression using the\n    ``'python'`` parser to retain strict Python semantics.  See the\n    :ref:`enhancing performance <enhancingperf.eval>` documentation for\n    more details.\nengine : string or None, default 'numexpr', {'python', 'numexpr'}\n\n    The engine used to evaluate the expression. Supported engines are\n\n    - None         : tries to use ``numexpr``, falls back to ``python``\n    - ``'numexpr'``: This default engine evaluates pandas objects using\n                     numexpr for large speed ups in complex expressions\n                     with large frames.\n    - ``'python'``: Performs operations as if you had ``eval``'d in top\n                    level python. This engine is generally not that useful.\n\n    More backends may be available in the future.\n\ntruediv : bool, optional\n    Whether to use true division, like in Python >= 3\nlocal_dict : dict or None, optional\n    A dictionary of local variables, taken from locals() by default.\nglobal_dict : dict or None, optional\n    A dictionary of global variables, taken from globals() by default.\nresolvers : list of dict-like or None, optional\n    A list of objects implementing the ``__getitem__`` special method that\n    you can use to inject an additional collection of namespaces to use for\n    variable lookup. For example, this is used in the\n    :meth:`~DataFrame.query` method to inject the\n    ``DataFrame.index`` and ``DataFrame.columns``\n    variables that refer to their respective :class:`~pandas.DataFrame`\n    instance attributes.\nlevel : int, optional\n    The number of prior stack frames to traverse and add to the current\n    scope. Most users will **not** need to change this parameter.\ntarget : object, optional, default None\n    This is the target object for assignment. It is used when there is\n    variable assignment in the expression. If so, then `target` must\n    support item assignment with string keys, and if a copy is being\n    returned, it must also support `.copy()`.\ninplace : bool, default False\n    If `target` is provided, and the expression mutates `target`, whether\n    to modify `target` inplace. Otherwise, return a copy of `target` with\n    the mutation.\n\nReturns\n-------\nndarray, numeric scalar, DataFrame, Series\n\nRaises\n------\nValueError\n    There are many instances where such an error can be raised:\n\n    - `target=None`, but the expression is multiline.\n    - The expression is multiline, but not all them have item assignment.\n      An example of such an arrangement is this:\n\n      a = b + 1\n      a + 2\n\n      Here, there are expressions on different lines, making it multiline,\n      but the last line has no variable assigned to the output of `a + 2`.\n    - `inplace=True`, but the expression is missing item assignment.\n    - Item assignment is provided, but the `target` does not support\n      string item assignment.\n    - Item assignment is provided and `inplace=False`, but the `target`\n      does not support the `.copy()` method\n\nSee Also\n--------\nDataFrame.query\nDataFrame.eval\n\nNotes\n-----\nThe ``dtype`` of any objects involved in an arithmetic ``%`` operation are\nrecursively cast to ``float64``.\n\nSee the :ref:`enhancing performance <enhancingperf.eval>` documentation for\nmore details.", "deprecated": false, "file": "pandas/core/computation/eval.py", "file_line": 169, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/computation/eval.py#L169", "errors": [["PR06", "Parameter \"parser\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"engine\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"truediv\" description should finish with \".\""], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"DataFrame.query\" reference"], ["SA04", "Missing description for See Also \"DataFrame.eval\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Top-level evaluation", "shared_code_with": ""}, "pandas.util.hash_array": {"type": "function", "docstring": "Given a 1d array, return an array of deterministic integers.\n\nParameters\n----------\nvals : ndarray, Categorical\nencoding : string, default 'utf8'\n    encoding for data & key when strings\nhash_key : string key to encode, default to _default_hash_key\ncategorize : bool, default True\n    Whether to first categorize object arrays before hashing. This is more\n    efficient when the array contains duplicate values.\n\n    .. versionadded:: 0.20.0\n\nReturns\n-------\n1d uint64 numpy array of hash values, same length as the vals", "deprecated": false, "file": "pandas/core/util/hashing.py", "file_line": 242, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/util/hashing.py#L242", "errors": [["PR07", "Parameter \"vals\" has no description"], ["PR06", "Parameter \"encoding\" type should use \"str\" instead of \"string\""], ["PR08", "Parameter \"encoding\" description should start with a capital letter"], ["PR09", "Parameter \"encoding\" description should finish with \".\""], ["PR06", "Parameter \"hash_key\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"hash_key\" has no description"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Hashing", "shared_code_with": ""}, "pandas.util.hash_pandas_object": {"type": "function", "docstring": "Return a data hash of the Index/Series/DataFrame\n\nParameters\n----------\nindex : boolean, default True\n    include the index in the hash (if Series/DataFrame)\nencoding : string, default 'utf8'\n    encoding for data & key when strings\nhash_key : string key to encode, default to _default_hash_key\ncategorize : bool, default True\n    Whether to first categorize object arrays before hashing. This is more\n    efficient when the array contains duplicate values.\n\n    .. versionadded:: 0.20.0\n\nReturns\n-------\nSeries of uint64, same length as the object", "deprecated": false, "file": "pandas/core/util/hashing.py", "file_line": 57, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/util/hashing.py#L57", "errors": [["SS03", "Summary does not end with a period"], ["PR01", "Parameters {obj} not documented"], ["PR06", "Parameter \"index\" type should use \"bool\" instead of \"boolean\""], ["PR08", "Parameter \"index\" description should start with a capital letter"], ["PR09", "Parameter \"index\" description should finish with \".\""], ["PR06", "Parameter \"encoding\" type should use \"str\" instead of \"string\""], ["PR08", "Parameter \"encoding\" description should start with a capital letter"], ["PR09", "Parameter \"encoding\" description should finish with \".\""], ["PR06", "Parameter \"hash_key\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"hash_key\" has no description"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Hashing", "shared_code_with": ""}, "pandas.test": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/util/_tester.py", "file_line": 10, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/_tester.py#L10", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Testing", "shared_code_with": ""}, "pandas.Index": {"type": "type", "docstring": "Immutable ndarray implementing an ordered, sliceable set. The basic object\nstoring axis labels for all pandas objects.\n\nParameters\n----------\ndata : array-like (1-dimensional)\ndtype : NumPy dtype (default: object)\n    If dtype is None, we find the dtype that best fits the data.\n    If an actual dtype is provided, we coerce to that dtype if it's safe.\n    Otherwise, an error will be raised.\ncopy : bool\n    Make a copy of input ndarray\nname : object\n    Name to be stored in the index\ntupleize_cols : bool (default: True)\n    When True, attempt to create a MultiIndex if possible\n\nSee Also\n--------\nRangeIndex : Index implementing a monotonic integer range.\nCategoricalIndex : Index of :class:`Categorical` s.\nMultiIndex : A multi-level, or hierarchical, Index.\nIntervalIndex : An Index of :class:`Interval` s.\nDatetimeIndex, TimedeltaIndex, PeriodIndex\nInt64Index, UInt64Index,  Float64Index\n\nNotes\n-----\nAn Index instance can **only** contain hashable objects\n\nExamples\n--------\n>>> pd.Index([1, 2, 3])\nInt64Index([1, 2, 3], dtype='int64')\n\n>>> pd.Index(list('abc'))\nIndex(['a', 'b', 'c'], dtype='object')", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 165, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L165", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, fastpath} not documented"], ["PR07", "Parameter \"data\" has no description"], ["PR09", "Parameter \"copy\" description should finish with \".\""], ["PR09", "Parameter \"name\" description should finish with \".\""], ["PR09", "Parameter \"tupleize_cols\" description should finish with \".\""], ["SA04", "Missing description for See Also \"DatetimeIndex\" reference"], ["SA04", "Missing description for See Also \"TimedeltaIndex\" reference"], ["SA04", "Missing description for See Also \"PeriodIndex\" reference"], ["SA04", "Missing description for See Also \"Int64Index\" reference"], ["SA04", "Missing description for See Also \"UInt64Index\" reference"], ["SA04", "Missing description for See Also \"Float64Index\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "", "shared_code_with": ""}, "pandas.Index.values": {"type": "property", "docstring": "Return an array representing the data in the Index.\n\n.. warning::\n\n   We recommend using :attr:`Index.array` or\n   :meth:`Index.to_numpy`, depending on whether you need\n   a reference to the underlying data or a NumPy array.\n\nReturns\n-------\narray: numpy.ndarray or ExtensionArray\n\nSee Also\n--------\nIndex.array : Reference to the underlying data.\nIndex.to_numpy : A NumPy array representing the underlying data.", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 3848, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L3848", "errors": [], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": ""}, "pandas.Index.is_monotonic": {"type": "property", "docstring": "Alias for is_monotonic_increasing.", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1676, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1676", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": ""}, "pandas.Index.is_monotonic_increasing": {"type": "property", "docstring": "Return if the index is monotonic increasing (only equal or\nincreasing) values.\n\nExamples\n--------\n>>> Index([1, 2, 3]).is_monotonic_increasing\nTrue\n>>> Index([1, 2, 2]).is_monotonic_increasing\nTrue\n>>> Index([1, 3, 2]).is_monotonic_increasing\nFalse", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1683, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1683", "errors": [["SS06", "Summary should fit in a single line"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 7, in pandas.Index.is_monotonic_increasing\nFailed example:\n    Index([1, 2, 3]).is_monotonic_increasing\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Index.is_monotonic_increasing[0]>\", line 1, in <module>\n        Index([1, 2, 3]).is_monotonic_increasing\n    NameError: name 'Index' is not defined\n**********************************************************************\nLine 9, in pandas.Index.is_monotonic_increasing\nFailed example:\n    Index([1, 2, 2]).is_monotonic_increasing\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Index.is_monotonic_increasing[1]>\", line 1, in <module>\n        Index([1, 2, 2]).is_monotonic_increasing\n    NameError: name 'Index' is not defined\n**********************************************************************\nLine 11, in pandas.Index.is_monotonic_increasing\nFailed example:\n    Index([1, 3, 2]).is_monotonic_increasing\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Index.is_monotonic_increasing[2]>\", line 1, in <module>\n        Index([1, 3, 2]).is_monotonic_increasing\n    NameError: name 'Index' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'Index' (3 times)"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 7, in pandas.Index.is_monotonic_increasing\nFailed example:\n    Index([1, 2, 3]).is_monotonic_increasing\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Index.is_monotonic_increasing[0]>\", line 1, in <module>\n        Index([1, 2, 3]).is_monotonic_increasing\n    NameError: name 'Index' is not defined\n**********************************************************************\nLine 9, in pandas.Index.is_monotonic_increasing\nFailed example:\n    Index([1, 2, 2]).is_monotonic_increasing\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Index.is_monotonic_increasing[1]>\", line 1, in <module>\n        Index([1, 2, 2]).is_monotonic_increasing\n    NameError: name 'Index' is not defined\n**********************************************************************\nLine 11, in pandas.Index.is_monotonic_increasing\nFailed example:\n    Index([1, 3, 2]).is_monotonic_increasing\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Index.is_monotonic_increasing[2]>\", line 1, in <module>\n        Index([1, 3, 2]).is_monotonic_increasing\n    NameError: name 'Index' is not defined\n", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": ""}, "pandas.Index.is_monotonic_decreasing": {"type": "property", "docstring": "Return if the index is monotonic decreasing (only equal or\ndecreasing) values.\n\nExamples\n--------\n>>> Index([3, 2, 1]).is_monotonic_decreasing\nTrue\n>>> Index([3, 2, 2]).is_monotonic_decreasing\nTrue\n>>> Index([3, 1, 2]).is_monotonic_decreasing\nFalse", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1700, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1700", "errors": [["SS06", "Summary should fit in a single line"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 7, in pandas.Index.is_monotonic_decreasing\nFailed example:\n    Index([3, 2, 1]).is_monotonic_decreasing\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Index.is_monotonic_decreasing[0]>\", line 1, in <module>\n        Index([3, 2, 1]).is_monotonic_decreasing\n    NameError: name 'Index' is not defined\n**********************************************************************\nLine 9, in pandas.Index.is_monotonic_decreasing\nFailed example:\n    Index([3, 2, 2]).is_monotonic_decreasing\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Index.is_monotonic_decreasing[1]>\", line 1, in <module>\n        Index([3, 2, 2]).is_monotonic_decreasing\n    NameError: name 'Index' is not defined\n**********************************************************************\nLine 11, in pandas.Index.is_monotonic_decreasing\nFailed example:\n    Index([3, 1, 2]).is_monotonic_decreasing\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Index.is_monotonic_decreasing[2]>\", line 1, in <module>\n        Index([3, 1, 2]).is_monotonic_decreasing\n    NameError: name 'Index' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'Index' (3 times)"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 7, in pandas.Index.is_monotonic_decreasing\nFailed example:\n    Index([3, 2, 1]).is_monotonic_decreasing\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Index.is_monotonic_decreasing[0]>\", line 1, in <module>\n        Index([3, 2, 1]).is_monotonic_decreasing\n    NameError: name 'Index' is not defined\n**********************************************************************\nLine 9, in pandas.Index.is_monotonic_decreasing\nFailed example:\n    Index([3, 2, 2]).is_monotonic_decreasing\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Index.is_monotonic_decreasing[1]>\", line 1, in <module>\n        Index([3, 2, 2]).is_monotonic_decreasing\n    NameError: name 'Index' is not defined\n**********************************************************************\nLine 11, in pandas.Index.is_monotonic_decreasing\nFailed example:\n    Index([3, 1, 2]).is_monotonic_decreasing\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Index.is_monotonic_decreasing[2]>\", line 1, in <module>\n        Index([3, 1, 2]).is_monotonic_decreasing\n    NameError: name 'Index' is not defined\n", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": ""}, "pandas.Index.is_unique": {"type": "CachedProperty", "docstring": "Return if the index has unique values.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": "pandas.api.types.is_scalar"}, "pandas.Index.has_duplicates": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1761, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1761", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": ""}, "pandas.Index.hasnans": {"type": "CachedProperty", "docstring": "Return if I have any nans; enables various perf speedups.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": "pandas.Index.is_unique"}, "pandas.Index.dtype": {"type": "CachedProperty", "docstring": "Return the dtype object of the underlying data.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": "pandas.Index.hasnans"}, "pandas.Index.dtype_str": {"type": "property", "docstring": "Return the dtype str of the underlying data.\n\n.. deprecated:: 0.25.0", "deprecated": true, "file": "pandas/core/indexes/base.py", "file_line": 707, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L707", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": ""}, "pandas.Index.inferred_type": {"type": "CachedProperty", "docstring": "Return a string of the type inferred from the values.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": "pandas.Index.dtype"}, "pandas.Index.is_all_dates": {"type": "CachedProperty", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": "pandas.Index.inferred_type"}, "pandas.Index.shape": {"type": "property", "docstring": "Return a tuple of the shape of the underlying data.", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 5508, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L5508", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": ""}, "pandas.Index.name": {"type": "NoneType", "docstring": "", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": "pandas.Index.is_all_dates"}, "pandas.Index.names": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1306, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1306", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": ""}, "pandas.Index.nbytes": {"type": "property", "docstring": "Return the number of bytes in the underlying data.", "deprecated": false, "file": "pandas/core/base.py", "file_line": 749, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L749", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": "pandas.Series.nbytes"}, "pandas.Index.ndim": {"type": "property", "docstring": "Number of dimensions of the underlying data, by definition 1.", "deprecated": false, "file": "pandas/core/base.py", "file_line": 694, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L694", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": "pandas.Series.ndim"}, "pandas.Index.size": {"type": "property", "docstring": "Return the number of elements in the underlying data.", "deprecated": false, "file": "pandas/core/base.py", "file_line": 771, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L771", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": "pandas.Series.size"}, "pandas.Index.empty": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/core/base.py", "file_line": 1006, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L1006", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": "pandas.Series.empty"}, "pandas.Index.strides": {"type": "property", "docstring": "Return the strides of the underlying data.\n\n.. deprecated:: 0.23.0", "deprecated": true, "file": "pandas/core/base.py", "file_line": 756, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L756", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": "pandas.Series.strides"}, "pandas.Index.itemsize": {"type": "property", "docstring": "Return the size of the dtype of the item of the underlying data.\n\n.. deprecated:: 0.23.0", "deprecated": true, "file": "pandas/core/base.py", "file_line": 734, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L734", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": "pandas.Series.itemsize"}, "pandas.Index.base": {"type": "property", "docstring": "Return the base object if the memory of the underlying data is shared.\n\n.. deprecated:: 0.23.0", "deprecated": true, "file": "pandas/core/base.py", "file_line": 793, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L793", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": "pandas.Series.base"}, "pandas.Index.T": {"type": "property", "docstring": "Return the transpose, which is by definition self.", "deprecated": false, "file": "pandas/core/base.py", "file_line": 653, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L653", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": "pandas.Series.T"}, "pandas.Index.memory_usage": {"type": "function", "docstring": "Memory usage of the values\n\nParameters\n----------\ndeep : bool\n    Introspect the data deeply, interrogate\n    `object` dtypes for system-level memory consumption\n\nReturns\n-------\nbytes used\n\nSee Also\n--------\nnumpy.ndarray.nbytes\n\nNotes\n-----\nMemory usage does not include memory consumed by elements that\nare not components of the array if deep=False or if used on PyPy", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 3956, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L3956", "errors": [["SS03", "Summary does not end with a period"], ["PR09", "Parameter \"deep\" description should finish with \".\""], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"numpy.ndarray.nbytes\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Properties", "shared_code_with": ""}, "pandas.Index.all": {"type": "function", "docstring": "Return whether all elements are True.\n\nParameters\n----------\n*args\n    These parameters will be passed to numpy.all.\n**kwargs\n    These parameters will be passed to numpy.all.\n\nReturns\n-------\nall : bool or array_like (if axis is specified)\n    A single element array_like may be converted to bool.\n\nSee Also\n--------\nIndex.any : Return whether any element in an Index is True.\nSeries.any : Return whether any element in a Series is True.\nSeries.all : Return whether all elements in a Series are True.\n\nNotes\n-----\nNot a Number (NaN), positive infinity and negative infinity\nevaluate to True because these are not equal to zero.\n\nExamples\n--------\n**all**\n\nTrue, because nonzero integers are considered True.\n\n>>> pd.Index([1, 2, 3]).all()\nTrue\n\nFalse, because ``0`` is considered False.\n\n>>> pd.Index([0, 1, 2]).all()\nFalse\n\n**any**\n\nTrue, because ``1`` is considered True.\n\n>>> pd.Index([0, 0, 1]).any()\nTrue\n\nFalse, because ``0`` is considered False.\n\n>>> pd.Index([0, 0, 0]).any()\nFalse", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 5476, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L5476", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.any": {"type": "function", "docstring": "Return whether any element is True.\n\nParameters\n----------\n*args\n    These parameters will be passed to numpy.any.\n**kwargs\n    These parameters will be passed to numpy.any.\n\nReturns\n-------\nany : bool or array_like (if axis is specified)\n    A single element array_like may be converted to bool.\n\nSee Also\n--------\nIndex.all : Return whether all elements are True.\nSeries.all : Return whether all elements are True.\n\nNotes\n-----\nNot a Number (NaN), positive infinity and negative infinity\nevaluate to True because these are not equal to zero.\n\nExamples\n--------\n>>> index = pd.Index([0, 1, 2])\n>>> index.any()\nTrue\n\n>>> index = pd.Index([0, 0, 0])\n>>> index.any()\nFalse", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 5476, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L5476", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": "pandas.Index.all"}, "pandas.Index.argmin": {"type": "function", "docstring": "Return a ndarray of the minimum argument indexer.\n\nParameters\n----------\naxis : {None}\n    Dummy argument for consistency with Series\nskipna : bool, default True\n\nReturns\n-------\nnumpy.ndarray\n\nSee Also\n--------\nnumpy.ndarray.argmin", "deprecated": false, "file": "pandas/core/base.py", "file_line": 1115, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L1115", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR09", "Parameter \"axis\" description should finish with \".\""], ["PR07", "Parameter \"skipna\" has no description"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"numpy.ndarray.argmin\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.argmax": {"type": "function", "docstring": "Return an ndarray of the maximum argument indexer.\n\nParameters\n----------\naxis : {None}\n    Dummy argument for consistency with Series\nskipna : bool, default True\n\nReturns\n-------\nnumpy.ndarray\n    Indices of the maximum values.\n\nSee Also\n--------\nnumpy.ndarray.argmax", "deprecated": false, "file": "pandas/core/base.py", "file_line": 1051, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L1051", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR09", "Parameter \"axis\" description should finish with \".\""], ["PR07", "Parameter \"skipna\" has no description"], ["SA04", "Missing description for See Also \"numpy.ndarray.argmax\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.copy": {"type": "function", "docstring": "Make a copy of this object.  Name and dtype sets those attributes on\nthe new object.\n\nParameters\n----------\nname : string, optional\ndeep : boolean, default False\ndtype : numpy dtype or pandas type\n\nReturns\n-------\ncopy : Index\n\nNotes\n-----\nIn most cases, there should be no functional difference from using\n``deep``, but if ``deep`` is passed it will attempt to deepcopy.", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 949, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L949", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs} not documented"], ["PR06", "Parameter \"name\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"name\" has no description"], ["PR06", "Parameter \"deep\" type should use \"bool\" instead of \"boolean\""], ["PR07", "Parameter \"deep\" has no description"], ["PR07", "Parameter \"dtype\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.delete": {"type": "function", "docstring": "Make new Index with passed location(-s) deleted.\n\nReturns\n-------\nnew_index : Index", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 5234, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L5234", "errors": [["PR01", "Parameters {loc} not documented"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.drop": {"type": "function", "docstring": "Make new Index with passed list of labels deleted.\n\nParameters\n----------\nlabels : array-like\nerrors : {'ignore', 'raise'}, default 'raise'\n    If 'ignore', suppress error and existing labels are dropped.\n\nReturns\n-------\ndropped : Index\n\nRaises\n------\nKeyError\n    If not all of the labels are found in the selected axis", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 5264, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L5264", "errors": [["PR07", "Parameter \"labels\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.drop_duplicates": {"type": "function", "docstring": "Return Index with duplicate values removed.\n\nParameters\n----------\nkeep : {'first', 'last', ``False``}, default 'first'\n    - 'first' : Drop duplicates except for the first occurrence.\n    - 'last' : Drop duplicates except for the last occurrence.\n    - ``False`` : Drop all duplicates.\n\nReturns\n-------\ndeduplicated : Index\n\nSee Also\n--------\nSeries.drop_duplicates : Equivalent method on Series.\nDataFrame.drop_duplicates : Equivalent method on DataFrame.\nIndex.duplicated : Related method on Index, indicating duplicate\n    Index values.\n\nExamples\n--------\nGenerate an pandas.Index with duplicate values.\n\n>>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama', 'hippo'])\n\nThe `keep` parameter controls  which duplicate values are removed.\nThe value 'first' keeps the first occurrence for each\nset of duplicated entries. The default value of keep is 'first'.\n\n>>> idx.drop_duplicates(keep='first')\nIndex(['lama', 'cow', 'beetle', 'hippo'], dtype='object')\n\nThe value 'last' keeps the last occurrence for each set of duplicated\nentries.\n\n>>> idx.drop_duplicates(keep='last')\nIndex(['cow', 'beetle', 'lama', 'hippo'], dtype='object')\n\nThe value ``False`` discards all sets of duplicated entries.\n\n>>> idx.drop_duplicates(keep=False)\nIndex(['cow', 'beetle', 'hippo'], dtype='object')", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 2109, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L2109", "errors": [["PR08", "Parameter \"keep\" description should start with a capital letter"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.duplicated": {"type": "function", "docstring": "Indicate duplicate index values.\n\nDuplicated values are indicated as ``True`` values in the resulting\narray. Either all duplicates, all except the first, or all except the\nlast occurrence of duplicates can be indicated.\n\nParameters\n----------\nkeep : {'first', 'last', False}, default 'first'\n    The value or values in a set of duplicates to mark as missing.\n\n    - 'first' : Mark duplicates as ``True`` except for the first\n      occurrence.\n    - 'last' : Mark duplicates as ``True`` except for the last\n      occurrence.\n    - ``False`` : Mark all duplicates as ``True``.\n\nReturns\n-------\nnumpy.ndarray\n\nSee Also\n--------\nSeries.duplicated : Equivalent method on pandas.Series.\nDataFrame.duplicated : Equivalent method on pandas.DataFrame.\nIndex.drop_duplicates : Remove duplicate values from Index.\n\nExamples\n--------\nBy default, for each set of duplicated values, the first occurrence is\nset to False and all others to True:\n\n>>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama'])\n>>> idx.duplicated()\narray([False, False,  True, False,  True])\n\nwhich is equivalent to\n\n>>> idx.duplicated(keep='first')\narray([False, False,  True, False,  True])\n\nBy using 'last', the last occurrence of each set of duplicated values\nis set on False and all others on True:\n\n>>> idx.duplicated(keep='last')\narray([ True, False,  True, False, False])\n\nBy setting keep on ``False``, all duplicates are True:\n\n>>> idx.duplicated(keep=False)\narray([ True, False,  True, False,  True])", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 2157, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L2157", "errors": [["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.equals": {"type": "function", "docstring": "Determine if two Index objects contain the same elements.\n\nReturns\n-------\nbool\n    True if \"other\" is an Index and it has the same elements as calling\n    index; False otherwise.", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 4333, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L4333", "errors": [["PR01", "Parameters {other} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.factorize": {"type": "function", "docstring": "Encode the object as an enumerated type or categorical variable.\n\nThis method is useful for obtaining a numeric representation of an\narray when all that matters is identifying distinct values. `factorize`\nis available as both a top-level function :func:`pandas.factorize`,\nand as a method :meth:`Series.factorize` and :meth:`Index.factorize`.\n\nParameters\n----------\nsort : boolean, default False\n    Sort `uniques` and shuffle `labels` to maintain the\n    relationship.\n\nna_sentinel : int, default -1\n    Value to mark \"not found\".\n\nReturns\n-------\nlabels : ndarray\n    An integer ndarray that's an indexer into `uniques`.\n    ``uniques.take(labels)`` will have the same values as `values`.\nuniques : ndarray, Index, or Categorical\n    The unique valid values. When `values` is Categorical, `uniques`\n    is a Categorical. When `values` is some other pandas object, an\n    `Index` is returned. Otherwise, a 1-D ndarray is returned.\n\n    .. note ::\n\n       Even if there's a missing value in `values`, `uniques` will\n       *not* contain an entry for it.\n\nSee Also\n--------\ncut : Discretize continuous-valued array.\nunique : Find the unique value in an array.\n\nExamples\n--------\nThese examples all show factorize as a top-level method like\n``pd.factorize(values)``. The results are identical for methods like\n:meth:`Series.factorize`.\n\n>>> labels, uniques = pd.factorize(['b', 'b', 'a', 'c', 'b'])\n>>> labels\narray([0, 0, 1, 2, 0])\n>>> uniques\narray(['b', 'a', 'c'], dtype=object)\n\nWith ``sort=True``, the `uniques` will be sorted, and `labels` will be\nshuffled so that the relationship is the maintained.\n\n>>> labels, uniques = pd.factorize(['b', 'b', 'a', 'c', 'b'], sort=True)\n>>> labels\narray([1, 1, 0, 2, 1])\n>>> uniques\narray(['a', 'b', 'c'], dtype=object)\n\nMissing values are indicated in `labels` with `na_sentinel`\n(``-1`` by default). Note that missing values are never\nincluded in `uniques`.\n\n>>> labels, uniques = pd.factorize(['b', None, 'a', 'c', 'b'])\n>>> labels\narray([ 0, -1,  1,  2,  0])\n>>> uniques\narray(['b', 'a', 'c'], dtype=object)\n\nThus far, we've only factorized lists (which are internally coerced to\nNumPy arrays). When factorizing pandas objects, the type of `uniques`\nwill differ. For Categoricals, a `Categorical` is returned.\n\n>>> cat = pd.Categorical(['a', 'a', 'c'], categories=['a', 'b', 'c'])\n>>> labels, uniques = pd.factorize(cat)\n>>> labels\narray([0, 0, 1])\n>>> uniques\n[a, c]\nCategories (3, object): [a, b, c]\n\nNotice that ``'b'`` is in ``uniques.categories``, despite not being\npresent in ``cat.values``.\n\nFor all other pandas objects, an Index of the appropriate type is\nreturned.\n\n>>> cat = pd.Series(['a', 'a', 'c'])\n>>> labels, uniques = pd.factorize(cat)\n>>> labels\narray([0, 0, 1])\n>>> uniques\nIndex(['a', 'c'], dtype='object')", "deprecated": false, "file": "pandas/core/base.py", "file_line": 1494, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L1494", "errors": [["PR06", "Parameter \"sort\" type should use \"bool\" instead of \"boolean\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": "pandas.Series.factorize"}, "pandas.Index.identical": {"type": "function", "docstring": "Similar to equals, but check that other comparable attributes are\nalso equal.\n\nReturns\n-------\nbool\n    If two Index objects have equal elements and same type True,\n    otherwise False.", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 4360, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L4360", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {other} not documented"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.insert": {"type": "function", "docstring": "Make new Index inserting new item at location.\n\nFollows Python list.append semantics for negative values.\n\nParameters\n----------\nloc : int\nitem : object\n\nReturns\n-------\nnew_index : Index", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 5244, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L5244", "errors": [["PR07", "Parameter \"loc\" has no description"], ["PR07", "Parameter \"item\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.is_": {"type": "function", "docstring": "More flexible, faster check like ``is`` but that works through views.\n\nNote: this is *not* the same as ``Index.identical()``, which checks\nthat metadata is also the same.\n\nParameters\n----------\nother : object\n    other object to compare against.\n\nReturns\n-------\nTrue if both have same underlying data, False otherwise : bool", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 635, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L635", "errors": [["PR08", "Parameter \"other\" description should start with a capital letter"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.is_boolean": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1765, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1765", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.is_categorical": {"type": "function", "docstring": "Check if the Index holds categorical data.\n\nReturns\n-------\nboolean\n    True if the Index is categorical.\n\nSee Also\n--------\nCategoricalIndex : Index for categorical data.\n\nExamples\n--------\n>>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n...                 \"Watermelon\"]).astype(\"category\")\n>>> idx.is_categorical()\nTrue\n\n>>> idx = pd.Index([1, 3, 5, 7])\n>>> idx.is_categorical()\nFalse\n\n>>> s = pd.Series([\"Peter\", \"Victor\", \"Elisabeth\", \"Mar\"])\n>>> s\n0        Peter\n1       Victor\n2    Elisabeth\n3          Mar\ndtype: object\n>>> s.index.is_categorical()\nFalse", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1780, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1780", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.is_floating": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1771, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1771", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.is_integer": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1768, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1768", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.is_interval": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1816, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1816", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.is_mixed": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1819, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1819", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.is_numeric": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1774, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1774", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.is_object": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1777, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1777", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.min": {"type": "function", "docstring": "Return the minimum value of the Index.\n\nParameters\n----------\naxis : {None}\n    Dummy argument for consistency with Series\nskipna : bool, default True\n\nReturns\n-------\nscalar\n    Minimum value.\n\nSee Also\n--------\nIndex.max : Return the maximum value of the object.\nSeries.min : Return the minimum value in a Series.\nDataFrame.min : Return the minimum values in a DataFrame.\n\nExamples\n--------\n>>> idx = pd.Index([3, 2, 1])\n>>> idx.min()\n1\n\n>>> idx = pd.Index(['c', 'b', 'a'])\n>>> idx.min()\n'a'\n\nFor a MultiIndex, the minimum is determined lexicographically.\n\n>>> idx = pd.MultiIndex.from_product([('a', 'b'), (2, 1)])\n>>> idx.min()\n('a', 1)", "deprecated": false, "file": "pandas/core/base.py", "file_line": 1074, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L1074", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR09", "Parameter \"axis\" description should finish with \".\""], ["PR07", "Parameter \"skipna\" has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.max": {"type": "function", "docstring": "Return the maximum value of the Index.\n\nParameters\n----------\naxis : int, optional\n    For compatibility with NumPy. Only 0 or None are allowed.\nskipna : bool, default True\n\nReturns\n-------\nscalar\n    Maximum value.\n\nSee Also\n--------\nIndex.min : Return the minimum value in an Index.\nSeries.max : Return the maximum value in a Series.\nDataFrame.max : Return the maximum values in a DataFrame.\n\nExamples\n--------\n>>> idx = pd.Index([3, 2, 1])\n>>> idx.max()\n3\n\n>>> idx = pd.Index(['c', 'b', 'a'])\n>>> idx.max()\n'c'\n\nFor a MultiIndex, the maximum is determined lexicographically.\n\n>>> idx = pd.MultiIndex.from_product([('a', 'b'), (2, 1)])\n>>> idx.max()\n('b', 2)", "deprecated": false, "file": "pandas/core/base.py", "file_line": 1010, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L1010", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR07", "Parameter \"skipna\" has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.reindex": {"type": "function", "docstring": "Create index with target's values (move/add/delete values\nas necessary).\n\nParameters\n----------\ntarget : an iterable\n\nReturns\n-------\nnew_index : pd.Index\n    Resulting index.\nindexer : np.ndarray or None\n    Indices of output values in original index.", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 3313, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L3313", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {limit, method, level, tolerance} not documented"], ["PR07", "Parameter \"target\" has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.rename": {"type": "function", "docstring": "Alter Index or MultiIndex name.\n\nAble to set new names without level. Defaults to returning new index.\nLength of names must match number of levels in MultiIndex.\n\nParameters\n----------\nname : label or list of labels\n    Name(s) to set.\ninplace : boolean, default False\n    Modifies the object directly, instead of creating a new Index or\n    MultiIndex.\n\nReturns\n-------\nIndex\n    The same type as the caller or None if inplace is True.\n\nSee Also\n--------\nIndex.set_names : Able to set new names partially and by level.\n\nExamples\n--------\n>>> idx = pd.Index(['A', 'C', 'A', 'B'], name='score')\n>>> idx.rename('grade')\nIndex(['A', 'C', 'A', 'B'], dtype='object', name='grade')\n\n>>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n...                                   [2018, 2019]],\n...                                   names=['kind', 'year'])\n>>> idx\nMultiIndex([('python', 2018),\n            ('python', 2019),\n            ( 'cobra', 2018),\n            ( 'cobra', 2019)],\n           names=['kind', 'year'])\n>>> idx.rename(['species', 'year'])\nMultiIndex([('python', 2018),\n            ('python', 2019),\n            ( 'cobra', 2018),\n            ( 'cobra', 2019)],\n           names=['species', 'year'])\n>>> idx.rename('species')\nTraceback (most recent call last):\nTypeError: Must pass list-like as `names`.", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1421, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1421", "errors": [["PR06", "Parameter \"inplace\" type should use \"bool\" instead of \"boolean\""], ["EX03", "flake8 error: E127 continuation line over-indented for visual indent"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.repeat": {"type": "function", "docstring": "Repeat elements of a Index.\n\nReturns a new Index where each element of the current Index\nis repeated consecutively a given number of times.\n\nParameters\n----------\nrepeats : int or array of ints\n    The number of repetitions for each element. This should be a\n    non-negative integer. Repeating 0 times will return an empty\n    Index.\naxis : None\n    Must be ``None``. Has no effect but is accepted for compatibility\n    with numpy.\n\nReturns\n-------\nrepeated_index : Index\n    Newly created Index with repeated elements.\n\nSee Also\n--------\nSeries.repeat : Equivalent function for Series.\nnumpy.repeat : Similar method for :class:`numpy.ndarray`.\n\nExamples\n--------\n>>> idx = pd.Index(['a', 'b', 'c'])\n>>> idx\nIndex(['a', 'b', 'c'], dtype='object')\n>>> idx.repeat(2)\nIndex(['a', 'a', 'b', 'b', 'c', 'c'], dtype='object')\n>>> idx.repeat([1, 2, 3])\nIndex(['a', 'b', 'b', 'c', 'c', 'c'], dtype='object')", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 918, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L918", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.where": {"type": "function", "docstring": "Return an Index of same shape as self and whose corresponding\nentries are from self where cond is True and otherwise are from\nother.\n\nParameters\n----------\ncond : boolean array-like with the same length as self\nother : scalar, or array-like\n\nReturns\n-------\nIndex", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 3981, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L3981", "errors": [["SS06", "Summary should fit in a single line"], ["PR06", "Parameter \"cond\" type should use \"bool\" instead of \"boolean\""], ["PR07", "Parameter \"cond\" has no description"], ["PR07", "Parameter \"other\" has no description"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.take": {"type": "function", "docstring": "Return a new Index of the values selected by the indices.\n\nFor internal compatibility with numpy arrays.\n\nParameters\n----------\nindices : list\n    Indices to be taken\naxis : int, optional\n    The axis over which to select values, always 0.\nallow_fill : bool, default True\nfill_value : bool, default None\n    If allow_fill=True and fill_value is not None, indices specified by\n    -1 is regarded as NA. If Index doesn't hold NA, raise ValueError\n\nReturns\n-------\nnumpy.ndarray\n    Elements of given indices.\n\nSee Also\n--------\nnumpy.ndarray.take", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 836, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L836", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR09", "Parameter \"indices\" description should finish with \".\""], ["PR07", "Parameter \"allow_fill\" has no description"], ["PR09", "Parameter \"fill_value\" description should finish with \".\""], ["SA04", "Missing description for See Also \"numpy.ndarray.take\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.putmask": {"type": "function", "docstring": "Return a new Index of the values set with the mask.\n\nReturns\n-------\nIndex\n\nSee Also\n--------\nnumpy.ndarray.putmask", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 4310, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L4310", "errors": [["PR01", "Parameters {mask, value} not documented"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"numpy.ndarray.putmask\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.unique": {"type": "function", "docstring": "Return unique values in the index. Uniques are returned in order\nof appearance, this does NOT sort.\n\nParameters\n----------\nlevel : int or str, optional, default None\n    Only return values from specified level (for MultiIndex)\n\n    .. versionadded:: 0.23.0\n\nReturns\n-------\nIndex without duplicates\n\nSee Also\n--------\nunique\nSeries.unique", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 2102, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L2102", "errors": [["SS06", "Summary should fit in a single line"], ["PR09", "Parameter \"level\" description should finish with \".\""], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"unique\" reference"], ["SA04", "Missing description for See Also \"Series.unique\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.Index.nunique": {"type": "function", "docstring": "Return number of unique elements in the object.\n\nExcludes NA values by default.\n\nParameters\n----------\ndropna : bool, default True\n    Don't include NaN in the count.\n\nReturns\n-------\nint\n\nSee Also\n--------\nDataFrame.nunique: Method nunique for DataFrame.\nSeries.count: Count non-NA/null observations in the Series.\n\nExamples\n--------\n>>> s = pd.Series([1, 3, 5, 7, 7])\n>>> s\n0    1\n1    3\n2    5\n3    7\n4    7\ndtype: int64\n\n>>> s.nunique()\n4", "deprecated": false, "file": "pandas/core/base.py", "file_line": 1382, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L1382", "errors": [["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": "pandas.Series.nunique"}, "pandas.Index.value_counts": {"type": "function", "docstring": "Return a Series containing counts of unique values.\n\nThe resulting object will be in descending order so that the\nfirst element is the most frequently-occurring element.\nExcludes NA values by default.\n\nParameters\n----------\nnormalize : boolean, default False\n    If True then the object returned will contain the relative\n    frequencies of the unique values.\nsort : boolean, default True\n    Sort by frequencies.\nascending : boolean, default False\n    Sort in ascending order.\nbins : integer, optional\n    Rather than count values, group them into half-open bins,\n    a convenience for ``pd.cut``, only works with numeric data.\ndropna : boolean, default True\n    Don't include counts of NaN.\n\nReturns\n-------\nSeries\n\nSee Also\n--------\nSeries.count: Number of non-NA elements in a Series.\nDataFrame.count: Number of non-NA elements in a DataFrame.\n\nExamples\n--------\n>>> index = pd.Index([3, 1, 2, 3, 4, np.nan])\n>>> index.value_counts()\n3.0    2\n4.0    1\n2.0    1\n1.0    1\ndtype: int64\n\nWith `normalize` set to `True`, returns the relative frequency by\ndividing all values by the sum of values.\n\n>>> s = pd.Series([3, 1, 2, 3, 4, np.nan])\n>>> s.value_counts(normalize=True)\n3.0    0.4\n4.0    0.2\n2.0    0.2\n1.0    0.2\ndtype: float64\n\n**bins**\n\nBins can be useful for going from a continuous variable to a\ncategorical variable; instead of counting unique\napparitions of values, divide the index in the specified\nnumber of half-open bins.\n\n>>> s.value_counts(bins=3)\n(2.0, 3.0]      2\n(0.996, 2.0]    2\n(3.0, 4.0]      1\ndtype: int64\n\n**dropna**\n\nWith `dropna` set to `False` we can also see NaN index values.\n\n>>> s.value_counts(dropna=False)\n3.0    2\nNaN    1\n4.0    1\n2.0    1\n1.0    1\ndtype: int64", "deprecated": false, "file": "pandas/core/base.py", "file_line": 1281, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L1281", "errors": [["PR06", "Parameter \"normalize\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"sort\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"ascending\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"bins\" type should use \"int\" instead of \"integer\""], ["PR06", "Parameter \"dropna\" type should use \"bool\" instead of \"boolean\""], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Modifying and computations", "shared_code_with": "pandas.Series.value_counts"}, "pandas.Index.set_names": {"type": "function", "docstring": "Set Index or MultiIndex name.\n\nAble to set new names partially and by level.\n\nParameters\n----------\nnames : label or list of label\n    Name(s) to set.\nlevel : int, label or list of int or label, optional\n    If the index is a MultiIndex, level(s) to set (None for all\n    levels). Otherwise level must be None.\ninplace : bool, default False\n    Modifies the object directly, instead of creating a new Index or\n    MultiIndex.\n\nReturns\n-------\nIndex\n    The same type as the caller or None if inplace is True.\n\nSee Also\n--------\nIndex.rename : Able to set new names without level.\n\nExamples\n--------\n>>> idx = pd.Index([1, 2, 3, 4])\n>>> idx\nInt64Index([1, 2, 3, 4], dtype='int64')\n>>> idx.set_names('quarter')\nInt64Index([1, 2, 3, 4], dtype='int64', name='quarter')\n\n>>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n...                                   [2018, 2019]])\n>>> idx\nMultiIndex([('python', 2018),\n            ('python', 2019),\n            ( 'cobra', 2018),\n            ( 'cobra', 2019)],\n           )\n>>> idx.set_names(['kind', 'year'], inplace=True)\n>>> idx\nMultiIndex([('python', 2018),\n            ('python', 2019),\n            ( 'cobra', 2018),\n            ( 'cobra', 2019)],\n           names=['kind', 'year'])\n>>> idx.set_names('species', level=0)\nMultiIndex([('python', 2018),\n            ('python', 2019),\n            ( 'cobra', 2018),\n            ( 'cobra', 2019)],\n           names=['species', 'year'])", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1341, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1341", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Compatibility with MultiIndex", "shared_code_with": ""}, "pandas.Index.is_lexsorted_for_tuple": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1751, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1751", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Compatibility with MultiIndex", "shared_code_with": ""}, "pandas.Index.droplevel": {"type": "function", "docstring": "Return index with requested level(s) removed.\n\nIf resulting index has only 1 level left, the result will be\nof Index type, not MultiIndex.\n\n.. versionadded:: 0.23.1 (support for non-MultiIndex)\n\nParameters\n----------\nlevel : int, str, or list-like, default 0\n    If a string is given, must be the name of a level\n    If list-like, elements must be names or indexes of levels.\n\nReturns\n-------\nIndex or MultiIndex", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1578, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1578", "errors": [["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Compatibility with MultiIndex", "shared_code_with": ""}, "pandas.Index.fillna": {"type": "function", "docstring": "Fill NA/NaN values with the specified value\n\nParameters\n----------\nvalue : scalar\n    Scalar value to use to fill holes (e.g. 0).\n    This value cannot be a list-likes.\ndowncast : dict, default is None\n    a dict of item->dtype of what to downcast if possible,\n    or the string 'infer' which will try to downcast to an appropriate\n    equal type (e.g. float64 to int64 if possible)\n\nReturns\n-------\nfilled : Index", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 2040, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L2040", "errors": [["SS03", "Summary does not end with a period"], ["PR08", "Parameter \"downcast\" description should start with a capital letter"], ["PR09", "Parameter \"downcast\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Missing values", "shared_code_with": ""}, "pandas.Index.dropna": {"type": "function", "docstring": "Return Index without NA/NaN values\n\nParameters\n----------\nhow :  {'any', 'all'}, default 'any'\n    If the Index is a MultiIndex, drop the value when any or all levels\n    are NaN.\n\nReturns\n-------\nvalid : Index", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 2067, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L2067", "errors": [["SS03", "Summary does not end with a period"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Missing values", "shared_code_with": ""}, "pandas.Index.isna": {"type": "function", "docstring": "Detect missing values.\n\nReturn a boolean same-sized object indicating if the values are NA.\nNA values, such as ``None``, :attr:`numpy.NaN` or :attr:`pd.NaT`, get\nmapped to ``True`` values.\nEverything else get mapped to ``False`` values. Characters such as\nempty strings `''` or :attr:`numpy.inf` are not considered NA values\n(unless you set ``pandas.options.mode.use_inf_as_na = True``).\n\n.. versionadded:: 0.20.0\n\nReturns\n-------\nnumpy.ndarray\n    A boolean array of whether my values are NA.\n\nSee Also\n--------\nIndex.notna : Boolean inverse of isna.\nIndex.dropna : Omit entries with missing values.\nisna : Top-level isna.\nSeries.isna : Detect missing values in Series object.\n\nExamples\n--------\nShow which entries in a pandas.Index are NA. The result is an\narray.\n\n>>> idx = pd.Index([5.2, 6.0, np.NaN])\n>>> idx\nFloat64Index([5.2, 6.0, nan], dtype='float64')\n>>> idx.isna()\narray([False, False,  True], dtype=bool)\n\nEmpty strings are not considered NA values. None is considered an NA\nvalue.\n\n>>> idx = pd.Index(['black', '', 'red', None])\n>>> idx\nIndex(['black', '', 'red', None], dtype='object')\n>>> idx.isna()\narray([False, False, False,  True], dtype=bool)\n\nFor datetimes, `NaT` (Not a Time) is considered as an NA value.\n\n>>> idx = pd.DatetimeIndex([pd.Timestamp('1940-04-25'),\n...                         pd.Timestamp(''), None, pd.NaT])\n>>> idx\nDatetimeIndex(['1940-04-25', 'NaT', 'NaT', 'NaT'],\n              dtype='datetime64[ns]', freq=None)\n>>> idx.isna()\narray([False,  True,  True,  True], dtype=bool)", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1913, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1913", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 33, in pandas.Index.isna\nFailed example:\n    idx.isna()\nExpected:\n    array([False, False,  True], dtype=bool)\nGot:\n    array([False, False,  True])\n**********************************************************************\nLine 42, in pandas.Index.isna\nFailed example:\n    idx.isna()\nExpected:\n    array([False, False, False,  True], dtype=bool)\nGot:\n    array([False, False, False,  True])\n**********************************************************************\nLine 52, in pandas.Index.isna\nFailed example:\n    idx.isna()\nExpected:\n    array([False,  True,  True,  True], dtype=bool)\nGot:\n    array([False,  True,  True,  True])\n"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 33, in pandas.Index.isna\nFailed example:\n    idx.isna()\nExpected:\n    array([False, False,  True], dtype=bool)\nGot:\n    array([False, False,  True])\n**********************************************************************\nLine 42, in pandas.Index.isna\nFailed example:\n    idx.isna()\nExpected:\n    array([False, False, False,  True], dtype=bool)\nGot:\n    array([False, False, False,  True])\n**********************************************************************\nLine 52, in pandas.Index.isna\nFailed example:\n    idx.isna()\nExpected:\n    array([False,  True,  True,  True], dtype=bool)\nGot:\n    array([False,  True,  True,  True])\n", "in_api": true, "section": "Index", "subsection": "Missing values", "shared_code_with": ""}, "pandas.Index.notna": {"type": "function", "docstring": "Detect existing (non-missing) values.\n\nReturn a boolean same-sized object indicating if the values are not NA.\nNon-missing values get mapped to ``True``. Characters such as empty\nstrings ``''`` or :attr:`numpy.inf` are not considered NA values\n(unless you set ``pandas.options.mode.use_inf_as_na = True``).\nNA values, such as None or :attr:`numpy.NaN`, get mapped to ``False``\nvalues.\n\n.. versionadded:: 0.20.0\n\nReturns\n-------\nnumpy.ndarray\n    Boolean array to indicate which entries are not NA.\n\nSee Also\n--------\nIndex.notnull : Alias of notna.\nIndex.isna: Inverse of notna.\nnotna : Top-level notna.\n\nExamples\n--------\nShow which entries in an Index are not NA. The result is an\narray.\n\n>>> idx = pd.Index([5.2, 6.0, np.NaN])\n>>> idx\nFloat64Index([5.2, 6.0, nan], dtype='float64')\n>>> idx.notna()\narray([ True,  True, False])\n\nEmpty strings are not considered NA values. None is considered a NA\nvalue.\n\n>>> idx = pd.Index(['black', '', 'red', None])\n>>> idx\nIndex(['black', '', 'red', None], dtype='object')\n>>> idx.notna()\narray([ True,  True,  True, False])", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1972, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1972", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Missing values", "shared_code_with": ""}, "pandas.Index.astype": {"type": "function", "docstring": "Create an Index with values cast to dtypes. The class of a new Index\nis determined by dtype. When conversion is impossible, a ValueError\nexception is raised.\n\nParameters\n----------\ndtype : numpy dtype or pandas type\n    Note that any signed integer `dtype` is treated as ``'int64'``,\n    and any unsigned integer `dtype` is treated as ``'uint64'``,\n    regardless of the size.\ncopy : bool, default True\n    By default, astype always returns a newly allocated object.\n    If copy is set to False and internal requirements on dtype are\n    satisfied, the original data is used to create a new Index\n    or the original Index is returned.\n\nReturns\n-------\nIndex\n    Index with values cast to specified dtype.", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 774, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L774", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Conversion", "shared_code_with": ""}, "pandas.Index.item": {"type": "function", "docstring": "Return the first element of the underlying data as a python scalar.\n\n.. deprecated:: 0.25.0\n\nReturns\n-------\nscalar\n    The first element of %(klass)s.", "deprecated": true, "file": "pandas/core/base.py", "file_line": 701, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L701", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Conversion", "shared_code_with": "pandas.Series.item"}, "pandas.Index.map": {"type": "function", "docstring": "Map values using input correspondence (a dict, Series, or function).\n\nParameters\n----------\nmapper : function, dict, or Series\n    Mapping correspondence.\nna_action : {None, 'ignore'}\n    If 'ignore', propagate NA values, without passing them to the\n    mapping correspondence.\n\nReturns\n-------\napplied : Union[Index, MultiIndex], inferred\n    The output of the mapping function applied to the index.\n    If the function returns a tuple with more than one element\n    a MultiIndex will be returned.", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 4813, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L4813", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Conversion", "shared_code_with": ""}, "pandas.Index.ravel": {"type": "function", "docstring": "Return an ndarray of the flattened values of the underlying data.\n\nReturns\n-------\nnumpy.ndarray\n    Flattened array.\n\nSee Also\n--------\nnumpy.ndarray.ravel", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 722, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L722", "errors": [["PR01", "Parameters {order} not documented"], ["SA04", "Missing description for See Also \"numpy.ndarray.ravel\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Conversion", "shared_code_with": ""}, "pandas.Index.to_list": {"type": "function", "docstring": "Return a list of the values.\n\nThese are each a scalar type, which is a Python scalar\n(for str, int, float) or a pandas scalar\n(for Timestamp/Timedelta/Interval/Period)\n\nReturns\n-------\nlist\n\nSee Also\n--------\nnumpy.ndarray.tolist", "deprecated": false, "file": "pandas/core/base.py", "file_line": 1137, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L1137", "errors": [["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"numpy.ndarray.tolist\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Conversion", "shared_code_with": "pandas.Series.to_list"}, "pandas.Index.to_native_types": {"type": "function", "docstring": "Format specified values of `self` and return them.\n\nParameters\n----------\nslicer : int, array-like\n    An indexer into `self` that specifies which values\n    are used in the formatting process.\nkwargs : dict\n    Options for specifying how the values should be formatted.\n    These options include the following:\n\n    1) na_rep : str\n        The value that serves as a placeholder for NULL values\n    2) quoting : bool or None\n        Whether or not there are quoted values in `self`\n    3) date_format : str\n        The format used to represent date-like values\n\nReturns\n-------\nnumpy.ndarray\n    Formatted values.", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1086, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1086", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {kwargs}"], ["PR09", "Parameter \"kwargs\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Conversion", "shared_code_with": ""}, "pandas.Index.to_series": {"type": "function", "docstring": "Create a Series with both index and values equal to the index keys\nuseful with map for returning an indexer based on an index.\n\nParameters\n----------\nindex : Index, optional\n    index of resulting Series. If None, defaults to original index\nname : string, optional\n    name of resulting Series. If None, defaults to name of original\n    index\n\nReturns\n-------\nSeries : dtype will be based on the type of the Index values.", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1194, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1194", "errors": [["SS06", "Summary should fit in a single line"], ["PR08", "Parameter \"index\" description should start with a capital letter"], ["PR09", "Parameter \"index\" description should finish with \".\""], ["PR06", "Parameter \"name\" type should use \"str\" instead of \"string\""], ["PR08", "Parameter \"name\" description should start with a capital letter"], ["PR09", "Parameter \"name\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Conversion", "shared_code_with": ""}, "pandas.Index.to_frame": {"type": "function", "docstring": "Create a DataFrame with a column containing the Index.\n\n.. versionadded:: 0.24.0\n\nParameters\n----------\nindex : boolean, default True\n    Set the index of the returned DataFrame as the original Index.\n\nname : object, default None\n    The passed name should substitute for the index name (if it has\n    one).\n\nReturns\n-------\nDataFrame\n    DataFrame containing the original Index data.\n\nSee Also\n--------\nIndex.to_series : Convert an Index to a Series.\nSeries.to_frame : Convert Series to DataFrame.\n\nExamples\n--------\n>>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\n>>> idx.to_frame()\n       animal\nanimal\nAnt       Ant\nBear     Bear\nCow       Cow\n\nBy default, the original Index is reused. To enforce a new Index:\n\n>>> idx.to_frame(index=False)\n    animal\n0   Ant\n1  Bear\n2   Cow\n\nTo override the name of the resulting column, specify `name`:\n\n>>> idx.to_frame(index=False, name='zoo')\n    zoo\n0   Ant\n1  Bear\n2   Cow", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1221, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1221", "errors": [["PR06", "Parameter \"index\" type should use \"bool\" instead of \"boolean\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Conversion", "shared_code_with": ""}, "pandas.Index.view": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 737, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L737", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Conversion", "shared_code_with": ""}, "pandas.Index.argsort": {"type": "function", "docstring": "Return the integer indices that would sort the index.\n\nParameters\n----------\n*args\n    Passed to `numpy.ndarray.argsort`.\n**kwargs\n    Passed to `numpy.ndarray.argsort`.\n\nReturns\n-------\nnumpy.ndarray\n    Integer indices that would sort the index if used as\n    an indexer.\n\nSee Also\n--------\nnumpy.argsort : Similar method for NumPy arrays.\nIndex.sort_values : Return sorted copy of Index.\n\nExamples\n--------\n>>> idx = pd.Index(['b', 'a', 'd', 'c'])\n>>> idx\nIndex(['b', 'a', 'd', 'c'], dtype='object')\n\n>>> order = idx.argsort()\n>>> order\narray([1, 0, 3, 2])\n\n>>> idx[order]\nIndex(['a', 'b', 'c', 'd'], dtype='object')", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 4604, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L4604", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Sorting", "shared_code_with": ""}, "pandas.Index.searchsorted": {"type": "function", "docstring": "Find indices where elements should be inserted to maintain order.\n\nFind the indices into a sorted Index `self` such that, if the\ncorresponding elements in `value` were inserted before the indices,\nthe order of `self` would be preserved.\n\nParameters\n----------\nvalue : array_like\n    Values to insert into `self`.\nside : {'left', 'right'}, optional\n    If 'left', the index of the first suitable location found is given.\n    If 'right', return the last such index.  If there is no suitable\n    index, return either 0 or N (where N is the length of `self`).\nsorter : 1-D array_like, optional\n    Optional array of integer indices that sort `self` into ascending\n    order. They are typically the result of ``np.argsort``.\n\nReturns\n-------\nint or array of int\n    A scalar or array of insertion points with the\n    same shape as `value`.\n\n    .. versionchanged:: 0.24.0\n        If `value` is a scalar, an int is now always returned.\n        Previously, scalar inputs returned an 1-item array for\n        :class:`Series` and :class:`Categorical`.\n\nSee Also\n--------\nnumpy.searchsorted\n\nNotes\n-----\nBinary search is used to find the required insertion points.\n\nExamples\n--------\n\n>>> x = pd.Series([1, 2, 3])\n>>> x\n0    1\n1    2\n2    3\ndtype: int64\n\n>>> x.searchsorted(4)\n3\n\n>>> x.searchsorted([0, 4])\narray([0, 3])\n\n>>> x.searchsorted([1, 3], side='left')\narray([0, 2])\n\n>>> x.searchsorted([1, 3], side='right')\narray([1, 3])\n\n>>> x = pd.Categorical(['apple', 'bread', 'bread',\n                        'cheese', 'milk'], ordered=True)\n[apple, bread, bread, cheese, milk]\nCategories (4, object): [apple < bread < cheese < milk]\n\n>>> x.searchsorted('bread')\n1\n\n>>> x.searchsorted(['bread'], side='right')\narray([3])", "deprecated": false, "file": "pandas/core/base.py", "file_line": 1584, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L1584", "errors": [["SA04", "Missing description for See Also \"numpy.searchsorted\" reference"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 61, in pandas.Index.searchsorted\nFailed example:\n    x = pd.Categorical(['apple', 'bread', 'bread',\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Index.searchsorted[6]>\", line 1\n        x = pd.Categorical(['apple', 'bread', 'bread',\n                                                     ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 66, in pandas.Index.searchsorted\nFailed example:\n    x.searchsorted('bread')\nExpected:\n    1\nGot:\n    3\n"], ["EX03", "flake8 error: E902 TokenError: EOF in multi-line statement"], ["EX03", "flake8 error: E999 SyntaxError: invalid syntax"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 61, in pandas.Index.searchsorted\nFailed example:\n    x = pd.Categorical(['apple', 'bread', 'bread',\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Index.searchsorted[6]>\", line 1\n        x = pd.Categorical(['apple', 'bread', 'bread',\n                                                     ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 66, in pandas.Index.searchsorted\nFailed example:\n    x.searchsorted('bread')\nExpected:\n    1\nGot:\n    3\n", "in_api": true, "section": "Index", "subsection": "Sorting", "shared_code_with": ""}, "pandas.Index.sort_values": {"type": "function", "docstring": "Return a sorted copy of the index.\n\nReturn a sorted copy of the index, and optionally return the indices\nthat sorted the index itself.\n\nParameters\n----------\nreturn_indexer : bool, default False\n    Should the indices that would sort the index be returned.\nascending : bool, default True\n    Should the index values be sorted in an ascending order.\n\nReturns\n-------\nsorted_index : pandas.Index\n    Sorted copy of the index.\nindexer : numpy.ndarray, optional\n    The indices that the index itself was sorted by.\n\nSee Also\n--------\nSeries.sort_values : Sort values of a Series.\nDataFrame.sort_values : Sort values in a DataFrame.\n\nExamples\n--------\n>>> idx = pd.Index([10, 100, 1, 1000])\n>>> idx\nInt64Index([10, 100, 1, 1000], dtype='int64')\n\nSort values in ascending order (default behavior).\n\n>>> idx.sort_values()\nInt64Index([1, 10, 100, 1000], dtype='int64')\n\nSort values in descending order, and also get the indices `idx` was\nsorted by.\n\n>>> idx.sort_values(ascending=False, return_indexer=True)\n(Int64Index([1000, 100, 10, 1], dtype='int64'), array([3, 1, 0, 2]))", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 4486, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L4486", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Sorting", "shared_code_with": ""}, "pandas.Index.shift": {"type": "function", "docstring": "Shift index by desired number of time frequency increments.\n\nThis method is for shifting the values of datetime-like indexes\nby a specified time increment a given number of times.\n\nParameters\n----------\nperiods : int, default 1\n    Number of periods (or increments) to shift by,\n    can be positive or negative.\nfreq : pandas.DateOffset, pandas.Timedelta or string, optional\n    Frequency increment to shift by.\n    If None, the index is shifted by its own `freq` attribute.\n    Offset aliases are valid strings, e.g., 'D', 'W', 'M' etc.\n\nReturns\n-------\npandas.Index\n    Shifted index.\n\nSee Also\n--------\nSeries.shift : Shift values of Series.\n\nNotes\n-----\nThis method is only implemented for datetime-like index classes,\ni.e., DatetimeIndex, PeriodIndex and TimedeltaIndex.\n\nExamples\n--------\nPut the first 5 month starts of 2011 into an index.\n\n>>> month_starts = pd.date_range('1/1/2011', periods=5, freq='MS')\n>>> month_starts\nDatetimeIndex(['2011-01-01', '2011-02-01', '2011-03-01', '2011-04-01',\n               '2011-05-01'],\n              dtype='datetime64[ns]', freq='MS')\n\nShift the index by 10 days.\n\n>>> month_starts.shift(10, freq='D')\nDatetimeIndex(['2011-01-11', '2011-02-11', '2011-03-11', '2011-04-11',\n               '2011-05-11'],\n              dtype='datetime64[ns]', freq=None)\n\nThe default value of `freq` is the `freq` attribute of the index,\nwhich is 'MS' (month start) in this example.\n\n>>> month_starts.shift(10)\nDatetimeIndex(['2011-11-01', '2011-12-01', '2012-01-01', '2012-02-01',\n               '2012-03-01'],\n              dtype='datetime64[ns]', freq='MS')", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 4546, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L4546", "errors": [["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Time-specific operations", "shared_code_with": ""}, "pandas.Index.append": {"type": "function", "docstring": "Append a collection of Index options together.\n\nParameters\n----------\nother : Index or list/tuple of indices\n\nReturns\n-------\nappended : Index", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 4255, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L4255", "errors": [["PR07", "Parameter \"other\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Combining / joining / set operations", "shared_code_with": ""}, "pandas.Index.join": {"type": "function", "docstring": "Compute join_index and indexers to conform data\nstructures to the new index.\n\nParameters\n----------\nother : Index\nhow : {'left', 'right', 'inner', 'outer'}\nlevel : int or level name, default None\nreturn_indexers : boolean, default False\nsort : boolean, default False\n    Sort the join keys lexicographically in the result Index. If False,\n    the order of the join keys depends on the join type (how keyword)\n\n    .. versionadded:: 0.20.0\n\nReturns\n-------\njoin_index, (left_indexer, right_indexer)", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 3458, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L3458", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"other\" has no description"], ["PR07", "Parameter \"how\" has no description"], ["PR07", "Parameter \"level\" has no description"], ["PR06", "Parameter \"return_indexers\" type should use \"bool\" instead of \"boolean\""], ["PR07", "Parameter \"return_indexers\" has no description"], ["PR06", "Parameter \"sort\" type should use \"bool\" instead of \"boolean\""], ["PR09", "Parameter \"sort\" description should finish with \".\""], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Combining / joining / set operations", "shared_code_with": ""}, "pandas.Index.intersection": {"type": "function", "docstring": "Form the intersection of two Index objects.\n\nThis returns a new Index with elements common to the index and `other`.\n\nParameters\n----------\nother : Index or array-like\nsort : False or None, default False\n    Whether to sort the resulting index.\n\n    * False : do not sort the result.\n    * None : sort the result, except when `self` and `other` are equal\n      or when the values cannot be compared.\n\n    .. versionadded:: 0.24.0\n\n    .. versionchanged:: 0.24.1\n\n       Changed the default from ``True`` to ``False``, to match\n       the behaviour of 0.23.4 and earlier.\n\nReturns\n-------\nintersection : Index\n\nExamples\n--------\n\n>>> idx1 = pd.Index([1, 2, 3, 4])\n>>> idx2 = pd.Index([3, 4, 5, 6])\n>>> idx1.intersection(idx2)\nInt64Index([3, 4], dtype='int64')", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 2585, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L2585", "errors": [["PR07", "Parameter \"other\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Combining / joining / set operations", "shared_code_with": ""}, "pandas.Index.union": {"type": "function", "docstring": "Form the union of two Index objects.\n\nIf the Index objects are incompatible, both Index objects will be\ncast to dtype('object') first.\n\n    .. versionchanged:: 0.25.0\n\nParameters\n----------\nother : Index or array-like\nsort : bool or None, default None\n    Whether to sort the resulting Index.\n\n    * None : Sort the result, except when\n\n      1. `self` and `other` are equal.\n      2. `self` or `other` has length 0.\n      3. Some values in `self` or `other` cannot be compared.\n         A RuntimeWarning is issued in this case.\n\n    * False : do not sort the result.\n\n    .. versionadded:: 0.24.0\n\n    .. versionchanged:: 0.24.1\n\n       Changed the default value from ``True`` to ``None``\n       (without change in behaviour).\n\nReturns\n-------\nunion : Index\n\nExamples\n--------\n\nUnion matching dtypes\n\n>>> idx1 = pd.Index([1, 2, 3, 4])\n>>> idx2 = pd.Index([3, 4, 5, 6])\n>>> idx1.union(idx2)\nInt64Index([1, 2, 3, 4, 5, 6], dtype='int64')\n\nUnion mismatched dtypes\n\n>>> idx1 = pd.Index(['a', 'b', 'c', 'd'])\n>>> idx2 = pd.Index([1, 2, 3, 4])\n>>> idx1.union(idx2)\nIndex(['a', 'b', 'c', 'd', 1, 2, 3, 4], dtype='object')", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 2413, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L2413", "errors": [["PR07", "Parameter \"other\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Combining / joining / set operations", "shared_code_with": ""}, "pandas.Index.difference": {"type": "function", "docstring": "Return a new Index with elements from the index that are not in\n`other`.\n\nThis is the set difference of two Index objects.\n\nParameters\n----------\nother : Index or array-like\nsort : False or None, default None\n    Whether to sort the resulting index. By default, the\n    values are attempted to be sorted, but any TypeError from\n    incomparable elements is caught by pandas.\n\n    * None : Attempt to sort the result, but catch any TypeErrors\n      from comparing incomparable elements.\n    * False : Do not sort the result.\n\n    .. versionadded:: 0.24.0\n\n    .. versionchanged:: 0.24.1\n\n       Changed the default value from ``True`` to ``None``\n       (without change in behaviour).\n\nReturns\n-------\ndifference : Index\n\nExamples\n--------\n\n>>> idx1 = pd.Index([2, 1, 3, 4])\n>>> idx2 = pd.Index([3, 4, 5, 6])\n>>> idx1.difference(idx2)\nInt64Index([1, 2], dtype='int64')\n>>> idx1.difference(idx2, sort=False)\nInt64Index([2, 1], dtype='int64')", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 2639, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L2639", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"other\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Combining / joining / set operations", "shared_code_with": ""}, "pandas.Index.symmetric_difference": {"type": "function", "docstring": "Compute the symmetric difference of two Index objects.\n\nParameters\n----------\nother : Index or array-like\nresult_name : str\nsort : False or None, default None\n    Whether to sort the resulting index. By default, the\n    values are attempted to be sorted, but any TypeError from\n    incomparable elements is caught by pandas.\n\n    * None : Attempt to sort the result, but catch any TypeErrors\n      from comparing incomparable elements.\n    * False : Do not sort the result.\n\n    .. versionadded:: 0.24.0\n\n    .. versionchanged:: 0.24.1\n\n       Changed the default value from ``True`` to ``None``\n       (without change in behaviour).\n\nReturns\n-------\nsymmetric_difference : Index\n\nNotes\n-----\n``symmetric_difference`` contains elements that appear in either\n``idx1`` or ``idx2`` but not both. Equivalent to the Index created by\n``idx1.difference(idx2) | idx2.difference(idx1)`` with duplicates\ndropped.\n\nExamples\n--------\n>>> idx1 = pd.Index([1, 2, 3, 4])\n>>> idx2 = pd.Index([2, 3, 4, 5])\n>>> idx1.symmetric_difference(idx2)\nInt64Index([1, 5], dtype='int64')\n\nYou can also use the ``^`` operator:\n\n>>> idx1 ^ idx2\nInt64Index([1, 5], dtype='int64')", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 2703, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L2703", "errors": [["PR07", "Parameter \"other\" has no description"], ["PR07", "Parameter \"result_name\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Combining / joining / set operations", "shared_code_with": ""}, "pandas.Index.asof": {"type": "function", "docstring": "Return the label from the index, or, if not present, the previous one.\n\nAssuming that the index is sorted, return the passed index label if it\nis in the index, or return the previous index label if the passed one\nis not in the index.\n\nParameters\n----------\nlabel : object\n    The label up to which the method returns the latest index label.\n\nReturns\n-------\nobject\n    The passed label if it is in the index. The previous label if the\n    passed label is not in the sorted index or `NaN` if there is no\n    such label.\n\nSee Also\n--------\nSeries.asof : Return the latest value in a Series up to the\n    passed index.\nmerge_asof : Perform an asof merge (similar to left join but it\n    matches on nearest key rather than equal key).\nIndex.get_loc : An `asof` is a thin wrapper around `get_loc`\n    with method='pad'.\n\nExamples\n--------\n`Index.asof` returns the latest index label up to the passed label.\n\n>>> idx = pd.Index(['2013-12-31', '2014-01-02', '2014-01-03'])\n>>> idx.asof('2014-01-01')\n'2013-12-31'\n\nIf the label is in the index, the method returns the passed label.\n\n>>> idx.asof('2014-01-02')\n'2014-01-02'\n\nIf all of the labels in the index are later than the passed label,\nNaN is returned.\n\n>>> idx.asof('1999-01-02')\nnan\n\nIf the index is not sorted, an error is raised.\n\n>>> idx_not_sorted = pd.Index(['2013-12-31', '2015-01-02',\n...                            '2014-01-03'])\n>>> idx_not_sorted.asof('2013-12-31')\nTraceback (most recent call last):\nValueError: index must be monotonic increasing or decreasing", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 4382, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L4382", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Selecting", "shared_code_with": ""}, "pandas.Index.asof_locs": {"type": "function", "docstring": "Find the locations (indices) of the labels from the index for\nevery entry in the `where` argument.\n\nAs in the `asof` function, if the label (a particular entry in\n`where`) is not in the index, the latest index label upto the\npassed label is chosen and its index returned.\n\nIf all of the labels in the index are later than a label in `where`,\n-1 is returned.\n\n`mask` is used to ignore NA values in the index during calculation.\n\nParameters\n----------\nwhere : Index\n    An Index consisting of an array of timestamps.\nmask : array-like\n    Array of booleans denoting where values in the original\n    data are not NA.\n\nReturns\n-------\nnumpy.ndarray\n    An array of locations (indices) of the labels from the Index\n    which correspond to the return values of the `asof` function\n    for every element in `where`.", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 4447, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L4447", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Selecting", "shared_code_with": ""}, "pandas.Index.contains": {"type": "function", "docstring": "Return a boolean indicating whether the provided key is in the index.\n\n.. deprecated:: 0.25.0\n    Use ``key in index`` instead of ``index.contains(key)``.\n\nReturns\n-------\nbool", "deprecated": true, "file": "pandas/core/indexes/base.py", "file_line": 4181, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L4181", "errors": [["PR01", "Parameters {key} not documented"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Selecting", "shared_code_with": ""}, "pandas.Index.get_duplicates": {"type": "function", "docstring": "Extract duplicated index elements.\n\n.. deprecated:: 0.23.0\n    Use idx[idx.duplicated()].unique() instead\n\nReturns a sorted list of index elements which appear more than once in\nthe index.\n\nReturns\n-------\narray-like\n    List of duplicated indexes.\n\nSee Also\n--------\nIndex.duplicated : Return boolean array denoting duplicates.\nIndex.drop_duplicates : Return Index with duplicates removed.\n\nExamples\n--------\n\nWorks on different Index of types.\n\n>>> pd.Index([1, 2, 2, 3, 3, 3, 4]).get_duplicates()  # doctest: +SKIP\n[2, 3]\n\nNote that for a DatetimeIndex, it does not return a list but a new\nDatetimeIndex:\n\n>>> dates = pd.to_datetime(['2018-01-01', '2018-01-02', '2018-01-03',\n...                         '2018-01-03', '2018-01-04', '2018-01-04'],\n...                        format='%Y-%m-%d')\n>>> pd.Index(dates).get_duplicates()  # doctest: +SKIP\nDatetimeIndex(['2018-01-03', '2018-01-04'],\n              dtype='datetime64[ns]', freq=None)\n\nSorts duplicated elements even when indexes are unordered.\n\n>>> pd.Index([1, 2, 3, 2, 3, 4, 3]).get_duplicates()  # doctest: +SKIP\n[2, 3]\n\nReturn empty array-like structure when all elements are unique.\n\n>>> pd.Index([1, 2, 3, 4]).get_duplicates()  # doctest: +SKIP\n[]\n>>> dates = pd.to_datetime(['2018-01-01', '2018-01-02', '2018-01-03'],\n...                        format='%Y-%m-%d')\n>>> pd.Index(dates).get_duplicates()  # doctest: +SKIP\nDatetimeIndex([], dtype='datetime64[ns]', freq=None)", "deprecated": true, "file": "pandas/core/indexes/base.py", "file_line": 2213, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L2213", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Selecting", "shared_code_with": ""}, "pandas.Index.get_indexer": {"type": "function", "docstring": "Compute indexer and mask for new index given the current index. The\nindexer should be then used as an input to ndarray.take to align the\ncurrent data to the new index.\n\nParameters\n----------\ntarget : Index\nmethod : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional\n    * default: exact matches only.\n    * pad / ffill: find the PREVIOUS index value if no exact match.\n    * backfill / bfill: use NEXT index value if no exact match\n    * nearest: use the NEAREST index value if no exact match. Tied\n      distances are broken by preferring the larger index value.\nlimit : int, optional\n    Maximum number of consecutive labels in ``target`` to match for\n    inexact matches.\ntolerance : optional\n    Maximum distance between original and new labels for inexact\n    matches. The values of the index at the matching locations most\n    satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n    Tolerance may be a scalar value, which applies the same tolerance\n    to all values, or list-like, which applies variable tolerance per\n    element. List-like includes list, tuple, array, Series, and must be\n    the same size as the index and its dtype must exactly match the\n    index's type.\n\n    .. versionadded:: 0.21.0 (list-like tolerance)\n\nReturns\n-------\nindexer : ndarray of int\n    Integers from 0 to n - 1 indicating that the index at these\n    positions matches the corresponding target values. Missing values\n    in the target are marked by -1.\n\nExamples\n--------\n>>> index = pd.Index(['c', 'a', 'b'])\n>>> index.get_indexer(['a', 'b', 'x'])\narray([ 1,  2, -1])\n\nNotice that the return value is an array of locations in ``index``\nand ``x`` is marked by -1, as it is not in ``index``.", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 2909, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L2909", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"target\" has no description"], ["PR08", "Parameter \"method\" description should start with a capital letter"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Selecting", "shared_code_with": ""}, "pandas.Index.get_indexer_for": {"type": "function", "docstring": "Guaranteed return of an indexer even when non-unique.\n\nThis dispatches to get_indexer or get_indexer_nonunique\nas appropriate.\n\nReturns\n-------\nnumpy.ndarray\n    List of indices.", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 4758, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L4758", "errors": [["PR01", "Parameters {**kwargs, target} not documented"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Selecting", "shared_code_with": ""}, "pandas.Index.get_indexer_non_unique": {"type": "function", "docstring": "Compute indexer and mask for new index given the current index. The\nindexer should be then used as an input to ndarray.take to align the\ncurrent data to the new index.\n\nParameters\n----------\ntarget : Index\n\nReturns\n-------\nindexer : ndarray of int\n    Integers from 0 to n - 1 indicating that the index at these\n    positions matches the corresponding target values. Missing values\n    in the target are marked by -1.\nmissing : ndarray of int\n    An indexer into the target of the values not found.\n    These correspond to the -1 in the indexer array.", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 4741, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L4741", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"target\" has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Selecting", "shared_code_with": ""}, "pandas.Index.get_level_values": {"type": "function", "docstring": "Return an Index of values for requested level.\n\nThis is primarily useful to get an individual level of values from a\nMultiIndex, but is provided on Index as well for compatibility.\n\nParameters\n----------\nlevel : int or str\n    It is either the integer position or the name of the level.\n\nReturns\n-------\nIndex\n    Calling object, as there is only one level in the Index.\n\nSee Also\n--------\nMultiIndex.get_level_values : Get values for a level of a MultiIndex.\n\nNotes\n-----\nFor Index, level should be 0, since there are no multiple levels.\n\nExamples\n--------\n\n>>> idx = pd.Index(list('abc'))\n>>> idx\nIndex(['a', 'b', 'c'], dtype='object')\n\nGet level values by supplying `level` as integer:\n\n>>> idx.get_level_values(0)\nIndex(['a', 'b', 'c'], dtype='object')", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1536, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1536", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Selecting", "shared_code_with": ""}, "pandas.Index.get_loc": {"type": "function", "docstring": "Get integer location, slice or boolean mask for requested label.\n\nParameters\n----------\nkey : label\nmethod : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional\n    * default: exact matches only.\n    * pad / ffill: find the PREVIOUS index value if no exact match.\n    * backfill / bfill: use NEXT index value if no exact match\n    * nearest: use the NEAREST index value if no exact match. Tied\n      distances are broken by preferring the larger index value.\ntolerance : int or float, optional\n    Maximum distance from index value for inexact matches. The value of\n    the index at the matching location most satisfy the equation\n    ``abs(index[loc] - key) <= tolerance``.\n\n    .. versionadded:: 0.21.0 (list-like tolerance)\n\nReturns\n-------\nloc : int if unique index, slice if monotonic index, else mask\n\nExamples\n--------\n>>> unique_index = pd.Index(list('abc'))\n>>> unique_index.get_loc('b')\n1\n\n>>> monotonic_index = pd.Index(list('abbc'))\n>>> monotonic_index.get_loc('b')\nslice(1, 3, None)\n\n>>> non_monotonic_index = pd.Index(list('abcb'))\n>>> non_monotonic_index.get_loc('b')\narray([False,  True, False,  True], dtype=bool)", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 2840, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L2840", "errors": [["PR07", "Parameter \"key\" has no description"], ["PR08", "Parameter \"method\" description should start with a capital letter"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 35, in pandas.Index.get_loc\nFailed example:\n    non_monotonic_index.get_loc('b')\nExpected:\n    array([False,  True, False,  True], dtype=bool)\nGot:\n    array([False,  True, False,  True])\n"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 35, in pandas.Index.get_loc\nFailed example:\n    non_monotonic_index.get_loc('b')\nExpected:\n    array([False,  True, False,  True], dtype=bool)\nGot:\n    array([False,  True, False,  True])\n", "in_api": true, "section": "Index", "subsection": "Selecting", "shared_code_with": ""}, "pandas.Index.get_slice_bound": {"type": "function", "docstring": "Calculate slice bound that corresponds to given label.\n\nReturns leftmost (one-past-the-rightmost if ``side=='right'``) position\nof given label.\n\nParameters\n----------\nlabel : object\nside : {'left', 'right'}\nkind : {'ix', 'loc', 'getitem'}\n\nReturns\n-------\nint\n    Index of label.", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 5079, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L5079", "errors": [["PR07", "Parameter \"label\" has no description"], ["PR07", "Parameter \"side\" has no description"], ["PR07", "Parameter \"kind\" has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Selecting", "shared_code_with": ""}, "pandas.Index.get_value": {"type": "function", "docstring": "Fast lookup of value from 1-dimensional ndarray. Only use this if you\nknow what you're doing.\n\nReturns\n-------\nscalar\n    A value in the Series with the index of the key value in self.", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 4656, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L4656", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {series, key} not documented"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Selecting", "shared_code_with": ""}, "pandas.Index.get_values": {"type": "function", "docstring": "Return `Index` data as an `numpy.ndarray`.\n\n.. deprecated:: 0.25.0\n    Use :meth:`Index.to_numpy` or :attr:`Index.array` instead.\n\nReturns\n-------\nnumpy.ndarray\n    A one-dimensional numpy array of the `Index` values.\n\nSee Also\n--------\nIndex.values : The attribute that get_values wraps.\n\nExamples\n--------\nGetting the `Index` values of a `DataFrame`:\n\n>>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n...                    index=['a', 'b', 'c'], columns=['A', 'B', 'C'])\n>>> df\n   A  B  C\na  1  2  3\nb  4  5  6\nc  7  8  9\n>>> df.index.get_values()\narray(['a', 'b', 'c'], dtype=object)\n\nStandalone `Index` values:\n\n>>> idx = pd.Index(['1', '2', '3'])\n>>> idx.get_values()\narray(['1', '2', '3'], dtype=object)\n\n`MultiIndex` arrays also have only one dimension:\n\n>>> midx = pd.MultiIndex.from_arrays([[1, 2, 3], ['a', 'b', 'c']],\n...                                  names=('number', 'letter'))\n>>> midx.get_values()\narray([(1, 'a'), (2, 'b'), (3, 'c')], dtype=object)\n>>> midx.get_values().ndim\n1", "deprecated": true, "file": "pandas/core/indexes/base.py", "file_line": 3900, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L3900", "errors": [["EX03", "flake8 error: E127 continuation line over-indented for visual indent"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Selecting", "shared_code_with": ""}, "pandas.Index.set_value": {"type": "function", "docstring": "Fast lookup of value from 1-dimensional ndarray.\n\nNotes\n-----\nOnly use this if you know what you're doing.", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 4707, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L4707", "errors": [["PR01", "Parameters {value, arr, key} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Selecting", "shared_code_with": ""}, "pandas.Index.isin": {"type": "function", "docstring": "Return a boolean array where the index values are in `values`.\n\nCompute boolean array of whether each index value is found in the\npassed set of values. The length of the returned boolean array matches\nthe length of the index.\n\nParameters\n----------\nvalues : set or list-like\n    Sought values.\nlevel : str or int, optional\n    Name or position of the index level to use (if the index is a\n    `MultiIndex`).\n\nReturns\n-------\nis_contained : ndarray\n    NumPy array of boolean values.\n\nSee Also\n--------\nSeries.isin : Same for Series.\nDataFrame.isin : Same method for DataFrames.\n\nNotes\n-----\nIn the case of `MultiIndex` you must either specify `values` as a\nlist-like object containing tuples that are the same length as the\nnumber of levels, or specify `level`. Otherwise it will raise a\n``ValueError``.\n\nIf `level` is specified:\n\n- if it is the name of one *and only one* index level, use that level;\n- otherwise it should be a number indicating level position.\n\nExamples\n--------\n>>> idx = pd.Index([1,2,3])\n>>> idx\nInt64Index([1, 2, 3], dtype='int64')\n\nCheck whether each index value in a list of values.\n>>> idx.isin([1, 4])\narray([ True, False, False])\n\n>>> midx = pd.MultiIndex.from_arrays([[1,2,3],\n...                                  ['red', 'blue', 'green']],\n...                                  names=('number', 'color'))\n>>> midx\nMultiIndex(levels=[[1, 2, 3], ['blue', 'green', 'red']],\n           codes=[[0, 1, 2], [2, 0, 1]],\n           names=['number', 'color'])\n\nCheck whether the strings in the 'color' level of the MultiIndex\nare in a list of colors.\n\n>>> midx.isin(['red', 'orange', 'yellow'], level='color')\narray([ True, False, False])\n\nTo check across the levels of a MultiIndex, pass a list of tuples:\n\n>>> midx.isin([(1, 'red'), (3, 'red')])\narray([ True, False, False])\n\nFor a DatetimeIndex, string values in `values` are converted to\nTimestamps.\n\n>>> dates = ['2000-03-11', '2000-03-12', '2000-03-13']\n>>> dti = pd.to_datetime(dates)\n>>> dti\nDatetimeIndex(['2000-03-11', '2000-03-12', '2000-03-13'],\ndtype='datetime64[ns]', freq=None)\n\n>>> dti.isin(['2000-03-11'])\narray([ True, False, False])", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 4856, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L4856", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 51, in pandas.Index.isin\nFailed example:\n    midx\nExpected:\n    MultiIndex(levels=[[1, 2, 3], ['blue', 'green', 'red']],\n               codes=[[0, 1, 2], [2, 0, 1]],\n               names=['number', 'color'])\nGot:\n    MultiIndex([(1,   'red'),\n                (2,  'blue'),\n                (3, 'green')],\n               names=['number', 'color'])\n"], ["EX03", "flake8 error: E231 missing whitespace after ',' (4 times)"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 51, in pandas.Index.isin\nFailed example:\n    midx\nExpected:\n    MultiIndex(levels=[[1, 2, 3], ['blue', 'green', 'red']],\n               codes=[[0, 1, 2], [2, 0, 1]],\n               names=['number', 'color'])\nGot:\n    MultiIndex([(1,   'red'),\n                (2,  'blue'),\n                (3, 'green')],\n               names=['number', 'color'])\n", "in_api": true, "section": "Index", "subsection": "Selecting", "shared_code_with": ""}, "pandas.Index.slice_indexer": {"type": "function", "docstring": "For an ordered or unique index, compute the slice indexer for input\nlabels and step.\n\nParameters\n----------\nstart : label, default None\n    If None, defaults to the beginning\nend : label, default None\n    If None, defaults to the end\nstep : int, default None\nkind : string, default None\n\nReturns\n-------\nindexer : slice\n\nRaises\n------\nKeyError : If key does not exist, or key is not unique and index is\n    not ordered.\n\nNotes\n-----\nThis function assumes that the data is sorted, so use at your own peril\n\nExamples\n--------\nThis is a method on all index types. For example you can do:\n\n>>> idx = pd.Index(list('abcd'))\n>>> idx.slice_indexer(start='b', end='c')\nslice(1, 3)\n\n>>> idx = pd.MultiIndex.from_arrays([list('abcd'), list('efgh')])\n>>> idx.slice_indexer(start='b', end=('c', 'g'))\nslice(1, 3)", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 4944, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L4944", "errors": [["SS06", "Summary should fit in a single line"], ["PR09", "Parameter \"start\" description should finish with \".\""], ["PR09", "Parameter \"end\" description should finish with \".\""], ["PR07", "Parameter \"step\" has no description"], ["PR06", "Parameter \"kind\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"kind\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 32, in pandas.Index.slice_indexer\nFailed example:\n    idx.slice_indexer(start='b', end='c')\nExpected:\n    slice(1, 3)\nGot:\n    slice(1, 3, None)\n**********************************************************************\nLine 36, in pandas.Index.slice_indexer\nFailed example:\n    idx.slice_indexer(start='b', end=('c', 'g'))\nExpected:\n    slice(1, 3)\nGot:\n    slice(1, 3, None)\n"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 32, in pandas.Index.slice_indexer\nFailed example:\n    idx.slice_indexer(start='b', end='c')\nExpected:\n    slice(1, 3)\nGot:\n    slice(1, 3, None)\n**********************************************************************\nLine 36, in pandas.Index.slice_indexer\nFailed example:\n    idx.slice_indexer(start='b', end=('c', 'g'))\nExpected:\n    slice(1, 3)\nGot:\n    slice(1, 3, None)\n", "in_api": true, "section": "Index", "subsection": "Selecting", "shared_code_with": ""}, "pandas.Index.slice_locs": {"type": "function", "docstring": "Compute slice locations for input labels.\n\nParameters\n----------\nstart : label, default None\n    If None, defaults to the beginning\nend : label, default None\n    If None, defaults to the end\nstep : int, defaults None\n    If None, defaults to 1\nkind : {'ix', 'loc', 'getitem'} or None\n\nReturns\n-------\nstart, end : int\n\nSee Also\n--------\nIndex.get_loc : Get location for a single label.\n\nNotes\n-----\nThis method only works if the index is monotonic or unique.\n\nExamples\n--------\n>>> idx = pd.Index(list('abcd'))\n>>> idx.slice_locs(start='b', end='c')\n(1, 3)", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 5145, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L5145", "errors": [["PR09", "Parameter \"start\" description should finish with \".\""], ["PR09", "Parameter \"end\" description should finish with \".\""], ["PR09", "Parameter \"step\" description should finish with \".\""], ["PR07", "Parameter \"kind\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Index", "subsection": "Selecting", "shared_code_with": ""}, "pandas.RangeIndex": {"type": "type", "docstring": "Immutable Index implementing a monotonic integer range.\n\nRangeIndex is a memory-saving special case of Int64Index limited to\nrepresenting monotonic ranges. Using RangeIndex may in some instances\nimprove computing speed.\n\nThis is the default index type used\nby DataFrame and Series when no explicit index is provided by the user.\n\nParameters\n----------\nstart : int (default: 0), or other RangeIndex instance\n    If int and \"stop\" is not given, interpreted as \"stop\" instead.\nstop : int (default: 0)\nstep : int (default: 1)\nname : object, optional\n    Name to be stored in the index\ncopy : bool, default False\n    Unused, accepted for homogeneity with other index types.\n\nAttributes\n----------\nstart\nstop\nstep\n\nMethods\n-------\nfrom_range\n\nSee Also\n--------\nIndex : The base pandas Index type.\nInt64Index : Index of int64 data.", "deprecated": false, "file": "pandas/core/indexes/range.py", "file_line": 36, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/range.py#L36", "errors": [["PR01", "Parameters {dtype, fastpath} not documented"], ["PR07", "Parameter \"stop\" has no description"], ["PR07", "Parameter \"step\" has no description"], ["PR09", "Parameter \"name\" description should finish with \".\""]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Numeric Index", "subsection": "Selecting", "shared_code_with": ""}, "pandas.Int64Index": {"type": "type", "docstring": "Immutable ndarray implementing an ordered, sliceable set. The basic object\nstoring axis labels for all pandas objects. Int64Index is a special case\nof `Index` with purely integer labels. \n\nParameters\n----------\ndata : array-like (1-dimensional)\ndtype : NumPy dtype (default: int64)\ncopy : bool\n    Make a copy of input ndarray\nname : object\n    Name to be stored in the index\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nSee Also\n--------\nIndex : The base pandas Index type.\n\nNotes\n-----\nAn Index instance can **only** contain hashable objects.", "deprecated": false, "file": "pandas/core/indexes/numeric.py", "file_line": 220, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/numeric.py#L220", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {fastpath} not documented"], ["PR07", "Parameter \"data\" has no description"], ["PR07", "Parameter \"dtype\" has no description"], ["PR09", "Parameter \"copy\" description should finish with \".\""], ["PR09", "Parameter \"name\" description should finish with \".\""]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Numeric Index", "subsection": "Selecting", "shared_code_with": ""}, "pandas.UInt64Index": {"type": "type", "docstring": "Immutable ndarray implementing an ordered, sliceable set. The basic object\nstoring axis labels for all pandas objects. UInt64Index is a special case\nof `Index` with purely unsigned integer labels. \n\nParameters\n----------\ndata : array-like (1-dimensional)\ndtype : NumPy dtype (default: uint64)\ncopy : bool\n    Make a copy of input ndarray\nname : object\n    Name to be stored in the index\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nSee Also\n--------\nIndex : The base pandas Index type.\n\nNotes\n-----\nAn Index instance can **only** contain hashable objects.", "deprecated": false, "file": "pandas/core/indexes/numeric.py", "file_line": 275, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/numeric.py#L275", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {fastpath} not documented"], ["PR07", "Parameter \"data\" has no description"], ["PR07", "Parameter \"dtype\" has no description"], ["PR09", "Parameter \"copy\" description should finish with \".\""], ["PR09", "Parameter \"name\" description should finish with \".\""]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Numeric Index", "subsection": "Selecting", "shared_code_with": ""}, "pandas.Float64Index": {"type": "type", "docstring": "Immutable ndarray implementing an ordered, sliceable set. The basic object\nstoring axis labels for all pandas objects. Float64Index is a special case\nof `Index` with purely float labels. \n\nParameters\n----------\ndata : array-like (1-dimensional)\ndtype : NumPy dtype (default: float64)\ncopy : bool\n    Make a copy of input ndarray\nname : object\n    Name to be stored in the index\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nSee Also\n--------\nIndex : The base pandas Index type.\n\nNotes\n-----\nAn Index instance can **only** contain hashable objects.", "deprecated": false, "file": "pandas/core/indexes/numeric.py", "file_line": 349, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/numeric.py#L349", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {fastpath} not documented"], ["PR07", "Parameter \"data\" has no description"], ["PR07", "Parameter \"dtype\" has no description"], ["PR09", "Parameter \"copy\" description should finish with \".\""], ["PR09", "Parameter \"name\" description should finish with \".\""]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Numeric Index", "subsection": "Selecting", "shared_code_with": ""}, "pandas.RangeIndex.start": {"type": "CachedProperty", "docstring": "The value of the `start` parameter (``0`` if this was not supplied)", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS03", "Summary does not end with a period"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Numeric Index", "subsection": "Selecting", "shared_code_with": "pandas.Index.name"}, "pandas.RangeIndex.stop": {"type": "CachedProperty", "docstring": "The value of the `stop` parameter", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS03", "Summary does not end with a period"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Numeric Index", "subsection": "Selecting", "shared_code_with": "pandas.RangeIndex.start"}, "pandas.RangeIndex.step": {"type": "CachedProperty", "docstring": "The value of the `step` parameter (``1`` if this was not supplied)", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS03", "Summary does not end with a period"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Numeric Index", "subsection": "Selecting", "shared_code_with": "pandas.RangeIndex.stop"}, "pandas.RangeIndex.from_range": {"type": "method", "docstring": "Create RangeIndex from a range object.\n\nReturns\n-------\nRangeIndex", "deprecated": false, "file": "pandas/core/indexes/range.py", "file_line": 130, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/range.py#L130", "errors": [["PR01", "Parameters {data, dtype, name} not documented"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Numeric Index", "subsection": "Selecting", "shared_code_with": ""}, "pandas.CategoricalIndex": {"type": "type", "docstring": "Index based on an underlying :class:`Categorical`.\n\nCategoricalIndex, like Categorical, can only take on a limited,\nand usually fixed, number of possible values (`categories`). Also,\nlike Categorical, it might have an order, but numerical operations\n(additions, divisions, ...) are not possible.\n\nParameters\n----------\ndata : array-like (1-dimensional)\n    The values of the categorical. If `categories` are given, values not in\n    `categories` will be replaced with NaN.\ncategories : index-like, optional\n    The categories for the categorical. Items need to be unique.\n    If the categories are not given here (and also not in `dtype`), they\n    will be inferred from the `data`.\nordered : bool, optional\n    Whether or not this categorical is treated as an ordered\n    categorical. If not given here or in `dtype`, the resulting\n    categorical will be unordered.\ndtype : CategoricalDtype or the string \"category\", optional\n    If :class:`CategoricalDtype`, cannot be used together with\n    `categories` or `ordered`.\n\n    .. versionadded:: 0.21.0\ncopy : bool, default False\n    Make a copy of input ndarray.\nname : object, optional\n    Name to be stored in the index.\n\nAttributes\n----------\ncodes\ncategories\nordered\n\nMethods\n-------\nrename_categories\nreorder_categories\nadd_categories\nremove_categories\nremove_unused_categories\nset_categories\nas_ordered\nas_unordered\nmap\n\nRaises\n------\nValueError\n    If the categories do not validate.\nTypeError\n    If an explicit ``ordered=True`` is given but no `categories` and the\n    `values` are not sortable.\n\nSee Also\n--------\nIndex : The base pandas Index type.\nCategorical : A categorical array.\nCategoricalDtype : Type for categorical data.\n\nNotes\n-----\nSee the `user guide\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#categoricalindex>`_\nfor more.\n\nExamples\n--------\n>>> pd.CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'])\nCategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['a', 'b', 'c'], ordered=False, dtype='category')  # noqa\n\n``CategoricalIndex`` can also be instantiated from a ``Categorical``:\n\n>>> c = pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'])\n>>> pd.CategoricalIndex(c)\nCategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['a', 'b', 'c'], ordered=False, dtype='category')  # noqa\n\nOrdered ``CategoricalIndex`` can have a min and max value.\n\n>>> ci = pd.CategoricalIndex(['a','b','c','a','b','c'], ordered=True,\n...                          categories=['c', 'b', 'a'])\n>>> ci\nCategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['c', 'b', 'a'], ordered=True, dtype='category')  # noqa\n>>> ci.min()\n'c'", "deprecated": false, "file": "pandas/core/indexes/category.py", "file_line": 57, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/category.py#L57", "errors": [["PR01", "Parameters {fastpath} not documented"], ["PR06", "Parameter \"dtype\" type should use \"str\" instead of \"string\""], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 72, in pandas.CategoricalIndex\nFailed example:\n    pd.CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'])\nExpected:\n    CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['a', 'b', 'c'], ordered=False, dtype='category')  # noqa\nGot:\n    CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['a', 'b', 'c'], ordered=False, dtype='category')\n**********************************************************************\nLine 78, in pandas.CategoricalIndex\nFailed example:\n    pd.CategoricalIndex(c)\nExpected:\n    CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['a', 'b', 'c'], ordered=False, dtype='category')  # noqa\nGot:\n    CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['a', 'b', 'c'], ordered=False, dtype='category')\n**********************************************************************\nLine 85, in pandas.CategoricalIndex\nFailed example:\n    ci\nExpected:\n    CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['c', 'b', 'a'], ordered=True, dtype='category')  # noqa\nGot:\n    CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['c', 'b', 'a'], ordered=True, dtype='category')\n"], ["EX03", "flake8 error: E231 missing whitespace after ',' (5 times)"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 72, in pandas.CategoricalIndex\nFailed example:\n    pd.CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'])\nExpected:\n    CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['a', 'b', 'c'], ordered=False, dtype='category')  # noqa\nGot:\n    CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['a', 'b', 'c'], ordered=False, dtype='category')\n**********************************************************************\nLine 78, in pandas.CategoricalIndex\nFailed example:\n    pd.CategoricalIndex(c)\nExpected:\n    CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['a', 'b', 'c'], ordered=False, dtype='category')  # noqa\nGot:\n    CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['a', 'b', 'c'], ordered=False, dtype='category')\n**********************************************************************\nLine 85, in pandas.CategoricalIndex\nFailed example:\n    ci\nExpected:\n    CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['c', 'b', 'a'], ordered=True, dtype='category')  # noqa\nGot:\n    CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['c', 'b', 'a'], ordered=True, dtype='category')\n", "in_api": true, "section": "CategoricalIndex", "subsection": "Selecting", "shared_code_with": ""}, "pandas.CategoricalIndex.codes": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/core/indexes/category.py", "file_line": 393, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/category.py#L393", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CategoricalIndex", "subsection": "Categorical components", "shared_code_with": ""}, "pandas.CategoricalIndex.categories": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/core/indexes/category.py", "file_line": 397, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/category.py#L397", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CategoricalIndex", "subsection": "Categorical components", "shared_code_with": ""}, "pandas.CategoricalIndex.ordered": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/core/indexes/category.py", "file_line": 401, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/category.py#L401", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "CategoricalIndex", "subsection": "Categorical components", "shared_code_with": ""}, "pandas.CategoricalIndex.rename_categories": {"type": "function", "docstring": "Rename categories.\n\nParameters\n----------\nnew_categories : list-like, dict-like or callable\n\n   * list-like: all items must be unique and the number of items in\n     the new categories must match the existing number of categories.\n\n   * dict-like: specifies a mapping from\n     old categories to new. Categories not contained in the mapping\n     are passed through and extra categories in the mapping are\n     ignored.\n\n     .. versionadded:: 0.21.0\n\n   * callable : a callable that is called on all items in the old\n     categories and whose return values comprise the new categories.\n\n     .. versionadded:: 0.23.0\n\ninplace : bool, default False\n   Whether or not to rename the categories inplace or return a copy of\n   this categorical with renamed categories.\n\nReturns\n-------\ncat : Categorical or None\n   With ``inplace=False``, the new categorical is returned.\n   With ``inplace=True``, there is no return value.\n\nRaises\n------\nValueError\n    If new categories are list-like and do not have the same number of\n    items than the current categories or do not validate as categories\n\nSee Also\n--------\nreorder_categories\nadd_categories\nremove_categories\nremove_unused_categories\nset_categories\n\nExamples\n--------\n>>> c = pd.Categorical(['a', 'a', 'b'])\n>>> c.rename_categories([0, 1])\n[0, 0, 1]\nCategories (2, int64): [0, 1]\n\nFor dict-like ``new_categories``, extra keys are ignored and\ncategories not in the dictionary are passed through\n\n>>> c.rename_categories({'a': 'A', 'c': 'C'})\n[A, A, b]\nCategories (2, object): [A, b]\n\nYou may also provide a callable to create the new categories\n\n>>> c.rename_categories(lambda x: x.upper())\n[A, A, B]\nCategories (2, object): [A, B]", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {inplace, new_categories}"], ["PR08", "Parameter \"new_categories\" description should start with a capital letter"], ["PR09", "Parameter \"new_categories\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["SA04", "Missing description for See Also \"reorder_categories\" reference"], ["SA04", "Missing description for See Also \"add_categories\" reference"], ["SA04", "Missing description for See Also \"remove_categories\" reference"], ["SA04", "Missing description for See Also \"remove_unused_categories\" reference"], ["SA04", "Missing description for See Also \"set_categories\" reference"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "CategoricalIndex", "subsection": "Categorical components", "shared_code_with": "pandas.Series.cat.as_unordered"}, "pandas.CategoricalIndex.reorder_categories": {"type": "function", "docstring": "Reorder categories as specified in new_categories.\n\n`new_categories` need to include all old categories and no new category\nitems.\n\nParameters\n----------\nnew_categories : Index-like\n   The categories in new order.\nordered : bool, optional\n   Whether or not the categorical is treated as a ordered categorical.\n   If not given, do not change the ordered information.\ninplace : bool, default False\n   Whether or not to reorder the categories inplace or return a copy of\n   this categorical with reordered categories.\n\nReturns\n-------\ncat : Categorical with reordered categories or None if inplace.\n\nRaises\n------\nValueError\n    If the new categories do not contain all old category items or any\n    new ones\n\nSee Also\n--------\nrename_categories\nadd_categories\nremove_categories\nremove_unused_categories\nset_categories", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {inplace, new_categories, ordered}"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"rename_categories\" reference"], ["SA04", "Missing description for See Also \"add_categories\" reference"], ["SA04", "Missing description for See Also \"remove_categories\" reference"], ["SA04", "Missing description for See Also \"remove_unused_categories\" reference"], ["SA04", "Missing description for See Also \"set_categories\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CategoricalIndex", "subsection": "Categorical components", "shared_code_with": "pandas.CategoricalIndex.rename_categories"}, "pandas.CategoricalIndex.add_categories": {"type": "function", "docstring": "Add new categories.\n\n`new_categories` will be included at the last/highest place in the\ncategories and will be unused directly after this call.\n\nParameters\n----------\nnew_categories : category or list-like of category\n   The new categories to be included.\ninplace : bool, default False\n   Whether or not to add the categories inplace or return a copy of\n   this categorical with added categories.\n\nReturns\n-------\ncat : Categorical with new categories added or None if inplace.\n\nRaises\n------\nValueError\n    If the new categories include old categories or do not validate as\n    categories\n\nSee Also\n--------\nrename_categories\nreorder_categories\nremove_categories\nremove_unused_categories\nset_categories", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {inplace, new_categories}"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"rename_categories\" reference"], ["SA04", "Missing description for See Also \"reorder_categories\" reference"], ["SA04", "Missing description for See Also \"remove_categories\" reference"], ["SA04", "Missing description for See Also \"remove_unused_categories\" reference"], ["SA04", "Missing description for See Also \"set_categories\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CategoricalIndex", "subsection": "Categorical components", "shared_code_with": "pandas.CategoricalIndex.reorder_categories"}, "pandas.CategoricalIndex.remove_categories": {"type": "function", "docstring": "Remove the specified categories.\n\n`removals` must be included in the old categories. Values which were in\nthe removed categories will be set to NaN\n\nParameters\n----------\nremovals : category or list of categories\n   The categories which should be removed.\ninplace : bool, default False\n   Whether or not to remove the categories inplace or return a copy of\n   this categorical with removed categories.\n\nReturns\n-------\ncat : Categorical with removed categories or None if inplace.\n\nRaises\n------\nValueError\n    If the removals are not contained in the categories\n\nSee Also\n--------\nrename_categories\nreorder_categories\nadd_categories\nremove_unused_categories\nset_categories", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {removals, inplace}"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"rename_categories\" reference"], ["SA04", "Missing description for See Also \"reorder_categories\" reference"], ["SA04", "Missing description for See Also \"add_categories\" reference"], ["SA04", "Missing description for See Also \"remove_unused_categories\" reference"], ["SA04", "Missing description for See Also \"set_categories\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CategoricalIndex", "subsection": "Categorical components", "shared_code_with": "pandas.CategoricalIndex.add_categories"}, "pandas.CategoricalIndex.remove_unused_categories": {"type": "function", "docstring": "Remove categories which are not used.\n\nParameters\n----------\ninplace : bool, default False\n   Whether or not to drop unused categories inplace or return a copy of\n   this categorical with unused categories dropped.\n\nReturns\n-------\ncat : Categorical with unused categories dropped or None if inplace.\n\nSee Also\n--------\nrename_categories\nreorder_categories\nadd_categories\nremove_categories\nset_categories", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {inplace}"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"rename_categories\" reference"], ["SA04", "Missing description for See Also \"reorder_categories\" reference"], ["SA04", "Missing description for See Also \"add_categories\" reference"], ["SA04", "Missing description for See Also \"remove_categories\" reference"], ["SA04", "Missing description for See Also \"set_categories\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CategoricalIndex", "subsection": "Categorical components", "shared_code_with": "pandas.CategoricalIndex.remove_categories"}, "pandas.CategoricalIndex.set_categories": {"type": "function", "docstring": "Set the categories to the specified new_categories.\n\n`new_categories` can include new categories (which will result in\nunused categories) or remove old categories (which results in values\nset to NaN). If `rename==True`, the categories will simple be renamed\n(less or more items than in old categories will result in values set to\nNaN or in unused categories respectively).\n\nThis method can be used to perform more than one action of adding,\nremoving, and reordering simultaneously and is therefore faster than\nperforming the individual steps via the more specialised methods.\n\nOn the other hand this methods does not do checks (e.g., whether the\nold categories are included in the new categories on a reorder), which\ncan result in surprising changes, for example when using special string\ndtypes on python3, which does not considers a S1 string equal to a\nsingle char python string.\n\nParameters\n----------\nnew_categories : Index-like\n   The categories in new order.\nordered : bool, default False\n   Whether or not the categorical is treated as a ordered categorical.\n   If not given, do not change the ordered information.\nrename : bool, default False\n   Whether or not the new_categories should be considered as a rename\n   of the old categories or as reordered categories.\ninplace : bool, default False\n   Whether or not to reorder the categories in-place or return a copy\n   of this categorical with reordered categories.\n\nReturns\n-------\nCategorical with reordered categories or None if inplace.\n\nRaises\n------\nValueError\n    If new_categories does not validate as categories\n\nSee Also\n--------\nrename_categories\nreorder_categories\nadd_categories\nremove_categories\nremove_unused_categories", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {inplace, new_categories, rename, ordered}"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"rename_categories\" reference"], ["SA04", "Missing description for See Also \"reorder_categories\" reference"], ["SA04", "Missing description for See Also \"add_categories\" reference"], ["SA04", "Missing description for See Also \"remove_categories\" reference"], ["SA04", "Missing description for See Also \"remove_unused_categories\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CategoricalIndex", "subsection": "Categorical components", "shared_code_with": "pandas.CategoricalIndex.remove_unused_categories"}, "pandas.CategoricalIndex.as_ordered": {"type": "function", "docstring": "Set the Categorical to be ordered.\n\nParameters\n----------\ninplace : bool, default False\n   Whether or not to set the ordered attribute in-place or return\n   a copy of this categorical with ordered set to True.\n\nReturns\n-------\nCategorical\n    Ordered Categorical.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {inplace}"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CategoricalIndex", "subsection": "Categorical components", "shared_code_with": "pandas.CategoricalIndex.set_categories"}, "pandas.CategoricalIndex.as_unordered": {"type": "function", "docstring": "Set the Categorical to be unordered.\n\nParameters\n----------\ninplace : bool, default False\n   Whether or not to set the ordered attribute in-place or return\n   a copy of this categorical with ordered set to False.\n\nReturns\n-------\nCategorical\n    Unordered Categorical.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {inplace}"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CategoricalIndex", "subsection": "Categorical components", "shared_code_with": "pandas.CategoricalIndex.as_ordered"}, "pandas.CategoricalIndex.map": {"type": "function", "docstring": "Map values using input correspondence (a dict, Series, or function).\n\nMaps the values (their categories, not the codes) of the index to new\ncategories. If the mapping correspondence is one-to-one the result is a\n:class:`~pandas.CategoricalIndex` which has the same order property as\nthe original, otherwise an :class:`~pandas.Index` is returned.\n\nIf a `dict` or :class:`~pandas.Series` is used any unmapped category is\nmapped to `NaN`. Note that if this happens an :class:`~pandas.Index`\nwill be returned.\n\nParameters\n----------\nmapper : function, dict, or Series\n    Mapping correspondence.\n\nReturns\n-------\npandas.CategoricalIndex or pandas.Index\n    Mapped index.\n\nSee Also\n--------\nIndex.map : Apply a mapping correspondence on an\n    :class:`~pandas.Index`.\nSeries.map : Apply a mapping correspondence on a\n    :class:`~pandas.Series`.\nSeries.apply : Apply more complex functions on a\n    :class:`~pandas.Series`.\n\nExamples\n--------\n>>> idx = pd.CategoricalIndex(['a', 'b', 'c'])\n>>> idx\nCategoricalIndex(['a', 'b', 'c'], categories=['a', 'b', 'c'],\n                 ordered=False, dtype='category')\n>>> idx.map(lambda x: x.upper())\nCategoricalIndex(['A', 'B', 'C'], categories=['A', 'B', 'C'],\n                 ordered=False, dtype='category')\n>>> idx.map({'a': 'first', 'b': 'second', 'c': 'third'})\nCategoricalIndex(['first', 'second', 'third'], categories=['first',\n                 'second', 'third'], ordered=False, dtype='category')\n\nIf the mapping is one-to-one the ordering of the categories is\npreserved:\n\n>>> idx = pd.CategoricalIndex(['a', 'b', 'c'], ordered=True)\n>>> idx\nCategoricalIndex(['a', 'b', 'c'], categories=['a', 'b', 'c'],\n                 ordered=True, dtype='category')\n>>> idx.map({'a': 3, 'b': 2, 'c': 1})\nCategoricalIndex([3, 2, 1], categories=[3, 2, 1], ordered=True,\n                 dtype='category')\n\nIf the mapping is not one-to-one an :class:`~pandas.Index` is returned:\n\n>>> idx.map({'a': 'first', 'b': 'second', 'c': 'first'})\nIndex(['first', 'second', 'first'], dtype='object')\n\nIf a `dict` is used, all unmapped categories are mapped to `NaN` and\nthe result is an :class:`~pandas.Index`:\n\n>>> idx.map({'a': 'first', 'b': 'second'})\nIndex(['first', 'second', nan], dtype='object')", "deprecated": false, "file": "pandas/core/indexes/category.py", "file_line": 768, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/category.py#L768", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "CategoricalIndex", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.CategoricalIndex.equals": {"type": "function", "docstring": "Determine if two CategoricalIndex objects contain the same elements.\n\nReturns\n-------\nbool\n    If two CategoricalIndex objects have equal elements True,\n    otherwise False.", "deprecated": false, "file": "pandas/core/indexes/category.py", "file_line": 308, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/category.py#L308", "errors": [["PR01", "Parameters {other} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "CategoricalIndex", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.IntervalIndex": {"type": "type", "docstring": "Immutable index of intervals that are closed on the same side.\n\n.. versionadded:: 0.20.0\n\nParameters\n----------\ndata : array-like (1-dimensional)\n    Array-like containing Interval objects from which to build the\n    IntervalIndex.\nclosed : {'left', 'right', 'both', 'neither'}, default 'right'\n    Whether the intervals are closed on the left-side, right-side, both or\n    neither.\ndtype : dtype or None, default None\n    If None, dtype will be inferred.\n\n    .. versionadded:: 0.23.0\ncopy : bool, default False\n    Copy the input data.\nname : object, optional\n     Name to be stored in the index.\nverify_integrity : bool, default True\n    Verify that the IntervalIndex is valid.\n\nAttributes\n----------\nleft\nright\nclosed\nmid\nlength\nis_empty\nis_non_overlapping_monotonic\nis_overlapping\nvalues\n\nMethods\n-------\nfrom_arrays\nfrom_tuples\nfrom_breaks\ncontains\noverlaps\nset_closed\nto_tuples\n\nSee Also\n--------\nIndex : The base pandas Index type.\nInterval : A bounded slice-like interval; the elements of an IntervalIndex.\ninterval_range : Function to create a fixed frequency IntervalIndex.\ncut : Bin values into discrete Intervals.\nqcut : Bin values into equal-sized Intervals based on rank or sample quantiles.\n\nNotes\n-----\nSee the `user guide\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#intervalindex>`_\nfor more.\n\nExamples\n--------\nA new ``IntervalIndex`` is typically constructed using\n:func:`interval_range`:\n\n>>> pd.interval_range(start=0, end=5)\nIntervalIndex([(0, 1], (1, 2], (2, 3], (3, 4], (4, 5]],\n              closed='right',\n              dtype='interval[int64]')\n\nIt may also be constructed using one of the constructor\nmethods: :meth:`IntervalIndex.from_arrays`,\n:meth:`IntervalIndex.from_breaks`, and :meth:`IntervalIndex.from_tuples`.\n\nSee further examples in the doc strings of ``interval_range`` and the\nmentioned constructor methods.", "deprecated": false, "file": "pandas/core/indexes/interval.py", "file_line": 201, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/interval.py#L201", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "IntervalIndex", "subsection": "Modifying and computations", "shared_code_with": ""}, "pandas.IntervalIndex.from_arrays": {"type": "method", "docstring": "Construct from two arrays defining the left and right bounds.\n\nParameters\n----------\nleft : array-like (1-dimensional)\n    Left bounds for each interval.\nright : array-like (1-dimensional)\n    Right bounds for each interval.\nclosed : {'left', 'right', 'both', 'neither'}, default 'right'\n    Whether the intervals are closed on the left-side, right-side, both\n    or neither.\ncopy : boolean, default False\n    Copy the data.\ndtype : dtype, optional\n    If None, dtype will be inferred.\n\n    .. versionadded:: 0.23.0\n\nReturns\n-------\nIntervalIndex\n\nRaises\n------\nValueError\n    When a value is missing in only one of `left` or `right`.\n    When a value in `left` is greater than the corresponding value\n    in `right`.\n\nSee Also\n--------\ninterval_range : Function to create a fixed frequency IntervalIndex.\nIntervalIndex.from_breaks : Construct an IntervalIndex from an array of\n    splits.\nIntervalIndex.from_tuples : Construct an IntervalIndex from an\n    array-like of tuples.\n\nNotes\n-----\nEach element of `left` must be less than or equal to the `right`\nelement at the same position. If an element is missing, it must be\nmissing in both `left` and `right`. A TypeError is raised when\nusing an unsupported type for `left` or `right`. At the moment,\n'category', 'object', and 'string' subtypes are not supported.\n\nExamples\n--------\n>>> IntervalIndex.from_arrays([0, 1, 2], [1, 2, 3])\nIntervalIndex([(0, 1], (1, 2], (2, 3]],\n             closed='right',\n             dtype='interval[int64]')", "deprecated": false, "file": "pandas/core/indexes/interval.py", "file_line": 261, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/interval.py#L261", "errors": [["PR01", "Parameters {name} not documented"], ["PR06", "Parameter \"copy\" type should use \"bool\" instead of \"boolean\""], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 49, in pandas.IntervalIndex.from_arrays\nFailed example:\n    IntervalIndex.from_arrays([0, 1, 2], [1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.IntervalIndex.from_arrays[0]>\", line 1, in <module>\n        IntervalIndex.from_arrays([0, 1, 2], [1, 2, 3])\n    NameError: name 'IntervalIndex' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'IntervalIndex'"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "**********************************************************************\nLine 49, in pandas.IntervalIndex.from_arrays\nFailed example:\n    IntervalIndex.from_arrays([0, 1, 2], [1, 2, 3])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.IntervalIndex.from_arrays[0]>\", line 1, in <module>\n        IntervalIndex.from_arrays([0, 1, 2], [1, 2, 3])\n    NameError: name 'IntervalIndex' is not defined\n", "in_api": true, "section": "IntervalIndex", "subsection": "IntervalIndex components", "shared_code_with": ""}, "pandas.IntervalIndex.from_tuples": {"type": "method", "docstring": "Construct an IntervalIndex from an array-like of tuples\n\nParameters\n----------\ndata : array-like (1-dimensional)\n    Array of tuples\nclosed : {'left', 'right', 'both', 'neither'}, default 'right'\n    Whether the intervals are closed on the left-side, right-side, both\n    or neither.\ncopy : boolean, default False\n    by-default copy the data, this is compat only and ignored\ndtype : dtype or None, default None\n    If None, dtype will be inferred\n\n    ..versionadded:: 0.23.0\n\nReturns\n-------\nIntervalIndex\n\nSee Also\n--------\ninterval_range : Function to create a fixed frequency IntervalIndex.\nIntervalIndex.from_arrays : Construct an IntervalIndex from a left and\n                            right array.\nIntervalIndex.from_breaks : Construct an IntervalIndex from an array of\n                            splits.\n\nExamples\n--------\n>>> pd.IntervalIndex.from_tuples([(0, 1), (1, 2)])\nIntervalIndex([(0, 1], (1, 2]],\n            closed='right', dtype='interval[int64]')", "deprecated": false, "file": "pandas/core/indexes/interval.py", "file_line": 272, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/interval.py#L272", "errors": [["SS03", "Summary does not end with a period"], ["PR01", "Parameters {name} not documented"], ["PR09", "Parameter \"data\" description should finish with \".\""], ["PR06", "Parameter \"copy\" type should use \"bool\" instead of \"boolean\""], ["PR08", "Parameter \"copy\" description should start with a capital letter"], ["PR09", "Parameter \"copy\" description should finish with \".\""], ["PR09", "Parameter \"dtype\" description should finish with \".\""], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "IntervalIndex", "subsection": "IntervalIndex components", "shared_code_with": ""}, "pandas.IntervalIndex.from_breaks": {"type": "method", "docstring": "Construct an IntervalIndex from an array of splits.\n\nParameters\n----------\nbreaks : array-like (1-dimensional)\n    Left and right bounds for each interval.\nclosed : {'left', 'right', 'both', 'neither'}, default 'right'\n    Whether the intervals are closed on the left-side, right-side, both\n    or neither.\ncopy : boolean, default False\n    copy the data\ndtype : dtype or None, default None\n    If None, dtype will be inferred\n\n    .. versionadded:: 0.23.0\n\nReturns\n-------\nIntervalIndex\n\nSee Also\n--------\ninterval_range : Function to create a fixed frequency IntervalIndex.\nIntervalIndex.from_arrays : Construct from a left and right array.\nIntervalIndex.from_tuples : Construct from a sequence of tuples.\n\nExamples\n--------\n>>> pd.IntervalIndex.from_breaks([0, 1, 2, 3])\nIntervalIndex([(0, 1], (1, 2], (2, 3]],\n              closed='right',\n              dtype='interval[int64]')", "deprecated": false, "file": "pandas/core/indexes/interval.py", "file_line": 252, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/interval.py#L252", "errors": [["PR01", "Parameters {name} not documented"], ["PR06", "Parameter \"copy\" type should use \"bool\" instead of \"boolean\""], ["PR08", "Parameter \"copy\" description should start with a capital letter"], ["PR09", "Parameter \"copy\" description should finish with \".\""], ["PR09", "Parameter \"dtype\" description should finish with \".\""], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "IntervalIndex", "subsection": "IntervalIndex components", "shared_code_with": ""}, "pandas.IntervalIndex.left": {"type": "property", "docstring": "Return the left endpoints of each Interval in the IntervalIndex as\nan Index", "deprecated": false, "file": "pandas/core/indexes/interval.py", "file_line": 345, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/interval.py#L345", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "IntervalIndex", "subsection": "IntervalIndex components", "shared_code_with": ""}, "pandas.IntervalIndex.right": {"type": "property", "docstring": "Return the right endpoints of each Interval in the IntervalIndex as\nan Index", "deprecated": false, "file": "pandas/core/indexes/interval.py", "file_line": 353, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/interval.py#L353", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "IntervalIndex", "subsection": "IntervalIndex components", "shared_code_with": ""}, "pandas.IntervalIndex.mid": {"type": "CachedProperty", "docstring": "Return the midpoint of each Interval in the IntervalIndex as an Index", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS03", "Summary does not end with a period"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "IntervalIndex", "subsection": "IntervalIndex components", "shared_code_with": "pandas.RangeIndex.step"}, "pandas.IntervalIndex.closed": {"type": "property", "docstring": "Whether the intervals are closed on the left-side, right-side, both or\nneither", "deprecated": false, "file": "pandas/core/indexes/interval.py", "file_line": 361, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/interval.py#L361", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "IntervalIndex", "subsection": "IntervalIndex components", "shared_code_with": ""}, "pandas.IntervalIndex.length": {"type": "property", "docstring": "Return an Index with entries denoting the length of each Interval in\nthe IntervalIndex", "deprecated": false, "file": "pandas/core/indexes/interval.py", "file_line": 379, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/interval.py#L379", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "IntervalIndex", "subsection": "IntervalIndex components", "shared_code_with": ""}, "pandas.IntervalIndex.values": {"type": "CachedProperty", "docstring": "Return the IntervalIndex's data as an IntervalArray.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "IntervalIndex", "subsection": "IntervalIndex components", "shared_code_with": "pandas.IntervalIndex.mid"}, "pandas.IntervalIndex.is_empty": {"type": "getset_descriptor", "docstring": "Indicates if an interval is empty, meaning it contains no points.\n\n.. versionadded:: 0.25.0\n\nReturns\n-------\nbool or ndarray\n    A boolean indicating if a scalar :class:`Interval` is empty, or a\n    boolean ``ndarray`` positionally indicating if an ``Interval`` in\n    an :class:`~arrays.IntervalArray` or :class:`IntervalIndex` is\n    empty.\n\nExamples\n--------\nAn :class:`Interval` that contains points is not empty:\n\n>>> pd.Interval(0, 1, closed='right').is_empty\nFalse\n\nAn ``Interval`` that does not contain any points is empty:\n\n>>> pd.Interval(0, 0, closed='right').is_empty\nTrue\n>>> pd.Interval(0, 0, closed='left').is_empty\nTrue\n>>> pd.Interval(0, 0, closed='neither').is_empty\nTrue\n\nAn ``Interval`` that contains a single point is not empty:\n\n>>> pd.Interval(0, 0, closed='both').is_empty\nFalse\n\nAn :class:`~arrays.IntervalArray` or :class:`IntervalIndex` returns a\nboolean ``ndarray`` positionally indicating if an ``Interval`` is\nempty:\n\n>>> ivs = [pd.Interval(0, 0, closed='neither'),\n...        pd.Interval(1, 2, closed='neither')]\n>>> pd.arrays.IntervalArray(ivs).is_empty\narray([ True, False])\n\nMissing values are not considered empty:\n\n>>> ivs = [pd.Interval(0, 0, closed='neither'), np.nan]\n>>> pd.IntervalIndex(ivs).is_empty\narray([ True, False])", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "IntervalIndex", "subsection": "IntervalIndex components", "shared_code_with": "pandas.IntervalIndex.values"}, "pandas.IntervalIndex.is_non_overlapping_monotonic": {"type": "CachedProperty", "docstring": "Return True if the IntervalIndex is non-overlapping (no Intervals share\npoints) and is either monotonic increasing or monotonic decreasing,\nelse False", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "IntervalIndex", "subsection": "IntervalIndex components", "shared_code_with": "pandas.IntervalIndex.is_empty"}, "pandas.IntervalIndex.is_overlapping": {"type": "property", "docstring": "Return True if the IntervalIndex has overlapping intervals, else False.\n\nTwo intervals overlap if they share a common point, including closed\nendpoints. Intervals that only have an open endpoint in common do not\noverlap.\n\n.. versionadded:: 0.24.0\n\nReturns\n-------\nbool\n    Boolean indicating if the IntervalIndex has overlapping intervals.\n\nSee Also\n--------\nInterval.overlaps : Check whether two Interval objects overlap.\nIntervalIndex.overlaps : Check an IntervalIndex elementwise for\n    overlaps.\n\nExamples\n--------\n>>> index = pd.IntervalIndex.from_tuples([(0, 2), (1, 3), (4, 5)])\n>>> index\nIntervalIndex([(0, 2], (1, 3], (4, 5]],\n      closed='right',\n      dtype='interval[int64]')\n>>> index.is_overlapping\nTrue\n\nIntervals that share closed endpoints overlap:\n\n>>> index = pd.interval_range(0, 3, closed='both')\n>>> index\nIntervalIndex([[0, 1], [1, 2], [2, 3]],\n      closed='both',\n      dtype='interval[int64]')\n>>> index.is_overlapping\nTrue\n\nIntervals that only have an open endpoint in common do not overlap:\n\n>>> index = pd.interval_range(0, 3, closed='left')\n>>> index\nIntervalIndex([[0, 1), [1, 2), [2, 3)],\n      closed='left',\n      dtype='interval[int64]')\n>>> index.is_overlapping\nFalse", "deprecated": false, "file": "pandas/core/indexes/interval.py", "file_line": 531, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/interval.py#L531", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "IntervalIndex", "subsection": "IntervalIndex components", "shared_code_with": ""}, "pandas.IntervalIndex.get_loc": {"type": "function", "docstring": "Get integer location, slice or boolean mask for requested label.\n\nParameters\n----------\nkey : label\nmethod : {None}, optional\n    * default: matches where the label is within an interval only.\n\nReturns\n-------\nloc : int if unique index, slice if monotonic index, else mask\n\nExamples\n--------\n>>> i1, i2 = pd.Interval(0, 1), pd.Interval(1, 2)\n>>> index = pd.IntervalIndex([i1, i2])\n>>> index.get_loc(1)\n0\n\nYou can also supply a point inside an interval.\n\n>>> index.get_loc(1.5)\n1\n\nIf a label is in several intervals, you get the locations of all the\nrelevant intervals.\n\n>>> i3 = pd.Interval(0, 2)\n>>> overlapping_index = pd.IntervalIndex([i1, i2, i3])\n>>> overlapping_index.get_loc(0.5)\narray([ True, False,  True])\n\nOnly exact matches will be returned if an interval is provided.\n\n>>> index.get_loc(pd.Interval(0, 1))\n0", "deprecated": false, "file": "pandas/core/indexes/interval.py", "file_line": 790, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/interval.py#L790", "errors": [["PR07", "Parameter \"key\" has no description"], ["PR08", "Parameter \"method\" description should start with a capital letter"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "IntervalIndex", "subsection": "IntervalIndex components", "shared_code_with": ""}, "pandas.IntervalIndex.get_indexer": {"type": "function", "docstring": "Compute indexer and mask for new index given the current index. The\nindexer should be then used as an input to ndarray.take to align the\ncurrent data to the new index.\n\nParameters\n----------\ntarget : IntervalIndex or list of Intervals\nmethod : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional\n    * default: exact matches only.\n    * pad / ffill: find the PREVIOUS index value if no exact match.\n    * backfill / bfill: use NEXT index value if no exact match\n    * nearest: use the NEAREST index value if no exact match. Tied\n      distances are broken by preferring the larger index value.\nlimit : int, optional\n    Maximum number of consecutive labels in ``target`` to match for\n    inexact matches.\ntolerance : optional\n    Maximum distance between original and new labels for inexact\n    matches. The values of the index at the matching locations most\n    satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n    Tolerance may be a scalar value, which applies the same tolerance\n    to all values, or list-like, which applies variable tolerance per\n    element. List-like includes list, tuple, array, Series, and must be\n    the same size as the index and its dtype must exactly match the\n    index's type.\n\n    .. versionadded:: 0.21.0 (list-like tolerance)\n\nReturns\n-------\nindexer : ndarray of int\n    Integers from 0 to n - 1 indicating that the index at these\n    positions matches the corresponding target values. Missing values\n    in the target are marked by -1.\n\nRaises\n------\nNotImplementedError\n    If any method argument other than the default of\n    None is specified as these are not yet implemented.\n\nExamples\n--------\n>>> index = pd.Index(['c', 'a', 'b'])\n>>> index.get_indexer(['a', 'b', 'x'])\narray([ 1,  2, -1])\n\nNotice that the return value is an array of locations in ``index``\nand ``x`` is marked by -1, as it is not in ``index``.", "deprecated": false, "file": "pandas/core/indexes/interval.py", "file_line": 859, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/interval.py#L859", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"target\" has no description"], ["PR08", "Parameter \"method\" description should start with a capital letter"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "IntervalIndex", "subsection": "IntervalIndex components", "shared_code_with": ""}, "pandas.IntervalIndex.set_closed": {"type": "function", "docstring": "Return an IntervalIndex identical to the current one, but closed on the\nspecified side\n\n.. versionadded:: 0.24.0\n\nParameters\n----------\nclosed : {'left', 'right', 'both', 'neither'}\n    Whether the intervals are closed on the left-side, right-side, both\n    or neither.\n\nReturns\n-------\nnew_index : IntervalIndex\n\nExamples\n--------\n>>> index = pd.interval_range(0, 3)\n>>> index\nIntervalIndex([(0, 1], (1, 2], (2, 3]],\n      closed='right',\n      dtype='interval[int64]')\n>>> index.set_closed('both')\nIntervalIndex([[0, 1], [1, 2], [2, 3]],\n      closed='both',\n      dtype='interval[int64]')", "deprecated": false, "file": "pandas/core/indexes/interval.py", "file_line": 369, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/interval.py#L369", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "IntervalIndex", "subsection": "IntervalIndex components", "shared_code_with": ""}, "pandas.IntervalIndex.contains": {"type": "function", "docstring": "Check elementwise if the Intervals contain the value.\n\nReturn a boolean mask whether the value is contained in the Intervals\nof the IntervalIndex.\n\n.. versionadded:: 0.25.0\n\nParameters\n----------\nother : scalar\n    The value to check whether it is contained in the Intervals.\n\nReturns\n-------\nboolean array\n\nSee Also\n--------\nInterval.contains : Check whether Interval object contains value.\nIntervalIndex.overlaps : Check if an Interval overlaps the values in the\n    IntervalIndex.\n\nExamples\n--------\n>>> intervals = pd.IntervalIndex.from_tuples([(0, 1), (1, 3), (2, 4)])\n>>> intervals\nIntervalIndex([(0, 1], (1, 3], (2, 4]],\n      closed='right',\n      dtype='interval[int64]')\n>>> intervals.contains(0.5)\narray([ True, False, False])", "deprecated": false, "file": "pandas/core/indexes/interval.py", "file_line": 1174, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/interval.py#L1174", "errors": [["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "IntervalIndex", "subsection": "IntervalIndex components", "shared_code_with": ""}, "pandas.IntervalIndex.overlaps": {"type": "function", "docstring": "Check elementwise if an Interval overlaps the values in the IntervalIndex.\n\nTwo intervals overlap if they share a common point, including closed\nendpoints. Intervals that only have an open endpoint in common do not\noverlap.\n\n.. versionadded:: 0.24.0\n\nParameters\n----------\nother : Interval\n    Interval to check against for an overlap.\n\nReturns\n-------\nndarray\n    Boolean array positionally indicating where an overlap occurs.\n\nSee Also\n--------\nInterval.overlaps : Check whether two Interval objects overlap.\n\nExamples\n--------\n>>> intervals = pd.IntervalIndex.from_tuples([(0, 1), (1, 3), (2, 4)])\n>>> intervals\nIntervalIndex([(0, 1], (1, 3], (2, 4]],\n      closed='right',\n      dtype='interval[int64]')\n>>> intervals.overlaps(pd.Interval(0.5, 1.5))\narray([ True,  True, False])\n\nIntervals that share closed endpoints overlap:\n\n>>> intervals.overlaps(pd.Interval(1, 3, closed='left'))\narray([ True,  True, True])\n\nIntervals that only have an open endpoint in common do not overlap:\n\n>>> intervals.overlaps(pd.Interval(1, 2, closed='right'))\narray([False,  True, False])", "deprecated": false, "file": "pandas/core/indexes/interval.py", "file_line": 1178, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/interval.py#L1178", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "IntervalIndex", "subsection": "IntervalIndex components", "shared_code_with": ""}, "pandas.IntervalIndex.to_tuples": {"type": "function", "docstring": "Return an Index of tuples of the form (left, right)\n\nParameters\n----------\nna_tuple : boolean, default True\n    Returns NA as a tuple if True, ``(nan, nan)``, or just as the NA\n    value itself if False, ``nan``.\n\n    .. versionadded:: 0.23.0\n\nReturns\n-------\ntuples: Index\n\nExamples\n--------\n>>> idx = pd.IntervalIndex.from_arrays([0, np.nan, 2], [1, np.nan, 3])\n>>> idx.to_tuples()\nIndex([(0.0, 1.0), (nan, nan), (2.0, 3.0)], dtype='object')\n>>> idx.to_tuples(na_tuple=False)\nIndex([(0.0, 1.0), nan, (2.0, 3.0)], dtype='object')", "deprecated": false, "file": "pandas/core/indexes/interval.py", "file_line": 323, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/interval.py#L323", "errors": [["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"], ["SS03", "Summary does not end with a period"], ["PR06", "Parameter \"na_tuple\" type should use \"bool\" instead of \"boolean\""], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "IntervalIndex", "subsection": "IntervalIndex components", "shared_code_with": ""}, "pandas.MultiIndex": {"type": "type", "docstring": "A multi-level, or hierarchical, index object for pandas objects.\n\nParameters\n----------\nlevels : sequence of arrays\n    The unique labels for each level.\ncodes : sequence of arrays\n    Integers for each level designating which label at each location.\n\n    .. versionadded:: 0.24.0\nlabels : sequence of arrays\n    Integers for each level designating which label at each location.\n\n    .. deprecated:: 0.24.0\n        Use ``codes`` instead\nsortorder : optional int\n    Level of sortedness (must be lexicographically sorted by that\n    level).\nnames : optional sequence of objects\n    Names for each of the index levels. (name is accepted for compat).\ncopy : bool, default False\n    Copy the meta-data.\nverify_integrity : bool, default True\n    Check that the levels/codes are consistent and valid.\n\nAttributes\n----------\nnames\nlevels\ncodes\nnlevels\nlevshape\n\nMethods\n-------\nfrom_arrays\nfrom_tuples\nfrom_product\nfrom_frame\nset_levels\nset_codes\nto_frame\nto_flat_index\nis_lexsorted\nsortlevel\ndroplevel\nswaplevel\nreorder_levels\nremove_unused_levels\n\nSee Also\n--------\nMultiIndex.from_arrays  : Convert list of arrays to MultiIndex.\nMultiIndex.from_product : Create a MultiIndex from the cartesian product\n                          of iterables.\nMultiIndex.from_tuples  : Convert list of tuples to a MultiIndex.\nMultiIndex.from_frame   : Make a MultiIndex from a DataFrame.\nIndex : The base pandas Index type.\n\nNotes\n-----\nSee the `user guide\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html>`_\nfor more.\n\nExamples\n--------\nA new ``MultiIndex`` is typically constructed using one of the helper\nmethods :meth:`MultiIndex.from_arrays`, :meth:`MultiIndex.from_product`\nand :meth:`MultiIndex.from_tuples`. For example (using ``.from_arrays``):\n\n>>> arrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]\n>>> pd.MultiIndex.from_arrays(arrays, names=('number', 'color'))\nMultiIndex([(1,  'red'),\n            (1, 'blue'),\n            (2,  'red'),\n            (2, 'blue')],\n           names=['number', 'color'])\n\nSee further examples for how to construct a MultiIndex in the doc strings\nof the mentioned helper methods.", "deprecated": false, "file": "pandas/core/indexes/multi.py", "file_line": 145, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L145", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {labels, verify_integrity, copy, codes, levels, names, sortorder}"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "MultiIndex", "subsection": "IntervalIndex components", "shared_code_with": ""}, "pandas.IndexSlice": {"type": "_IndexSlice", "docstring": "Create an object to more easily perform multi-index slicing\n\nSee Also\n--------\nMultiIndex.remove_unused_levels : New MultiIndex with no unused levels.\n\nNotes\n-----\nSee :ref:`Defined Levels <advanced.shown_levels>`\nfor further info on slicing a MultiIndex.\n\nExamples\n--------\n\n>>> midx = pd.MultiIndex.from_product([['A0','A1'], ['B0','B1','B2','B3']])\n>>> columns = ['foo', 'bar']\n>>> dfmi = pd.DataFrame(np.arange(16).reshape((len(midx), len(columns))),\n                        index=midx, columns=columns)\n\nUsing the default slice command:\n\n>>> dfmi.loc[(slice(None), slice('B0', 'B1')), :]\n           foo  bar\n    A0 B0    0    1\n       B1    2    3\n    A1 B0    8    9\n       B1   10   11\n\nUsing the IndexSlice class for a more intuitive command:\n\n>>> idx = pd.IndexSlice\n>>> dfmi.loc[idx[:, 'B0':'B1'], :]\n           foo  bar\n    A0 B0    0    1\n       B1    2    3\n    A1 B0    8    9\n       B1   10   11", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS03", "Summary does not end with a period"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 18, in pandas.IndexSlice\nFailed example:\n    dfmi = pd.DataFrame(np.arange(16).reshape((len(midx), len(columns))),\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.IndexSlice[2]>\", line 1\n        dfmi = pd.DataFrame(np.arange(16).reshape((len(midx), len(columns))),\n                                                                            ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 23, in pandas.IndexSlice\nFailed example:\n    dfmi.loc[(slice(None), slice('B0', 'B1')), :]\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.IndexSlice[3]>\", line 1, in <module>\n        dfmi.loc[(slice(None), slice('B0', 'B1')), :]\n    NameError: name 'dfmi' is not defined\n**********************************************************************\nLine 33, in pandas.IndexSlice\nFailed example:\n    dfmi.loc[idx[:, 'B0':'B1'], :]\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.IndexSlice[5]>\", line 1, in <module>\n        dfmi.loc[idx[:, 'B0':'B1'], :]\n    NameError: name 'dfmi' is not defined\n"], ["EX03", "flake8 error: E231 missing whitespace after ',' (4 times)"], ["EX03", "flake8 error: E902 TokenError: EOF in multi-line statement"], ["EX03", "flake8 error: E999 SyntaxError: invalid syntax"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "**********************************************************************\nLine 18, in pandas.IndexSlice\nFailed example:\n    dfmi = pd.DataFrame(np.arange(16).reshape((len(midx), len(columns))),\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.IndexSlice[2]>\", line 1\n        dfmi = pd.DataFrame(np.arange(16).reshape((len(midx), len(columns))),\n                                                                            ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 23, in pandas.IndexSlice\nFailed example:\n    dfmi.loc[(slice(None), slice('B0', 'B1')), :]\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.IndexSlice[3]>\", line 1, in <module>\n        dfmi.loc[(slice(None), slice('B0', 'B1')), :]\n    NameError: name 'dfmi' is not defined\n**********************************************************************\nLine 33, in pandas.IndexSlice\nFailed example:\n    dfmi.loc[idx[:, 'B0':'B1'], :]\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.IndexSlice[5]>\", line 1, in <module>\n        dfmi.loc[idx[:, 'B0':'B1'], :]\n    NameError: name 'dfmi' is not defined\n", "in_api": true, "section": "MultiIndex", "subsection": "IntervalIndex components", "shared_code_with": "pandas.IntervalIndex.is_non_overlapping_monotonic"}, "pandas.MultiIndex.from_arrays": {"type": "method", "docstring": "Convert arrays to MultiIndex.\n\nParameters\n----------\narrays : list / sequence of array-likes\n    Each array-like gives one level's value for each data point.\n    len(arrays) is the number of levels.\nsortorder : int or None\n    Level of sortedness (must be lexicographically sorted by that\n    level).\nnames : list / sequence of str, optional\n    Names for the levels in the index.\n\nReturns\n-------\nindex : MultiIndex\n\nSee Also\n--------\nMultiIndex.from_tuples : Convert list of tuples to MultiIndex.\nMultiIndex.from_product : Make a MultiIndex from cartesian product\n                          of iterables.\nMultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\nExamples\n--------\n>>> arrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]\n>>> pd.MultiIndex.from_arrays(arrays, names=('number', 'color'))\nMultiIndex([(1,  'red'),\n            (1, 'blue'),\n            (2,  'red'),\n            (2, 'blue')],\n           names=['number', 'color'])", "deprecated": false, "file": "pandas/core/indexes/multi.py", "file_line": 373, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L373", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex constructors", "shared_code_with": ""}, "pandas.MultiIndex.from_tuples": {"type": "method", "docstring": "Convert list of tuples to MultiIndex.\n\nParameters\n----------\ntuples : list / sequence of tuple-likes\n    Each tuple is the index of one row/column.\nsortorder : int or None\n    Level of sortedness (must be lexicographically sorted by that\n    level).\nnames : list / sequence of str, optional\n    Names for the levels in the index.\n\nReturns\n-------\nindex : MultiIndex\n\nSee Also\n--------\nMultiIndex.from_arrays : Convert list of arrays to MultiIndex.\nMultiIndex.from_product : Make a MultiIndex from cartesian product\n                          of iterables.\nMultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\nExamples\n--------\n>>> tuples = [(1, 'red'), (1, 'blue'),\n...           (2, 'red'), (2, 'blue')]\n>>> pd.MultiIndex.from_tuples(tuples, names=('number', 'color'))\nMultiIndex([(1,  'red'),\n            (1, 'blue'),\n            (2,  'red'),\n            (2, 'blue')],\n           names=['number', 'color'])", "deprecated": false, "file": "pandas/core/indexes/multi.py", "file_line": 439, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L439", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex constructors", "shared_code_with": ""}, "pandas.MultiIndex.from_product": {"type": "method", "docstring": "Make a MultiIndex from the cartesian product of multiple iterables.\n\nParameters\n----------\niterables : list / sequence of iterables\n    Each iterable has unique labels for each level of the index.\nsortorder : int or None\n    Level of sortedness (must be lexicographically sorted by that\n    level).\nnames : list / sequence of str, optional\n    Names for the levels in the index.\n\nReturns\n-------\nindex : MultiIndex\n\nSee Also\n--------\nMultiIndex.from_arrays : Convert list of arrays to MultiIndex.\nMultiIndex.from_tuples : Convert list of tuples to MultiIndex.\nMultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\nExamples\n--------\n>>> numbers = [0, 1, 2]\n>>> colors = ['green', 'purple']\n>>> pd.MultiIndex.from_product([numbers, colors],\n...                            names=['number', 'color'])\nMultiIndex([(0,  'green'),\n            (0, 'purple'),\n            (1,  'green'),\n            (1, 'purple'),\n            (2,  'green'),\n            (2, 'purple')],\n           names=['number', 'color'])", "deprecated": false, "file": "pandas/core/indexes/multi.py", "file_line": 498, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L498", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex constructors", "shared_code_with": ""}, "pandas.MultiIndex.from_frame": {"type": "method", "docstring": "Make a MultiIndex from a DataFrame.\n\n.. versionadded:: 0.24.0\n\nParameters\n----------\ndf : DataFrame\n    DataFrame to be converted to MultiIndex.\nsortorder : int, optional\n    Level of sortedness (must be lexicographically sorted by that\n    level).\nnames : list-like, optional\n    If no names are provided, use the column names, or tuple of column\n    names if the columns is a MultiIndex. If a sequence, overwrite\n    names with the given sequence.\n\nReturns\n-------\nMultiIndex\n    The MultiIndex representation of the given DataFrame.\n\nSee Also\n--------\nMultiIndex.from_arrays : Convert list of arrays to MultiIndex.\nMultiIndex.from_tuples : Convert list of tuples to MultiIndex.\nMultiIndex.from_product : Make a MultiIndex from cartesian product\n                          of iterables.\n\nExamples\n--------\n>>> df = pd.DataFrame([['HI', 'Temp'], ['HI', 'Precip'],\n...                    ['NJ', 'Temp'], ['NJ', 'Precip']],\n...                   columns=['a', 'b'])\n>>> df\n      a       b\n0    HI    Temp\n1    HI  Precip\n2    NJ    Temp\n3    NJ  Precip\n\n>>> pd.MultiIndex.from_frame(df)\nMultiIndex([('HI',   'Temp'),\n            ('HI', 'Precip'),\n            ('NJ',   'Temp'),\n            ('NJ', 'Precip')],\n           names=['a', 'b'])\n\nUsing explicit names, instead of the column names\n\n>>> pd.MultiIndex.from_frame(df, names=['state', 'observation'])\nMultiIndex([('HI',   'Temp'),\n            ('HI', 'Precip'),\n            ('NJ',   'Temp'),\n            ('NJ', 'Precip')],\n           names=['state', 'observation'])", "deprecated": false, "file": "pandas/core/indexes/multi.py", "file_line": 548, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L548", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex constructors", "shared_code_with": ""}, "pandas.MultiIndex.names": {"type": "property", "docstring": "Names of levels in MultiIndex", "deprecated": false, "file": "pandas/core/indexes/multi.py", "file_line": 1193, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L1193", "errors": [["SS03", "Summary does not end with a period"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex properties", "shared_code_with": ""}, "pandas.MultiIndex.levels": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/core/indexes/multi.py", "file_line": 616, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L616", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex properties", "shared_code_with": ""}, "pandas.MultiIndex.codes": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/core/indexes/multi.py", "file_line": 783, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L783", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex properties", "shared_code_with": ""}, "pandas.MultiIndex.nlevels": {"type": "property", "docstring": "Integer number of levels in this MultiIndex.", "deprecated": false, "file": "pandas/core/indexes/multi.py", "file_line": 1946, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L1946", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex properties", "shared_code_with": ""}, "pandas.MultiIndex.levshape": {"type": "property", "docstring": "A tuple with the length of each level.", "deprecated": false, "file": "pandas/core/indexes/multi.py", "file_line": 1953, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L1953", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex properties", "shared_code_with": ""}, "pandas.MultiIndex.set_levels": {"type": "function", "docstring": "Set new levels on MultiIndex. Defaults to returning\nnew index.\n\nParameters\n----------\nlevels : sequence or list of sequence\n    new level(s) to apply\nlevel : int, level name, or sequence of int/level names (default None)\n    level(s) to set (None for all levels)\ninplace : bool\n    if True, mutates in place\nverify_integrity : bool (default True)\n    if True, checks that levels and codes are compatible\n\nReturns\n-------\nnew index (of same type and class...etc)\n\nExamples\n--------\n>>> idx = pd.MultiIndex.from_tuples([(1, 'one'), (1, 'two'),\n                                    (2, 'one'), (2, 'two')],\n                                    names=['foo', 'bar'])\n>>> idx.set_levels([['a', 'b'], [1, 2]])\nMultiIndex([('a', 1),\n            ('a', 2),\n            ('b', 1),\n            ('b', 2)],\n           names=['foo', 'bar'])\n>>> idx.set_levels(['a', 'b'], level=0)\nMultiIndex([('a', 'one'),\n            ('a', 'two'),\n            ('b', 'one'),\n            ('b', 'two')],\n           names=['foo', 'bar'])\n>>> idx.set_levels(['a', 'b'], level='bar')\nMultiIndex([(1, 'a'),\n            (1, 'b'),\n            (2, 'a'),\n            (2, 'b')],\n           names=['foo', 'bar'])\n>>> idx.set_levels([['a', 'b'], [1, 2]], level=[0, 1])\nMultiIndex([('a', 1),\n            ('a', 2),\n            ('b', 1),\n            ('b', 2)],\n           names=['foo', 'bar'])", "deprecated": false, "file": "pandas/core/indexes/multi.py", "file_line": 708, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L708", "errors": [["SS06", "Summary should fit in a single line"], ["PR08", "Parameter \"levels\" description should start with a capital letter"], ["PR09", "Parameter \"levels\" description should finish with \".\""], ["PR08", "Parameter \"level\" description should start with a capital letter"], ["PR09", "Parameter \"level\" description should finish with \".\""], ["PR08", "Parameter \"inplace\" description should start with a capital letter"], ["PR09", "Parameter \"inplace\" description should finish with \".\""], ["PR08", "Parameter \"verify_integrity\" description should start with a capital letter"], ["PR09", "Parameter \"verify_integrity\" description should finish with \".\""], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 22, in pandas.MultiIndex.set_levels\nFailed example:\n    idx = pd.MultiIndex.from_tuples([(1, 'one'), (1, 'two'),\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.set_levels[0]>\", line 1\n        idx = pd.MultiIndex.from_tuples([(1, 'one'), (1, 'two'),\n                                                               ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 25, in pandas.MultiIndex.set_levels\nFailed example:\n    idx.set_levels([['a', 'b'], [1, 2]])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.set_levels[1]>\", line 1, in <module>\n        idx.set_levels([['a', 'b'], [1, 2]])\n    NameError: name 'idx' is not defined\n**********************************************************************\nLine 31, in pandas.MultiIndex.set_levels\nFailed example:\n    idx.set_levels(['a', 'b'], level=0)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.set_levels[2]>\", line 1, in <module>\n        idx.set_levels(['a', 'b'], level=0)\n    NameError: name 'idx' is not defined\n**********************************************************************\nLine 37, in pandas.MultiIndex.set_levels\nFailed example:\n    idx.set_levels(['a', 'b'], level='bar')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.set_levels[3]>\", line 1, in <module>\n        idx.set_levels(['a', 'b'], level='bar')\n    NameError: name 'idx' is not defined\n**********************************************************************\nLine 43, in pandas.MultiIndex.set_levels\nFailed example:\n    idx.set_levels([['a', 'b'], [1, 2]], level=[0, 1])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.set_levels[4]>\", line 1, in <module>\n        idx.set_levels([['a', 'b'], [1, 2]], level=[0, 1])\n    NameError: name 'idx' is not defined\n"], ["EX03", "flake8 error: E902 TokenError: EOF in multi-line statement"], ["EX03", "flake8 error: E999 SyntaxError: invalid syntax"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 22, in pandas.MultiIndex.set_levels\nFailed example:\n    idx = pd.MultiIndex.from_tuples([(1, 'one'), (1, 'two'),\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.set_levels[0]>\", line 1\n        idx = pd.MultiIndex.from_tuples([(1, 'one'), (1, 'two'),\n                                                               ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 25, in pandas.MultiIndex.set_levels\nFailed example:\n    idx.set_levels([['a', 'b'], [1, 2]])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.set_levels[1]>\", line 1, in <module>\n        idx.set_levels([['a', 'b'], [1, 2]])\n    NameError: name 'idx' is not defined\n**********************************************************************\nLine 31, in pandas.MultiIndex.set_levels\nFailed example:\n    idx.set_levels(['a', 'b'], level=0)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.set_levels[2]>\", line 1, in <module>\n        idx.set_levels(['a', 'b'], level=0)\n    NameError: name 'idx' is not defined\n**********************************************************************\nLine 37, in pandas.MultiIndex.set_levels\nFailed example:\n    idx.set_levels(['a', 'b'], level='bar')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.set_levels[3]>\", line 1, in <module>\n        idx.set_levels(['a', 'b'], level='bar')\n    NameError: name 'idx' is not defined\n**********************************************************************\nLine 43, in pandas.MultiIndex.set_levels\nFailed example:\n    idx.set_levels([['a', 'b'], [1, 2]], level=[0, 1])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.set_levels[4]>\", line 1, in <module>\n        idx.set_levels([['a', 'b'], [1, 2]], level=[0, 1])\n    NameError: name 'idx' is not defined\n", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex components", "shared_code_with": ""}, "pandas.MultiIndex.set_codes": {"type": "function", "docstring": "Set new codes on MultiIndex. Defaults to returning\nnew index.\n\n.. versionadded:: 0.24.0\n\n   New name for deprecated method `set_labels`.\n\nParameters\n----------\ncodes : sequence or list of sequence\n    new codes to apply\nlevel : int, level name, or sequence of int/level names (default None)\n    level(s) to set (None for all levels)\ninplace : bool\n    if True, mutates in place\nverify_integrity : bool (default True)\n    if True, checks that levels and codes are compatible\n\nReturns\n-------\nnew index (of same type and class...etc)\n\nExamples\n--------\n>>> idx = pd.MultiIndex.from_tuples([(1, 'one'),\n                                     (1, 'two'),\n                                     (2, 'one'),\n                                     (2, 'two')],\n                                    names=['foo', 'bar'])\n>>> idx.set_codes([[1, 0, 1, 0], [0, 0, 1, 1]])\nMultiIndex([(2, 'one'),\n            (1, 'one'),\n            (2, 'two'),\n            (1, 'two')],\n           names=['foo', 'bar'])\n>>> idx.set_codes([1, 0, 1, 0], level=0)\nMultiIndex([(2, 'one'),\n            (1, 'two'),\n            (2, 'one'),\n            (1, 'two')],\n           names=['foo', 'bar'])\n>>> idx.set_codes([0, 0, 1, 1], level='bar')\nMultiIndex([(1, 'one'),\n            (1, 'one'),\n            (2, 'two'),\n            (2, 'two')],\n           names=['foo', 'bar'])\n>>> idx.set_codes([[1, 0, 1, 0], [0, 0, 1, 1]], level=[0, 1])\nMultiIndex([(2, 'one'),\n            (1, 'one'),\n            (2, 'two'),\n            (1, 'two')],\n           names=['foo', 'bar'])", "deprecated": false, "file": "pandas/util/_decorators.py", "file_line": 843, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/_decorators.py#L843", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {inplace, verify_integrity, level, codes}"], ["PR08", "Parameter \"codes\" description should start with a capital letter"], ["PR09", "Parameter \"codes\" description should finish with \".\""], ["PR08", "Parameter \"level\" description should start with a capital letter"], ["PR09", "Parameter \"level\" description should finish with \".\""], ["PR08", "Parameter \"inplace\" description should start with a capital letter"], ["PR09", "Parameter \"inplace\" description should finish with \".\""], ["PR08", "Parameter \"verify_integrity\" description should start with a capital letter"], ["PR09", "Parameter \"verify_integrity\" description should finish with \".\""], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 26, in pandas.MultiIndex.set_codes\nFailed example:\n    idx = pd.MultiIndex.from_tuples([(1, 'one'),\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.set_codes[0]>\", line 1\n        idx = pd.MultiIndex.from_tuples([(1, 'one'),\n                                                   ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 31, in pandas.MultiIndex.set_codes\nFailed example:\n    idx.set_codes([[1, 0, 1, 0], [0, 0, 1, 1]])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.set_codes[1]>\", line 1, in <module>\n        idx.set_codes([[1, 0, 1, 0], [0, 0, 1, 1]])\n    NameError: name 'idx' is not defined\n**********************************************************************\nLine 37, in pandas.MultiIndex.set_codes\nFailed example:\n    idx.set_codes([1, 0, 1, 0], level=0)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.set_codes[2]>\", line 1, in <module>\n        idx.set_codes([1, 0, 1, 0], level=0)\n    NameError: name 'idx' is not defined\n**********************************************************************\nLine 43, in pandas.MultiIndex.set_codes\nFailed example:\n    idx.set_codes([0, 0, 1, 1], level='bar')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.set_codes[3]>\", line 1, in <module>\n        idx.set_codes([0, 0, 1, 1], level='bar')\n    NameError: name 'idx' is not defined\n**********************************************************************\nLine 49, in pandas.MultiIndex.set_codes\nFailed example:\n    idx.set_codes([[1, 0, 1, 0], [0, 0, 1, 1]], level=[0, 1])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.set_codes[4]>\", line 1, in <module>\n        idx.set_codes([[1, 0, 1, 0], [0, 0, 1, 1]], level=[0, 1])\n    NameError: name 'idx' is not defined\n"], ["EX03", "flake8 error: E902 TokenError: EOF in multi-line statement"], ["EX03", "flake8 error: E999 SyntaxError: invalid syntax"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 26, in pandas.MultiIndex.set_codes\nFailed example:\n    idx = pd.MultiIndex.from_tuples([(1, 'one'),\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.set_codes[0]>\", line 1\n        idx = pd.MultiIndex.from_tuples([(1, 'one'),\n                                                   ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 31, in pandas.MultiIndex.set_codes\nFailed example:\n    idx.set_codes([[1, 0, 1, 0], [0, 0, 1, 1]])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.set_codes[1]>\", line 1, in <module>\n        idx.set_codes([[1, 0, 1, 0], [0, 0, 1, 1]])\n    NameError: name 'idx' is not defined\n**********************************************************************\nLine 37, in pandas.MultiIndex.set_codes\nFailed example:\n    idx.set_codes([1, 0, 1, 0], level=0)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.set_codes[2]>\", line 1, in <module>\n        idx.set_codes([1, 0, 1, 0], level=0)\n    NameError: name 'idx' is not defined\n**********************************************************************\nLine 43, in pandas.MultiIndex.set_codes\nFailed example:\n    idx.set_codes([0, 0, 1, 1], level='bar')\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.set_codes[3]>\", line 1, in <module>\n        idx.set_codes([0, 0, 1, 1], level='bar')\n    NameError: name 'idx' is not defined\n**********************************************************************\nLine 49, in pandas.MultiIndex.set_codes\nFailed example:\n    idx.set_codes([[1, 0, 1, 0], [0, 0, 1, 1]], level=[0, 1])\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.set_codes[4]>\", line 1, in <module>\n        idx.set_codes([[1, 0, 1, 0], [0, 0, 1, 1]], level=[0, 1])\n    NameError: name 'idx' is not defined\n", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex components", "shared_code_with": ""}, "pandas.MultiIndex.to_hierarchical": {"type": "function", "docstring": "Return a MultiIndex reshaped to conform to the\nshapes given by n_repeat and n_shuffle.\n\n.. deprecated:: 0.24.0\n\nUseful to replicate and rearrange a MultiIndex for combination\nwith another Index with n_repeat items.\n\nParameters\n----------\nn_repeat : int\n    Number of times to repeat the labels on self\nn_shuffle : int\n    Controls the reordering of the labels. If the result is going\n    to be an inner level in a MultiIndex, n_shuffle will need to be\n    greater than one. The size of each label must divisible by\n    n_shuffle.\n\nReturns\n-------\nMultiIndex\n\nExamples\n--------\n>>> idx = pd.MultiIndex.from_tuples([(1, 'one'), (1, 'two'),\n                                    (2, 'one'), (2, 'two')])\n>>> idx.to_hierarchical(3)\nMultiIndex([(1, 'one'),\n            (1, 'one'),\n            (1, 'one'),\n            (1, 'two'),\n            (1, 'two'),\n            (1, 'two'),\n            (2, 'one'),\n            (2, 'one'),\n            (2, 'one'),\n            (2, 'two'),\n            (2, 'two'),\n            (2, 'two')],\n           )", "deprecated": true, "file": "pandas/core/indexes/multi.py", "file_line": 1675, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L1675", "errors": [["SS06", "Summary should fit in a single line"], ["PR09", "Parameter \"n_repeat\" description should finish with \".\""], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 26, in pandas.MultiIndex.to_hierarchical\nFailed example:\n    idx = pd.MultiIndex.from_tuples([(1, 'one'), (1, 'two'),\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.to_hierarchical[0]>\", line 1\n        idx = pd.MultiIndex.from_tuples([(1, 'one'), (1, 'two'),\n                                                               ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 28, in pandas.MultiIndex.to_hierarchical\nFailed example:\n    idx.to_hierarchical(3)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.to_hierarchical[1]>\", line 1, in <module>\n        idx.to_hierarchical(3)\n    NameError: name 'idx' is not defined\n"], ["EX03", "flake8 error: E902 TokenError: EOF in multi-line statement"], ["EX03", "flake8 error: E999 SyntaxError: unexpected EOF while parsing"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 26, in pandas.MultiIndex.to_hierarchical\nFailed example:\n    idx = pd.MultiIndex.from_tuples([(1, 'one'), (1, 'two'),\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.to_hierarchical[0]>\", line 1\n        idx = pd.MultiIndex.from_tuples([(1, 'one'), (1, 'two'),\n                                                               ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 28, in pandas.MultiIndex.to_hierarchical\nFailed example:\n    idx.to_hierarchical(3)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.MultiIndex.to_hierarchical[1]>\", line 1, in <module>\n        idx.to_hierarchical(3)\n    NameError: name 'idx' is not defined\n", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex components", "shared_code_with": ""}, "pandas.MultiIndex.to_flat_index": {"type": "function", "docstring": "Convert a MultiIndex to an Index of Tuples containing the level values.\n\n.. versionadded:: 0.24.0\n\nReturns\n-------\npd.Index\n    Index with the MultiIndex data represented in Tuples.\n\nNotes\n-----\nThis method will simply return the caller if called by anything other\nthan a MultiIndex.\n\nExamples\n--------\n>>> index = pd.MultiIndex.from_product(\n...     [['foo', 'bar'], ['baz', 'qux']],\n...     names=['a', 'b'])\n>>> index.to_flat_index()\nIndex([('foo', 'baz'), ('foo', 'qux'),\n       ('bar', 'baz'), ('bar', 'qux')],\n      dtype='object')", "deprecated": false, "file": "pandas/core/indexes/multi.py", "file_line": 1731, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L1731", "errors": [], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex components", "shared_code_with": ""}, "pandas.MultiIndex.to_frame": {"type": "function", "docstring": "Create a DataFrame with the levels of the MultiIndex as columns.\n\nColumn ordering is determined by the DataFrame constructor with data as\na dict.\n\n.. versionadded:: 0.24.0\n\nParameters\n----------\nindex : boolean, default True\n    Set the index of the returned DataFrame as the original MultiIndex.\n\nname : list / sequence of strings, optional\n    The passed names should substitute index level names.\n\nReturns\n-------\nDataFrame : a DataFrame containing the original MultiIndex data.\n\nSee Also\n--------\nDataFrame", "deprecated": false, "file": "pandas/core/indexes/multi.py", "file_line": 1617, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L1617", "errors": [["PR06", "Parameter \"index\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"name\" type should use \"str\" instead of \"string\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"DataFrame\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex components", "shared_code_with": ""}, "pandas.MultiIndex.is_lexsorted": {"type": "function", "docstring": "Return True if the codes are lexicographically sorted\n\nReturns\n-------\nbool", "deprecated": false, "file": "pandas/core/indexes/multi.py", "file_line": 1763, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L1763", "errors": [["SS03", "Summary does not end with a period"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex components", "shared_code_with": ""}, "pandas.MultiIndex.sortlevel": {"type": "function", "docstring": "Sort MultiIndex at the requested level. The result will respect the\noriginal ordering of the associated factor at that level.\n\nParameters\n----------\nlevel : list-like, int or str, default 0\n    If a string is given, must be a name of the level\n    If list-like must be names or ints of levels.\nascending : boolean, default True\n    False to sort in descending order\n    Can also be a list to specify a directed ordering\nsort_remaining : sort by the remaining levels after level\n\nReturns\n-------\nsorted_index : pd.MultiIndex\n    Resulting index.\nindexer : np.ndarray\n    Indices of output values in original index.", "deprecated": false, "file": "pandas/core/indexes/multi.py", "file_line": 2295, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L2295", "errors": [["SS06", "Summary should fit in a single line"], ["PR06", "Parameter \"ascending\" type should use \"bool\" instead of \"boolean\""], ["PR09", "Parameter \"ascending\" description should finish with \".\""], ["PR07", "Parameter \"sort_remaining\" has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex components", "shared_code_with": ""}, "pandas.MultiIndex.droplevel": {"type": "function", "docstring": "Return index with requested level(s) removed.\n\nIf resulting index has only 1 level left, the result will be\nof Index type, not MultiIndex.\n\n.. versionadded:: 0.23.1 (support for non-MultiIndex)\n\nParameters\n----------\nlevel : int, str, or list-like, default 0\n    If a string is given, must be the name of a level\n    If list-like, elements must be names or indexes of levels.\n\nReturns\n-------\nIndex or MultiIndex", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1578, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1578", "errors": [["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex components", "shared_code_with": "pandas.Index.droplevel"}, "pandas.MultiIndex.swaplevel": {"type": "function", "docstring": "Swap level i with level j.\n\nCalling this method does not change the ordering of the values.\n\nParameters\n----------\ni : int, str, default -2\n    First level of index to be swapped. Can pass level name as string.\n    Type of parameters can be mixed.\nj : int, str, default -1\n    Second level of index to be swapped. Can pass level name as string.\n    Type of parameters can be mixed.\n\nReturns\n-------\nMultiIndex\n    A new MultiIndex.\n\nSee Also\n--------\nSeries.swaplevel : Swap levels i and j in a MultiIndex.\nDataframe.swaplevel : Swap levels i and j in a MultiIndex on a\n    particular axis.\n\nExamples\n--------\n>>> mi = pd.MultiIndex(levels=[['a', 'b'], ['bb', 'aa']],\n...                    codes=[[0, 0, 1, 1], [0, 1, 0, 1]])\n>>> mi\nMultiIndex([('a', 'bb'),\n            ('a', 'aa'),\n            ('b', 'bb'),\n            ('b', 'aa')],\n           )\n>>> mi.swaplevel(0, 1)\nMultiIndex([('bb', 'a'),\n            ('aa', 'a'),\n            ('bb', 'b'),\n            ('aa', 'b')],\n           )", "deprecated": false, "file": "pandas/core/indexes/multi.py", "file_line": 2189, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L2189", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex components", "shared_code_with": ""}, "pandas.MultiIndex.reorder_levels": {"type": "function", "docstring": "Rearrange levels using input order. May not drop or duplicate levels\n\nParameters\n----------\n\nReturns\n-------\nMultiIndex", "deprecated": false, "file": "pandas/core/indexes/multi.py", "file_line": 2247, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L2247", "errors": [["SS03", "Summary does not end with a period"], ["PR01", "Parameters {order} not documented"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex components", "shared_code_with": ""}, "pandas.MultiIndex.remove_unused_levels": {"type": "function", "docstring": "Create a new MultiIndex from the current that removes\nunused levels, meaning that they are not expressed in the labels.\n\nThe resulting MultiIndex will have the same outward\nappearance, meaning the same .values and ordering. It will also\nbe .equals() to the original.\n\n.. versionadded:: 0.20.0\n\nReturns\n-------\nMultiIndex\n\nExamples\n--------\n>>> mi = pd.MultiIndex.from_product([range(2), list('ab')])\n>>> mi\nMultiIndex([(0, 'a'),\n            (0, 'b'),\n            (1, 'a'),\n            (1, 'b')],\n           )\n\n>>> mi[2:]\nMultiIndex([(1, 'a'),\n            (1, 'b')],\n           )\n\nThe 0 from the first level is not represented\nand can be removed\n\n>>> mi2 = mi[2:].remove_unused_levels()\n>>> mi2.levels\nFrozenList([[1], ['a', 'b']])", "deprecated": false, "file": "pandas/core/indexes/multi.py", "file_line": 1859, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L1859", "errors": [["SS06", "Summary should fit in a single line"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex components", "shared_code_with": ""}, "pandas.MultiIndex.get_loc": {"type": "function", "docstring": "Get location for a label or a tuple of labels as an integer, slice or\nboolean mask.\n\nParameters\n----------\nkey : label or tuple of labels (one for each level)\nmethod : None\n\nReturns\n-------\nloc : int, slice object or boolean mask\n    If the key is past the lexsort depth, the return may be a\n    boolean mask array, otherwise it is always a slice or int.\n\nSee Also\n--------\nIndex.get_loc : The get_loc method for (single-level) index.\nMultiIndex.slice_locs : Get slice location given start label(s) and\n                        end label(s).\nMultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                      sequence of such.\n\nNotes\n-----\nThe key cannot be a slice, list of same-level labels, a boolean mask,\nor a sequence of such. If you want to use those, use\n:meth:`MultiIndex.get_locs` instead.\n\nExamples\n--------\n>>> mi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\n\n>>> mi.get_loc('b')\nslice(1, 3, None)\n\n>>> mi.get_loc(('b', 'e'))\n1", "deprecated": false, "file": "pandas/core/indexes/multi.py", "file_line": 2601, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L2601", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"key\" has no description"], ["PR07", "Parameter \"method\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex selecting", "shared_code_with": ""}, "pandas.MultiIndex.get_loc_level": {"type": "function", "docstring": "Get both the location for the requested label(s) and the\nresulting sliced index.\n\nParameters\n----------\nkey : label or sequence of labels\nlevel : int/level name or list thereof, optional\ndrop_level : bool, default True\n    if ``False``, the resulting index will not drop any level.\n\nReturns\n-------\nloc : A 2-tuple where the elements are:\n      Element 0: int, slice object or boolean array\n      Element 1: The resulting sliced multiindex/index. If the key\n      contains all levels, this will be ``None``.\n\nSee Also\n--------\nMultiIndex.get_loc  : Get location for a label or a tuple of labels.\nMultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                      sequence of such.\n\nExamples\n--------\n>>> mi = pd.MultiIndex.from_arrays([list('abb'), list('def')],\n...                                names=['A', 'B'])\n\n>>> mi.get_loc_level('b')\n(slice(1, 3, None), Index(['e', 'f'], dtype='object', name='B'))\n\n>>> mi.get_loc_level('e', level='B')\n(array([False,  True, False], dtype=bool),\nIndex(['b'], dtype='object', name='A'))\n\n>>> mi.get_loc_level(['b', 'e'])\n(1, None)", "deprecated": false, "file": "pandas/core/indexes/multi.py", "file_line": 2708, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L2708", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"key\" has no description"], ["PR07", "Parameter \"level\" has no description"], ["PR08", "Parameter \"drop_level\" description should start with a capital letter"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 33, in pandas.MultiIndex.get_loc_level\nFailed example:\n    mi.get_loc_level('e', level='B')\nExpected:\n    (array([False,  True, False], dtype=bool),\n    Index(['b'], dtype='object', name='A'))\nGot:\n    (array([False,  True, False]), Index(['b'], dtype='object', name='A'))\n"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 33, in pandas.MultiIndex.get_loc_level\nFailed example:\n    mi.get_loc_level('e', level='B')\nExpected:\n    (array([False,  True, False], dtype=bool),\n    Index(['b'], dtype='object', name='A'))\nGot:\n    (array([False,  True, False]), Index(['b'], dtype='object', name='A'))\n", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex selecting", "shared_code_with": ""}, "pandas.MultiIndex.get_indexer": {"type": "function", "docstring": "Compute indexer and mask for new index given the current index. The\nindexer should be then used as an input to ndarray.take to align the\ncurrent data to the new index.\n\nParameters\n----------\ntarget : MultiIndex or list of tuples\nmethod : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional\n    * default: exact matches only.\n    * pad / ffill: find the PREVIOUS index value if no exact match.\n    * backfill / bfill: use NEXT index value if no exact match\n    * nearest: use the NEAREST index value if no exact match. Tied\n      distances are broken by preferring the larger index value.\nlimit : int, optional\n    Maximum number of consecutive labels in ``target`` to match for\n    inexact matches.\ntolerance : optional\n    Maximum distance between original and new labels for inexact\n    matches. The values of the index at the matching locations most\n    satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n    Tolerance may be a scalar value, which applies the same tolerance\n    to all values, or list-like, which applies variable tolerance per\n    element. List-like includes list, tuple, array, Series, and must be\n    the same size as the index and its dtype must exactly match the\n    index's type.\n\n    .. versionadded:: 0.21.0 (list-like tolerance)\n\nReturns\n-------\nindexer : ndarray of int\n    Integers from 0 to n - 1 indicating that the index at these\n    positions matches the corresponding target values. Missing values\n    in the target are marked by -1.\n\nExamples\n--------\n>>> index = pd.Index(['c', 'a', 'b'])\n>>> index.get_indexer(['a', 'b', 'x'])\narray([ 1,  2, -1])\n\nNotice that the return value is an array of locations in ``index``\nand ``x`` is marked by -1, as it is not in ``index``.", "deprecated": false, "file": "pandas/core/indexes/multi.py", "file_line": 2402, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L2402", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"target\" has no description"], ["PR08", "Parameter \"method\" description should start with a capital letter"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex selecting", "shared_code_with": ""}, "pandas.MultiIndex.get_level_values": {"type": "function", "docstring": "Return vector of label values for requested level,\nequal to the length of the index.\n\nParameters\n----------\nlevel : int or str\n    ``level`` is either the integer position of the level in the\n    MultiIndex, or the name of the level.\n\nReturns\n-------\nvalues : Index\n    Values is a level of this MultiIndex converted to\n    a single :class:`Index` (or subclass thereof).\n\nExamples\n--------\n\nCreate a MultiIndex:\n\n>>> mi = pd.MultiIndex.from_arrays((list('abc'), list('def')))\n>>> mi.names = ['level_1', 'level_2']\n\nGet level values by supplying level as either integer or name:\n\n>>> mi.get_level_values(0)\nIndex(['a', 'b', 'c'], dtype='object', name='level_1')\n>>> mi.get_level_values('level_2')\nIndex(['d', 'e', 'f'], dtype='object', name='level_2')", "deprecated": false, "file": "pandas/core/indexes/multi.py", "file_line": 1568, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/multi.py#L1568", "errors": [["SS06", "Summary should fit in a single line"], ["PR08", "Parameter \"level\" description should start with a capital letter"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "MultiIndex", "subsection": "MultiIndex selecting", "shared_code_with": ""}, "pandas.DatetimeIndex": {"type": "type", "docstring": "Immutable ndarray of datetime64 data, represented internally as int64, and\nwhich can be boxed to Timestamp objects that are subclasses of datetime and\ncarry metadata such as frequency information.\n\nParameters\n----------\ndata  : array-like (1-dimensional), optional\n    Optional datetime-like data to construct index with\ncopy  : bool\n    Make a copy of input ndarray\nfreq : string or pandas offset object, optional\n    One of pandas date offset strings or corresponding objects. The string\n    'infer' can be passed in order to set the frequency of the index as the\n    inferred frequency upon creation\n\nstart : starting value, datetime-like, optional\n    If data is None, start is used as the start point in generating regular\n    timestamp data.\n\n    .. deprecated:: 0.24.0\n\nperiods  : int, optional, > 0\n    Number of periods to generate, if generating index. Takes precedence\n    over end argument\n\n    .. deprecated:: 0.24.0\n\nend : end time, datetime-like, optional\n    If periods is none, generated index will extend to first conforming\n    time on or just past end argument\n\n    .. deprecated:: 0.24.0\n\nclosed : string or None, default None\n    Make the interval closed with respect to the given frequency to\n    the 'left', 'right', or both sides (None)\n\n    .. deprecated:: 0.24. 0\n\ntz : pytz.timezone or dateutil.tz.tzfile\nambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n    When clocks moved backward due to DST, ambiguous times may arise.\n    For example in Central European Time (UTC+01), when going from 03:00\n    DST to 02:00 non-DST, 02:30:00 local time occurs both at 00:30:00 UTC\n    and at 01:30:00 UTC. In such a situation, the `ambiguous` parameter\n    dictates how ambiguous times should be handled.\n\n    - 'infer' will attempt to infer fall dst-transition hours based on\n      order\n    - bool-ndarray where True signifies a DST time, False signifies a\n      non-DST time (note that this flag is only applicable for ambiguous\n      times)\n    - 'NaT' will return NaT where there are ambiguous times\n    - 'raise' will raise an AmbiguousTimeError if there are ambiguous times\nname : object\n    Name to be stored in the index\ndayfirst : bool, default False\n    If True, parse dates in `data` with the day first order\nyearfirst : bool, default False\n    If True parse dates in `data` with the year first order\n\nAttributes\n----------\nyear\nmonth\nday\nhour\nminute\nsecond\nmicrosecond\nnanosecond\ndate\ntime\ntimetz\ndayofyear\nweekofyear\nweek\ndayofweek\nweekday\nquarter\ntz\nfreq\nfreqstr\nis_month_start\nis_month_end\nis_quarter_start\nis_quarter_end\nis_year_start\nis_year_end\nis_leap_year\ninferred_freq\n\nMethods\n-------\nnormalize\nstrftime\nsnap\ntz_convert\ntz_localize\nround\nfloor\nceil\nto_period\nto_perioddelta\nto_pydatetime\nto_series\nto_frame\nmonth_name\nday_name\nmean\n\nSee Also\n--------\nIndex : The base pandas Index type.\nTimedeltaIndex : Index of timedelta64 data.\nPeriodIndex : Index of Period data.\nto_datetime : Convert argument to datetime.\ndate_range : Create a fixed-frequency DatetimeIndex.\n\nNotes\n-----\nTo learn more about the frequency strings, please see `this link\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\nCreating a DatetimeIndex based on `start`, `periods`, and `end` has\nbeen deprecated in favor of :func:`date_range`.", "deprecated": false, "file": "pandas/core/indexes/datetimes.py", "file_line": 97, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/datetimes.py#L97", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {data, normalize, dtype, verify_integrity, copy, periods} not documented"], ["PR02", "Unknown parameters {periods , data , copy }"], ["PR09", "Parameter \"data \" description should finish with \".\""], ["PR09", "Parameter \"copy \" description should finish with \".\""], ["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"freq\" description should finish with \".\""], ["PR09", "Parameter \"periods \" description should finish with \".\""], ["PR09", "Parameter \"end\" description should finish with \".\""], ["PR06", "Parameter \"closed\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"closed\" description should finish with \".\""], ["PR07", "Parameter \"tz\" has no description"], ["PR09", "Parameter \"ambiguous\" description should finish with \".\""], ["PR09", "Parameter \"name\" description should finish with \".\""], ["PR09", "Parameter \"dayfirst\" description should finish with \".\""], ["PR09", "Parameter \"yearfirst\" description should finish with \".\""]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "MultiIndex selecting", "shared_code_with": ""}, "pandas.DatetimeIndex.year": {"type": "property", "docstring": "The year of the datetime.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.Series.sparse.sp_values"}, "pandas.DatetimeIndex.month": {"type": "property", "docstring": "The month as January=1, December=12.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.year"}, "pandas.DatetimeIndex.day": {"type": "property", "docstring": "The month as January=1, December=12.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.month"}, "pandas.DatetimeIndex.hour": {"type": "property", "docstring": "The hours of the datetime.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.day"}, "pandas.DatetimeIndex.minute": {"type": "property", "docstring": "The minutes of the datetime.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.hour"}, "pandas.DatetimeIndex.second": {"type": "property", "docstring": "The seconds of the datetime.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.minute"}, "pandas.DatetimeIndex.microsecond": {"type": "property", "docstring": "The microseconds of the datetime.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.second"}, "pandas.DatetimeIndex.nanosecond": {"type": "property", "docstring": "The nanoseconds of the datetime.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.microsecond"}, "pandas.DatetimeIndex.date": {"type": "property", "docstring": "Returns numpy array of python datetime.date objects (namely, the date\npart of Timestamps without timezone information).", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.nanosecond"}, "pandas.DatetimeIndex.time": {"type": "property", "docstring": "Returns numpy array of datetime.time. The time part of the Timestamps.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.date"}, "pandas.DatetimeIndex.timetz": {"type": "property", "docstring": "Returns numpy array of datetime.time also containing timezone\ninformation. The time part of the Timestamps.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.time"}, "pandas.DatetimeIndex.dayofyear": {"type": "property", "docstring": "The ordinal day of the year.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.timetz"}, "pandas.DatetimeIndex.weekofyear": {"type": "property", "docstring": "The week ordinal of the year.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.dayofyear"}, "pandas.DatetimeIndex.week": {"type": "property", "docstring": "The week ordinal of the year.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.weekofyear"}, "pandas.DatetimeIndex.dayofweek": {"type": "property", "docstring": "The day of the week with Monday=0, Sunday=6.\n\nReturn the day of the week. It is assumed the week starts on\nMonday, which is denoted by 0 and ends on Sunday which is denoted\nby 6. This method is available on both Series with datetime\nvalues (using the `dt` accessor) or DatetimeIndex.\n\nReturns\n-------\nSeries or Index\n    Containing integers indicating the day number.\n\nSee Also\n--------\nSeries.dt.dayofweek : Alias.\nSeries.dt.weekday : Alias.\nSeries.dt.day_name : Returns the name of the day of the week.\n\nExamples\n--------\n>>> s = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\n>>> s.dt.dayofweek\n2016-12-31    5\n2017-01-01    6\n2017-01-02    0\n2017-01-03    1\n2017-01-04    2\n2017-01-05    3\n2017-01-06    4\n2017-01-07    5\n2017-01-08    6\nFreq: D, dtype: int64", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.week"}, "pandas.DatetimeIndex.weekday": {"type": "property", "docstring": "The day of the week with Monday=0, Sunday=6.\n\nReturn the day of the week. It is assumed the week starts on\nMonday, which is denoted by 0 and ends on Sunday which is denoted\nby 6. This method is available on both Series with datetime\nvalues (using the `dt` accessor) or DatetimeIndex.\n\nReturns\n-------\nSeries or Index\n    Containing integers indicating the day number.\n\nSee Also\n--------\nSeries.dt.dayofweek : Alias.\nSeries.dt.weekday : Alias.\nSeries.dt.day_name : Returns the name of the day of the week.\n\nExamples\n--------\n>>> s = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\n>>> s.dt.dayofweek\n2016-12-31    5\n2017-01-01    6\n2017-01-02    0\n2017-01-03    1\n2017-01-04    2\n2017-01-05    3\n2017-01-06    4\n2017-01-07    5\n2017-01-08    6\nFreq: D, dtype: int64", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.dayofweek"}, "pandas.DatetimeIndex.quarter": {"type": "property", "docstring": "The quarter of the date.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.weekday"}, "pandas.DatetimeIndex.tz": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/core/indexes/datetimes.py", "file_line": 398, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/datetimes.py#L398", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": ""}, "pandas.DatetimeIndex.freq": {"type": "property", "docstring": "Return the frequency object if it is set, otherwise None.", "deprecated": false, "file": "pandas/core/indexes/datetimelike.py", "file_line": 101, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/datetimelike.py#L101", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": ""}, "pandas.DatetimeIndex.freqstr": {"type": "property", "docstring": "Return the frequency object as a string if it is set, otherwise None.", "deprecated": false, "file": "pandas/core/indexes/datetimelike.py", "file_line": 113, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/datetimelike.py#L113", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": ""}, "pandas.DatetimeIndex.is_month_start": {"type": "property", "docstring": "Indicates whether the date is the first day of the month.\n\nReturns\n-------\nSeries or array\n    For Series, returns a Series with boolean values.\n    For DatetimeIndex, returns a boolean array.\n\nSee Also\n--------\nis_month_start : Return a boolean indicating whether the date\n    is the first day of the month.\nis_month_end : Return a boolean indicating whether the date\n    is the last day of the month.\n\nExamples\n--------\nThis method is available on Series with datetime values under\nthe ``.dt`` accessor, and directly on DatetimeIndex.\n\n>>> s = pd.Series(pd.date_range(\"2018-02-27\", periods=3))\n>>> s\n0   2018-02-27\n1   2018-02-28\n2   2018-03-01\ndtype: datetime64[ns]\n>>> s.dt.is_month_start\n0    False\n1    False\n2    True\ndtype: bool\n>>> s.dt.is_month_end\n0    False\n1    True\n2    False\ndtype: bool\n\n>>> idx = pd.date_range(\"2018-02-27\", periods=3)\n>>> idx.is_month_start\narray([False, False, True])\n>>> idx.is_month_end\narray([False, True, False])", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.quarter"}, "pandas.DatetimeIndex.is_month_end": {"type": "property", "docstring": "Indicates whether the date is the last day of the month.\n\nReturns\n-------\nSeries or array\n    For Series, returns a Series with boolean values.\n    For DatetimeIndex, returns a boolean array.\n\nSee Also\n--------\nis_month_start : Return a boolean indicating whether the date\n    is the first day of the month.\nis_month_end : Return a boolean indicating whether the date\n    is the last day of the month.\n\nExamples\n--------\nThis method is available on Series with datetime values under\nthe ``.dt`` accessor, and directly on DatetimeIndex.\n\n>>> s = pd.Series(pd.date_range(\"2018-02-27\", periods=3))\n>>> s\n0   2018-02-27\n1   2018-02-28\n2   2018-03-01\ndtype: datetime64[ns]\n>>> s.dt.is_month_start\n0    False\n1    False\n2    True\ndtype: bool\n>>> s.dt.is_month_end\n0    False\n1    True\n2    False\ndtype: bool\n\n>>> idx = pd.date_range(\"2018-02-27\", periods=3)\n>>> idx.is_month_start\narray([False, False, True])\n>>> idx.is_month_end\narray([False, True, False])", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.is_month_start"}, "pandas.DatetimeIndex.is_quarter_start": {"type": "property", "docstring": "Indicator for whether the date is the first day of a quarter.\n\nReturns\n-------\nis_quarter_start : Series or DatetimeIndex\n    The same type as the original data with boolean values. Series will\n    have the same name and index. DatetimeIndex will have the same\n    name.\n\nSee Also\n--------\nquarter : Return the quarter of the date.\nis_quarter_end : Similar property for indicating the quarter start.\n\nExamples\n--------\nThis method is available on Series with datetime values under\nthe ``.dt`` accessor, and directly on DatetimeIndex.\n\n>>> df = pd.DataFrame({'dates': pd.date_range(\"2017-03-30\",\n...                   periods=4)})\n>>> df.assign(quarter=df.dates.dt.quarter,\n...           is_quarter_start=df.dates.dt.is_quarter_start)\n       dates  quarter  is_quarter_start\n0 2017-03-30        1             False\n1 2017-03-31        1             False\n2 2017-04-01        2              True\n3 2017-04-02        2             False\n\n>>> idx = pd.date_range('2017-03-30', periods=4)\n>>> idx\nDatetimeIndex(['2017-03-30', '2017-03-31', '2017-04-01', '2017-04-02'],\n              dtype='datetime64[ns]', freq='D')\n\n>>> idx.is_quarter_start\narray([False, False,  True, False])", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.is_month_end"}, "pandas.DatetimeIndex.is_quarter_end": {"type": "property", "docstring": "Indicator for whether the date is the last day of a quarter.\n\nReturns\n-------\nis_quarter_end : Series or DatetimeIndex\n    The same type as the original data with boolean values. Series will\n    have the same name and index. DatetimeIndex will have the same\n    name.\n\nSee Also\n--------\nquarter : Return the quarter of the date.\nis_quarter_start : Similar property indicating the quarter start.\n\nExamples\n--------\nThis method is available on Series with datetime values under\nthe ``.dt`` accessor, and directly on DatetimeIndex.\n\n>>> df = pd.DataFrame({'dates': pd.date_range(\"2017-03-30\",\n...                    periods=4)})\n>>> df.assign(quarter=df.dates.dt.quarter,\n...           is_quarter_end=df.dates.dt.is_quarter_end)\n       dates  quarter    is_quarter_end\n0 2017-03-30        1             False\n1 2017-03-31        1              True\n2 2017-04-01        2             False\n3 2017-04-02        2             False\n\n>>> idx = pd.date_range('2017-03-30', periods=4)\n>>> idx\nDatetimeIndex(['2017-03-30', '2017-03-31', '2017-04-01', '2017-04-02'],\n              dtype='datetime64[ns]', freq='D')\n\n>>> idx.is_quarter_end\narray([False,  True, False, False])", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.is_quarter_start"}, "pandas.DatetimeIndex.is_year_start": {"type": "property", "docstring": "Indicate whether the date is the first day of a year.\n\nReturns\n-------\nSeries or DatetimeIndex\n    The same type as the original data with boolean values. Series will\n    have the same name and index. DatetimeIndex will have the same\n    name.\n\nSee Also\n--------\nis_year_end : Similar property indicating the last day of the year.\n\nExamples\n--------\nThis method is available on Series with datetime values under\nthe ``.dt`` accessor, and directly on DatetimeIndex.\n\n>>> dates = pd.Series(pd.date_range(\"2017-12-30\", periods=3))\n>>> dates\n0   2017-12-30\n1   2017-12-31\n2   2018-01-01\ndtype: datetime64[ns]\n\n>>> dates.dt.is_year_start\n0    False\n1    False\n2    True\ndtype: bool\n\n>>> idx = pd.date_range(\"2017-12-30\", periods=3)\n>>> idx\nDatetimeIndex(['2017-12-30', '2017-12-31', '2018-01-01'],\n              dtype='datetime64[ns]', freq='D')\n\n>>> idx.is_year_start\narray([False, False,  True])", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.is_quarter_end"}, "pandas.DatetimeIndex.is_year_end": {"type": "property", "docstring": "Indicate whether the date is the last day of the year.\n\nReturns\n-------\nSeries or DatetimeIndex\n    The same type as the original data with boolean values. Series will\n    have the same name and index. DatetimeIndex will have the same\n    name.\n\nSee Also\n--------\nis_year_start : Similar property indicating the start of the year.\n\nExamples\n--------\nThis method is available on Series with datetime values under\nthe ``.dt`` accessor, and directly on DatetimeIndex.\n\n>>> dates = pd.Series(pd.date_range(\"2017-12-30\", periods=3))\n>>> dates\n0   2017-12-30\n1   2017-12-31\n2   2018-01-01\ndtype: datetime64[ns]\n\n>>> dates.dt.is_year_end\n0    False\n1     True\n2    False\ndtype: bool\n\n>>> idx = pd.date_range(\"2017-12-30\", periods=3)\n>>> idx\nDatetimeIndex(['2017-12-30', '2017-12-31', '2018-01-01'],\n              dtype='datetime64[ns]', freq='D')\n\n>>> idx.is_year_end\narray([False,  True, False])", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.is_year_start"}, "pandas.DatetimeIndex.is_leap_year": {"type": "property", "docstring": "Boolean indicator if the date belongs to a leap year.\n\nA leap year is a year, which has 366 days (instead of 365) including\n29th of February as an intercalary day.\nLeap years are years which are multiples of four with the exception\nof years divisible by 100 but not by 400.\n\nReturns\n-------\nSeries or ndarray\n     Booleans indicating if dates belong to a leap year.\n\nExamples\n--------\nThis method is available on Series with datetime values under\nthe ``.dt`` accessor, and directly on DatetimeIndex.\n\n>>> idx = pd.date_range(\"2012-01-01\", \"2015-01-01\", freq=\"Y\")\n>>> idx\nDatetimeIndex(['2012-12-31', '2013-12-31', '2014-12-31'],\n              dtype='datetime64[ns]', freq='A-DEC')\n>>> idx.is_leap_year\narray([ True, False, False], dtype=bool)\n\n>>> dates = pd.Series(idx)\n>>> dates_series\n0   2012-12-31\n1   2013-12-31\n2   2014-12-31\ndtype: datetime64[ns]\n>>> dates_series.dt.is_leap_year\n0     True\n1    False\n2    False\ndtype: bool", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 23, in pandas.DatetimeIndex.is_leap_year\nFailed example:\n    idx.is_leap_year\nExpected:\n    array([ True, False, False], dtype=bool)\nGot:\n    array([ True, False, False])\n**********************************************************************\nLine 27, in pandas.DatetimeIndex.is_leap_year\nFailed example:\n    dates_series\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.DatetimeIndex.is_leap_year[4]>\", line 1, in <module>\n        dates_series\n    NameError: name 'dates_series' is not defined\n**********************************************************************\nLine 32, in pandas.DatetimeIndex.is_leap_year\nFailed example:\n    dates_series.dt.is_leap_year\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.DatetimeIndex.is_leap_year[5]>\", line 1, in <module>\n        dates_series.dt.is_leap_year\n    NameError: name 'dates_series' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'dates_series' (2 times)"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 23, in pandas.DatetimeIndex.is_leap_year\nFailed example:\n    idx.is_leap_year\nExpected:\n    array([ True, False, False], dtype=bool)\nGot:\n    array([ True, False, False])\n**********************************************************************\nLine 27, in pandas.DatetimeIndex.is_leap_year\nFailed example:\n    dates_series\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.DatetimeIndex.is_leap_year[4]>\", line 1, in <module>\n        dates_series\n    NameError: name 'dates_series' is not defined\n**********************************************************************\nLine 32, in pandas.DatetimeIndex.is_leap_year\nFailed example:\n    dates_series.dt.is_leap_year\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.DatetimeIndex.is_leap_year[5]>\", line 1, in <module>\n        dates_series.dt.is_leap_year\n    NameError: name 'dates_series' is not defined\n", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.DatetimeIndex.is_year_end"}, "pandas.DatetimeIndex.inferred_freq": {"type": "CachedProperty", "docstring": "Tryies to return a string representing a frequency guess,\ngenerated by infer_freq.  Returns None if it can't autodetect the\nfrequency.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time/Date components", "shared_code_with": "pandas.IndexSlice"}, "pandas.DatetimeIndex.indexer_at_time": {"type": "function", "docstring": "Return index locations of index values at particular time of day\n(e.g. 9:30AM).\n\nParameters\n----------\ntime : datetime.time or string\n    datetime.time or string in appropriate format (\"%H:%M\", \"%H%M\",\n    \"%I:%M%p\", \"%I%M%p\", \"%H:%M:%S\", \"%H%M%S\", \"%I:%M:%S%p\",\n    \"%I%M%S%p\").\n\nReturns\n-------\nvalues_at_time : array of integers\n\nSee Also\n--------\nindexer_between_time, DataFrame.at_time", "deprecated": false, "file": "pandas/core/indexes/datetimes.py", "file_line": 1324, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/datetimes.py#L1324", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {asof} not documented"], ["PR06", "Parameter \"time\" type should use \"str\" instead of \"string\""], ["PR08", "Parameter \"time\" description should start with a capital letter"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"indexer_between_time\" reference"], ["SA04", "Missing description for See Also \"DataFrame.at_time\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Selecting", "shared_code_with": ""}, "pandas.DatetimeIndex.indexer_between_time": {"type": "function", "docstring": "Return index locations of values between particular times of day\n(e.g., 9:00-9:30AM).\n\nParameters\n----------\nstart_time, end_time : datetime.time, str\n    datetime.time or string in appropriate format (\"%H:%M\", \"%H%M\",\n    \"%I:%M%p\", \"%I%M%p\", \"%H:%M:%S\", \"%H%M%S\", \"%I:%M:%S%p\",\n    \"%I%M%S%p\").\ninclude_start : boolean, default True\ninclude_end : boolean, default True\n\nReturns\n-------\nvalues_between_time : array of integers\n\nSee Also\n--------\nindexer_at_time, DataFrame.between_time", "deprecated": false, "file": "pandas/core/indexes/datetimes.py", "file_line": 1361, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/datetimes.py#L1361", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {start_time, end_time} not documented"], ["PR02", "Unknown parameters {start_time, end_time}"], ["PR08", "Parameter \"start_time, end_time\" description should start with a capital letter"], ["PR06", "Parameter \"include_start\" type should use \"bool\" instead of \"boolean\""], ["PR07", "Parameter \"include_start\" has no description"], ["PR06", "Parameter \"include_end\" type should use \"bool\" instead of \"boolean\""], ["PR07", "Parameter \"include_end\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"indexer_at_time\" reference"], ["SA04", "Missing description for See Also \"DataFrame.between_time\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Selecting", "shared_code_with": ""}, "pandas.DatetimeIndex.normalize": {"type": "function", "docstring": "Convert times to midnight.\n\nThe time component of the date-time is converted to midnight i.e.\n00:00:00. This is useful in cases, when the time does not matter.\nLength is unaltered. The timezones are unaffected.\n\nThis method is available on Series with datetime values under\nthe ``.dt`` accessor, and directly on Datetime Array/Index.\n\nReturns\n-------\nDatetimeArray, DatetimeIndex or Series\n    The same type as the original data. Series will have the same\n    name and index. DatetimeIndex will have the same name.\n\nSee Also\n--------\nfloor : Floor the datetimes to the specified freq.\nceil : Ceil the datetimes to the specified freq.\nround : Round the datetimes to the specified freq.\n\nExamples\n--------\n>>> idx = pd.date_range(start='2014-08-01 10:00', freq='H',\n...                     periods=3, tz='Asia/Calcutta')\n>>> idx\nDatetimeIndex(['2014-08-01 10:00:00+05:30',\n               '2014-08-01 11:00:00+05:30',\n               '2014-08-01 12:00:00+05:30'],\n                dtype='datetime64[ns, Asia/Calcutta]', freq='H')\n>>> idx.normalize()\nDatetimeIndex(['2014-08-01 00:00:00+05:30',\n               '2014-08-01 00:00:00+05:30',\n               '2014-08-01 00:00:00+05:30'],\n               dtype='datetime64[ns, Asia/Calcutta]', freq=None)", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time-specific operations", "shared_code_with": "pandas.CategoricalIndex.as_unordered"}, "pandas.DatetimeIndex.strftime": {"type": "function", "docstring": "Convert to Index using specified date_format.\n\nReturn an Index of formatted strings specified by date_format, which\nsupports the same string format as the python standard library. Details\nof the string format can be found in `python string format\ndoc <https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior>`__.\n\nParameters\n----------\ndate_format : str\n    Date format string (e.g. \"%Y-%m-%d\").\n\nReturns\n-------\nndarray\n    NumPy ndarray of formatted strings.\n\nSee Also\n--------\nto_datetime : Convert the given argument to datetime.\nDatetimeIndex.normalize : Return DatetimeIndex with times to midnight.\nDatetimeIndex.round : Round the DatetimeIndex to the specified freq.\nDatetimeIndex.floor : Floor the DatetimeIndex to the specified freq.\n\nExamples\n--------\n>>> rng = pd.date_range(pd.Timestamp(\"2018-03-10 09:00\"),\n...                     periods=3, freq='s')\n>>> rng.strftime('%B %d, %Y, %r')\nIndex(['March 10, 2018, 09:00:00 AM', 'March 10, 2018, 09:00:01 AM',\n       'March 10, 2018, 09:00:02 AM'],\n      dtype='object')", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {date_format}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time-specific operations", "shared_code_with": "pandas.DatetimeIndex.normalize"}, "pandas.DatetimeIndex.snap": {"type": "function", "docstring": "Snap time stamps to nearest occurring frequency\n\nReturns\n-------\nDatetimeIndex", "deprecated": false, "file": "pandas/core/indexes/datetimes.py", "file_line": 736, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/datetimes.py#L736", "errors": [["SS03", "Summary does not end with a period"], ["PR01", "Parameters {freq} not documented"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time-specific operations", "shared_code_with": ""}, "pandas.DatetimeIndex.tz_convert": {"type": "function", "docstring": "Convert tz-aware Datetime Array/Index from one time zone to another.\n\nParameters\n----------\ntz : str, pytz.timezone, dateutil.tz.tzfile or None\n    Time zone for time. Corresponding timestamps would be converted\n    to this time zone of the Datetime Array/Index. A `tz` of None will\n    convert to UTC and remove the timezone information.\n\nReturns\n-------\nArray or Index\n\nRaises\n------\nTypeError\n    If Datetime Array/Index is tz-naive.\n\nSee Also\n--------\nDatetimeIndex.tz : A timezone that has a variable offset from UTC.\nDatetimeIndex.tz_localize : Localize tz-naive DatetimeIndex to a\n    given time zone, or remove timezone from a tz-aware DatetimeIndex.\n\nExamples\n--------\nWith the `tz` parameter, we can change the DatetimeIndex\nto other time zones:\n\n>>> dti = pd.date_range(start='2014-08-01 09:00',\n...                     freq='H', periods=3, tz='Europe/Berlin')\n\n>>> dti\nDatetimeIndex(['2014-08-01 09:00:00+02:00',\n               '2014-08-01 10:00:00+02:00',\n               '2014-08-01 11:00:00+02:00'],\n              dtype='datetime64[ns, Europe/Berlin]', freq='H')\n\n>>> dti.tz_convert('US/Central')\nDatetimeIndex(['2014-08-01 02:00:00-05:00',\n               '2014-08-01 03:00:00-05:00',\n               '2014-08-01 04:00:00-05:00'],\n              dtype='datetime64[ns, US/Central]', freq='H')\n\nWith the ``tz=None``, we can remove the timezone (after converting\nto UTC if necessary):\n\n>>> dti = pd.date_range(start='2014-08-01 09:00', freq='H',\n...                     periods=3, tz='Europe/Berlin')\n\n>>> dti\nDatetimeIndex(['2014-08-01 09:00:00+02:00',\n               '2014-08-01 10:00:00+02:00',\n               '2014-08-01 11:00:00+02:00'],\n                dtype='datetime64[ns, Europe/Berlin]', freq='H')\n\n>>> dti.tz_convert(None)\nDatetimeIndex(['2014-08-01 07:00:00',\n               '2014-08-01 08:00:00',\n               '2014-08-01 09:00:00'],\n                dtype='datetime64[ns]', freq='H')", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {tz}"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time-specific operations", "shared_code_with": "pandas.DatetimeIndex.strftime"}, "pandas.DatetimeIndex.tz_localize": {"type": "function", "docstring": "Localize tz-naive Datetime Array/Index to tz-aware\nDatetime Array/Index.\n\nThis method takes a time zone (tz) naive Datetime Array/Index object\nand makes this time zone aware. It does not move the time to another\ntime zone.\nTime zone localization helps to switch from time zone aware to time\nzone unaware objects.\n\nParameters\n----------\ntz : str, pytz.timezone, dateutil.tz.tzfile or None\n    Time zone to convert timestamps to. Passing ``None`` will\n    remove the time zone information preserving local time.\nambiguous : 'infer', 'NaT', bool array, default 'raise'\n    When clocks moved backward due to DST, ambiguous times may arise.\n    For example in Central European Time (UTC+01), when going from\n    03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n    00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n    `ambiguous` parameter dictates how ambiguous times should be\n    handled.\n\n    - 'infer' will attempt to infer fall dst-transition hours based on\n      order\n    - bool-ndarray where True signifies a DST time, False signifies a\n      non-DST time (note that this flag is only applicable for\n      ambiguous times)\n    - 'NaT' will return NaT where there are ambiguous times\n    - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n      times\n\nnonexistent : 'shift_forward', 'shift_backward, 'NaT', timedelta, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST.\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times\n\n    .. versionadded:: 0.24.0\n\nerrors : {'raise', 'coerce'}, default None\n\n    - 'raise' will raise a NonExistentTimeError if a timestamp is not\n      valid in the specified time zone (e.g. due to a transition from\n      or to DST time). Use ``nonexistent='raise'`` instead.\n    - 'coerce' will return NaT if the timestamp can not be converted\n      to the specified time zone. Use ``nonexistent='NaT'`` instead.\n\n    .. deprecated:: 0.24.0\n\nReturns\n-------\nSame type as self\n    Array/Index converted to the specified time zone.\n\nRaises\n------\nTypeError\n    If the Datetime Array/Index is tz-aware and tz is not None.\n\nSee Also\n--------\nDatetimeIndex.tz_convert : Convert tz-aware DatetimeIndex from\n    one time zone to another.\n\nExamples\n--------\n>>> tz_naive = pd.date_range('2018-03-01 09:00', periods=3)\n>>> tz_naive\nDatetimeIndex(['2018-03-01 09:00:00', '2018-03-02 09:00:00',\n               '2018-03-03 09:00:00'],\n              dtype='datetime64[ns]', freq='D')\n\nLocalize DatetimeIndex in US/Eastern time zone:\n\n>>> tz_aware = tz_naive.tz_localize(tz='US/Eastern')\n>>> tz_aware\nDatetimeIndex(['2018-03-01 09:00:00-05:00',\n               '2018-03-02 09:00:00-05:00',\n               '2018-03-03 09:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq='D')\n\nWith the ``tz=None``, we can remove the time zone information\nwhile keeping the local time (not converted to UTC):\n\n>>> tz_aware.tz_localize(None)\nDatetimeIndex(['2018-03-01 09:00:00', '2018-03-02 09:00:00',\n               '2018-03-03 09:00:00'],\n              dtype='datetime64[ns]', freq='D')\n\nBe careful with DST changes. When there is sequential data, pandas can\ninfer the DST time:\n>>> s = pd.to_datetime(pd.Series(['2018-10-28 01:30:00',\n...                               '2018-10-28 02:00:00',\n...                               '2018-10-28 02:30:00',\n...                               '2018-10-28 02:00:00',\n...                               '2018-10-28 02:30:00',\n...                               '2018-10-28 03:00:00',\n...                               '2018-10-28 03:30:00']))\n>>> s.dt.tz_localize('CET', ambiguous='infer')\n0   2018-10-28 01:30:00+02:00\n1   2018-10-28 02:00:00+02:00\n2   2018-10-28 02:30:00+02:00\n3   2018-10-28 02:00:00+01:00\n4   2018-10-28 02:30:00+01:00\n5   2018-10-28 03:00:00+01:00\n6   2018-10-28 03:30:00+01:00\ndtype: datetime64[ns, CET]\n\nIn some cases, inferring the DST is impossible. In such cases, you can\npass an ndarray to the ambiguous parameter to set the DST explicitly\n\n>>> s = pd.to_datetime(pd.Series(['2018-10-28 01:20:00',\n...                               '2018-10-28 02:36:00',\n...                               '2018-10-28 03:46:00']))\n>>> s.dt.tz_localize('CET', ambiguous=np.array([True, True, False]))\n0   2015-03-29 03:00:00+02:00\n1   2015-03-29 03:30:00+02:00\ndtype: datetime64[ns, Europe/Warsaw]\n\nIf the DST transition causes nonexistent times, you can shift these\ndates forward or backwards with a timedelta object or `'shift_forward'`\nor `'shift_backwards'`.\n>>> s = pd.to_datetime(pd.Series(['2015-03-29 02:30:00',\n...                               '2015-03-29 03:30:00']))\n>>> s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\n0   2015-03-29 03:00:00+02:00\n1   2015-03-29 03:30:00+02:00\ndtype: datetime64[ns, 'Europe/Warsaw']\n>>> s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\n0   2015-03-29 01:59:59.999999999+01:00\n1   2015-03-29 03:30:00+02:00\ndtype: datetime64[ns, 'Europe/Warsaw']\n>>> s.dt.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1H'))\n0   2015-03-29 03:30:00+02:00\n1   2015-03-29 03:30:00+02:00\ndtype: datetime64[ns, 'Europe/Warsaw']", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {tz, ambiguous, errors, nonexistent}"], ["PR09", "Parameter \"ambiguous\" description should finish with \".\""], ["PR09", "Parameter \"nonexistent\" description should finish with \".\""], ["PR08", "Parameter \"errors\" description should start with a capital letter"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 123, in pandas.DatetimeIndex.tz_localize\nFailed example:\n    s.dt.tz_localize('CET', ambiguous=np.array([True, True, False]))\nExpected:\n    0   2015-03-29 03:00:00+02:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, Europe/Warsaw]\nGot:\n    0   2018-10-28 01:20:00+02:00\n    1   2018-10-28 02:36:00+02:00\n    2   2018-10-28 03:46:00+01:00\n    dtype: datetime64[ns, CET]\n**********************************************************************\nLine 133, in pandas.DatetimeIndex.tz_localize\nFailed example:\n    s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\nExpected:\n    0   2015-03-29 03:00:00+02:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, 'Europe/Warsaw']\nGot:\n    0   2015-03-29 03:00:00+02:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, Europe/Warsaw]\n**********************************************************************\nLine 137, in pandas.DatetimeIndex.tz_localize\nFailed example:\n    s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\nExpected:\n    0   2015-03-29 01:59:59.999999999+01:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, 'Europe/Warsaw']\nGot:\n    0   2015-03-29 01:59:59.999999999+01:00\n    1             2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, Europe/Warsaw]\n**********************************************************************\nLine 141, in pandas.DatetimeIndex.tz_localize\nFailed example:\n    s.dt.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1H'))\nExpected:\n    0   2015-03-29 03:30:00+02:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, 'Europe/Warsaw']\nGot:\n    0   2015-03-29 03:30:00+02:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, Europe/Warsaw]\n"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 123, in pandas.DatetimeIndex.tz_localize\nFailed example:\n    s.dt.tz_localize('CET', ambiguous=np.array([True, True, False]))\nExpected:\n    0   2015-03-29 03:00:00+02:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, Europe/Warsaw]\nGot:\n    0   2018-10-28 01:20:00+02:00\n    1   2018-10-28 02:36:00+02:00\n    2   2018-10-28 03:46:00+01:00\n    dtype: datetime64[ns, CET]\n**********************************************************************\nLine 133, in pandas.DatetimeIndex.tz_localize\nFailed example:\n    s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\nExpected:\n    0   2015-03-29 03:00:00+02:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, 'Europe/Warsaw']\nGot:\n    0   2015-03-29 03:00:00+02:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, Europe/Warsaw]\n**********************************************************************\nLine 137, in pandas.DatetimeIndex.tz_localize\nFailed example:\n    s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\nExpected:\n    0   2015-03-29 01:59:59.999999999+01:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, 'Europe/Warsaw']\nGot:\n    0   2015-03-29 01:59:59.999999999+01:00\n    1             2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, Europe/Warsaw]\n**********************************************************************\nLine 141, in pandas.DatetimeIndex.tz_localize\nFailed example:\n    s.dt.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1H'))\nExpected:\n    0   2015-03-29 03:30:00+02:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, 'Europe/Warsaw']\nGot:\n    0   2015-03-29 03:30:00+02:00\n    1   2015-03-29 03:30:00+02:00\n    dtype: datetime64[ns, Europe/Warsaw]\n", "in_api": true, "section": "DatetimeIndex", "subsection": "Time-specific operations", "shared_code_with": "pandas.DatetimeIndex.tz_convert"}, "pandas.DatetimeIndex.round": {"type": "function", "docstring": "Perform round operation on the data to the specified `freq`.\n\nParameters\n----------\nfreq : str or Offset\n    The frequency level to round the index to. Must be a fixed\n    frequency like 'S' (second) not 'ME' (month end). See\n    :ref:`frequency aliases <timeseries.offset_aliases>` for\n    a list of possible `freq` values.\nambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n    Only relevant for DatetimeIndex:\n\n    - 'infer' will attempt to infer fall dst-transition hours based on\n      order\n    - bool-ndarray where True signifies a DST time, False designates\n      a non-DST time (note that this flag is only applicable for\n      ambiguous times)\n    - 'NaT' will return NaT where there are ambiguous times\n    - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n      times\n\n    .. versionadded:: 0.24.0\n\nnonexistent : 'shift_forward', 'shift_backward', 'NaT', timedelta, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST.\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nDatetimeIndex, TimedeltaIndex, or Series\n    Index of the same type for a DatetimeIndex or TimedeltaIndex,\n    or a Series with the same index for a Series.\n\nRaises\n------\nValueError if the `freq` cannot be converted.\n\nExamples\n--------\n**DatetimeIndex**\n\n>>> rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\n>>> rng\nDatetimeIndex(['2018-01-01 11:59:00', '2018-01-01 12:00:00',\n               '2018-01-01 12:01:00'],\n              dtype='datetime64[ns]', freq='T')\n>>> rng.round('H')\nDatetimeIndex(['2018-01-01 12:00:00', '2018-01-01 12:00:00',\n               '2018-01-01 12:00:00'],\n              dtype='datetime64[ns]', freq=None)\n\n**Series**\n\n>>> pd.Series(rng).dt.round(\"H\")\n0   2018-01-01 12:00:00\n1   2018-01-01 12:00:00\n2   2018-01-01 12:00:00\ndtype: datetime64[ns]", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {ambiguous, freq, nonexistent}"], ["PR09", "Parameter \"ambiguous\" description should finish with \".\""], ["PR09", "Parameter \"nonexistent\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time-specific operations", "shared_code_with": "pandas.DatetimeIndex.tz_localize"}, "pandas.DatetimeIndex.floor": {"type": "function", "docstring": "Perform floor operation on the data to the specified `freq`.\n\nParameters\n----------\nfreq : str or Offset\n    The frequency level to floor the index to. Must be a fixed\n    frequency like 'S' (second) not 'ME' (month end). See\n    :ref:`frequency aliases <timeseries.offset_aliases>` for\n    a list of possible `freq` values.\nambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n    Only relevant for DatetimeIndex:\n\n    - 'infer' will attempt to infer fall dst-transition hours based on\n      order\n    - bool-ndarray where True signifies a DST time, False designates\n      a non-DST time (note that this flag is only applicable for\n      ambiguous times)\n    - 'NaT' will return NaT where there are ambiguous times\n    - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n      times\n\n    .. versionadded:: 0.24.0\n\nnonexistent : 'shift_forward', 'shift_backward', 'NaT', timedelta, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST.\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nDatetimeIndex, TimedeltaIndex, or Series\n    Index of the same type for a DatetimeIndex or TimedeltaIndex,\n    or a Series with the same index for a Series.\n\nRaises\n------\nValueError if the `freq` cannot be converted.\n\nExamples\n--------\n**DatetimeIndex**\n\n>>> rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\n>>> rng\nDatetimeIndex(['2018-01-01 11:59:00', '2018-01-01 12:00:00',\n               '2018-01-01 12:01:00'],\n              dtype='datetime64[ns]', freq='T')\n>>> rng.floor('H')\nDatetimeIndex(['2018-01-01 11:00:00', '2018-01-01 12:00:00',\n               '2018-01-01 12:00:00'],\n              dtype='datetime64[ns]', freq=None)\n\n**Series**\n\n>>> pd.Series(rng).dt.floor(\"H\")\n0   2018-01-01 11:00:00\n1   2018-01-01 12:00:00\n2   2018-01-01 12:00:00\ndtype: datetime64[ns]", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {ambiguous, freq, nonexistent}"], ["PR09", "Parameter \"ambiguous\" description should finish with \".\""], ["PR09", "Parameter \"nonexistent\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time-specific operations", "shared_code_with": "pandas.DatetimeIndex.round"}, "pandas.DatetimeIndex.ceil": {"type": "function", "docstring": "Perform ceil operation on the data to the specified `freq`.\n\nParameters\n----------\nfreq : str or Offset\n    The frequency level to ceil the index to. Must be a fixed\n    frequency like 'S' (second) not 'ME' (month end). See\n    :ref:`frequency aliases <timeseries.offset_aliases>` for\n    a list of possible `freq` values.\nambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n    Only relevant for DatetimeIndex:\n\n    - 'infer' will attempt to infer fall dst-transition hours based on\n      order\n    - bool-ndarray where True signifies a DST time, False designates\n      a non-DST time (note that this flag is only applicable for\n      ambiguous times)\n    - 'NaT' will return NaT where there are ambiguous times\n    - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n      times\n\n    .. versionadded:: 0.24.0\n\nnonexistent : 'shift_forward', 'shift_backward', 'NaT', timedelta, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST.\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nDatetimeIndex, TimedeltaIndex, or Series\n    Index of the same type for a DatetimeIndex or TimedeltaIndex,\n    or a Series with the same index for a Series.\n\nRaises\n------\nValueError if the `freq` cannot be converted.\n\nExamples\n--------\n**DatetimeIndex**\n\n>>> rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\n>>> rng\nDatetimeIndex(['2018-01-01 11:59:00', '2018-01-01 12:00:00',\n               '2018-01-01 12:01:00'],\n              dtype='datetime64[ns]', freq='T')\n>>> rng.ceil('H')\nDatetimeIndex(['2018-01-01 12:00:00', '2018-01-01 12:00:00',\n               '2018-01-01 13:00:00'],\n              dtype='datetime64[ns]', freq=None)\n\n**Series**\n\n>>> pd.Series(rng).dt.ceil(\"H\")\n0   2018-01-01 12:00:00\n1   2018-01-01 12:00:00\n2   2018-01-01 13:00:00\ndtype: datetime64[ns]", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {ambiguous, freq, nonexistent}"], ["PR09", "Parameter \"ambiguous\" description should finish with \".\""], ["PR09", "Parameter \"nonexistent\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time-specific operations", "shared_code_with": "pandas.DatetimeIndex.floor"}, "pandas.DatetimeIndex.month_name": {"type": "function", "docstring": "Return the month names of the DateTimeIndex with specified locale.\n\n.. versionadded:: 0.23.0\n\nParameters\n----------\nlocale : str, optional\n    Locale determining the language in which to return the month name.\n    Default is English locale.\n\nReturns\n-------\nIndex\n    Index of month names.\n\nExamples\n--------\n>>> idx = pd.date_range(start='2018-01', freq='M', periods=3)\n>>> idx\nDatetimeIndex(['2018-01-31', '2018-02-28', '2018-03-31'],\n              dtype='datetime64[ns]', freq='M')\n>>> idx.month_name()\nIndex(['January', 'February', 'March'], dtype='object')", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {locale}"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time-specific operations", "shared_code_with": "pandas.DatetimeIndex.ceil"}, "pandas.DatetimeIndex.day_name": {"type": "function", "docstring": "Return the day names of the DateTimeIndex with specified locale.\n\n.. versionadded:: 0.23.0\n\nParameters\n----------\nlocale : str, optional\n    Locale determining the language in which to return the day name.\n    Default is English locale.\n\nReturns\n-------\nIndex\n    Index of day names.\n\nExamples\n--------\n>>> idx = pd.date_range(start='2018-01-01', freq='D', periods=3)\n>>> idx\nDatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03'],\n              dtype='datetime64[ns]', freq='D')\n>>> idx.day_name()\nIndex(['Monday', 'Tuesday', 'Wednesday'], dtype='object')", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {locale}"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Time-specific operations", "shared_code_with": "pandas.DatetimeIndex.month_name"}, "pandas.DatetimeIndex.to_period": {"type": "function", "docstring": "Cast to PeriodArray/Index at a particular frequency.\n\nConverts DatetimeArray/Index to PeriodArray/Index.\n\nParameters\n----------\nfreq : str or Offset, optional\n    One of pandas' :ref:`offset strings <timeseries.offset_aliases>`\n    or an Offset object. Will be inferred by default.\n\nReturns\n-------\nPeriodArray/Index\n\nRaises\n------\nValueError\n    When converting a DatetimeArray/Index with non-regular values,\n    so that a frequency cannot be inferred.\n\nSee Also\n--------\nPeriodIndex: Immutable ndarray holding ordinal values.\nDatetimeIndex.to_pydatetime: Return DatetimeIndex as object.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"y\": [1, 2, 3]},\n...                   index=pd.to_datetime([\"2000-03-31 00:00:00\",\n...                                         \"2000-05-31 00:00:00\",\n...                                         \"2000-08-31 00:00:00\"]))\n>>> df.index.to_period(\"M\")\nPeriodIndex(['2000-03', '2000-05', '2000-08'],\n            dtype='period[M]', freq='M')\n\nInfer the daily frequency\n\n>>> idx = pd.date_range(\"2017-01-01\", periods=2)\n>>> idx.to_period()\nPeriodIndex(['2017-01-01', '2017-01-02'],\n            dtype='period[D]', freq='D')", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {freq}"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Conversion", "shared_code_with": "pandas.DatetimeIndex.day_name"}, "pandas.DatetimeIndex.to_perioddelta": {"type": "function", "docstring": "Calculate TimedeltaArray of difference between index\nvalues and index converted to PeriodArray at specified\nfreq. Used for vectorized offsets\n\nParameters\n----------\nfreq : Period frequency\n\nReturns\n-------\nTimedeltaArray/Index", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {freq}"], ["PR07", "Parameter \"freq\" has no description"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Conversion", "shared_code_with": "pandas.DatetimeIndex.to_period"}, "pandas.DatetimeIndex.to_pydatetime": {"type": "function", "docstring": "Return Datetime Array/Index as object ndarray of datetime.datetime\nobjects\n\nReturns\n-------\ndatetimes : ndarray", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Conversion", "shared_code_with": "pandas.DatetimeIndex.to_perioddelta"}, "pandas.DatetimeIndex.to_series": {"type": "function", "docstring": "Create a Series with both index and values equal to the index keys\nuseful with map for returning an indexer based on an index\n\nParameters\n----------\nkeep_tz : optional, defaults False\n    Return the data keeping the timezone.\n\n    If keep_tz is True:\n\n      If the timezone is not set, the resulting\n      Series will have a datetime64[ns] dtype.\n\n      Otherwise the Series will have an datetime64[ns, tz] dtype; the\n      tz will be preserved.\n\n    If keep_tz is False:\n\n      Series will have a datetime64[ns] dtype. TZ aware\n      objects will have the tz removed.\n\n    .. versionchanged:: 0.24\n        The default value will change to True in a future release.\n        You can set ``keep_tz=True`` to already obtain the future\n        behaviour and silence the warning.\n\nindex : Index, optional\n    index of resulting Series. If None, defaults to original index\nname : string, optional\n    name of resulting Series. If None, defaults to name of original\n    index\n\nReturns\n-------\nSeries", "deprecated": false, "file": "pandas/core/indexes/datetimes.py", "file_line": 661, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/datetimes.py#L661", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["PR08", "Parameter \"index\" description should start with a capital letter"], ["PR09", "Parameter \"index\" description should finish with \".\""], ["PR06", "Parameter \"name\" type should use \"str\" instead of \"string\""], ["PR08", "Parameter \"name\" description should start with a capital letter"], ["PR09", "Parameter \"name\" description should finish with \".\""], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Conversion", "shared_code_with": ""}, "pandas.DatetimeIndex.to_frame": {"type": "function", "docstring": "Create a DataFrame with a column containing the Index.\n\n.. versionadded:: 0.24.0\n\nParameters\n----------\nindex : boolean, default True\n    Set the index of the returned DataFrame as the original Index.\n\nname : object, default None\n    The passed name should substitute for the index name (if it has\n    one).\n\nReturns\n-------\nDataFrame\n    DataFrame containing the original Index data.\n\nSee Also\n--------\nIndex.to_series : Convert an Index to a Series.\nSeries.to_frame : Convert Series to DataFrame.\n\nExamples\n--------\n>>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\n>>> idx.to_frame()\n       animal\nanimal\nAnt       Ant\nBear     Bear\nCow       Cow\n\nBy default, the original Index is reused. To enforce a new Index:\n\n>>> idx.to_frame(index=False)\n    animal\n0   Ant\n1  Bear\n2   Cow\n\nTo override the name of the resulting column, specify `name`:\n\n>>> idx.to_frame(index=False, name='zoo')\n    zoo\n0   Ant\n1  Bear\n2   Cow", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1221, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1221", "errors": [["PR06", "Parameter \"index\" type should use \"bool\" instead of \"boolean\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Conversion", "shared_code_with": "pandas.Index.to_frame"}, "pandas.DatetimeIndex.mean": {"type": "function", "docstring": "Return the mean value of the Array.\n\n.. versionadded:: 0.25.0\n\nParameters\n----------\nskipna : bool, default True\n    Whether to ignore any NaT elements\n\nReturns\n-------\nscalar (Timestamp or Timedelta)\n\nSee Also\n--------\nnumpy.ndarray.mean\nSeries.mean : Return the mean value in a Series.\n\nNotes\n-----\nmean is only defined for Datetime and Timedelta dtypes, not for Period.", "deprecated": false, "file": "pandas/core/indexes/datetimelike.py", "file_line": 58, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/datetimelike.py#L58", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {skipna}"], ["PR09", "Parameter \"skipna\" description should finish with \".\""], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"numpy.ndarray.mean\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "DatetimeIndex", "subsection": "Methods", "shared_code_with": ""}, "pandas.TimedeltaIndex": {"type": "type", "docstring": "Immutable ndarray of timedelta64 data, represented internally as int64, and\nwhich can be boxed to timedelta objects\n\nParameters\n----------\ndata  : array-like (1-dimensional), optional\n    Optional timedelta-like data to construct index with\nunit : unit of the arg (D,h,m,s,ms,us,ns) denote the unit, optional\n    which is an integer/float number\nfreq : string or pandas offset object, optional\n    One of pandas date offset strings or corresponding objects. The string\n    'infer' can be passed in order to set the frequency of the index as the\n    inferred frequency upon creation\ncopy  : bool\n    Make a copy of input ndarray\nstart : starting value, timedelta-like, optional\n    If data is None, start is used as the start point in generating regular\n    timedelta data.\n\n    .. deprecated:: 0.24.0\n\nperiods  : int, optional, > 0\n    Number of periods to generate, if generating index. Takes precedence\n    over end argument\n\n    .. deprecated:: 0.24.0\n\nend : end time, timedelta-like, optional\n    If periods is none, generated index will extend to first conforming\n    time on or just past end argument\n\n    .. deprecated:: 0.24. 0\n\nclosed : string or None, default None\n    Make the interval closed with respect to the given frequency to\n    the 'left', 'right', or both sides (None)\n\n    .. deprecated:: 0.24. 0\n\nname : object\n    Name to be stored in the index\n\nAttributes\n----------\ndays\nseconds\nmicroseconds\nnanoseconds\ncomponents\ninferred_freq\n\nMethods\n-------\nto_pytimedelta\nto_series\nround\nfloor\nceil\nto_frame\nmean\n\nSee Also\n--------\nIndex : The base pandas Index type.\nTimedelta : Represents a duration between two dates or times.\nDatetimeIndex : Index of datetime64 data.\nPeriodIndex : Index of Period data.\ntimedelta_range : Create a fixed-frequency TimedeltaIndex.\n\nNotes\n-----\nTo learn more about the frequency strings, please see `this link\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\nCreating a TimedeltaIndex based on `start`, `periods`, and `end` has\nbeen deprecated in favor of :func:`timedelta_range`.", "deprecated": false, "file": "pandas/core/indexes/timedeltas.py", "file_line": 66, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/timedeltas.py#L66", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {data, dtype, verify_integrity, copy, periods} not documented"], ["PR02", "Unknown parameters {periods , data , copy }"], ["PR09", "Parameter \"data \" description should finish with \".\""], ["PR08", "Parameter \"unit\" description should start with a capital letter"], ["PR09", "Parameter \"unit\" description should finish with \".\""], ["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"freq\" description should finish with \".\""], ["PR09", "Parameter \"copy \" description should finish with \".\""], ["PR09", "Parameter \"periods \" description should finish with \".\""], ["PR09", "Parameter \"end\" description should finish with \".\""], ["PR06", "Parameter \"closed\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"closed\" description should finish with \".\""], ["PR09", "Parameter \"name\" description should finish with \".\""]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "TimedeltaIndex", "subsection": "Methods", "shared_code_with": ""}, "pandas.TimedeltaIndex.days": {"type": "property", "docstring": "Number of days for each element.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "TimedeltaIndex", "subsection": "Components", "shared_code_with": "pandas.DatetimeIndex.is_leap_year"}, "pandas.TimedeltaIndex.seconds": {"type": "property", "docstring": "Number of seconds (>= 0 and less than 1 day) for each element.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "TimedeltaIndex", "subsection": "Components", "shared_code_with": "pandas.TimedeltaIndex.days"}, "pandas.TimedeltaIndex.microseconds": {"type": "property", "docstring": "Number of microseconds (>= 0 and less than 1 second) for each element.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "TimedeltaIndex", "subsection": "Components", "shared_code_with": "pandas.TimedeltaIndex.seconds"}, "pandas.TimedeltaIndex.nanoseconds": {"type": "property", "docstring": "Number of nanoseconds (>= 0 and less than 1 microsecond) for each element.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "TimedeltaIndex", "subsection": "Components", "shared_code_with": "pandas.TimedeltaIndex.microseconds"}, "pandas.TimedeltaIndex.components": {"type": "property", "docstring": "Return a dataframe of the components (days, hours, minutes,\nseconds, milliseconds, microseconds, nanoseconds) of the Timedeltas.\n\nReturns\n-------\na DataFrame", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "TimedeltaIndex", "subsection": "Components", "shared_code_with": "pandas.TimedeltaIndex.nanoseconds"}, "pandas.TimedeltaIndex.inferred_freq": {"type": "CachedProperty", "docstring": "Tryies to return a string representing a frequency guess,\ngenerated by infer_freq.  Returns None if it can't autodetect the\nfrequency.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "TimedeltaIndex", "subsection": "Components", "shared_code_with": "pandas.DatetimeIndex.inferred_freq"}, "pandas.TimedeltaIndex.to_pytimedelta": {"type": "function", "docstring": "Return Timedelta Array/Index as object ndarray of datetime.timedelta\nobjects.\n\nReturns\n-------\ndatetimes : ndarray", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "TimedeltaIndex", "subsection": "Conversion", "shared_code_with": "pandas.DatetimeIndex.to_pydatetime"}, "pandas.TimedeltaIndex.to_series": {"type": "function", "docstring": "Create a Series with both index and values equal to the index keys\nuseful with map for returning an indexer based on an index.\n\nParameters\n----------\nindex : Index, optional\n    index of resulting Series. If None, defaults to original index\nname : string, optional\n    name of resulting Series. If None, defaults to name of original\n    index\n\nReturns\n-------\nSeries : dtype will be based on the type of the Index values.", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1194, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1194", "errors": [["SS06", "Summary should fit in a single line"], ["PR08", "Parameter \"index\" description should start with a capital letter"], ["PR09", "Parameter \"index\" description should finish with \".\""], ["PR06", "Parameter \"name\" type should use \"str\" instead of \"string\""], ["PR08", "Parameter \"name\" description should start with a capital letter"], ["PR09", "Parameter \"name\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "TimedeltaIndex", "subsection": "Conversion", "shared_code_with": "pandas.Index.to_series"}, "pandas.TimedeltaIndex.round": {"type": "function", "docstring": "Perform round operation on the data to the specified `freq`.\n\nParameters\n----------\nfreq : str or Offset\n    The frequency level to round the index to. Must be a fixed\n    frequency like 'S' (second) not 'ME' (month end). See\n    :ref:`frequency aliases <timeseries.offset_aliases>` for\n    a list of possible `freq` values.\nambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n    Only relevant for DatetimeIndex:\n\n    - 'infer' will attempt to infer fall dst-transition hours based on\n      order\n    - bool-ndarray where True signifies a DST time, False designates\n      a non-DST time (note that this flag is only applicable for\n      ambiguous times)\n    - 'NaT' will return NaT where there are ambiguous times\n    - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n      times\n\n    .. versionadded:: 0.24.0\n\nnonexistent : 'shift_forward', 'shift_backward', 'NaT', timedelta, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST.\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nDatetimeIndex, TimedeltaIndex, or Series\n    Index of the same type for a DatetimeIndex or TimedeltaIndex,\n    or a Series with the same index for a Series.\n\nRaises\n------\nValueError if the `freq` cannot be converted.\n\nExamples\n--------\n**DatetimeIndex**\n\n>>> rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\n>>> rng\nDatetimeIndex(['2018-01-01 11:59:00', '2018-01-01 12:00:00',\n               '2018-01-01 12:01:00'],\n              dtype='datetime64[ns]', freq='T')\n>>> rng.round('H')\nDatetimeIndex(['2018-01-01 12:00:00', '2018-01-01 12:00:00',\n               '2018-01-01 12:00:00'],\n              dtype='datetime64[ns]', freq=None)\n\n**Series**\n\n>>> pd.Series(rng).dt.round(\"H\")\n0   2018-01-01 12:00:00\n1   2018-01-01 12:00:00\n2   2018-01-01 12:00:00\ndtype: datetime64[ns]", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {ambiguous, freq, nonexistent}"], ["PR09", "Parameter \"ambiguous\" description should finish with \".\""], ["PR09", "Parameter \"nonexistent\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "TimedeltaIndex", "subsection": "Conversion", "shared_code_with": "pandas.TimedeltaIndex.to_pytimedelta"}, "pandas.TimedeltaIndex.floor": {"type": "function", "docstring": "Perform floor operation on the data to the specified `freq`.\n\nParameters\n----------\nfreq : str or Offset\n    The frequency level to floor the index to. Must be a fixed\n    frequency like 'S' (second) not 'ME' (month end). See\n    :ref:`frequency aliases <timeseries.offset_aliases>` for\n    a list of possible `freq` values.\nambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n    Only relevant for DatetimeIndex:\n\n    - 'infer' will attempt to infer fall dst-transition hours based on\n      order\n    - bool-ndarray where True signifies a DST time, False designates\n      a non-DST time (note that this flag is only applicable for\n      ambiguous times)\n    - 'NaT' will return NaT where there are ambiguous times\n    - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n      times\n\n    .. versionadded:: 0.24.0\n\nnonexistent : 'shift_forward', 'shift_backward', 'NaT', timedelta, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST.\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nDatetimeIndex, TimedeltaIndex, or Series\n    Index of the same type for a DatetimeIndex or TimedeltaIndex,\n    or a Series with the same index for a Series.\n\nRaises\n------\nValueError if the `freq` cannot be converted.\n\nExamples\n--------\n**DatetimeIndex**\n\n>>> rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\n>>> rng\nDatetimeIndex(['2018-01-01 11:59:00', '2018-01-01 12:00:00',\n               '2018-01-01 12:01:00'],\n              dtype='datetime64[ns]', freq='T')\n>>> rng.floor('H')\nDatetimeIndex(['2018-01-01 11:00:00', '2018-01-01 12:00:00',\n               '2018-01-01 12:00:00'],\n              dtype='datetime64[ns]', freq=None)\n\n**Series**\n\n>>> pd.Series(rng).dt.floor(\"H\")\n0   2018-01-01 11:00:00\n1   2018-01-01 12:00:00\n2   2018-01-01 12:00:00\ndtype: datetime64[ns]", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {ambiguous, freq, nonexistent}"], ["PR09", "Parameter \"ambiguous\" description should finish with \".\""], ["PR09", "Parameter \"nonexistent\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "TimedeltaIndex", "subsection": "Conversion", "shared_code_with": "pandas.TimedeltaIndex.round"}, "pandas.TimedeltaIndex.ceil": {"type": "function", "docstring": "Perform ceil operation on the data to the specified `freq`.\n\nParameters\n----------\nfreq : str or Offset\n    The frequency level to ceil the index to. Must be a fixed\n    frequency like 'S' (second) not 'ME' (month end). See\n    :ref:`frequency aliases <timeseries.offset_aliases>` for\n    a list of possible `freq` values.\nambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n    Only relevant for DatetimeIndex:\n\n    - 'infer' will attempt to infer fall dst-transition hours based on\n      order\n    - bool-ndarray where True signifies a DST time, False designates\n      a non-DST time (note that this flag is only applicable for\n      ambiguous times)\n    - 'NaT' will return NaT where there are ambiguous times\n    - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n      times\n\n    .. versionadded:: 0.24.0\n\nnonexistent : 'shift_forward', 'shift_backward', 'NaT', timedelta, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST.\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nDatetimeIndex, TimedeltaIndex, or Series\n    Index of the same type for a DatetimeIndex or TimedeltaIndex,\n    or a Series with the same index for a Series.\n\nRaises\n------\nValueError if the `freq` cannot be converted.\n\nExamples\n--------\n**DatetimeIndex**\n\n>>> rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\n>>> rng\nDatetimeIndex(['2018-01-01 11:59:00', '2018-01-01 12:00:00',\n               '2018-01-01 12:01:00'],\n              dtype='datetime64[ns]', freq='T')\n>>> rng.ceil('H')\nDatetimeIndex(['2018-01-01 12:00:00', '2018-01-01 12:00:00',\n               '2018-01-01 13:00:00'],\n              dtype='datetime64[ns]', freq=None)\n\n**Series**\n\n>>> pd.Series(rng).dt.ceil(\"H\")\n0   2018-01-01 12:00:00\n1   2018-01-01 12:00:00\n2   2018-01-01 13:00:00\ndtype: datetime64[ns]", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {ambiguous, freq, nonexistent}"], ["PR09", "Parameter \"ambiguous\" description should finish with \".\""], ["PR09", "Parameter \"nonexistent\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "TimedeltaIndex", "subsection": "Conversion", "shared_code_with": "pandas.TimedeltaIndex.floor"}, "pandas.TimedeltaIndex.to_frame": {"type": "function", "docstring": "Create a DataFrame with a column containing the Index.\n\n.. versionadded:: 0.24.0\n\nParameters\n----------\nindex : boolean, default True\n    Set the index of the returned DataFrame as the original Index.\n\nname : object, default None\n    The passed name should substitute for the index name (if it has\n    one).\n\nReturns\n-------\nDataFrame\n    DataFrame containing the original Index data.\n\nSee Also\n--------\nIndex.to_series : Convert an Index to a Series.\nSeries.to_frame : Convert Series to DataFrame.\n\nExamples\n--------\n>>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\n>>> idx.to_frame()\n       animal\nanimal\nAnt       Ant\nBear     Bear\nCow       Cow\n\nBy default, the original Index is reused. To enforce a new Index:\n\n>>> idx.to_frame(index=False)\n    animal\n0   Ant\n1  Bear\n2   Cow\n\nTo override the name of the resulting column, specify `name`:\n\n>>> idx.to_frame(index=False, name='zoo')\n    zoo\n0   Ant\n1  Bear\n2   Cow", "deprecated": false, "file": "pandas/core/indexes/base.py", "file_line": 1221, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L1221", "errors": [["PR06", "Parameter \"index\" type should use \"bool\" instead of \"boolean\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "TimedeltaIndex", "subsection": "Conversion", "shared_code_with": "pandas.DatetimeIndex.to_frame"}, "pandas.TimedeltaIndex.mean": {"type": "function", "docstring": "Return the mean value of the Array.\n\n.. versionadded:: 0.25.0\n\nParameters\n----------\nskipna : bool, default True\n    Whether to ignore any NaT elements\n\nReturns\n-------\nscalar (Timestamp or Timedelta)\n\nSee Also\n--------\nnumpy.ndarray.mean\nSeries.mean : Return the mean value in a Series.\n\nNotes\n-----\nmean is only defined for Datetime and Timedelta dtypes, not for Period.", "deprecated": false, "file": "pandas/core/indexes/datetimelike.py", "file_line": 58, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/datetimelike.py#L58", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {skipna}"], ["PR09", "Parameter \"skipna\" description should finish with \".\""], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"numpy.ndarray.mean\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "TimedeltaIndex", "subsection": "Methods", "shared_code_with": "pandas.DatetimeIndex.mean"}, "pandas.PeriodIndex": {"type": "type", "docstring": "Immutable ndarray holding ordinal values indicating regular periods in\ntime such as particular years, quarters, months, etc.\n\nIndex keys are boxed to Period objects which carries the metadata (eg,\nfrequency information).\n\nParameters\n----------\ndata : array-like (1d integer np.ndarray or PeriodArray), optional\n    Optional period-like data to construct index with\ncopy : bool\n    Make a copy of input ndarray\nfreq : string or period object, optional\n    One of pandas period strings or corresponding objects\nstart : starting value, period-like, optional\n    If data is None, used as the start point in generating regular\n    period data.\n\n    .. deprecated:: 0.24.0\n\nperiods : int, optional, > 0\n    Number of periods to generate, if generating index. Takes precedence\n    over end argument\n\n    .. deprecated:: 0.24.0\n\nend : end value, period-like, optional\n    If periods is none, generated index will extend to first conforming\n    period on or just past end argument\n\n    .. deprecated:: 0.24.0\n\nyear : int, array, or Series, default None\nmonth : int, array, or Series, default None\nquarter : int, array, or Series, default None\nday : int, array, or Series, default None\nhour : int, array, or Series, default None\nminute : int, array, or Series, default None\nsecond : int, array, or Series, default None\ntz : object, default None\n    Timezone for converting datetime64 data to Periods\ndtype : str or PeriodDtype, default None\n\nAttributes\n----------\nday\ndayofweek\ndayofyear\ndays_in_month\ndaysinmonth\nend_time\nfreq\nfreqstr\nhour\nis_leap_year\nminute\nmonth\nquarter\nqyear\nsecond\nstart_time\nweek\nweekday\nweekofyear\nyear\n\nMethods\n-------\nasfreq\nstrftime\nto_timestamp\n\nSee Also\n--------\nIndex : The base pandas Index type.\nPeriod : Represents a period of time.\nDatetimeIndex : Index with datetime64 data.\nTimedeltaIndex : Index of timedelta64 data.\nperiod_range : Create a fixed-frequency PeriodIndex.\n\nNotes\n-----\nCreating a PeriodIndex based on `start`, `periods`, and `end` has\nbeen deprecated in favor of :func:`period_range`.\n\nExamples\n--------\n>>> idx = pd.PeriodIndex(year=year_arr, quarter=q_arr)", "deprecated": false, "file": "pandas/core/indexes/period.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/period.py#L78", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {ordinal, **fields, name} not documented"], ["PR02", "Unknown parameters {month, minute, year, second, day, quarter, hour}"], ["PR06", "Parameter \"data\" type should use \"int\" instead of \"integer\""], ["PR09", "Parameter \"data\" description should finish with \".\""], ["PR09", "Parameter \"copy\" description should finish with \".\""], ["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"freq\" description should finish with \".\""], ["PR09", "Parameter \"periods\" description should finish with \".\""], ["PR09", "Parameter \"end\" description should finish with \".\""], ["PR07", "Parameter \"year\" has no description"], ["PR07", "Parameter \"month\" has no description"], ["PR07", "Parameter \"quarter\" has no description"], ["PR07", "Parameter \"day\" has no description"], ["PR07", "Parameter \"hour\" has no description"], ["PR07", "Parameter \"minute\" has no description"], ["PR07", "Parameter \"second\" has no description"], ["PR09", "Parameter \"tz\" description should finish with \".\""], ["PR07", "Parameter \"dtype\" has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 89, in pandas.PeriodIndex\nFailed example:\n    idx = pd.PeriodIndex(year=year_arr, quarter=q_arr)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.PeriodIndex[0]>\", line 1, in <module>\n        idx = pd.PeriodIndex(year=year_arr, quarter=q_arr)\n    NameError: name 'year_arr' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'year_arr' (2 times)"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 89, in pandas.PeriodIndex\nFailed example:\n    idx = pd.PeriodIndex(year=year_arr, quarter=q_arr)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.PeriodIndex[0]>\", line 1, in <module>\n        idx = pd.PeriodIndex(year=year_arr, quarter=q_arr)\n    NameError: name 'year_arr' is not defined\n", "in_api": true, "section": "PeriodIndex", "subsection": "Methods", "shared_code_with": ""}, "pandas.PeriodIndex.day": {"type": "property", "docstring": "The days of the period.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Properties", "shared_code_with": "pandas.TimedeltaIndex.components"}, "pandas.PeriodIndex.dayofweek": {"type": "property", "docstring": "The day of the week with Monday=0, Sunday=6.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Properties", "shared_code_with": "pandas.PeriodIndex.day"}, "pandas.PeriodIndex.dayofyear": {"type": "property", "docstring": "The ordinal day of the year.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Properties", "shared_code_with": "pandas.PeriodIndex.dayofweek"}, "pandas.PeriodIndex.days_in_month": {"type": "property", "docstring": "The number of days in the month.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Properties", "shared_code_with": "pandas.PeriodIndex.dayofyear"}, "pandas.PeriodIndex.daysinmonth": {"type": "property", "docstring": "The number of days in the month.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Properties", "shared_code_with": "pandas.PeriodIndex.days_in_month"}, "pandas.PeriodIndex.end_time": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Properties", "shared_code_with": "pandas.PeriodIndex.daysinmonth"}, "pandas.PeriodIndex.freq": {"type": "property", "docstring": "Return the frequency object if it is set, otherwise None.", "deprecated": false, "file": "pandas/core/indexes/period.py", "file_line": 312, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/period.py#L312", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Properties", "shared_code_with": ""}, "pandas.PeriodIndex.freqstr": {"type": "property", "docstring": "Return the frequency object as a string if it is set, otherwise None.", "deprecated": false, "file": "pandas/core/indexes/datetimelike.py", "file_line": 113, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/datetimelike.py#L113", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Properties", "shared_code_with": "pandas.DatetimeIndex.freqstr"}, "pandas.PeriodIndex.hour": {"type": "property", "docstring": "The hour of the period.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Properties", "shared_code_with": "pandas.PeriodIndex.end_time"}, "pandas.PeriodIndex.is_leap_year": {"type": "property", "docstring": "Logical indicating if the date belongs to a leap year", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [["SS03", "Summary does not end with a period"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Properties", "shared_code_with": "pandas.PeriodIndex.hour"}, "pandas.PeriodIndex.minute": {"type": "property", "docstring": "The minute of the period.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Properties", "shared_code_with": "pandas.PeriodIndex.is_leap_year"}, "pandas.PeriodIndex.month": {"type": "property", "docstring": "The month as January=1, December=12.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Properties", "shared_code_with": "pandas.PeriodIndex.minute"}, "pandas.PeriodIndex.quarter": {"type": "property", "docstring": "The quarter of the date.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Properties", "shared_code_with": "pandas.PeriodIndex.month"}, "pandas.PeriodIndex.qyear": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Properties", "shared_code_with": "pandas.PeriodIndex.quarter"}, "pandas.PeriodIndex.second": {"type": "property", "docstring": "The second of the period.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Properties", "shared_code_with": "pandas.PeriodIndex.qyear"}, "pandas.PeriodIndex.start_time": {"type": "property", "docstring": "", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Properties", "shared_code_with": "pandas.PeriodIndex.second"}, "pandas.PeriodIndex.week": {"type": "property", "docstring": "The week ordinal of the year.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Properties", "shared_code_with": "pandas.PeriodIndex.start_time"}, "pandas.PeriodIndex.weekday": {"type": "property", "docstring": "The day of the week with Monday=0, Sunday=6.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Properties", "shared_code_with": "pandas.PeriodIndex.week"}, "pandas.PeriodIndex.weekofyear": {"type": "property", "docstring": "The week ordinal of the year.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Properties", "shared_code_with": "pandas.PeriodIndex.weekday"}, "pandas.PeriodIndex.year": {"type": "property", "docstring": "The year of the period.", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 78, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L78", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Properties", "shared_code_with": "pandas.PeriodIndex.weekofyear"}, "pandas.PeriodIndex.asfreq": {"type": "function", "docstring": "Convert the Period Array/Index to the specified frequency `freq`.\n\nParameters\n----------\nfreq : str\n    a frequency\nhow : str {'E', 'S'}\n    'E', 'END', or 'FINISH' for end,\n    'S', 'START', or 'BEGIN' for start.\n    Whether the elements should be aligned to the end\n    or start within pa period. January 31st ('END') vs.\n    January 1st ('START') for example.\n\nReturns\n-------\nnew : Period Array/Index with the new frequency\n\nExamples\n--------\n>>> pidx = pd.period_range('2010-01-01', '2015-01-01', freq='A')\n>>> pidx\nPeriodIndex(['2010', '2011', '2012', '2013', '2014', '2015'],\ndtype='period[A-DEC]', freq='A-DEC')\n\n>>> pidx.asfreq('M')\nPeriodIndex(['2010-12', '2011-12', '2012-12', '2013-12', '2014-12',\n'2015-12'], dtype='period[M]', freq='M')\n\n>>> pidx.asfreq('M', how='S')\nPeriodIndex(['2010-01', '2011-01', '2012-01', '2013-01', '2014-01',\n'2015-01'], dtype='period[M]', freq='M')", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {freq, how}"], ["PR08", "Parameter \"freq\" description should start with a capital letter"], ["PR09", "Parameter \"freq\" description should finish with \".\""], ["PR08", "Parameter \"how\" description should start with a capital letter"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Methods", "shared_code_with": "pandas.TimedeltaIndex.ceil"}, "pandas.PeriodIndex.strftime": {"type": "function", "docstring": "Convert to Index using specified date_format.\n\nReturn an Index of formatted strings specified by date_format, which\nsupports the same string format as the python standard library. Details\nof the string format can be found in `python string format\ndoc <https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior>`__.\n\nParameters\n----------\ndate_format : str\n    Date format string (e.g. \"%Y-%m-%d\").\n\nReturns\n-------\nndarray\n    NumPy ndarray of formatted strings.\n\nSee Also\n--------\nto_datetime : Convert the given argument to datetime.\nDatetimeIndex.normalize : Return DatetimeIndex with times to midnight.\nDatetimeIndex.round : Round the DatetimeIndex to the specified freq.\nDatetimeIndex.floor : Floor the DatetimeIndex to the specified freq.\n\nExamples\n--------\n>>> rng = pd.date_range(pd.Timestamp(\"2018-03-10 09:00\"),\n...                     periods=3, freq='s')\n>>> rng.strftime('%B %d, %Y, %r')\nIndex(['March 10, 2018, 09:00:00 AM', 'March 10, 2018, 09:00:01 AM',\n       'March 10, 2018, 09:00:02 AM'],\n      dtype='object')", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {date_format}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Methods", "shared_code_with": "pandas.PeriodIndex.asfreq"}, "pandas.PeriodIndex.to_timestamp": {"type": "function", "docstring": "Cast to DatetimeArray/Index.\n\nParameters\n----------\nfreq : string or DateOffset, optional\n    Target frequency. The default is 'D' for week or longer,\n    'S' otherwise\nhow : {'s', 'e', 'start', 'end'}\n\nReturns\n-------\nDatetimeArray/Index", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 92, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L92", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {freq, how}"], ["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"freq\" description should finish with \".\""], ["PR07", "Parameter \"how\" has no description"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "PeriodIndex", "subsection": "Methods", "shared_code_with": "pandas.PeriodIndex.strftime"}, "pandas.core.window.rolling.Rolling.count": {"type": "function", "docstring": "The rolling count of any non-NaN observations inside the window.\n\nReturns\n-------\nSeries or DataFrame\n    Returned object type is determined by the caller of the rolling\n    calculation.\n\nSee Also\n--------\nSeries.rolling : Calling object with Series data.\nDataFrame.rolling : Calling object with DataFrames.\nDataFrame.count : Count of the full DataFrame.\n\nExamples\n--------\n>>> s = pd.Series([2, 3, np.nan, 10])\n>>> s.rolling(2).count()\n0    1.0\n1    2.0\n2    1.0\n3    1.0\ndtype: float64\n>>> s.rolling(3).count()\n0    1.0\n1    2.0\n2    2.0\n3    2.0\ndtype: float64\n>>> s.rolling(4).count()\n0    1.0\n1    2.0\n2    2.0\n3    3.0\ndtype: float64", "deprecated": false, "file": "pandas/core/window/rolling.py", "file_line": 1796, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/rolling.py#L1796", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Standard moving window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.rolling.Rolling.sum": {"type": "function", "docstring": "Calculate rolling sum of given DataFrame or Series.\n\nParameters\n----------\n*args, **kwargs\n    For compatibility with other rolling methods. Has no effect\n    on the computed value.\n\nReturns\n-------\nSeries or DataFrame\n    Same type as the input, with the same index, containing the\n    rolling sum.\n\nSee Also\n--------\nSeries.sum : Reducing sum for Series.\nDataFrame.sum : Reducing sum for DataFrame.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4, 5])\n>>> s\n0    1\n1    2\n2    3\n3    4\n4    5\ndtype: int64\n\n>>> s.rolling(3).sum()\n0     NaN\n1     NaN\n2     6.0\n3     9.0\n4    12.0\ndtype: float64\n\n>>> s.expanding(3).sum()\n0     NaN\n1     NaN\n2     6.0\n3    10.0\n4    15.0\ndtype: float64\n\n>>> s.rolling(3, center=True).sum()\n0     NaN\n1     6.0\n2     9.0\n3    12.0\n4     NaN\ndtype: float64\n\nFor DataFrame, each rolling sum is computed column-wise.\n\n>>> df = pd.DataFrame({\"A\": s, \"B\": s ** 2})\n>>> df\n   A   B\n0  1   1\n1  2   4\n2  3   9\n3  4  16\n4  5  25\n\n>>> df.rolling(3).sum()\n      A     B\n0   NaN   NaN\n1   NaN   NaN\n2   6.0  14.0\n3   9.0  29.0\n4  12.0  50.0", "deprecated": false, "file": "pandas/core/window/rolling.py", "file_line": 1811, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/rolling.py#L1811", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs}"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Standard moving window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.rolling.Rolling.mean": {"type": "function", "docstring": "Calculate the rolling mean of the values.\n\nParameters\n----------\n*args\n    Under Review.\n**kwargs\n    Under Review.\n\nReturns\n-------\nSeries or DataFrame\n    Returned object type is determined by the caller of the rolling\n    calculation.\n\nSee Also\n--------\nSeries.rolling : Calling object with Series data.\nDataFrame.rolling : Calling object with DataFrames.\nSeries.mean : Equivalent method for Series.\nDataFrame.mean : Equivalent method for DataFrame.\n\nExamples\n--------\nThe below examples will show rolling mean calculations with window sizes of\ntwo and three, respectively.\n\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s.rolling(2).mean()\n0    NaN\n1    1.5\n2    2.5\n3    3.5\ndtype: float64\n\n>>> s.rolling(3).mean()\n0    NaN\n1    NaN\n2    2.0\n3    3.0\ndtype: float64", "deprecated": false, "file": "pandas/core/window/rolling.py", "file_line": 1830, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/rolling.py#L1830", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Standard moving window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.rolling.Rolling.median": {"type": "function", "docstring": "Calculate the rolling median.\n\nParameters\n----------\n**kwargs\n    For compatibility with other rolling methods. Has no effect\n    on the computed median.\n\nReturns\n-------\nSeries or DataFrame\n    Returned type is the same as the original object.\n\nSee Also\n--------\nSeries.rolling : Calling object with Series data.\nDataFrame.rolling : Calling object with DataFrames.\nSeries.median : Equivalent method for Series.\nDataFrame.median : Equivalent method for DataFrame.\n\nExamples\n--------\nCompute the rolling median of a series with a window size of 3.\n\n>>> s = pd.Series([0, 1, 2, 3, 4])\n>>> s.rolling(3).median()\n0    NaN\n1    NaN\n2    1.0\n3    2.0\n4    3.0\ndtype: float64", "deprecated": false, "file": "pandas/core/window/rolling.py", "file_line": 1836, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/rolling.py#L1836", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Standard moving window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.rolling.Rolling.var": {"type": "function", "docstring": "Calculate unbiased rolling variance.\n\nNormalized by N-1 by default. This can be changed using the `ddof`\nargument.\n\nParameters\n----------\nddof : int, default 1\n    Delta Degrees of Freedom.  The divisor used in calculations\n    is ``N - ddof``, where ``N`` represents the number of elements.\n*args, **kwargs\n    For NumPy compatibility. No additional arguments are used.\n\nReturns\n-------\nSeries or DataFrame\n    Returns the same object type as the caller of the rolling calculation.\n\nSee Also\n--------\nSeries.rolling : Calling object with Series data.\nDataFrame.rolling : Calling object with DataFrames.\nSeries.var : Equivalent method for Series.\nDataFrame.var : Equivalent method for DataFrame.\nnumpy.var : Equivalent method for Numpy array.\n\nNotes\n-----\nThe default `ddof` of 1 used in :meth:`Series.var` is different than the\ndefault `ddof` of 0 in :func:`numpy.var`.\n\nA minimum of 1 period is required for the rolling calculation.\n\nExamples\n--------\n>>> s = pd.Series([5, 5, 6, 7, 5, 5, 5])\n>>> s.rolling(3).var()\n0         NaN\n1         NaN\n2    0.333333\n3    1.000000\n4    1.000000\n5    1.333333\n6    0.000000\ndtype: float64\n\n>>> s.expanding(3).var()\n0         NaN\n1         NaN\n2    0.333333\n3    0.916667\n4    0.800000\n5    0.700000\n6    0.619048\ndtype: float64", "deprecated": false, "file": "pandas/core/window/rolling.py", "file_line": 1847, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/rolling.py#L1847", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Standard moving window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.rolling.Rolling.std": {"type": "function", "docstring": "Calculate rolling standard deviation.\n\nNormalized by N-1 by default. This can be changed using the `ddof`\nargument.\n\nParameters\n----------\nddof : int, default 1\n    Delta Degrees of Freedom.  The divisor used in calculations\n    is ``N - ddof``, where ``N`` represents the number of elements.\n*args, **kwargs\n    For NumPy compatibility. No additional arguments are used.\n\nReturns\n-------\nSeries or DataFrame\n    Returns the same object type as the caller of the rolling calculation.\n\nSee Also\n--------\nSeries.rolling : Calling object with Series data.\nDataFrame.rolling : Calling object with DataFrames.\nSeries.std : Equivalent method for Series.\nDataFrame.std : Equivalent method for DataFrame.\nnumpy.std : Equivalent method for Numpy array.\n\nNotes\n-----\nThe default `ddof` of 1 used in Series.std is different than the default\n`ddof` of 0 in numpy.std.\n\nA minimum of one period is required for the rolling calculation.\n\nExamples\n--------\n>>> s = pd.Series([5, 5, 6, 7, 5, 5, 5])\n>>> s.rolling(3).std()\n0         NaN\n1         NaN\n2    0.577350\n3    1.000000\n4    1.000000\n5    1.154701\n6    0.000000\ndtype: float64\n\n>>> s.expanding(3).std()\n0         NaN\n1         NaN\n2    0.577350\n3    0.957427\n4    0.894427\n5    0.836660\n6    0.786796\ndtype: float64", "deprecated": false, "file": "pandas/core/window/rolling.py", "file_line": 1841, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/rolling.py#L1841", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Standard moving window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.rolling.Rolling.min": {"type": "function", "docstring": "Calculate the rolling minimum.\n\nParameters\n----------\n**kwargs\n    Under Review.\n\nReturns\n-------\nSeries or DataFrame\n    Returned object type is determined by the caller of the rolling\n    calculation.\n\nSee Also\n--------\nSeries.rolling : Calling object with a Series.\nDataFrame.rolling : Calling object with a DataFrame.\nSeries.min : Similar method for Series.\nDataFrame.min : Similar method for DataFrame.\n\nExamples\n--------\nPerforming a rolling minimum with a window size of 3.\n\n>>> s = pd.Series([4, 3, 5, 2, 6])\n>>> s.rolling(3).min()\n0    NaN\n1    NaN\n2    3.0\n3    2.0\n4    2.0\ndtype: float64", "deprecated": false, "file": "pandas/core/window/rolling.py", "file_line": 1824, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/rolling.py#L1824", "errors": [["PR01", "Parameters {*args} not documented"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Standard moving window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.rolling.Rolling.max": {"type": "function", "docstring": "Calculate the rolling maximum.\n\nParameters\n----------\n*args, **kwargs\n    Arguments and keyword arguments to be passed into func.\n\n        Returns\n        -------\n        Series or DataFrame\n            Return type is determined by the caller.\n\n        See Also\n        --------\n        Series.rolling : Series rolling.\n        DataFrame.rolling : DataFrame rolling.", "deprecated": false, "file": "pandas/core/window/rolling.py", "file_line": 1817, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/rolling.py#L1817", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs}"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Standard moving window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.rolling.Rolling.corr": {"type": "function", "docstring": "Calculate rolling correlation.\n\nParameters\n----------\nother : Series, DataFrame, or ndarray, optional\n    If not supplied then will default to self.\npairwise : bool, default None\n    Calculate pairwise combinations of columns within a\n    DataFrame. If `other` is not specified, defaults to `True`,\n    otherwise defaults to `False`.\n    Not relevant for :class:`~pandas.Series`.\n**kwargs\n    Unused.\n\nReturns\n-------\nSeries or DataFrame\n    Returned object type is determined by the caller of the\n    rolling calculation.\n\nSee Also\n--------\nSeries.rolling : Calling object with Series data.\nDataFrame.rolling : Calling object with DataFrames.\nSeries.corr : Equivalent method for Series.\nDataFrame.corr : Equivalent method for DataFrame.\nrolling.cov : Similar method to calculate covariance.\nnumpy.corrcoef : NumPy Pearson's correlation calculation.\n\nNotes\n-----\nThis function uses Pearson's definition of correlation\n(https://en.wikipedia.org/wiki/Pearson_correlation_coefficient).\n\nWhen `other` is not specified, the output will be self correlation (e.g.\nall 1's), except for :class:`~pandas.DataFrame` inputs with `pairwise`\nset to `True`.\n\nFunction will return ``NaN`` for correlations of equal valued sequences;\nthis is the result of a 0/0 division error.\n\nWhen `pairwise` is set to `False`, only matching columns between `self` and\n`other` will be used.\n\nWhen `pairwise` is set to `True`, the output will be a MultiIndex DataFrame\nwith the original index on the first level, and the `other` DataFrame\ncolumns on the second level.\n\nIn the case of missing elements, only complete pairwise observations\nwill be used.\n\nExamples\n--------\nThe below example shows a rolling calculation with a window size of\nfour matching the equivalent function call using :meth:`numpy.corrcoef`.\n\n>>> v1 = [3, 3, 3, 5, 8]\n>>> v2 = [3, 4, 4, 4, 8]\n>>> fmt = \"{0:.6f}\"  # limit the printed precision to 6 digits\n>>> # numpy returns a 2X2 array, the correlation coefficient\n>>> # is the number at entry [0][1]\n>>> print(fmt.format(np.corrcoef(v1[:-1], v2[:-1])[0][1]))\n0.333333\n>>> print(fmt.format(np.corrcoef(v1[1:], v2[1:])[0][1]))\n0.916949\n>>> s1 = pd.Series(v1)\n>>> s2 = pd.Series(v2)\n>>> s1.rolling(4).corr(s2)\n0         NaN\n1         NaN\n2         NaN\n3    0.333333\n4    0.916949\ndtype: float64\n\nThe below example shows a similar rolling calculation on a\nDataFrame using the pairwise option.\n\n>>> matrix = np.array([[51., 35.], [49., 30.], [47., 32.],    [46., 31.], [50., 36.]])\n>>> print(np.corrcoef(matrix[:-1,0], matrix[:-1,1]).round(7))\n[[1.         0.6263001]\n [0.6263001  1.       ]]\n>>> print(np.corrcoef(matrix[1:,0], matrix[1:,1]).round(7))\n[[1.         0.5553681]\n [0.5553681  1.        ]]\n>>> df = pd.DataFrame(matrix, columns=['X','Y'])\n>>> df\n      X     Y\n0  51.0  35.0\n1  49.0  30.0\n2  47.0  32.0\n3  46.0  31.0\n4  50.0  36.0\n>>> df.rolling(4).corr(pairwise=True)\n            X         Y\n0 X       NaN       NaN\n  Y       NaN       NaN\n1 X       NaN       NaN\n  Y       NaN       NaN\n2 X       NaN       NaN\n  Y       NaN       NaN\n3 X  1.000000  0.626300\n  Y  0.626300  1.000000\n4 X  1.000000  0.555368\n  Y  0.555368  1.000000", "deprecated": false, "file": "pandas/core/window/rolling.py", "file_line": 1904, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/rolling.py#L1904", "errors": [["EX03", "flake8 error: E231 missing whitespace after ',' (5 times)"], ["EX03", "flake8 error: E241 multiple spaces after ','"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Standard moving window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.rolling.Rolling.cov": {"type": "function", "docstring": "Calculate the rolling sample covariance.\n\nParameters\n----------\nother : Series, DataFrame, or ndarray, optional\n    If not supplied then will default to self and produce pairwise\n    output.\npairwise : bool, default None\n    If False then only matching columns between self and other will be\n    used and the output will be a DataFrame.\n    If True then all pairwise combinations will be calculated and the\n    output will be a MultiIndexed DataFrame in the case of DataFrame\n    inputs. In the case of missing elements, only complete pairwise\n    observations will be used.\nddof : int, default 1\n    Delta Degrees of Freedom.  The divisor used in calculations\n    is ``N - ddof``, where ``N`` represents the number of elements.\n**kwargs\n    Keyword arguments to be passed into func.\n\n        Returns\n        -------\n        Series or DataFrame\n            Return type is determined by the caller.\n\n        See Also\n        --------\n        Series.rolling : Series rolling.\n        DataFrame.rolling : DataFrame rolling.", "deprecated": false, "file": "pandas/core/window/rolling.py", "file_line": 1898, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/rolling.py#L1898", "errors": [], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Standard moving window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.rolling.Rolling.skew": {"type": "function", "docstring": "Unbiased rolling skewness.\n\nParameters\n----------\n**kwargs\n    Keyword arguments to be passed into func.\n\n        Returns\n        -------\n        Series or DataFrame\n            Return type is determined by the caller.\n\n        See Also\n        --------\n        Series.rolling : Series rolling.\n        DataFrame.rolling : DataFrame rolling.", "deprecated": false, "file": "pandas/core/window/rolling.py", "file_line": 1853, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/rolling.py#L1853", "errors": [], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Standard moving window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.rolling.Rolling.kurt": {"type": "function", "docstring": "Calculate unbiased rolling kurtosis.\n\nThis function uses Fisher's definition of kurtosis without bias.\n\nParameters\n----------\n**kwargs\n    Under Review.\n\nReturns\n-------\nSeries or DataFrame\n    Returned object type is determined by the caller of the rolling\n    calculation.\n\nSee Also\n--------\nSeries.rolling : Calling object with Series data.\nDataFrame.rolling : Calling object with DataFrames.\nSeries.kurt : Equivalent method for Series.\nDataFrame.kurt : Equivalent method for DataFrame.\nscipy.stats.skew : Third moment of a probability density.\nscipy.stats.kurtosis : Reference SciPy method.\n\nNotes\n-----\nA minimum of 4 periods is required for the rolling calculation.\n\nExamples\n--------\n\nThe example below will show a rolling calculation with a window size of\nfour matching the equivalent function call using `scipy.stats`.\n\n>>> arr = [1, 2, 3, 4, 999]\n>>> fmt = \"{0:.6f}\"  # limit the printed precision to 6 digits\n>>> import scipy.stats\n>>> print(fmt.format(scipy.stats.kurtosis(arr[:-1], bias=False)))\n-1.200000\n>>> print(fmt.format(scipy.stats.kurtosis(arr[1:], bias=False)))\n3.999946\n>>> s = pd.Series(arr)\n>>> s.rolling(4).kurt()\n0         NaN\n1         NaN\n2         NaN\n3   -1.200000\n4    3.999946\ndtype: float64", "deprecated": false, "file": "pandas/core/window/rolling.py", "file_line": 1885, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/rolling.py#L1885", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Standard moving window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.rolling.Rolling.apply": {"type": "function", "docstring": "The rolling function's apply function.\n\nParameters\n----------\nfunc : function\n    Must produce a single value from an ndarray input if ``raw=True``\n    or a single value from a Series if ``raw=False``.\nraw : bool, default None\n    * ``False`` : passes each row or column as a Series to the\n      function.\n    * ``True`` or ``None`` : the passed function will receive ndarray\n      objects instead.\n      If you are just applying a NumPy reduction function this will\n      achieve much better performance.\n\n    The `raw` parameter is required and will show a FutureWarning if\n    not passed. In the future `raw` will default to False.\n\n    .. versionadded:: 0.23.0\n*args, **kwargs\n    Arguments and keyword arguments to be passed into func.\n\nReturns\n-------\nSeries or DataFrame\n    Return type is determined by the caller.\n\nSee Also\n--------\nSeries.rolling : Series rolling.\nDataFrame.rolling : DataFrame rolling.", "deprecated": false, "file": "pandas/core/window/rolling.py", "file_line": 1806, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/rolling.py#L1806", "errors": [["PR01", "Parameters {kwargs, args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs}"], ["PR08", "Parameter \"raw\" description should start with a capital letter"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Standard moving window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.rolling.Rolling.aggregate": {"type": "function", "docstring": "Aggregate using one or more operations over the specified axis.\n\nParameters\n----------\nfunc : function, str, list or dict\n    Function to use for aggregating the data. If a function, must either\n    work when passed a Series/Dataframe or when passed to Series/Dataframe.apply.\n\n    Accepted combinations are:\n\n    - function\n    - string function name\n    - list of functions and/or function names, e.g. ``[np.sum, 'mean']``\n    - dict of axis labels -> functions, function names or list of such.\n\n*args\n    Positional arguments to pass to `func`.\n**kwargs\n    Keyword arguments to pass to `func`.\n\nReturns\n-------\nscalar, Series or DataFrame\n\n    The return can be:\n\n    * scalar : when Series.agg is called with single function\n    * Series : when DataFrame.agg is called with a single function\n    * DataFrame : when DataFrame.agg is called with several functions\n\n    Return scalar, Series or DataFrame.\n\nSee Also\n--------\nSeries.rolling\nDataFrame.rolling\n\nNotes\n-----\n`agg` is an alias for `aggregate`. Use the alias.\n\nA passed user-defined-function will be passed a Series for evaluation.\n\nExamples\n--------\n\n>>> df = pd.DataFrame(np.random.randn(10, 3), columns=['A', 'B', 'C'])\n>>> df\n          A         B         C\n0 -2.385977 -0.102758  0.438822\n1 -1.004295  0.905829 -0.954544\n2  0.735167 -0.165272 -1.619346\n3 -0.702657 -1.340923 -0.706334\n4 -0.246845  0.211596 -0.901819\n5  2.463718  3.157577 -1.380906\n6 -1.142255  2.340594 -0.039875\n7  1.396598 -1.647453  1.677227\n8 -0.543425  1.761277 -0.220481\n9 -0.640505  0.289374 -1.550670\n\n>>> df.rolling(3).sum()\n          A         B         C\n0       NaN       NaN       NaN\n1       NaN       NaN       NaN\n2 -2.655105  0.637799 -2.135068\n3 -0.971785 -0.600366 -3.280224\n4 -0.214334 -1.294599 -3.227500\n5  1.514216  2.028250 -2.989060\n6  1.074618  5.709767 -2.322600\n7  2.718061  3.850718  0.256446\n8 -0.289082  2.454418  1.416871\n9  0.212668  0.403198 -0.093924\n\n>>> df.rolling(3).agg({'A':'sum', 'B':'min'})\n          A         B\n0       NaN       NaN\n1       NaN       NaN\n2 -2.655105 -0.165272\n3 -0.971785 -1.340923\n4 -0.214334 -1.340923\n5  1.514216 -1.340923\n6  1.074618  0.211596\n7  2.718061 -1.647453\n8 -0.289082 -1.647453\n9  0.212668 -1.647453", "deprecated": false, "file": "pandas/core/window/rolling.py", "file_line": 1783, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/rolling.py#L1783", "errors": [["PR01", "Parameters {arg} not documented"], ["PR02", "Unknown parameters {func}"], ["SA04", "Missing description for See Also \"Series.rolling\" reference"], ["SA04", "Missing description for See Also \"DataFrame.rolling\" reference"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 49, in pandas.core.window.rolling.Rolling.aggregate\nFailed example:\n    df\nExpected:\n              A         B         C\n    0 -2.385977 -0.102758  0.438822\n    1 -1.004295  0.905829 -0.954544\n    2  0.735167 -0.165272 -1.619346\n    3 -0.702657 -1.340923 -0.706334\n    4 -0.246845  0.211596 -0.901819\n    5  2.463718  3.157577 -1.380906\n    6 -1.142255  2.340594 -0.039875\n    7  1.396598 -1.647453  1.677227\n    8 -0.543425  1.761277 -0.220481\n    9 -0.640505  0.289374 -1.550670\nGot:\n              A         B         C\n    0 -0.470771  0.973016 -1.278149\n    1  1.437371 -0.077705  1.089630\n    2  0.096543  1.418667  1.168273\n    3  0.947186  1.085487  2.382224\n    4 -0.406024  0.266445 -1.355714\n    5 -0.114103 -0.844231  0.705641\n    6 -0.398786 -0.827197 -0.415745\n    7 -0.524512  0.813101 -0.229251\n    8  2.161717 -0.956931  0.067311\n    9  0.206499 -0.456881 -1.059976\n**********************************************************************\nLine 62, in pandas.core.window.rolling.Rolling.aggregate\nFailed example:\n    df.rolling(3).sum()\nExpected:\n              A         B         C\n    0       NaN       NaN       NaN\n    1       NaN       NaN       NaN\n    2 -2.655105  0.637799 -2.135068\n    3 -0.971785 -0.600366 -3.280224\n    4 -0.214334 -1.294599 -3.227500\n    5  1.514216  2.028250 -2.989060\n    6  1.074618  5.709767 -2.322600\n    7  2.718061  3.850718  0.256446\n    8 -0.289082  2.454418  1.416871\n    9  0.212668  0.403198 -0.093924\nGot:\n              A         B         C\n    0       NaN       NaN       NaN\n    1       NaN       NaN       NaN\n    2  1.063142  2.313979  0.979754\n    3  2.481099  2.426450  4.640128\n    4  0.637705  2.770599  2.194784\n    5  0.427060  0.507702  1.732152\n    6 -0.918912 -1.404982 -1.065818\n    7 -1.037401 -0.858326  0.060645\n    8  1.238419 -0.971027 -0.577684\n    9  1.843704 -0.600711 -1.221916\n**********************************************************************\nLine 75, in pandas.core.window.rolling.Rolling.aggregate\nFailed example:\n    df.rolling(3).agg({'A':'sum', 'B':'min'})\nExpected:\n              A         B\n    0       NaN       NaN\n    1       NaN       NaN\n    2 -2.655105 -0.165272\n    3 -0.971785 -1.340923\n    4 -0.214334 -1.340923\n    5  1.514216 -1.340923\n    6  1.074618  0.211596\n    7  2.718061 -1.647453\n    8 -0.289082 -1.647453\n    9  0.212668 -1.647453\nGot:\n              A         B\n    0       NaN       NaN\n    1       NaN       NaN\n    2  1.063142 -0.077705\n    3  2.481099 -0.077705\n    4  0.637705  0.266445\n    5  0.427060 -0.844231\n    6 -0.918912 -0.844231\n    7 -1.037401 -0.844231\n    8  1.238419 -0.956931\n    9  1.843704 -0.956931\n"], ["EX03", "flake8 error: E231 missing whitespace after ':' (2 times)"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "**********************************************************************\nLine 49, in pandas.core.window.rolling.Rolling.aggregate\nFailed example:\n    df\nExpected:\n              A         B         C\n    0 -2.385977 -0.102758  0.438822\n    1 -1.004295  0.905829 -0.954544\n    2  0.735167 -0.165272 -1.619346\n    3 -0.702657 -1.340923 -0.706334\n    4 -0.246845  0.211596 -0.901819\n    5  2.463718  3.157577 -1.380906\n    6 -1.142255  2.340594 -0.039875\n    7  1.396598 -1.647453  1.677227\n    8 -0.543425  1.761277 -0.220481\n    9 -0.640505  0.289374 -1.550670\nGot:\n              A         B         C\n    0 -0.470771  0.973016 -1.278149\n    1  1.437371 -0.077705  1.089630\n    2  0.096543  1.418667  1.168273\n    3  0.947186  1.085487  2.382224\n    4 -0.406024  0.266445 -1.355714\n    5 -0.114103 -0.844231  0.705641\n    6 -0.398786 -0.827197 -0.415745\n    7 -0.524512  0.813101 -0.229251\n    8  2.161717 -0.956931  0.067311\n    9  0.206499 -0.456881 -1.059976\n**********************************************************************\nLine 62, in pandas.core.window.rolling.Rolling.aggregate\nFailed example:\n    df.rolling(3).sum()\nExpected:\n              A         B         C\n    0       NaN       NaN       NaN\n    1       NaN       NaN       NaN\n    2 -2.655105  0.637799 -2.135068\n    3 -0.971785 -0.600366 -3.280224\n    4 -0.214334 -1.294599 -3.227500\n    5  1.514216  2.028250 -2.989060\n    6  1.074618  5.709767 -2.322600\n    7  2.718061  3.850718  0.256446\n    8 -0.289082  2.454418  1.416871\n    9  0.212668  0.403198 -0.093924\nGot:\n              A         B         C\n    0       NaN       NaN       NaN\n    1       NaN       NaN       NaN\n    2  1.063142  2.313979  0.979754\n    3  2.481099  2.426450  4.640128\n    4  0.637705  2.770599  2.194784\n    5  0.427060  0.507702  1.732152\n    6 -0.918912 -1.404982 -1.065818\n    7 -1.037401 -0.858326  0.060645\n    8  1.238419 -0.971027 -0.577684\n    9  1.843704 -0.600711 -1.221916\n**********************************************************************\nLine 75, in pandas.core.window.rolling.Rolling.aggregate\nFailed example:\n    df.rolling(3).agg({'A':'sum', 'B':'min'})\nExpected:\n              A         B\n    0       NaN       NaN\n    1       NaN       NaN\n    2 -2.655105 -0.165272\n    3 -0.971785 -1.340923\n    4 -0.214334 -1.340923\n    5  1.514216 -1.340923\n    6  1.074618  0.211596\n    7  2.718061 -1.647453\n    8 -0.289082 -1.647453\n    9  0.212668 -1.647453\nGot:\n              A         B\n    0       NaN       NaN\n    1       NaN       NaN\n    2  1.063142 -0.077705\n    3  2.481099 -0.077705\n    4  0.637705  0.266445\n    5  0.427060 -0.844231\n    6 -0.918912 -0.844231\n    7 -1.037401 -0.844231\n    8  1.238419 -0.956931\n    9  1.843704 -0.956931\n", "in_api": true, "section": "Standard moving window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.rolling.Rolling.quantile": {"type": "function", "docstring": "Calculate the rolling quantile.\n\nParameters\n----------\nquantile : float\n    Quantile to compute. 0 <= quantile <= 1.\ninterpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n    .. versionadded:: 0.23.0\n\n    This optional parameter specifies the interpolation method to use,\n    when the desired quantile lies between two data points `i` and `j`:\n\n        * linear: `i + (j - i) * fraction`, where `fraction` is the\n          fractional part of the index surrounded by `i` and `j`.\n        * lower: `i`.\n        * higher: `j`.\n        * nearest: `i` or `j` whichever is nearest.\n        * midpoint: (`i` + `j`) / 2.\n**kwargs:\n    For compatibility with other rolling methods. Has no effect on\n    the result.\n\nReturns\n-------\nSeries or DataFrame\n    Returned object type is determined by the caller of the rolling\n    calculation.\n\nSee Also\n--------\nSeries.quantile : Computes value at the given quantile over all data\n    in Series.\nDataFrame.quantile : Computes values at the given quantile over\n    requested axis in DataFrame.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s.rolling(2).quantile(.4, interpolation='lower')\n0    NaN\n1    1.0\n2    2.0\n3    3.0\ndtype: float64\n\n>>> s.rolling(2).quantile(.4, interpolation='midpoint')\n0    NaN\n1    1.5\n2    2.5\n3    3.5\ndtype: float64", "deprecated": false, "file": "pandas/core/window/rolling.py", "file_line": 1891, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/rolling.py#L1891", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {**kwargs:}"], ["PR07", "Parameter \"interpolation\" has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Standard moving window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.rolling.Window.mean": {"type": "function", "docstring": "Calculate the window mean of the values.\n\nParameters\n----------\n*args\n    Under Review.\n**kwargs\n    Under Review.\n\nReturns\n-------\nSeries or DataFrame\n    Returned object type is determined by the caller of the window\n    calculation.\n\nSee Also\n--------\nSeries.window : Calling object with Series data.\nDataFrame.window : Calling object with DataFrames.\nSeries.mean : Equivalent method for Series.\nDataFrame.mean : Equivalent method for DataFrame.\n\nExamples\n--------\nThe below examples will show rolling mean calculations with window sizes of\ntwo and three, respectively.\n\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s.rolling(2).mean()\n0    NaN\n1    1.5\n2    2.5\n3    3.5\ndtype: float64\n\n>>> s.rolling(3).mean()\n0    NaN\n1    NaN\n2    2.0\n3    3.0\ndtype: float64", "deprecated": false, "file": "pandas/core/window/rolling.py", "file_line": 921, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/rolling.py#L921", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Standard moving window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.rolling.Window.sum": {"type": "function", "docstring": "Calculate window sum of given DataFrame or Series.\n\nParameters\n----------\n*args, **kwargs\n    For compatibility with other window methods. Has no effect\n    on the computed value.\n\nReturns\n-------\nSeries or DataFrame\n    Same type as the input, with the same index, containing the\n    window sum.\n\nSee Also\n--------\nSeries.sum : Reducing sum for Series.\nDataFrame.sum : Reducing sum for DataFrame.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4, 5])\n>>> s\n0    1\n1    2\n2    3\n3    4\n4    5\ndtype: int64\n\n>>> s.rolling(3).sum()\n0     NaN\n1     NaN\n2     6.0\n3     9.0\n4    12.0\ndtype: float64\n\n>>> s.expanding(3).sum()\n0     NaN\n1     NaN\n2     6.0\n3    10.0\n4    15.0\ndtype: float64\n\n>>> s.rolling(3, center=True).sum()\n0     NaN\n1     6.0\n2     9.0\n3    12.0\n4     NaN\ndtype: float64\n\nFor DataFrame, each window sum is computed column-wise.\n\n>>> df = pd.DataFrame({\"A\": s, \"B\": s ** 2})\n>>> df\n   A   B\n0  1   1\n1  2   4\n2  3   9\n3  4  16\n4  5  25\n\n>>> df.rolling(3).sum()\n      A     B\n0   NaN   NaN\n1   NaN   NaN\n2   6.0  14.0\n3   9.0  29.0\n4  12.0  50.0", "deprecated": false, "file": "pandas/core/window/rolling.py", "file_line": 915, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/rolling.py#L915", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs}"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Standard moving window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.expanding.Expanding.count": {"type": "function", "docstring": "The expanding count of any non-NaN observations inside the window.\n\nReturns\n-------\nSeries or DataFrame\n    Returned object type is determined by the caller of the expanding\n    calculation.\n\nSee Also\n--------\nSeries.expanding : Calling object with Series data.\nDataFrame.expanding : Calling object with DataFrames.\nDataFrame.count : Count of the full DataFrame.\n\nExamples\n--------\n>>> s = pd.Series([2, 3, np.nan, 10])\n>>> s.rolling(2).count()\n0    1.0\n1    2.0\n2    1.0\n3    1.0\ndtype: float64\n>>> s.rolling(3).count()\n0    1.0\n1    2.0\n2    2.0\n3    2.0\ndtype: float64\n>>> s.rolling(4).count()\n0    1.0\n1    2.0\n2    2.0\n3    3.0\ndtype: float64", "deprecated": false, "file": "pandas/core/window/expanding.py", "file_line": 144, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/expanding.py#L144", "errors": [["PR01", "Parameters {**kwargs} not documented"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Standard expanding window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.expanding.Expanding.sum": {"type": "function", "docstring": "Calculate expanding sum of given DataFrame or Series.\n\nParameters\n----------\n*args, **kwargs\n    For compatibility with other expanding methods. Has no effect\n    on the computed value.\n\nReturns\n-------\nSeries or DataFrame\n    Same type as the input, with the same index, containing the\n    expanding sum.\n\nSee Also\n--------\nSeries.sum : Reducing sum for Series.\nDataFrame.sum : Reducing sum for DataFrame.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4, 5])\n>>> s\n0    1\n1    2\n2    3\n3    4\n4    5\ndtype: int64\n\n>>> s.rolling(3).sum()\n0     NaN\n1     NaN\n2     6.0\n3     9.0\n4    12.0\ndtype: float64\n\n>>> s.expanding(3).sum()\n0     NaN\n1     NaN\n2     6.0\n3    10.0\n4    15.0\ndtype: float64\n\n>>> s.rolling(3, center=True).sum()\n0     NaN\n1     6.0\n2     9.0\n3    12.0\n4     NaN\ndtype: float64\n\nFor DataFrame, each expanding sum is computed column-wise.\n\n>>> df = pd.DataFrame({\"A\": s, \"B\": s ** 2})\n>>> df\n   A   B\n0  1   1\n1  2   4\n2  3   9\n3  4  16\n4  5  25\n\n>>> df.rolling(3).sum()\n      A     B\n0   NaN   NaN\n1   NaN   NaN\n2   6.0  14.0\n3   9.0  29.0\n4  12.0  50.0", "deprecated": false, "file": "pandas/core/window/expanding.py", "file_line": 154, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/expanding.py#L154", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs}"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Standard expanding window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.expanding.Expanding.mean": {"type": "function", "docstring": "Calculate the expanding mean of the values.\n\nParameters\n----------\n*args\n    Under Review.\n**kwargs\n    Under Review.\n\nReturns\n-------\nSeries or DataFrame\n    Returned object type is determined by the caller of the expanding\n    calculation.\n\nSee Also\n--------\nSeries.expanding : Calling object with Series data.\nDataFrame.expanding : Calling object with DataFrames.\nSeries.mean : Equivalent method for Series.\nDataFrame.mean : Equivalent method for DataFrame.\n\nExamples\n--------\nThe below examples will show rolling mean calculations with window sizes of\ntwo and three, respectively.\n\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s.rolling(2).mean()\n0    NaN\n1    1.5\n2    2.5\n3    3.5\ndtype: float64\n\n>>> s.rolling(3).mean()\n0    NaN\n1    NaN\n2    2.0\n3    3.0\ndtype: float64", "deprecated": false, "file": "pandas/core/window/expanding.py", "file_line": 173, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/expanding.py#L173", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Standard expanding window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.expanding.Expanding.median": {"type": "function", "docstring": "Calculate the expanding median.\n\nParameters\n----------\n**kwargs\n    For compatibility with other expanding methods. Has no effect\n    on the computed median.\n\nReturns\n-------\nSeries or DataFrame\n    Returned type is the same as the original object.\n\nSee Also\n--------\nSeries.expanding : Calling object with Series data.\nDataFrame.expanding : Calling object with DataFrames.\nSeries.median : Equivalent method for Series.\nDataFrame.median : Equivalent method for DataFrame.\n\nExamples\n--------\nCompute the rolling median of a series with a window size of 3.\n\n>>> s = pd.Series([0, 1, 2, 3, 4])\n>>> s.rolling(3).median()\n0    NaN\n1    NaN\n2    1.0\n3    2.0\n4    3.0\ndtype: float64", "deprecated": false, "file": "pandas/core/window/expanding.py", "file_line": 179, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/expanding.py#L179", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Standard expanding window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.expanding.Expanding.var": {"type": "function", "docstring": "Calculate unbiased expanding variance.\n\nNormalized by N-1 by default. This can be changed using the `ddof`\nargument.\n\nParameters\n----------\nddof : int, default 1\n    Delta Degrees of Freedom.  The divisor used in calculations\n    is ``N - ddof``, where ``N`` represents the number of elements.\n*args, **kwargs\n    For NumPy compatibility. No additional arguments are used.\n\nReturns\n-------\nSeries or DataFrame\n    Returns the same object type as the caller of the expanding calculation.\n\nSee Also\n--------\nSeries.expanding : Calling object with Series data.\nDataFrame.expanding : Calling object with DataFrames.\nSeries.var : Equivalent method for Series.\nDataFrame.var : Equivalent method for DataFrame.\nnumpy.var : Equivalent method for Numpy array.\n\nNotes\n-----\nThe default `ddof` of 1 used in :meth:`Series.var` is different than the\ndefault `ddof` of 0 in :func:`numpy.var`.\n\nA minimum of 1 period is required for the rolling calculation.\n\nExamples\n--------\n>>> s = pd.Series([5, 5, 6, 7, 5, 5, 5])\n>>> s.rolling(3).var()\n0         NaN\n1         NaN\n2    0.333333\n3    1.000000\n4    1.000000\n5    1.333333\n6    0.000000\ndtype: float64\n\n>>> s.expanding(3).var()\n0         NaN\n1         NaN\n2    0.333333\n3    0.916667\n4    0.800000\n5    0.700000\n6    0.619048\ndtype: float64", "deprecated": false, "file": "pandas/core/window/expanding.py", "file_line": 190, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/expanding.py#L190", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Standard expanding window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.expanding.Expanding.std": {"type": "function", "docstring": "Calculate expanding standard deviation.\n\nNormalized by N-1 by default. This can be changed using the `ddof`\nargument.\n\nParameters\n----------\nddof : int, default 1\n    Delta Degrees of Freedom.  The divisor used in calculations\n    is ``N - ddof``, where ``N`` represents the number of elements.\n*args, **kwargs\n    For NumPy compatibility. No additional arguments are used.\n\nReturns\n-------\nSeries or DataFrame\n    Returns the same object type as the caller of the expanding calculation.\n\nSee Also\n--------\nSeries.expanding : Calling object with Series data.\nDataFrame.expanding : Calling object with DataFrames.\nSeries.std : Equivalent method for Series.\nDataFrame.std : Equivalent method for DataFrame.\nnumpy.std : Equivalent method for Numpy array.\n\nNotes\n-----\nThe default `ddof` of 1 used in Series.std is different than the default\n`ddof` of 0 in numpy.std.\n\nA minimum of one period is required for the rolling calculation.\n\nExamples\n--------\n>>> s = pd.Series([5, 5, 6, 7, 5, 5, 5])\n>>> s.rolling(3).std()\n0         NaN\n1         NaN\n2    0.577350\n3    1.000000\n4    1.000000\n5    1.154701\n6    0.000000\ndtype: float64\n\n>>> s.expanding(3).std()\n0         NaN\n1         NaN\n2    0.577350\n3    0.957427\n4    0.894427\n5    0.836660\n6    0.786796\ndtype: float64", "deprecated": false, "file": "pandas/core/window/expanding.py", "file_line": 184, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/expanding.py#L184", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Standard expanding window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.expanding.Expanding.min": {"type": "function", "docstring": "Calculate the expanding minimum.\n\nParameters\n----------\n**kwargs\n    Under Review.\n\nReturns\n-------\nSeries or DataFrame\n    Returned object type is determined by the caller of the expanding\n    calculation.\n\nSee Also\n--------\nSeries.expanding : Calling object with a Series.\nDataFrame.expanding : Calling object with a DataFrame.\nSeries.min : Similar method for Series.\nDataFrame.min : Similar method for DataFrame.\n\nExamples\n--------\nPerforming a rolling minimum with a window size of 3.\n\n>>> s = pd.Series([4, 3, 5, 2, 6])\n>>> s.rolling(3).min()\n0    NaN\n1    NaN\n2    3.0\n3    2.0\n4    2.0\ndtype: float64", "deprecated": false, "file": "pandas/core/window/expanding.py", "file_line": 167, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/expanding.py#L167", "errors": [["PR01", "Parameters {*args} not documented"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Standard expanding window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.expanding.Expanding.max": {"type": "function", "docstring": "Calculate the expanding maximum.\n\nParameters\n----------\n*args, **kwargs\n    Arguments and keyword arguments to be passed into func.\n\n        Returns\n        -------\n        Series or DataFrame\n            Return type is determined by the caller.\n\n        See Also\n        --------\n        Series.expanding : Series expanding.\n        DataFrame.expanding : DataFrame expanding.", "deprecated": false, "file": "pandas/core/window/expanding.py", "file_line": 160, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/expanding.py#L160", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs}"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Standard expanding window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.expanding.Expanding.corr": {"type": "function", "docstring": "Calculate expanding correlation.\n\nParameters\n----------\nother : Series, DataFrame, or ndarray, optional\n    If not supplied then will default to self.\npairwise : bool, default None\n    Calculate pairwise combinations of columns within a\n    DataFrame. If `other` is not specified, defaults to `True`,\n    otherwise defaults to `False`.\n    Not relevant for :class:`~pandas.Series`.\n**kwargs\n    Unused.\n\nReturns\n-------\nSeries or DataFrame\n    Returned object type is determined by the caller of the\n    expanding calculation.\n\nSee Also\n--------\nSeries.expanding : Calling object with Series data.\nDataFrame.expanding : Calling object with DataFrames.\nSeries.corr : Equivalent method for Series.\nDataFrame.corr : Equivalent method for DataFrame.\nexpanding.cov : Similar method to calculate covariance.\nnumpy.corrcoef : NumPy Pearson's correlation calculation.\n\nNotes\n-----\nThis function uses Pearson's definition of correlation\n(https://en.wikipedia.org/wiki/Pearson_correlation_coefficient).\n\nWhen `other` is not specified, the output will be self correlation (e.g.\nall 1's), except for :class:`~pandas.DataFrame` inputs with `pairwise`\nset to `True`.\n\nFunction will return ``NaN`` for correlations of equal valued sequences;\nthis is the result of a 0/0 division error.\n\nWhen `pairwise` is set to `False`, only matching columns between `self` and\n`other` will be used.\n\nWhen `pairwise` is set to `True`, the output will be a MultiIndex DataFrame\nwith the original index on the first level, and the `other` DataFrame\ncolumns on the second level.\n\nIn the case of missing elements, only complete pairwise observations\nwill be used.\n\nExamples\n--------\nThe below example shows a rolling calculation with a window size of\nfour matching the equivalent function call using :meth:`numpy.corrcoef`.\n\n>>> v1 = [3, 3, 3, 5, 8]\n>>> v2 = [3, 4, 4, 4, 8]\n>>> fmt = \"{0:.6f}\"  # limit the printed precision to 6 digits\n>>> # numpy returns a 2X2 array, the correlation coefficient\n>>> # is the number at entry [0][1]\n>>> print(fmt.format(np.corrcoef(v1[:-1], v2[:-1])[0][1]))\n0.333333\n>>> print(fmt.format(np.corrcoef(v1[1:], v2[1:])[0][1]))\n0.916949\n>>> s1 = pd.Series(v1)\n>>> s2 = pd.Series(v2)\n>>> s1.rolling(4).corr(s2)\n0         NaN\n1         NaN\n2         NaN\n3    0.333333\n4    0.916949\ndtype: float64\n\nThe below example shows a similar rolling calculation on a\nDataFrame using the pairwise option.\n\n>>> matrix = np.array([[51., 35.], [49., 30.], [47., 32.],    [46., 31.], [50., 36.]])\n>>> print(np.corrcoef(matrix[:-1,0], matrix[:-1,1]).round(7))\n[[1.         0.6263001]\n [0.6263001  1.       ]]\n>>> print(np.corrcoef(matrix[1:,0], matrix[1:,1]).round(7))\n[[1.         0.5553681]\n [0.5553681  1.        ]]\n>>> df = pd.DataFrame(matrix, columns=['X','Y'])\n>>> df\n      X     Y\n0  51.0  35.0\n1  49.0  30.0\n2  47.0  32.0\n3  46.0  31.0\n4  50.0  36.0\n>>> df.rolling(4).corr(pairwise=True)\n            X         Y\n0 X       NaN       NaN\n  Y       NaN       NaN\n1 X       NaN       NaN\n  Y       NaN       NaN\n2 X       NaN       NaN\n  Y       NaN       NaN\n3 X  1.000000  0.626300\n  Y  0.626300  1.000000\n4 X  1.000000  0.555368\n  Y  0.555368  1.000000", "deprecated": false, "file": "pandas/core/window/expanding.py", "file_line": 247, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/expanding.py#L247", "errors": [["EX03", "flake8 error: E231 missing whitespace after ',' (5 times)"], ["EX03", "flake8 error: E241 multiple spaces after ','"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Standard expanding window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.expanding.Expanding.cov": {"type": "function", "docstring": "Calculate the expanding sample covariance.\n\nParameters\n----------\nother : Series, DataFrame, or ndarray, optional\n    If not supplied then will default to self and produce pairwise\n    output.\npairwise : bool, default None\n    If False then only matching columns between self and other will be\n    used and the output will be a DataFrame.\n    If True then all pairwise combinations will be calculated and the\n    output will be a MultiIndexed DataFrame in the case of DataFrame\n    inputs. In the case of missing elements, only complete pairwise\n    observations will be used.\nddof : int, default 1\n    Delta Degrees of Freedom.  The divisor used in calculations\n    is ``N - ddof``, where ``N`` represents the number of elements.\n**kwargs\n    Keyword arguments to be passed into func.\n\n        Returns\n        -------\n        Series or DataFrame\n            Return type is determined by the caller.\n\n        See Also\n        --------\n        Series.expanding : Series expanding.\n        DataFrame.expanding : DataFrame expanding.", "deprecated": false, "file": "pandas/core/window/expanding.py", "file_line": 241, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/expanding.py#L241", "errors": [], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Standard expanding window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.expanding.Expanding.skew": {"type": "function", "docstring": "Unbiased expanding skewness.\n\nParameters\n----------\n**kwargs\n    Keyword arguments to be passed into func.\n\n        Returns\n        -------\n        Series or DataFrame\n            Return type is determined by the caller.\n\n        See Also\n        --------\n        Series.expanding : Series expanding.\n        DataFrame.expanding : DataFrame expanding.", "deprecated": false, "file": "pandas/core/window/expanding.py", "file_line": 196, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/expanding.py#L196", "errors": [], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Standard expanding window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.expanding.Expanding.kurt": {"type": "function", "docstring": "Calculate unbiased expanding kurtosis.\n\nThis function uses Fisher's definition of kurtosis without bias.\n\nParameters\n----------\n**kwargs\n    Under Review.\n\nReturns\n-------\nSeries or DataFrame\n    Returned object type is determined by the caller of the expanding\n    calculation.\n\nSee Also\n--------\nSeries.expanding : Calling object with Series data.\nDataFrame.expanding : Calling object with DataFrames.\nSeries.kurt : Equivalent method for Series.\nDataFrame.kurt : Equivalent method for DataFrame.\nscipy.stats.skew : Third moment of a probability density.\nscipy.stats.kurtosis : Reference SciPy method.\n\nNotes\n-----\nA minimum of 4 periods is required for the expanding calculation.\n\nExamples\n--------\n\nThe example below will show an expanding calculation with a window size of\nfour matching the equivalent function call using `scipy.stats`.\n\n>>> arr = [1, 2, 3, 4, 999]\n>>> import scipy.stats\n>>> fmt = \"{0:.6f}\"  # limit the printed precision to 6 digits\n>>> print(fmt.format(scipy.stats.kurtosis(arr[:-1], bias=False)))\n-1.200000\n>>> print(fmt.format(scipy.stats.kurtosis(arr, bias=False)))\n4.999874\n>>> s = pd.Series(arr)\n>>> s.expanding(4).kurt()\n0         NaN\n1         NaN\n2         NaN\n3   -1.200000\n4    4.999874\ndtype: float64", "deprecated": false, "file": "pandas/core/window/expanding.py", "file_line": 228, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/expanding.py#L228", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Standard expanding window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.expanding.Expanding.apply": {"type": "function", "docstring": "The expanding function's apply function.\n\nParameters\n----------\nfunc : function\n    Must produce a single value from an ndarray input if ``raw=True``\n    or a single value from a Series if ``raw=False``.\nraw : bool, default None\n    * ``False`` : passes each row or column as a Series to the\n      function.\n    * ``True`` or ``None`` : the passed function will receive ndarray\n      objects instead.\n      If you are just applying a NumPy reduction function this will\n      achieve much better performance.\n\n    The `raw` parameter is required and will show a FutureWarning if\n    not passed. In the future `raw` will default to False.\n\n    .. versionadded:: 0.23.0\n*args, **kwargs\n    Arguments and keyword arguments to be passed into func.\n\nReturns\n-------\nSeries or DataFrame\n    Return type is determined by the caller.\n\nSee Also\n--------\nSeries.expanding : Series expanding.\nDataFrame.expanding : DataFrame expanding.", "deprecated": false, "file": "pandas/core/window/expanding.py", "file_line": 149, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/expanding.py#L149", "errors": [["PR01", "Parameters {kwargs, args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs}"], ["PR08", "Parameter \"raw\" description should start with a capital letter"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Standard expanding window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.expanding.Expanding.aggregate": {"type": "function", "docstring": "Aggregate using one or more operations over the specified axis.\n\nParameters\n----------\nfunc : function, str, list or dict\n    Function to use for aggregating the data. If a function, must either\n    work when passed a Series/Dataframe or when passed to Series/Dataframe.apply.\n\n    Accepted combinations are:\n\n    - function\n    - string function name\n    - list of functions and/or function names, e.g. ``[np.sum, 'mean']``\n    - dict of axis labels -> functions, function names or list of such.\n\n*args\n    Positional arguments to pass to `func`.\n**kwargs\n    Keyword arguments to pass to `func`.\n\nReturns\n-------\nscalar, Series or DataFrame\n\n    The return can be:\n\n    * scalar : when Series.agg is called with single function\n    * Series : when DataFrame.agg is called with a single function\n    * DataFrame : when DataFrame.agg is called with several functions\n\n    Return scalar, Series or DataFrame.\n\nSee Also\n--------\nDataFrame.expanding.aggregate\nDataFrame.rolling.aggregate\nDataFrame.aggregate\n\nNotes\n-----\n`agg` is an alias for `aggregate`. Use the alias.\n\nA passed user-defined-function will be passed a Series for evaluation.\n\nExamples\n--------\n\n>>> df = pd.DataFrame(np.random.randn(10, 3), columns=['A', 'B', 'C'])\n>>> df\n          A         B         C\n0 -2.385977 -0.102758  0.438822\n1 -1.004295  0.905829 -0.954544\n2  0.735167 -0.165272 -1.619346\n3 -0.702657 -1.340923 -0.706334\n4 -0.246845  0.211596 -0.901819\n5  2.463718  3.157577 -1.380906\n6 -1.142255  2.340594 -0.039875\n7  1.396598 -1.647453  1.677227\n8 -0.543425  1.761277 -0.220481\n9 -0.640505  0.289374 -1.550670\n\n>>> df.ewm(alpha=0.5).mean()\n          A         B         C\n0 -2.385977 -0.102758  0.438822\n1 -1.464856  0.569633 -0.490089\n2 -0.207700  0.149687 -1.135379\n3 -0.471677 -0.645305 -0.906555\n4 -0.355635 -0.203033 -0.904111\n5  1.076417  1.503943 -1.146293\n6 -0.041654  1.925562 -0.588728\n7  0.680292  0.132049  0.548693\n8  0.067236  0.948257  0.163353\n9 -0.286980  0.618493 -0.694496", "deprecated": false, "file": "pandas/core/window/expanding.py", "file_line": 131, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/expanding.py#L131", "errors": [["PR01", "Parameters {arg} not documented"], ["PR02", "Unknown parameters {func}"], ["SA04", "Missing description for See Also \"DataFrame.expanding.aggregate\" reference"], ["SA04", "Missing description for See Also \"DataFrame.rolling.aggregate\" reference"], ["SA04", "Missing description for See Also \"DataFrame.aggregate\" reference"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 50, in pandas.core.window.expanding.Expanding.aggregate\nFailed example:\n    df\nExpected:\n              A         B         C\n    0 -2.385977 -0.102758  0.438822\n    1 -1.004295  0.905829 -0.954544\n    2  0.735167 -0.165272 -1.619346\n    3 -0.702657 -1.340923 -0.706334\n    4 -0.246845  0.211596 -0.901819\n    5  2.463718  3.157577 -1.380906\n    6 -1.142255  2.340594 -0.039875\n    7  1.396598 -1.647453  1.677227\n    8 -0.543425  1.761277 -0.220481\n    9 -0.640505  0.289374 -1.550670\nGot:\n              A         B         C\n    0  0.614957  1.429661 -0.211952\n    1 -0.080337  0.405398  0.118607\n    2  1.254414  1.419102 -0.743856\n    3 -2.517437 -1.507096  1.149076\n    4 -1.193578  1.141042  1.509445\n    5  1.067775 -0.686589  0.014873\n    6 -0.375666 -0.038224  0.367974\n    7 -0.044724 -0.302375 -2.224404\n    8  0.724006  0.359003  1.076121\n    9  0.192141  0.852926  0.018357\n**********************************************************************\nLine 63, in pandas.core.window.expanding.Expanding.aggregate\nFailed example:\n    df.ewm(alpha=0.5).mean()\nExpected:\n              A         B         C\n    0 -2.385977 -0.102758  0.438822\n    1 -1.464856  0.569633 -0.490089\n    2 -0.207700  0.149687 -1.135379\n    3 -0.471677 -0.645305 -0.906555\n    4 -0.355635 -0.203033 -0.904111\n    5  1.076417  1.503943 -1.146293\n    6 -0.041654  1.925562 -0.588728\n    7  0.680292  0.132049  0.548693\n    8  0.067236  0.948257  0.163353\n    9 -0.286980  0.618493 -0.694496\nGot:\n              A         B         C\n    0  0.614957  1.429661 -0.211952\n    1  0.151428  0.746819  0.008420\n    2  0.781706  1.130981 -0.421452\n    3 -0.977837 -0.275994  0.416163\n    4 -1.089187  0.455380  0.980438\n    5  0.006413 -0.124668  0.489992\n    6 -0.186131 -0.081106  0.428503\n    7 -0.115150 -0.192174 -0.903152\n    8  0.305249  0.083954  0.088421\n    9  0.248640  0.468816  0.053355\n"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "**********************************************************************\nLine 50, in pandas.core.window.expanding.Expanding.aggregate\nFailed example:\n    df\nExpected:\n              A         B         C\n    0 -2.385977 -0.102758  0.438822\n    1 -1.004295  0.905829 -0.954544\n    2  0.735167 -0.165272 -1.619346\n    3 -0.702657 -1.340923 -0.706334\n    4 -0.246845  0.211596 -0.901819\n    5  2.463718  3.157577 -1.380906\n    6 -1.142255  2.340594 -0.039875\n    7  1.396598 -1.647453  1.677227\n    8 -0.543425  1.761277 -0.220481\n    9 -0.640505  0.289374 -1.550670\nGot:\n              A         B         C\n    0  0.614957  1.429661 -0.211952\n    1 -0.080337  0.405398  0.118607\n    2  1.254414  1.419102 -0.743856\n    3 -2.517437 -1.507096  1.149076\n    4 -1.193578  1.141042  1.509445\n    5  1.067775 -0.686589  0.014873\n    6 -0.375666 -0.038224  0.367974\n    7 -0.044724 -0.302375 -2.224404\n    8  0.724006  0.359003  1.076121\n    9  0.192141  0.852926  0.018357\n**********************************************************************\nLine 63, in pandas.core.window.expanding.Expanding.aggregate\nFailed example:\n    df.ewm(alpha=0.5).mean()\nExpected:\n              A         B         C\n    0 -2.385977 -0.102758  0.438822\n    1 -1.464856  0.569633 -0.490089\n    2 -0.207700  0.149687 -1.135379\n    3 -0.471677 -0.645305 -0.906555\n    4 -0.355635 -0.203033 -0.904111\n    5  1.076417  1.503943 -1.146293\n    6 -0.041654  1.925562 -0.588728\n    7  0.680292  0.132049  0.548693\n    8  0.067236  0.948257  0.163353\n    9 -0.286980  0.618493 -0.694496\nGot:\n              A         B         C\n    0  0.614957  1.429661 -0.211952\n    1  0.151428  0.746819  0.008420\n    2  0.781706  1.130981 -0.421452\n    3 -0.977837 -0.275994  0.416163\n    4 -1.089187  0.455380  0.980438\n    5  0.006413 -0.124668  0.489992\n    6 -0.186131 -0.081106  0.428503\n    7 -0.115150 -0.192174 -0.903152\n    8  0.305249  0.083954  0.088421\n    9  0.248640  0.468816  0.053355\n", "in_api": true, "section": "Standard expanding window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.expanding.Expanding.quantile": {"type": "function", "docstring": "Calculate the expanding quantile.\n\nParameters\n----------\nquantile : float\n    Quantile to compute. 0 <= quantile <= 1.\ninterpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n    .. versionadded:: 0.23.0\n\n    This optional parameter specifies the interpolation method to use,\n    when the desired quantile lies between two data points `i` and `j`:\n\n        * linear: `i + (j - i) * fraction`, where `fraction` is the\n          fractional part of the index surrounded by `i` and `j`.\n        * lower: `i`.\n        * higher: `j`.\n        * nearest: `i` or `j` whichever is nearest.\n        * midpoint: (`i` + `j`) / 2.\n**kwargs:\n    For compatibility with other expanding methods. Has no effect on\n    the result.\n\nReturns\n-------\nSeries or DataFrame\n    Returned object type is determined by the caller of the expanding\n    calculation.\n\nSee Also\n--------\nSeries.quantile : Computes value at the given quantile over all data\n    in Series.\nDataFrame.quantile : Computes values at the given quantile over\n    requested axis in DataFrame.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s.rolling(2).quantile(.4, interpolation='lower')\n0    NaN\n1    1.0\n2    2.0\n3    3.0\ndtype: float64\n\n>>> s.rolling(2).quantile(.4, interpolation='midpoint')\n0    NaN\n1    1.5\n2    2.5\n3    3.5\ndtype: float64", "deprecated": false, "file": "pandas/core/window/expanding.py", "file_line": 234, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/expanding.py#L234", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {**kwargs:}"], ["PR07", "Parameter \"interpolation\" has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Standard expanding window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.ewm.EWM.mean": {"type": "function", "docstring": "Exponential weighted moving average.\n\nParameters\n----------\n*args, **kwargs\n    Arguments and keyword arguments to be passed into func.\n\nReturns\n-------\nSeries or DataFrame\n    Return type is determined by the caller.\n\nSee Also\n--------\nSeries.ewm : Series ewm.\nDataFrame.ewm : DataFrame ewm.", "deprecated": false, "file": "pandas/core/window/ewm.py", "file_line": 270, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/ewm.py#L270", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs}"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Exponentially-weighted moving window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.ewm.EWM.std": {"type": "function", "docstring": "Exponential weighted moving stddev.\n\nParameters\n----------\nbias : bool, default False\n    Use a standard estimation bias correction.\n*args, **kwargs\n    Arguments and keyword arguments to be passed into func.\n\n        Returns\n        -------\n        Series or DataFrame\n            Return type is determined by the caller.\n\n        See Also\n        --------\n        Series.ewm : Series ewm.\n        DataFrame.ewm : DataFrame ewm.", "deprecated": false, "file": "pandas/core/window/ewm.py", "file_line": 284, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/ewm.py#L284", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs}"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Exponentially-weighted moving window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.ewm.EWM.var": {"type": "function", "docstring": "Exponential weighted moving variance.\n\nParameters\n----------\nbias : bool, default False\n    Use a standard estimation bias correction.\n*args, **kwargs\n    Arguments and keyword arguments to be passed into func.\n\n        Returns\n        -------\n        Series or DataFrame\n            Return type is determined by the caller.\n\n        See Also\n        --------\n        Series.ewm : Series ewm.\n        DataFrame.ewm : DataFrame ewm.", "deprecated": false, "file": "pandas/core/window/ewm.py", "file_line": 296, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/ewm.py#L296", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs}"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Exponentially-weighted moving window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.ewm.EWM.corr": {"type": "function", "docstring": "Exponential weighted sample correlation.\n\nParameters\n----------\nother : Series, DataFrame, or ndarray, optional\n    If not supplied then will default to self and produce pairwise\n    output.\npairwise : bool, default None\n    If False then only matching columns between self and other will be\n    used and the output will be a DataFrame.\n    If True then all pairwise combinations will be calculated and the\n    output will be a MultiIndex DataFrame in the case of DataFrame\n    inputs. In the case of missing elements, only complete pairwise\n    observations will be used.\nbias : bool, default False\n   Use a standard estimation bias correction.\n**kwargs\n   Keyword arguments to be passed into func.\n\n        Returns\n        -------\n        Series or DataFrame\n            Return type is determined by the caller.\n\n        See Also\n        --------\n        Series.ewm : Series ewm.\n        DataFrame.ewm : DataFrame ewm.", "deprecated": false, "file": "pandas/core/window/ewm.py", "file_line": 349, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/ewm.py#L349", "errors": [["PR02", "Unknown parameters {bias}"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Exponentially-weighted moving window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.window.ewm.EWM.cov": {"type": "function", "docstring": "Exponential weighted sample covariance.\n\nParameters\n----------\nother : Series, DataFrame, or ndarray, optional\n    If not supplied then will default to self and produce pairwise\n    output.\npairwise : bool, default None\n    If False then only matching columns between self and other will be\n    used and the output will be a DataFrame.\n    If True then all pairwise combinations will be calculated and the\n    output will be a MultiIndex DataFrame in the case of DataFrame\n    inputs. In the case of missing elements, only complete pairwise\n    observations will be used.\nbias : bool, default False\n   Use a standard estimation bias correction.\n**kwargs\n   Keyword arguments to be passed into func.\n\n        Returns\n        -------\n        Series or DataFrame\n            Return type is determined by the caller.\n\n        See Also\n        --------\n        Series.ewm : Series ewm.\n        DataFrame.ewm : DataFrame ewm.", "deprecated": false, "file": "pandas/core/window/ewm.py", "file_line": 318, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/window/ewm.py#L318", "errors": [], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Exponentially-weighted moving window functions", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.__iter__": {"type": "function", "docstring": "Groupby iterator.\n\nReturns\n-------\nGenerator yielding sequence of (name, subsetted object)\nfor each group", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 687, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L687", "errors": [["RT03", "Return value has no description"], ["RT03", "Return value has no description"], ["YD01", "No Yields section found"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Indexing, iteration", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.groups": {"type": "property", "docstring": "Dict {group name -> group labels}.", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 419, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L419", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Indexing, iteration", "subsection": "", "shared_code_with": "pandas.core.resample.Resampler.groups"}, "pandas.core.groupby.GroupBy.indices": {"type": "property", "docstring": "Dict {group name -> group indices}.", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 432, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L432", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Indexing, iteration", "subsection": "", "shared_code_with": "pandas.core.resample.Resampler.indices"}, "pandas.core.groupby.GroupBy.get_group": {"type": "function", "docstring": "Construct DataFrame from group with provided name.\n\nParameters\n----------\nname : object\n    the name of the group to get as a DataFrame\nobj : DataFrame, default None\n    the DataFrame to take the DataFrame out of.  If\n    it is None, the object groupby was called on will\n    be used\n\nReturns\n-------\ngroup : same type as obj", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 661, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L661", "errors": [["PR08", "Parameter \"name\" description should start with a capital letter"], ["PR09", "Parameter \"name\" description should finish with \".\""], ["PR08", "Parameter \"obj\" description should start with a capital letter"], ["PR09", "Parameter \"obj\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Indexing, iteration", "subsection": "", "shared_code_with": "pandas.core.resample.Resampler.get_group"}, "pandas.Grouper": {"type": "type", "docstring": "A Grouper allows the user to specify a groupby instruction for a target\nobject\n\nThis specification will select a column via the key parameter, or if the\nlevel and/or axis parameters are given, a level of the index of the target\nobject.\n\nIf `axis` and/or `level` are passed as keywords to both `Grouper` and\n`groupby`, the values passed to `Grouper` take precedence.\n\nParameters\n----------\nkey : string, defaults to None\n    groupby key, which selects the grouping column of the target\nlevel : name/number, defaults to None\n    the level for the target index\nfreq : string / frequency object, defaults to None\n    This will groupby the specified frequency if the target selection\n    (via key or level) is a datetime-like object. For full specification\n    of available frequencies, please see `here\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`_.\naxis : number/name of the axis, defaults to 0\nsort : boolean, default to False\n    whether to sort the resulting labels\nclosed : {'left' or 'right'}\n    Closed end of interval. Only when `freq` parameter is passed.\nlabel : {'left' or 'right'}\n    Interval boundary to use for labeling.\n    Only when `freq` parameter is passed.\nconvention : {'start', 'end', 'e', 's'}\n    If grouper is PeriodIndex and `freq` parameter is passed.\nbase : int, default 0\n    Only when `freq` parameter is passed.\nloffset : string, DateOffset, timedelta object\n    Only when `freq` parameter is passed.\n\nReturns\n-------\nA specification for a groupby instruction\n\nExamples\n--------\n\nSyntactic sugar for ``df.groupby('A')``\n\n>>> df.groupby(Grouper(key='A'))\n\nSpecify a resample operation on the column 'date'\n\n>>> df.groupby(Grouper(key='date', freq='60s'))\n\nSpecify a resample operation on the level 'date' on the columns axis\nwith a frequency of 60s\n\n>>> df.groupby(Grouper(level='date', freq='60s', axis=1))", "deprecated": false, "file": "pandas/core/groupby/grouper.py", "file_line": 37, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/grouper.py#L37", "errors": [["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {freq, axis, label, closed, loffset, base, sort, convention, level, key}"], ["PR06", "Parameter \"key\" type should use \"str\" instead of \"string\""], ["PR08", "Parameter \"key\" description should start with a capital letter"], ["PR09", "Parameter \"key\" description should finish with \".\""], ["PR08", "Parameter \"level\" description should start with a capital letter"], ["PR09", "Parameter \"level\" description should finish with \".\""], ["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"axis\" has no description"], ["PR06", "Parameter \"sort\" type should use \"bool\" instead of \"boolean\""], ["PR08", "Parameter \"sort\" description should start with a capital letter"], ["PR09", "Parameter \"sort\" description should finish with \".\""], ["PR06", "Parameter \"loffset\" type should use \"str\" instead of \"string\""], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 47, in pandas.Grouper\nFailed example:\n    df.groupby(Grouper(key='A'))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Grouper[0]>\", line 1, in <module>\n        df.groupby(Grouper(key='A'))\n    NameError: name 'df' is not defined\n**********************************************************************\nLine 51, in pandas.Grouper\nFailed example:\n    df.groupby(Grouper(key='date', freq='60s'))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Grouper[1]>\", line 1, in <module>\n        df.groupby(Grouper(key='date', freq='60s'))\n    NameError: name 'df' is not defined\n**********************************************************************\nLine 56, in pandas.Grouper\nFailed example:\n    df.groupby(Grouper(level='date', freq='60s', axis=1))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Grouper[2]>\", line 1, in <module>\n        df.groupby(Grouper(level='date', freq='60s', axis=1))\n    NameError: name 'df' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'df' (6 times)"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 47, in pandas.Grouper\nFailed example:\n    df.groupby(Grouper(key='A'))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Grouper[0]>\", line 1, in <module>\n        df.groupby(Grouper(key='A'))\n    NameError: name 'df' is not defined\n**********************************************************************\nLine 51, in pandas.Grouper\nFailed example:\n    df.groupby(Grouper(key='date', freq='60s'))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Grouper[1]>\", line 1, in <module>\n        df.groupby(Grouper(key='date', freq='60s'))\n    NameError: name 'df' is not defined\n**********************************************************************\nLine 56, in pandas.Grouper\nFailed example:\n    df.groupby(Grouper(level='date', freq='60s', axis=1))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.Grouper[2]>\", line 1, in <module>\n        df.groupby(Grouper(level='date', freq='60s', axis=1))\n    NameError: name 'df' is not defined\n", "in_api": true, "section": "Indexing, iteration", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.apply": {"type": "function", "docstring": "Apply function `func`  group-wise and combine the results together.\n\nThe function passed to `apply` must take a dataframe as its first\nargument and return a DataFrame, Series or scalar. `apply` will\nthen take care of combining the results back together into a single\ndataframe or series. `apply` is therefore a highly flexible\ngrouping method.\n\nWhile `apply` is a very flexible method, its downside is that\nusing it can be quite a bit slower than using more specific methods\nlike `agg` or `transform`. Pandas offers a wide range of method that will\nbe much faster than using `apply` for their specific purposes, so try to\nuse them before reaching for `apply`.\n\nParameters\n----------\nfunc : callable\n    A callable that takes a dataframe as its first argument, and\n    returns a dataframe, a series or a scalar. In addition the\n    callable may take positional and keyword arguments.\nargs, kwargs : tuple and dict\n    Optional positional and keyword arguments to pass to `func`.\n\nReturns\n-------\napplied : Series or DataFrame\n\nSee Also\n--------\npipe : Apply function to the full GroupBy object instead of to each\n    group.\naggregate : Apply aggregate function to the GroupBy object.\ntransform : Apply function column-by-column to the GroupBy object.\nSeries.apply : Apply a function to a Series.\nDataFrame.apply : Apply a function to each row or column of a DataFrame.", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 698, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L698", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {args, kwargs}"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Function application", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.agg": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/core/base.py", "file_line": 265, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L265", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Function application", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.aggregate": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/core/base.py", "file_line": 265, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L265", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Function application", "subsection": "", "shared_code_with": "pandas.core.groupby.GroupBy.agg"}, "pandas.core.groupby.GroupBy.transform": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 754, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L754", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Function application", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.pipe": {"type": "function", "docstring": "Apply a function `func` with arguments to this GroupBy object and return\nthe function's result.\n\n.. versionadded:: 0.21.0\n\nUse `.pipe` when you want to improve readability by chaining together\nfunctions that expect Series, DataFrames, GroupBy or Resampler objects.\nInstead of writing\n\n>>> h(g(f(df.groupby('group')), arg1=a), arg2=b, arg3=c)\n\nYou can write\n\n>>> (df.groupby('group')\n...    .pipe(f)\n...    .pipe(g, arg1=a)\n...    .pipe(h, arg2=b, arg3=c))\n\nwhich is much more readable.\n\nParameters\n----------\nfunc : callable or tuple of (callable, string)\n    Function to apply to this GroupBy object or, alternatively,\n    a `(callable, data_keyword)` tuple where `data_keyword` is a\n    string indicating the keyword of `callable` that expects the\n    GroupBy object.\nargs : iterable, optional\n       positional arguments passed into `func`.\nkwargs : dict, optional\n         a dictionary of keyword arguments passed into `func`.\n\nReturns\n-------\nobject : the return type of `func`.\n\nSee Also\n--------\nSeries.pipe : Apply a function with arguments to a series.\nDataFrame.pipe: Apply a function with arguments to a dataframe.\napply : Apply function to each group instead of to the\n    full GroupBy object.\n\nNotes\n-----\nSee more `here\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#piping-function-calls>`_\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': 'a b a b'.split(), 'B': [1, 2, 3, 4]})\n>>> df\n   A  B\n0  a  1\n1  b  2\n2  a  3\n3  b  4\n\nTo get the difference between each groups maximum and minimum value in one\npass, you can do\n\n>>> df.groupby('A').pipe(lambda x: x.max() - x.min())\n   B\nA\na  2\nb  2", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 572, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L572", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {kwargs, args}"], ["PR06", "Parameter \"func\" type should use \"str\" instead of \"string\""], ["PR08", "Parameter \"args\" description should start with a capital letter"], ["PR08", "Parameter \"kwargs\" description should start with a capital letter"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 11, in pandas.core.groupby.GroupBy.pipe\nFailed example:\n    h(g(f(df.groupby('group')), arg1=a), arg2=b, arg3=c)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.groupby.GroupBy.pipe[0]>\", line 1, in <module>\n        h(g(f(df.groupby('group')), arg1=a), arg2=b, arg3=c)\n    NameError: name 'h' is not defined\n**********************************************************************\nLine 15, in pandas.core.groupby.GroupBy.pipe\nFailed example:\n    (df.groupby('group')\n       .pipe(f)\n       .pipe(g, arg1=a)\n       .pipe(h, arg2=b, arg3=c))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.groupby.GroupBy.pipe[1]>\", line 1, in <module>\n        (df.groupby('group')\n    NameError: name 'df' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'h' (14 times)"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 11, in pandas.core.groupby.GroupBy.pipe\nFailed example:\n    h(g(f(df.groupby('group')), arg1=a), arg2=b, arg3=c)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.groupby.GroupBy.pipe[0]>\", line 1, in <module>\n        h(g(f(df.groupby('group')), arg1=a), arg2=b, arg3=c)\n    NameError: name 'h' is not defined\n**********************************************************************\nLine 15, in pandas.core.groupby.GroupBy.pipe\nFailed example:\n    (df.groupby('group')\n       .pipe(f)\n       .pipe(g, arg1=a)\n       .pipe(h, arg2=b, arg3=c))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.groupby.GroupBy.pipe[1]>\", line 1, in <module>\n        (df.groupby('group')\n    NameError: name 'df' is not defined\n", "in_api": true, "section": "Function application", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.all": {"type": "function", "docstring": "Return True if all values in the group are truthful, else False.\n\nParameters\n----------\nskipna : bool, default True\n    Flag to ignore nan values during truth testing\n\nReturns\n-------\nbool\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1128, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1128", "errors": [["PR09", "Parameter \"skipna\" description should finish with \".\""], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.any": {"type": "function", "docstring": "Return True if any value in the group is truthful, else False.\n\nParameters\n----------\nskipna : bool, default True\n    Flag to ignore nan values during truth testing\n\nReturns\n-------\nbool\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1111, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1111", "errors": [["PR09", "Parameter \"skipna\" description should finish with \".\""], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.bfill": {"type": "function", "docstring": "Backward fill the values.\n\nParameters\n----------\nlimit : integer, optional\n    limit of how many values to fill\n\nReturns\n-------\nSeries or DataFrame\n    Object with missing values filled.\n\nSee Also\n--------\nSeries.backfill\nDataFrame.backfill\nSeries.fillna\nDataFrame.fillna", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1646, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1646", "errors": [["PR06", "Parameter \"limit\" type should use \"int\" instead of \"integer\""], ["PR08", "Parameter \"limit\" description should start with a capital letter"], ["PR09", "Parameter \"limit\" description should finish with \".\""], ["SA04", "Missing description for See Also \"Series.backfill\" reference"], ["SA04", "Missing description for See Also \"DataFrame.backfill\" reference"], ["SA04", "Missing description for See Also \"Series.fillna\" reference"], ["SA04", "Missing description for See Also \"DataFrame.fillna\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.count": {"type": "function", "docstring": "Compute count of group, excluding missing values.\n\nReturns\n-------\nSeries or DataFrame\n    Count of values within each group.\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1145, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1145", "errors": [["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.cumcount": {"type": "function", "docstring": "Number each item in each group from 0 to the length of that group - 1.\n\nEssentially this is equivalent to\n\n>>> self.apply(lambda x: pd.Series(np.arange(len(x)), x.index))\n\nParameters\n----------\nascending : bool, default True\n    If False, number in reverse, from length of group - 1 to 0.\n\nReturns\n-------\nSeries\n    Sequence number of each element within each group.\n\nSee Also\n--------\n.ngroup : Number the groups themselves.\n\nExamples\n--------\n\n>>> df = pd.DataFrame([['a'], ['a'], ['a'], ['b'], ['b'], ['a']],\n...                   columns=['A'])\n>>> df\n   A\n0  a\n1  a\n2  a\n3  b\n4  b\n5  a\n>>> df.groupby('A').cumcount()\n0    0\n1    1\n2    2\n3    0\n4    1\n5    3\ndtype: int64\n>>> df.groupby('A').cumcount(ascending=False)\n0    3\n1    2\n2    1\n3    1\n4    0\n5    0\ndtype: int64", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1984, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1984", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 6, in pandas.core.groupby.GroupBy.cumcount\nFailed example:\n    self.apply(lambda x: pd.Series(np.arange(len(x)), x.index))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.groupby.GroupBy.cumcount[0]>\", line 1, in <module>\n        self.apply(lambda x: pd.Series(np.arange(len(x)), x.index))\n    NameError: name 'self' is not defined\n"], ["EX03", "flake8 error: F821 undefined name 'self'"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 6, in pandas.core.groupby.GroupBy.cumcount\nFailed example:\n    self.apply(lambda x: pd.Series(np.arange(len(x)), x.index))\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.groupby.GroupBy.cumcount[0]>\", line 1, in <module>\n        self.apply(lambda x: pd.Series(np.arange(len(x)), x.index))\n    NameError: name 'self' is not defined\n", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.cummax": {"type": "function", "docstring": "Cumulative max for each group.\n\nReturns\n-------\nSeries or DataFrame\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 2134, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L2134", "errors": [["PR01", "Parameters {axis, **kwargs} not documented"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.cummin": {"type": "function", "docstring": "Cumulative min for each group.\n\nReturns\n-------\nSeries or DataFrame\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 2119, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L2119", "errors": [["PR01", "Parameters {axis, **kwargs} not documented"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.cumprod": {"type": "function", "docstring": "Cumulative product for each group.\n\nReturns\n-------\nSeries or DataFrame\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 2087, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L2087", "errors": [["PR01", "Parameters {axis, *args, **kwargs} not documented"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.cumsum": {"type": "function", "docstring": "Cumulative sum for each group.\n\nReturns\n-------\nSeries or DataFrame\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 2103, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L2103", "errors": [["PR01", "Parameters {axis, *args, **kwargs} not documented"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.ffill": {"type": "function", "docstring": "Forward fill the values.\n\nParameters\n----------\nlimit : integer, optional\n    limit of how many values to fill\n\nReturns\n-------\nSeries or DataFrame\n    Object with missing values filled.\n\nSee Also\n--------\nSeries.pad\nDataFrame.pad\nSeries.fillna\nDataFrame.fillna", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1620, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1620", "errors": [["PR06", "Parameter \"limit\" type should use \"int\" instead of \"integer\""], ["PR08", "Parameter \"limit\" description should start with a capital letter"], ["PR09", "Parameter \"limit\" description should finish with \".\""], ["SA04", "Missing description for See Also \"Series.pad\" reference"], ["SA04", "Missing description for See Also \"DataFrame.pad\" reference"], ["SA04", "Missing description for See Also \"Series.fillna\" reference"], ["SA04", "Missing description for See Also \"DataFrame.fillna\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.first": {"type": "function", "docstring": "Compute first of group values.\n\nReturns\n-------\nSeries or DataFrame\n    Computed first of values within each group.\n\n        See Also\n        --------\n        Series.groupby\n        DataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1359, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1359", "errors": [["PR01", "Parameters {**kwargs} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.head": {"type": "function", "docstring": "Return first n rows of each group.\n\nEssentially equivalent to ``.apply(lambda x: x.head(n))``,\nexcept ignores as_index flag.\n\nReturns\n-------\nSeries or DataFrame\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby\n\nExamples\n--------\n\n>>> df = pd.DataFrame([[1, 2], [1, 4], [5, 6]],\n...                   columns=['A', 'B'])\n>>> df.groupby('A', as_index=False).head(1)\n   A  B\n0  1  2\n2  5  6\n>>> df.groupby('A').head(1)\n   A  B\n0  1  2\n2  5  6", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 2323, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L2323", "errors": [["PR01", "Parameters {n} not documented"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.last": {"type": "function", "docstring": "Compute last of group values.\n\nReturns\n-------\nSeries or DataFrame\n    Computed last of values within each group.\n\n        See Also\n        --------\n        Series.groupby\n        DataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1359, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1359", "errors": [["PR01", "Parameters {**kwargs} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.GroupBy.first"}, "pandas.core.groupby.GroupBy.max": {"type": "function", "docstring": "Compute max of group values.\n\nReturns\n-------\nSeries or DataFrame\n    Computed max of values within each group.\n\n        See Also\n        --------\n        Series.groupby\n        DataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1359, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1359", "errors": [["PR01", "Parameters {**kwargs} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.GroupBy.last"}, "pandas.core.groupby.GroupBy.mean": {"type": "function", "docstring": "Compute mean of groups, excluding missing values.\n\nReturns\n-------\npandas.Series or pandas.DataFrame\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': [1, 1, 2, 1, 2],\n...                    'B': [np.nan, 2, 3, 4, 5],\n...                    'C': [1, 2, 1, 1, 2]}, columns=['A', 'B', 'C'])\n\nGroupby one column and return the mean of the remaining columns in\neach group.\n\n>>> df.groupby('A').mean()\n     B         C\nA\n1  3.0  1.333333\n2  4.0  1.500000\n\nGroupby two columns and return the mean of the remaining column.\n\n>>> df.groupby(['A', 'B']).mean()\n       C\nA B\n1 2.0  2\n  4.0  1\n2 3.0  1\n  5.0  2\n\nGroupby one column and return the mean of only particular column in\nthe group.\n\n>>> df.groupby('A')['B'].mean()\nA\n1    3.0\n2    4.0\nName: B, dtype: float64", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1160, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1160", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.median": {"type": "function", "docstring": "Compute median of groups, excluding missing values.\n\nFor multiple groupings, the result index will be a MultiIndex\n\nReturns\n-------\nSeries or DataFrame\n    Median of values within each group.\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1216, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1216", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.min": {"type": "function", "docstring": "Compute min of group values.\n\nReturns\n-------\nSeries or DataFrame\n    Computed min of values within each group.\n\n        See Also\n        --------\n        Series.groupby\n        DataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1359, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1359", "errors": [["PR01", "Parameters {**kwargs} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.GroupBy.max"}, "pandas.core.groupby.GroupBy.ngroup": {"type": "function", "docstring": "Number each group from 0 to the number of groups - 1.\n\nThis is the enumerative complement of cumcount.  Note that the\nnumbers given to the groups match the order in which the groups\nwould be seen when iterating over the groupby object, not the\norder they are first observed.\n\n.. versionadded:: 0.20.2\n\nParameters\n----------\nascending : bool, default True\n    If False, number in reverse, from number of group - 1 to 0.\n\nReturns\n-------\nSeries\n    Unique numbers for each group.\n\nSee Also\n--------\n.cumcount : Number the rows in each group.\n\nExamples\n--------\n\n>>> df = pd.DataFrame({\"A\": list(\"aaabba\")})\n>>> df\n   A\n0  a\n1  a\n2  a\n3  b\n4  b\n5  a\n>>> df.groupby('A').ngroup()\n0    0\n1    0\n2    0\n3    1\n4    1\n5    0\ndtype: int64\n>>> df.groupby('A').ngroup(ascending=False)\n0    1\n1    1\n2    1\n3    0\n4    0\n5    1\ndtype: int64\n>>> df.groupby([\"A\", [1,1,2,3,2,1]]).ngroup()\n0    0\n1    0\n2    1\n3    3\n4    2\n5    0\ndtype: int64", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1913, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1913", "errors": [["EX03", "flake8 error: E231 missing whitespace after ',' (5 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.nth": {"type": "function", "docstring": "Take the nth row from each group if n is an int, or a subset of rows\nif n is a list of ints.\n\nIf dropna, will take the nth non-null row, dropna is either\n'all' or 'any'; this is equivalent to calling dropna(how=dropna)\nbefore the groupby.\n\nParameters\n----------\nn : int or list of ints\n    a single nth value for the row or a list of nth values\ndropna : None or str, optional\n    apply the specified dropna operation before counting which row is\n    the nth row. Needs to be None, 'any' or 'all'\n\nReturns\n-------\nSeries or DataFrame\n    N-th value within each group.\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby\n\nExamples\n--------\n\n>>> df = pd.DataFrame({'A': [1, 1, 2, 1, 2],\n...                    'B': [np.nan, 2, 3, 4, 5]}, columns=['A', 'B'])\n>>> g = df.groupby('A')\n>>> g.nth(0)\n     B\nA\n1  NaN\n2  3.0\n>>> g.nth(1)\n     B\nA\n1  2.0\n2  5.0\n>>> g.nth(-1)\n     B\nA\n1  4.0\n2  5.0\n>>> g.nth([0, 1])\n     B\nA\n1  NaN\n1  2.0\n2  3.0\n2  5.0\n\nSpecifying `dropna` allows count ignoring ``NaN``\n\n>>> g.nth(0, dropna='any')\n     B\nA\n1  2.0\n2  3.0\n\nNaNs denote group exhausted when using dropna\n\n>>> g.nth(3, dropna='any')\n    B\nA\n1 NaN\n2 NaN\n\nSpecifying `as_index=False` in `groupby` keeps the original index.\n\n>>> df.groupby('A', as_index=False).nth(1)\n   A    B\n1  1  2.0\n4  2  5.0", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1672, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1672", "errors": [["SS06", "Summary should fit in a single line"], ["PR08", "Parameter \"n\" description should start with a capital letter"], ["PR09", "Parameter \"n\" description should finish with \".\""], ["PR08", "Parameter \"dropna\" description should start with a capital letter"], ["PR09", "Parameter \"dropna\" description should finish with \".\""], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.ohlc": {"type": "function", "docstring": "Compute sum of values, excluding missing values.\n\nFor multiple groupings, the result index will be a MultiIndex\n\nReturns\n-------\nDataFrame\n    Open, high, low and close values within each group.\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1428, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1428", "errors": [["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.prod": {"type": "function", "docstring": "Compute prod of group values.\n\nReturns\n-------\nSeries or DataFrame\n    Computed prod of values within each group.\n\n        See Also\n        --------\n        Series.groupby\n        DataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1359, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1359", "errors": [["PR01", "Parameters {**kwargs} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.GroupBy.min"}, "pandas.core.groupby.GroupBy.rank": {"type": "function", "docstring": "Provide the rank of values within each group.\n\nParameters\n----------\nmethod : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n    * average: average rank of group\n    * min: lowest rank in group\n    * max: highest rank in group\n    * first: ranks assigned in order they appear in the array\n    * dense: like 'min', but rank always increases by 1 between groups\nascending : boolean, default True\n    False for ranks by high (1) to low (N)\nna_option :  {'keep', 'top', 'bottom'}, default 'keep'\n    * keep: leave NA values where they are\n    * top: smallest rank if ascending\n    * bottom: smallest rank if descending\npct : boolean, default False\n    Compute percentage rank of data within each group\naxis : int, default 0\n    The axis of the object over which to compute the rank.\n\nReturns\n-------\nDataFrame with ranking of values within each group\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 2043, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L2043", "errors": [["PR08", "Parameter \"method\" description should start with a capital letter"], ["PR09", "Parameter \"method\" description should finish with \".\""], ["PR06", "Parameter \"ascending\" type should use \"bool\" instead of \"boolean\""], ["PR09", "Parameter \"ascending\" description should finish with \".\""], ["PR08", "Parameter \"na_option\" description should start with a capital letter"], ["PR09", "Parameter \"na_option\" description should finish with \".\""], ["PR06", "Parameter \"pct\" type should use \"bool\" instead of \"boolean\""], ["PR09", "Parameter \"pct\" description should finish with \".\""], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.pct_change": {"type": "function", "docstring": "Calculate pct_change of each value to previous entry in group.\n\nReturns\n-------\nSeries or DataFrame\n    Percentage changes within each group.\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 2297, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L2297", "errors": [["PR01", "Parameters {freq, limit, axis, fill_method, periods} not documented"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.size": {"type": "function", "docstring": "Compute group sizes.\n\nReturns\n-------\nSeries\n    Number of rows in each group.\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1325, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1325", "errors": [["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.sem": {"type": "function", "docstring": "Compute standard error of the mean of groups, excluding missing values.\n\nFor multiple groupings, the result index will be a MultiIndex.\n\nParameters\n----------\nddof : integer, default 1\n    degrees of freedom\n\nReturns\n-------\nSeries or DataFrame\n    Standard error of the mean of values within each group.\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1305, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1305", "errors": [["PR06", "Parameter \"ddof\" type should use \"int\" instead of \"integer\""], ["PR08", "Parameter \"ddof\" description should start with a capital letter"], ["PR09", "Parameter \"ddof\" description should finish with \".\""], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.std": {"type": "function", "docstring": "Compute standard deviation of groups, excluding missing values.\n\nFor multiple groupings, the result index will be a MultiIndex.\n\nParameters\n----------\nddof : integer, default 1\n    degrees of freedom\n\nReturns\n-------\nSeries or DataFrame\n    Standard deviation of values within each group.\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1247, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1247", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR06", "Parameter \"ddof\" type should use \"int\" instead of \"integer\""], ["PR08", "Parameter \"ddof\" description should start with a capital letter"], ["PR09", "Parameter \"ddof\" description should finish with \".\""], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.sum": {"type": "function", "docstring": "Compute sum of group values.\n\nReturns\n-------\nSeries or DataFrame\n    Computed sum of values within each group.\n\n        See Also\n        --------\n        Series.groupby\n        DataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1359, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1359", "errors": [["PR01", "Parameters {**kwargs} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.GroupBy.prod"}, "pandas.core.groupby.GroupBy.var": {"type": "function", "docstring": "Compute variance of groups, excluding missing values.\n\nFor multiple groupings, the result index will be a MultiIndex.\n\nParameters\n----------\nddof : integer, default 1\n    degrees of freedom\n\nReturns\n-------\nSeries or DataFrame\n    Variance of values within each group.\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1270, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1270", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR06", "Parameter \"ddof\" type should use \"int\" instead of \"integer\""], ["PR08", "Parameter \"ddof\" description should start with a capital letter"], ["PR09", "Parameter \"ddof\" description should finish with \".\""], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.GroupBy.tail": {"type": "function", "docstring": "Return last n rows of each group.\n\nEssentially equivalent to ``.apply(lambda x: x.tail(n))``,\nexcept ignores as_index flag.\n\nReturns\n-------\nSeries or DataFrame\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby\n\nExamples\n--------\n\n>>> df = pd.DataFrame([['a', 1], ['a', 2], ['b', 1], ['b', 2]],\n...                   columns=['A', 'B'])\n>>> df.groupby('A').tail(1)\n   A  B\n1  a  2\n3  b  2\n>>> df.groupby('A').head(1)\n   A  B\n0  a  1\n2  b  1", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 2354, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L2354", "errors": [["PR01", "Parameters {n} not documented"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.DataFrameGroupBy.all": {"type": "function", "docstring": "Return True if all values in the group are truthful, else False.\n\nParameters\n----------\nskipna : bool, default True\n    Flag to ignore nan values during truth testing\n\nReturns\n-------\nbool\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1128, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1128", "errors": [["PR09", "Parameter \"skipna\" description should finish with \".\""], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.GroupBy.all"}, "pandas.core.groupby.DataFrameGroupBy.any": {"type": "function", "docstring": "Return True if any value in the group is truthful, else False.\n\nParameters\n----------\nskipna : bool, default True\n    Flag to ignore nan values during truth testing\n\nReturns\n-------\nbool\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1111, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1111", "errors": [["PR09", "Parameter \"skipna\" description should finish with \".\""], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.GroupBy.any"}, "pandas.core.groupby.DataFrameGroupBy.bfill": {"type": "function", "docstring": "Backward fill the values.\n\nParameters\n----------\nlimit : integer, optional\n    limit of how many values to fill\n\nReturns\n-------\nSeries or DataFrame\n    Object with missing values filled.\n\nSee Also\n--------\nSeries.backfill\nDataFrame.backfill\nSeries.fillna\nDataFrame.fillna", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1646, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1646", "errors": [["PR06", "Parameter \"limit\" type should use \"int\" instead of \"integer\""], ["PR08", "Parameter \"limit\" description should start with a capital letter"], ["PR09", "Parameter \"limit\" description should finish with \".\""], ["SA04", "Missing description for See Also \"Series.backfill\" reference"], ["SA04", "Missing description for See Also \"DataFrame.backfill\" reference"], ["SA04", "Missing description for See Also \"Series.fillna\" reference"], ["SA04", "Missing description for See Also \"DataFrame.fillna\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.GroupBy.bfill"}, "pandas.core.groupby.DataFrameGroupBy.corr": {"type": "property", "docstring": "Compute pairwise correlation of columns, excluding NA/null values.\n\nParameters\n----------\nmethod : {'pearson', 'kendall', 'spearman'} or callable\n    * pearson : standard correlation coefficient\n    * kendall : Kendall Tau correlation coefficient\n    * spearman : Spearman rank correlation\n    * callable: callable with input two 1d ndarrays\n        and returning a float. Note that the returned matrix from corr\n        will have 1 along the diagonals and will be symmetric\n        regardless of the callable's behavior\n        .. versionadded:: 0.24.0\n\nmin_periods : int, optional\n    Minimum number of observations required per pair of columns\n    to have a valid result. Currently only available for Pearson\n    and Spearman correlation.\n\nReturns\n-------\nDataFrame\n    Correlation matrix.\n\nSee Also\n--------\nDataFrame.corrwith\nSeries.corr\n\nExamples\n--------\n>>> def histogram_intersection(a, b):\n...     v = np.minimum(a, b).sum().round(decimals=1)\n...     return v\n>>> df = pd.DataFrame([(.2, .3), (.0, .6), (.6, .0), (.2, .1)],\n...                   columns=['dogs', 'cats'])\n>>> df.corr(method=histogram_intersection)\n      dogs  cats\ndogs   1.0   0.3\ncats   0.3   1.0", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR02", "Unknown parameters {method, min_periods}"], ["PR08", "Parameter \"method\" description should start with a capital letter"], ["PR09", "Parameter \"method\" description should finish with \".\""], ["SA04", "Missing description for See Also \"DataFrame.corrwith\" reference"], ["SA04", "Missing description for See Also \"Series.corr\" reference"], ["EX03", "flake8 error: E302 expected 2 blank lines, found 0"], ["EX03", "flake8 error: E305 expected 2 blank lines after class or function definition, found 0"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.TimedeltaIndex.inferred_freq"}, "pandas.core.groupby.DataFrameGroupBy.count": {"type": "function", "docstring": "Compute count of group, excluding missing values.\n\nReturns\n-------\nDataFrame\n    Count of values within each group.", "deprecated": false, "file": "pandas/core/groupby/generic.py", "file_line": 1597, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/generic.py#L1597", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.DataFrameGroupBy.cov": {"type": "property", "docstring": "Compute pairwise covariance of columns, excluding NA/null values.\n\nCompute the pairwise covariance among the series of a DataFrame.\nThe returned data frame is the `covariance matrix\n<https://en.wikipedia.org/wiki/Covariance_matrix>`__ of the columns\nof the DataFrame.\n\nBoth NA and null values are automatically excluded from the\ncalculation. (See the note below about bias from missing values.)\nA threshold can be set for the minimum number of\nobservations for each value created. Comparisons with observations\nbelow this threshold will be returned as ``NaN``.\n\nThis method is generally used for the analysis of time series data to\nunderstand the relationship between different measures\nacross time.\n\nParameters\n----------\nmin_periods : int, optional\n    Minimum number of observations required per pair of columns\n    to have a valid result.\n\nReturns\n-------\nDataFrame\n    The covariance matrix of the series of the DataFrame.\n\nSee Also\n--------\nSeries.cov : Compute covariance with another Series.\ncore.window.EWM.cov: Exponential weighted sample covariance.\ncore.window.Expanding.cov : Expanding sample covariance.\ncore.window.Rolling.cov : Rolling sample covariance.\n\nNotes\n-----\nReturns the covariance matrix of the DataFrame's time series.\nThe covariance is normalized by N-1.\n\nFor DataFrames that have Series that are missing data (assuming that\ndata is `missing at random\n<https://en.wikipedia.org/wiki/Missing_data#Missing_at_random>`__)\nthe returned covariance matrix will be an unbiased estimate\nof the variance and covariance between the member Series.\n\nHowever, for many applications this estimate may not be acceptable\nbecause the estimate covariance matrix is not guaranteed to be positive\nsemi-definite. This could lead to estimate correlations having\nabsolute values which are greater than one, and/or a non-invertible\ncovariance matrix. See `Estimation of covariance matrices\n<http://en.wikipedia.org/w/index.php?title=Estimation_of_covariance_\nmatrices>`__ for more details.\n\nExamples\n--------\n>>> df = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)],\n...                   columns=['dogs', 'cats'])\n>>> df.cov()\n          dogs      cats\ndogs  0.666667 -1.000000\ncats -1.000000  1.666667\n\n>>> np.random.seed(42)\n>>> df = pd.DataFrame(np.random.randn(1000, 5),\n...                   columns=['a', 'b', 'c', 'd', 'e'])\n>>> df.cov()\n          a         b         c         d         e\na  0.998438 -0.020161  0.059277 -0.008943  0.014144\nb -0.020161  1.059352 -0.008543 -0.024738  0.009826\nc  0.059277 -0.008543  1.010670 -0.001486 -0.000271\nd -0.008943 -0.024738 -0.001486  0.921297 -0.013692\ne  0.014144  0.009826 -0.000271 -0.013692  0.977795\n\n**Minimum number of periods**\n\nThis method also supports an optional ``min_periods`` keyword\nthat specifies the required minimum number of non-NA observations for\neach column pair in order to have a valid result:\n\n>>> np.random.seed(42)\n>>> df = pd.DataFrame(np.random.randn(20, 3),\n...                   columns=['a', 'b', 'c'])\n>>> df.loc[df.index[:5], 'a'] = np.nan\n>>> df.loc[df.index[5:10], 'b'] = np.nan\n>>> df.cov(min_periods=12)\n          a         b         c\na  0.316741       NaN -0.150812\nb       NaN  1.248003  0.191417\nc -0.150812  0.191417  0.895202", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR02", "Unknown parameters {min_periods}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.DataFrameGroupBy.corr"}, "pandas.core.groupby.DataFrameGroupBy.cummax": {"type": "function", "docstring": "Cumulative max for each group.\n\nReturns\n-------\nSeries or DataFrame\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 2134, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L2134", "errors": [["PR01", "Parameters {axis, **kwargs} not documented"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.GroupBy.cummax"}, "pandas.core.groupby.DataFrameGroupBy.cummin": {"type": "function", "docstring": "Cumulative min for each group.\n\nReturns\n-------\nSeries or DataFrame\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 2119, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L2119", "errors": [["PR01", "Parameters {axis, **kwargs} not documented"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.GroupBy.cummin"}, "pandas.core.groupby.DataFrameGroupBy.cumprod": {"type": "function", "docstring": "Cumulative product for each group.\n\nReturns\n-------\nSeries or DataFrame\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 2087, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L2087", "errors": [["PR01", "Parameters {axis, *args, **kwargs} not documented"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.GroupBy.cumprod"}, "pandas.core.groupby.DataFrameGroupBy.cumsum": {"type": "function", "docstring": "Cumulative sum for each group.\n\nReturns\n-------\nSeries or DataFrame\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 2103, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L2103", "errors": [["PR01", "Parameters {axis, *args, **kwargs} not documented"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.GroupBy.cumsum"}, "pandas.core.groupby.DataFrameGroupBy.describe": {"type": "function", "docstring": "Generate descriptive statistics that summarize the central tendency,\ndispersion and shape of a dataset's distribution, excluding\n``NaN`` values.\n\nAnalyzes both numeric and object series, as well\nas ``DataFrame`` column sets of mixed data types. The output\nwill vary depending on what is provided. Refer to the notes\nbelow for more detail.\n\nParameters\n----------\npercentiles : list-like of numbers, optional\n    The percentiles to include in the output. All should\n    fall between 0 and 1. The default is\n    ``[.25, .5, .75]``, which returns the 25th, 50th, and\n    75th percentiles.\ninclude : 'all', list-like of dtypes or None (default), optional\n    A white list of data types to include in the result. Ignored\n    for ``Series``. Here are the options:\n\n    - 'all' : All columns of the input will be included in the output.\n    - A list-like of dtypes : Limits the results to the\n      provided data types.\n      To limit the result to numeric types submit\n      ``numpy.number``. To limit it instead to object columns submit\n      the ``numpy.object`` data type. Strings\n      can also be used in the style of\n      ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n      select pandas categorical columns, use ``'category'``\n    - None (default) : The result will include all numeric columns.\nexclude : list-like of dtypes or None (default), optional,\n    A black list of data types to omit from the result. Ignored\n    for ``Series``. Here are the options:\n\n    - A list-like of dtypes : Excludes the provided data types\n      from the result. To exclude numeric types submit\n      ``numpy.number``. To exclude object columns submit the data\n      type ``numpy.object``. Strings can also be used in the style of\n      ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n      exclude pandas categorical columns, use ``'category'``\n    - None (default) : The result will exclude nothing.\n\nReturns\n-------\nSeries or DataFrame\n    Summary statistics of the Series or Dataframe provided.\n\nSee Also\n--------\nDataFrame.count: Count number of non-NA/null observations.\nDataFrame.max: Maximum of the values in the object.\nDataFrame.min: Minimum of the values in the object.\nDataFrame.mean: Mean of the values.\nDataFrame.std: Standard deviation of the observations.\nDataFrame.select_dtypes: Subset of a DataFrame including/excluding\n    columns based on their dtype.\n\nNotes\n-----\nFor numeric data, the result's index will include ``count``,\n``mean``, ``std``, ``min``, ``max`` as well as lower, ``50`` and\nupper percentiles. By default the lower percentile is ``25`` and the\nupper percentile is ``75``. The ``50`` percentile is the\nsame as the median.\n\nFor object data (e.g. strings or timestamps), the result's index\nwill include ``count``, ``unique``, ``top``, and ``freq``. The ``top``\nis the most common value. The ``freq`` is the most common value's\nfrequency. Timestamps also include the ``first`` and ``last`` items.\n\nIf multiple object values have the highest count, then the\n``count`` and ``top`` results will be arbitrarily chosen from\namong those with the highest count.\n\nFor mixed data types provided via a ``DataFrame``, the default is to\nreturn only an analysis of numeric columns. If the dataframe consists\nonly of object and categorical data without any numeric columns, the\ndefault is to return an analysis of both the object and categorical\ncolumns. If ``include='all'`` is provided as an option, the result\nwill include a union of attributes of each type.\n\nThe `include` and `exclude` parameters can be used to limit\nwhich columns in a ``DataFrame`` are analyzed for the output.\nThe parameters are ignored when analyzing a ``Series``.\n\nExamples\n--------\nDescribing a numeric ``Series``.\n\n>>> s = pd.Series([1, 2, 3])\n>>> s.describe()\ncount    3.0\nmean     2.0\nstd      1.0\nmin      1.0\n25%      1.5\n50%      2.0\n75%      2.5\nmax      3.0\ndtype: float64\n\nDescribing a categorical ``Series``.\n\n>>> s = pd.Series(['a', 'a', 'b', 'c'])\n>>> s.describe()\ncount     4\nunique    3\ntop       a\nfreq      2\ndtype: object\n\nDescribing a timestamp ``Series``.\n\n>>> s = pd.Series([\n...   np.datetime64(\"2000-01-01\"),\n...   np.datetime64(\"2010-01-01\"),\n...   np.datetime64(\"2010-01-01\")\n... ])\n>>> s.describe()\ncount                       3\nunique                      2\ntop       2010-01-01 00:00:00\nfreq                        2\nfirst     2000-01-01 00:00:00\nlast      2010-01-01 00:00:00\ndtype: object\n\nDescribing a ``DataFrame``. By default only numeric fields\nare returned.\n\n>>> df = pd.DataFrame({'categorical': pd.Categorical(['d','e','f']),\n...                    'numeric': [1, 2, 3],\n...                    'object': ['a', 'b', 'c']\n...                   })\n>>> df.describe()\n       numeric\ncount      3.0\nmean       2.0\nstd        1.0\nmin        1.0\n25%        1.5\n50%        2.0\n75%        2.5\nmax        3.0\n\nDescribing all columns of a ``DataFrame`` regardless of data type.\n\n>>> df.describe(include='all')\n        categorical  numeric object\ncount            3      3.0      3\nunique           3      NaN      3\ntop              f      NaN      c\nfreq             1      NaN      1\nmean           NaN      2.0    NaN\nstd            NaN      1.0    NaN\nmin            NaN      1.0    NaN\n25%            NaN      1.5    NaN\n50%            NaN      2.0    NaN\n75%            NaN      2.5    NaN\nmax            NaN      3.0    NaN\n\nDescribing a column from a ``DataFrame`` by accessing it as\nan attribute.\n\n>>> df.numeric.describe()\ncount    3.0\nmean     2.0\nstd      1.0\nmin      1.0\n25%      1.5\n50%      2.0\n75%      2.5\nmax      3.0\nName: numeric, dtype: float64\n\nIncluding only numeric columns in a ``DataFrame`` description.\n\n>>> df.describe(include=[np.number])\n       numeric\ncount      3.0\nmean       2.0\nstd        1.0\nmin        1.0\n25%        1.5\n50%        2.0\n75%        2.5\nmax        3.0\n\nIncluding only string columns in a ``DataFrame`` description.\n\n>>> df.describe(include=[np.object])\n       object\ncount       3\nunique      3\ntop         c\nfreq        1\n\nIncluding only categorical columns from a ``DataFrame`` description.\n\n>>> df.describe(include=['category'])\n       categorical\ncount            3\nunique           3\ntop              f\nfreq             1\n\nExcluding numeric columns from a ``DataFrame`` description.\n\n>>> df.describe(exclude=[np.number])\n       categorical object\ncount            3      3\nunique           3      3\ntop              f      c\nfreq             1      1\n\nExcluding object columns from a ``DataFrame`` description.\n\n>>> df.describe(exclude=[np.object])\n       categorical  numeric\ncount            3      3.0\nunique           3      NaN\ntop              f      NaN\nfreq             1      NaN\nmean           NaN      2.0\nstd            NaN      1.0\nmin            NaN      1.0\n25%            NaN      1.5\n50%            NaN      2.0\n75%            NaN      2.5\nmax            NaN      3.0", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1444, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1444", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {include, exclude, percentiles}"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 149, in pandas.core.groupby.DataFrameGroupBy.describe\nFailed example:\n    df.describe(include='all')\nExpected:\n            categorical  numeric object\n    count            3      3.0      3\n    unique           3      NaN      3\n    top              f      NaN      c\n    freq             1      NaN      1\n    mean           NaN      2.0    NaN\n    std            NaN      1.0    NaN\n    min            NaN      1.0    NaN\n    25%            NaN      1.5    NaN\n    50%            NaN      2.0    NaN\n    75%            NaN      2.5    NaN\n    max            NaN      3.0    NaN\nGot:\n           categorical  numeric object\n    count            3      3.0      3\n    unique           3      NaN      3\n    top              f      NaN      b\n    freq             1      NaN      1\n    mean           NaN      2.0    NaN\n    std            NaN      1.0    NaN\n    min            NaN      1.0    NaN\n    25%            NaN      1.5    NaN\n    50%            NaN      2.0    NaN\n    75%            NaN      2.5    NaN\n    max            NaN      3.0    NaN\n**********************************************************************\nLine 192, in pandas.core.groupby.DataFrameGroupBy.describe\nFailed example:\n    df.describe(include=[np.object])\nExpected:\n           object\n    count       3\n    unique      3\n    top         c\n    freq        1\nGot:\n           object\n    count       3\n    unique      3\n    top         b\n    freq        1\n**********************************************************************\nLine 210, in pandas.core.groupby.DataFrameGroupBy.describe\nFailed example:\n    df.describe(exclude=[np.number])\nExpected:\n           categorical object\n    count            3      3\n    unique           3      3\n    top              f      c\n    freq             1      1\nGot:\n           categorical object\n    count            3      3\n    unique           3      3\n    top              f      b\n    freq             1      1\n"], ["EX03", "flake8 error: E121 continuation line under-indented for hanging indent"], ["EX03", "flake8 error: E124 closing bracket does not match visual indentation"], ["EX03", "flake8 error: E231 missing whitespace after ',' (2 times)"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 149, in pandas.core.groupby.DataFrameGroupBy.describe\nFailed example:\n    df.describe(include='all')\nExpected:\n            categorical  numeric object\n    count            3      3.0      3\n    unique           3      NaN      3\n    top              f      NaN      c\n    freq             1      NaN      1\n    mean           NaN      2.0    NaN\n    std            NaN      1.0    NaN\n    min            NaN      1.0    NaN\n    25%            NaN      1.5    NaN\n    50%            NaN      2.0    NaN\n    75%            NaN      2.5    NaN\n    max            NaN      3.0    NaN\nGot:\n           categorical  numeric object\n    count            3      3.0      3\n    unique           3      NaN      3\n    top              f      NaN      b\n    freq             1      NaN      1\n    mean           NaN      2.0    NaN\n    std            NaN      1.0    NaN\n    min            NaN      1.0    NaN\n    25%            NaN      1.5    NaN\n    50%            NaN      2.0    NaN\n    75%            NaN      2.5    NaN\n    max            NaN      3.0    NaN\n**********************************************************************\nLine 192, in pandas.core.groupby.DataFrameGroupBy.describe\nFailed example:\n    df.describe(include=[np.object])\nExpected:\n           object\n    count       3\n    unique      3\n    top         c\n    freq        1\nGot:\n           object\n    count       3\n    unique      3\n    top         b\n    freq        1\n**********************************************************************\nLine 210, in pandas.core.groupby.DataFrameGroupBy.describe\nFailed example:\n    df.describe(exclude=[np.number])\nExpected:\n           categorical object\n    count            3      3\n    unique           3      3\n    top              f      c\n    freq             1      1\nGot:\n           categorical object\n    count            3      3\n    unique           3      3\n    top              f      b\n    freq             1      1\n", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.DataFrameGroupBy.diff": {"type": "property", "docstring": "First discrete difference of element.\n\nCalculates the difference of a DataFrame element compared with another\nelement in the DataFrame (default is the element in the same column\nof the previous row).\n\nParameters\n----------\nperiods : int, default 1\n    Periods to shift for calculating difference, accepts negative\n    values.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Take difference over rows (0) or columns (1).\n\n    .. versionadded:: 0.16.1.\n\nReturns\n-------\nDataFrame\n\nSee Also\n--------\nSeries.diff: First discrete difference for a Series.\nDataFrame.pct_change: Percent change over given number of periods.\nDataFrame.shift: Shift index by desired number of periods with an\n    optional time freq.\n\nExamples\n--------\nDifference with previous row\n\n>>> df = pd.DataFrame({'a': [1, 2, 3, 4, 5, 6],\n...                    'b': [1, 1, 2, 3, 5, 8],\n...                    'c': [1, 4, 9, 16, 25, 36]})\n>>> df\n   a  b   c\n0  1  1   1\n1  2  1   4\n2  3  2   9\n3  4  3  16\n4  5  5  25\n5  6  8  36\n\n>>> df.diff()\n     a    b     c\n0  NaN  NaN   NaN\n1  1.0  0.0   3.0\n2  1.0  1.0   5.0\n3  1.0  1.0   7.0\n4  1.0  2.0   9.0\n5  1.0  3.0  11.0\n\nDifference with previous column\n\n>>> df.diff(axis=1)\n    a    b     c\n0 NaN  0.0   0.0\n1 NaN -1.0   3.0\n2 NaN -1.0   7.0\n3 NaN -1.0  13.0\n4 NaN  0.0  20.0\n5 NaN  2.0  28.0\n\nDifference with 3rd previous row\n\n>>> df.diff(periods=3)\n     a    b     c\n0  NaN  NaN   NaN\n1  NaN  NaN   NaN\n2  NaN  NaN   NaN\n3  3.0  2.0  15.0\n4  3.0  4.0  21.0\n5  3.0  6.0  27.0\n\nDifference with following row\n\n>>> df.diff(periods=-1)\n     a    b     c\n0 -1.0  0.0  -3.0\n1 -1.0 -1.0  -5.0\n2 -1.0 -1.0  -7.0\n3 -1.0 -2.0  -9.0\n4 -1.0 -3.0 -11.0\n5  NaN  NaN   NaN", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR02", "Unknown parameters {axis, periods}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.DataFrameGroupBy.cov"}, "pandas.core.groupby.DataFrameGroupBy.ffill": {"type": "function", "docstring": "Forward fill the values.\n\nParameters\n----------\nlimit : integer, optional\n    limit of how many values to fill\n\nReturns\n-------\nSeries or DataFrame\n    Object with missing values filled.\n\nSee Also\n--------\nSeries.pad\nDataFrame.pad\nSeries.fillna\nDataFrame.fillna", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1620, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1620", "errors": [["PR06", "Parameter \"limit\" type should use \"int\" instead of \"integer\""], ["PR08", "Parameter \"limit\" description should start with a capital letter"], ["PR09", "Parameter \"limit\" description should finish with \".\""], ["SA04", "Missing description for See Also \"Series.pad\" reference"], ["SA04", "Missing description for See Also \"DataFrame.pad\" reference"], ["SA04", "Missing description for See Also \"Series.fillna\" reference"], ["SA04", "Missing description for See Also \"DataFrame.fillna\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.GroupBy.ffill"}, "pandas.core.groupby.DataFrameGroupBy.fillna": {"type": "property", "docstring": "Fill NA/NaN values using the specified method.\n\nParameters\n----------\nvalue : scalar, dict, Series, or DataFrame\n    Value to use to fill holes (e.g. 0), alternately a\n    dict/Series/DataFrame of values specifying which value to use for\n    each index (for a Series) or column (for a DataFrame).  Values not\n    in the dict/Series/DataFrame will not be filled. This value cannot\n    be a list.\nmethod : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n    Method to use for filling holes in reindexed Series\n    pad / ffill: propagate last valid observation forward to next valid\n    backfill / bfill: use next valid observation to fill gap.\naxis : {0 or 'index', 1 or 'columns'}\n    Axis along which to fill missing values.\ninplace : bool, default False\n    If True, fill in-place. Note: this will modify any\n    other views on this object (e.g., a no-copy slice for a column in a\n    DataFrame).\nlimit : int, default None\n    If method is specified, this is the maximum number of consecutive\n    NaN values to forward/backward fill. In other words, if there is\n    a gap with more than this number of consecutive NaNs, it will only\n    be partially filled. If method is not specified, this is the\n    maximum number of entries along the entire axis where NaNs will be\n    filled. Must be greater than 0 if not None.\ndowncast : dict, default is None\n    A dict of item->dtype of what to downcast if possible,\n    or the string 'infer' which will try to downcast to an appropriate\n    equal type (e.g. float64 to int64 if possible).\n\nReturns\n-------\nDataFrame\n    Object with missing values filled.\n\nSee Also\n--------\ninterpolate : Fill NaN values using interpolation.\nreindex : Conform object to new index.\nasfreq : Convert TimeSeries to specified frequency.\n\nExamples\n--------\n>>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n...                    [3, 4, np.nan, 1],\n...                    [np.nan, np.nan, np.nan, 5],\n...                    [np.nan, 3, np.nan, 4]],\n...                   columns=list('ABCD'))\n>>> df\n     A    B   C  D\n0  NaN  2.0 NaN  0\n1  3.0  4.0 NaN  1\n2  NaN  NaN NaN  5\n3  NaN  3.0 NaN  4\n\nReplace all NaN elements with 0s.\n\n>>> df.fillna(0)\n    A   B   C   D\n0   0.0 2.0 0.0 0\n1   3.0 4.0 0.0 1\n2   0.0 0.0 0.0 5\n3   0.0 3.0 0.0 4\n\nWe can also propagate non-null values forward or backward.\n\n>>> df.fillna(method='ffill')\n    A   B   C   D\n0   NaN 2.0 NaN 0\n1   3.0 4.0 NaN 1\n2   3.0 4.0 NaN 5\n3   3.0 3.0 NaN 4\n\nReplace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,\n2, and 3 respectively.\n\n>>> values = {'A': 0, 'B': 1, 'C': 2, 'D': 3}\n>>> df.fillna(value=values)\n    A   B   C   D\n0   0.0 2.0 2.0 0\n1   3.0 4.0 2.0 1\n2   0.0 1.0 2.0 5\n3   0.0 3.0 2.0 4\n\nOnly replace the first NaN element.\n\n>>> df.fillna(value=values, limit=1)\n    A   B   C   D\n0   0.0 2.0 2.0 0\n1   3.0 4.0 NaN 1\n2   NaN 1.0 NaN 5\n3   NaN 3.0 NaN 4", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR02", "Unknown parameters {value, axis, inplace, limit, downcast, method}"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.DataFrameGroupBy.diff"}, "pandas.core.groupby.DataFrameGroupBy.filter": {"type": "function", "docstring": "Return a copy of a DataFrame excluding elements from groups that\ndo not satisfy the boolean criterion specified by func.\n\nParameters\n----------\nf : function\n    Function to apply to each subframe. Should return True or False.\ndropna : Drop groups that do not pass the filter. True by default;\n    if False, groups that evaluate False are filled with NaNs.\n\nReturns\n-------\nfiltered : DataFrame\n\nNotes\n-----\nEach subframe is endowed the attribute 'name' in case you need to know\nwhich group you are working on.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',\n...                           'foo', 'bar'],\n...                    'B' : [1, 2, 3, 4, 5, 6],\n...                    'C' : [2.0, 5., 8., 1., 2., 9.]})\n>>> grouped = df.groupby('A')\n>>> grouped.filter(lambda x: x['B'].mean() > 3.)\n     A  B    C\n1  bar  2  5.0\n3  bar  4  1.0\n5  bar  6  9.0", "deprecated": false, "file": "pandas/core/groupby/generic.py", "file_line": 685, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/generic.py#L685", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args, func} not documented"], ["PR02", "Unknown parameters {f}"], ["PR08", "Parameter \"dropna\" description should start with a capital letter"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.DataFrameGroupBy.hist": {"type": "property", "docstring": "Make a histogram of the DataFrame's.\n\nA `histogram`_ is a representation of the distribution of data.\nThis function calls :meth:`matplotlib.pyplot.hist`, on each series in\nthe DataFrame, resulting in one histogram per column.\n\n.. _histogram: https://en.wikipedia.org/wiki/Histogram\n\nParameters\n----------\ndata : DataFrame\n    The pandas object holding the data.\ncolumn : str or sequence\n    If passed, will be used to limit data to a subset of columns.\nby : object, optional\n    If passed, then used to form histograms for separate groups.\ngrid : bool, default True\n    Whether to show axis grid lines.\nxlabelsize : int, default None\n    If specified changes the x-axis label size.\nxrot : float, default None\n    Rotation of x axis labels. For example, a value of 90 displays the\n    x labels rotated 90 degrees clockwise.\nylabelsize : int, default None\n    If specified changes the y-axis label size.\nyrot : float, default None\n    Rotation of y axis labels. For example, a value of 90 displays the\n    y labels rotated 90 degrees clockwise.\nax : Matplotlib axes object, default None\n    The axes to plot the histogram on.\nsharex : bool, default True if ax is None else False\n    In case subplots=True, share x axis and set some x axis labels to\n    invisible; defaults to True if ax is None otherwise False if an ax\n    is passed in.\n    Note that passing in both an ax and sharex=True will alter all x axis\n    labels for all subplots in a figure.\nsharey : bool, default False\n    In case subplots=True, share y axis and set some y axis labels to\n    invisible.\nfigsize : tuple\n    The size in inches of the figure to create. Uses the value in\n    `matplotlib.rcParams` by default.\nlayout : tuple, optional\n    Tuple of (rows, columns) for the layout of the histograms.\nbins : int or sequence, default 10\n    Number of histogram bins to be used. If an integer is given, bins + 1\n    bin edges are calculated and returned. If bins is a sequence, gives\n    bin edges, including left edge of first bin and right edge of last\n    bin. In this case, bins is returned unmodified.\n**kwds\n    All other plotting keyword arguments to be passed to\n    :meth:`matplotlib.pyplot.hist`.\n\nReturns\n-------\nmatplotlib.AxesSubplot or numpy.ndarray of them\n\nSee Also\n--------\nmatplotlib.pyplot.hist : Plot a histogram using matplotlib.\n\nExamples\n--------\n\n.. plot::\n    :context: close-figs\n\n    This example draws a histogram based on the length and width of\n    some animals, displayed in three bins\n\n    >>> df = pd.DataFrame({\n    ...     'length': [1.5, 0.5, 1.2, 0.9, 3],\n    ...     'width': [0.7, 0.2, 0.15, 0.2, 1.1]\n    ...     }, index=['pig', 'rabbit', 'duck', 'chicken', 'horse'])\n    >>> hist = df.hist(bins=3)", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR02", "Unknown parameters {**kwds, data, by, xlabelsize, ax, sharex, bins, column, sharey, layout, yrot, xrot, grid, figsize, ylabelsize}"], ["EX03", "flake8 error: E123 closing bracket does not match indentation of opening bracket's line"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.DataFrameGroupBy.fillna"}, "pandas.core.groupby.DataFrameGroupBy.idxmax": {"type": "property", "docstring": "Return index of first occurrence of maximum over requested axis.\nNA/null values are excluded.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    0 or 'index' for row-wise, 1 or 'columns' for column-wise\nskipna : boolean, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\n\nReturns\n-------\nSeries\n    Indexes of maxima along the specified axis.\n\nRaises\n------\nValueError\n    * If the row/column is empty\n\nSee Also\n--------\nSeries.idxmax\n\nNotes\n-----\nThis method is the DataFrame version of ``ndarray.argmax``.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS06", "Summary should fit in a single line"], ["PR02", "Unknown parameters {axis, skipna}"], ["PR08", "Parameter \"axis\" description should start with a capital letter"], ["PR09", "Parameter \"axis\" description should finish with \".\""], ["PR06", "Parameter \"skipna\" type should use \"bool\" instead of \"boolean\""], ["SA04", "Missing description for See Also \"Series.idxmax\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.DataFrameGroupBy.hist"}, "pandas.core.groupby.DataFrameGroupBy.idxmin": {"type": "property", "docstring": "Return index of first occurrence of minimum over requested axis.\nNA/null values are excluded.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    0 or 'index' for row-wise, 1 or 'columns' for column-wise\nskipna : boolean, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\n\nReturns\n-------\nSeries\n    Indexes of minima along the specified axis.\n\nRaises\n------\nValueError\n    * If the row/column is empty\n\nSee Also\n--------\nSeries.idxmin\n\nNotes\n-----\nThis method is the DataFrame version of ``ndarray.argmin``.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS06", "Summary should fit in a single line"], ["PR02", "Unknown parameters {axis, skipna}"], ["PR08", "Parameter \"axis\" description should start with a capital letter"], ["PR09", "Parameter \"axis\" description should finish with \".\""], ["PR06", "Parameter \"skipna\" type should use \"bool\" instead of \"boolean\""], ["SA04", "Missing description for See Also \"Series.idxmin\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.DataFrameGroupBy.idxmax"}, "pandas.core.groupby.DataFrameGroupBy.mad": {"type": "property", "docstring": "Return the mean absolute deviation of the values for the requested axis.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a Series.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or DataFrame (if level specified)", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR02", "Unknown parameters {**kwargs, skipna, numeric_only, axis, level}"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.DataFrameGroupBy.idxmin"}, "pandas.core.groupby.DataFrameGroupBy.nunique": {"type": "function", "docstring": "Return DataFrame with number of distinct observations per group for\neach column.\n\n.. versionadded:: 0.20.0\n\nParameters\n----------\ndropna : boolean, default True\n    Don't include NaN in the counts.\n\nReturns\n-------\nnunique: DataFrame\n\nExamples\n--------\n>>> df = pd.DataFrame({'id': ['spam', 'egg', 'egg', 'spam',\n...                           'ham', 'ham'],\n...                    'value1': [1, 5, 5, 2, 5, 5],\n...                    'value2': list('abbaxy')})\n>>> df\n     id  value1 value2\n0  spam       1      a\n1   egg       5      b\n2   egg       5      b\n3  spam       2      a\n4   ham       5      x\n5   ham       5      y\n\n>>> df.groupby('id').nunique()\n    id  value1  value2\nid\negg    1       1       1\nham    1       1       2\nspam   1       2       1\n\nCheck for rows with the same id but conflicting values:\n\n>>> df.groupby('id').filter(lambda g: (g.nunique() > 1).any())\n     id  value1 value2\n0  spam       1      a\n3  spam       2      a\n4   ham       5      x\n5   ham       5      y", "deprecated": false, "file": "pandas/core/groupby/generic.py", "file_line": 1621, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/generic.py#L1621", "errors": [["SS06", "Summary should fit in a single line"], ["PR06", "Parameter \"dropna\" type should use \"bool\" instead of \"boolean\""], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.DataFrameGroupBy.pct_change": {"type": "function", "docstring": "Calculate pct_change of each value to previous entry in group.\n\nReturns\n-------\nSeries or DataFrame\n    Percentage changes within each group.\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 2297, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L2297", "errors": [["PR01", "Parameters {freq, limit, axis, fill_method, periods} not documented"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.GroupBy.pct_change"}, "pandas.core.groupby.DataFrameGroupBy.plot": {"type": "property", "docstring": "Class implementing the .plot attribute for groupby objects.", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 307, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L307", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.DataFrameGroupBy.quantile": {"type": "function", "docstring": "Return group values at the given quantile, a la numpy.percentile.\n\nParameters\n----------\nq : float or array-like, default 0.5 (50% quantile)\n    Value(s) between 0 and 1 providing the quantile(s) to compute.\ninterpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n    Method to use when the desired quantile falls between two points.\n\nReturns\n-------\nSeries or DataFrame\n    Return type determined by caller of GroupBy object.\n\nSee Also\n--------\nSeries.quantile : Similar method for Series.\nDataFrame.quantile : Similar method for DataFrame.\nnumpy.percentile : NumPy method to compute qth percentile.\n\nExamples\n--------\n>>> df = pd.DataFrame([\n...     ['a', 1], ['a', 2], ['a', 3],\n...     ['b', 1], ['b', 3], ['b', 5]\n... ], columns=['key', 'val'])\n>>> df.groupby('key').quantile()\n    val\nkey\na    2.0\nb    3.0", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1839, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1839", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.DataFrameGroupBy.rank": {"type": "function", "docstring": "Provide the rank of values within each group.\n\nParameters\n----------\nmethod : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n    * average: average rank of group\n    * min: lowest rank in group\n    * max: highest rank in group\n    * first: ranks assigned in order they appear in the array\n    * dense: like 'min', but rank always increases by 1 between groups\nascending : boolean, default True\n    False for ranks by high (1) to low (N)\nna_option :  {'keep', 'top', 'bottom'}, default 'keep'\n    * keep: leave NA values where they are\n    * top: smallest rank if ascending\n    * bottom: smallest rank if descending\npct : boolean, default False\n    Compute percentage rank of data within each group\naxis : int, default 0\n    The axis of the object over which to compute the rank.\n\nReturns\n-------\nDataFrame with ranking of values within each group\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 2043, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L2043", "errors": [["PR08", "Parameter \"method\" description should start with a capital letter"], ["PR09", "Parameter \"method\" description should finish with \".\""], ["PR06", "Parameter \"ascending\" type should use \"bool\" instead of \"boolean\""], ["PR09", "Parameter \"ascending\" description should finish with \".\""], ["PR08", "Parameter \"na_option\" description should start with a capital letter"], ["PR09", "Parameter \"na_option\" description should finish with \".\""], ["PR06", "Parameter \"pct\" type should use \"bool\" instead of \"boolean\""], ["PR09", "Parameter \"pct\" description should finish with \".\""], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.GroupBy.rank"}, "pandas.core.groupby.DataFrameGroupBy.resample": {"type": "function", "docstring": "Provide resampling when using a TimeGrouper.\n\nGiven a grouper, the function resamples it according to a string\n\"string\" -> \"frequency\".\n\nSee the :ref:`frequency aliases <timeseries.offset_aliases>`\ndocumentation for more details.\n\nParameters\n----------\nrule : str or DateOffset\n    The offset string or object representing target grouper conversion.\n*args, **kwargs\n    Possible arguments are `how`, `fill_method`, `limit`, `kind` and\n    `on`, and other arguments of `TimeGrouper`.\n\nReturns\n-------\nGrouper\n    Return a new grouper with our resampler appended.\n\nSee Also\n--------\nGrouper : Specify a frequency to resample with when\n    grouping by a key.\nDatetimeIndex.resample : Frequency conversion and resampling of\n    time series.\n\nExamples\n--------\n>>> idx = pd.date_range('1/1/2000', periods=4, freq='T')\n>>> df = pd.DataFrame(data=4 * [range(2)],\n...                   index=idx,\n...                   columns=['a', 'b'])\n>>> df.iloc[2, 0] = 5\n>>> df\n                    a  b\n2000-01-01 00:00:00  0  1\n2000-01-01 00:01:00  0  1\n2000-01-01 00:02:00  5  1\n2000-01-01 00:03:00  0  1\n\nDownsample the DataFrame into 3 minute bins and sum the values of\nthe timestamps falling into a bin.\n\n>>> df.groupby('a').resample('3T').sum()\n                         a  b\na\n0   2000-01-01 00:00:00  0  2\n    2000-01-01 00:03:00  0  1\n5   2000-01-01 00:00:00  5  1\n\nUpsample the series into 30 second bins.\n\n>>> df.groupby('a').resample('30S').sum()\n                    a  b\na\n0   2000-01-01 00:00:00  0  1\n    2000-01-01 00:00:30  0  0\n    2000-01-01 00:01:00  0  1\n    2000-01-01 00:01:30  0  0\n    2000-01-01 00:02:00  0  0\n    2000-01-01 00:02:30  0  0\n    2000-01-01 00:03:00  0  1\n5   2000-01-01 00:02:00  5  1\n\nResample by month. Values are assigned to the month of the period.\n\n>>> df.groupby('a').resample('M').sum()\n            a  b\na\n0   2000-01-31  0  3\n5   2000-01-31  5  1\n\nDownsample the series into 3 minute bins as above, but close the right\nside of the bin interval.\n\n>>> df.groupby('a').resample('3T', closed='right').sum()\n                         a  b\na\n0   1999-12-31 23:57:00  0  1\n    2000-01-01 00:00:00  0  2\n5   2000-01-01 00:00:00  5  1\n\nDownsample the series into 3 minute bins and close the right side of\nthe bin interval, but label each bin using the right edge instead of\nthe left.\n\n>>> df.groupby('a').resample('3T', closed='right', label='right').sum()\n                         a  b\na\n0   2000-01-01 00:00:00  0  1\n    2000-01-01 00:03:00  0  2\n5   2000-01-01 00:03:00  5  1\n\nAdd an offset of twenty seconds.\n\n>>> df.groupby('a').resample('3T', loffset='20s').sum()\n                       a  b\na\n0   2000-01-01 00:00:20  0  2\n    2000-01-01 00:03:20  0  1\n5   2000-01-01 00:00:20  5  1", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1452, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1452", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.DataFrameGroupBy.shift": {"type": "function", "docstring": "Shift each group by periods observations.\n\nParameters\n----------\nperiods : integer, default 1\n    number of periods to shift\nfreq : frequency string\naxis : axis to shift, default 0\nfill_value : optional\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nSeries or DataFrame\n    Object shifted within each group.\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 2263, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L2263", "errors": [["PR06", "Parameter \"periods\" type should use \"int\" instead of \"integer\""], ["PR08", "Parameter \"periods\" description should start with a capital letter"], ["PR09", "Parameter \"periods\" description should finish with \".\""], ["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"freq\" has no description"], ["PR07", "Parameter \"axis\" has no description"], ["PR07", "Parameter \"fill_value\" has no description"], ["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.DataFrameGroupBy.size": {"type": "function", "docstring": "Compute group sizes.\n\nReturns\n-------\nSeries\n    Number of rows in each group.\n\nSee Also\n--------\nSeries.groupby\nDataFrame.groupby", "deprecated": false, "file": "pandas/core/groupby/groupby.py", "file_line": 1325, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L1325", "errors": [["SA04", "Missing description for See Also \"Series.groupby\" reference"], ["SA04", "Missing description for See Also \"DataFrame.groupby\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.GroupBy.size"}, "pandas.core.groupby.DataFrameGroupBy.skew": {"type": "property", "docstring": "Return unbiased skew over requested axis\nNormalized by N-1.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a Series.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or DataFrame (if level specified)", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS06", "Summary should fit in a single line"], ["PR02", "Unknown parameters {**kwargs, skipna, numeric_only, axis, level}"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.DataFrameGroupBy.mad"}, "pandas.core.groupby.DataFrameGroupBy.take": {"type": "property", "docstring": "Return the elements in the given *positional* indices along an axis.\n\nThis means that we are not indexing according to actual values in\nthe index attribute of the object. We are indexing according to the\nactual position of the element in the object.\n\nParameters\n----------\nindices : array-like\n    An array of ints indicating which positions to take.\naxis : {0 or 'index', 1 or 'columns', None}, default 0\n    The axis on which to select elements. ``0`` means that we are\n    selecting rows, ``1`` means that we are selecting columns.\nis_copy : bool, default True\n    Whether to return a copy of the original object or not.\n**kwargs\n    For compatibility with :meth:`numpy.take`. Has no effect on the\n    output.\n\nReturns\n-------\ntaken : same type as caller\n    An array-like containing the elements taken from the object.\n\nSee Also\n--------\nDataFrame.loc : Select a subset of a DataFrame by labels.\nDataFrame.iloc : Select a subset of a DataFrame by positions.\nnumpy.take : Take elements from an array along an axis.\n\nExamples\n--------\n>>> df = pd.DataFrame([('falcon', 'bird',    389.0),\n...                    ('parrot', 'bird',     24.0),\n...                    ('lion',   'mammal',   80.5),\n...                    ('monkey', 'mammal', np.nan)],\n...                    columns=['name', 'class', 'max_speed'],\n...                    index=[0, 2, 3, 1])\n>>> df\n     name   class  max_speed\n0  falcon    bird      389.0\n2  parrot    bird       24.0\n3    lion  mammal       80.5\n1  monkey  mammal        NaN\n\nTake elements at positions 0 and 3 along the axis 0 (default).\n\nNote how the actual indices selected (0 and 1) do not correspond to\nour selected indices 0 and 3. That's because we are selecting the 0th\nand 3rd rows, not rows whose indices equal 0 and 3.\n\n>>> df.take([0, 3])\n     name   class  max_speed\n0  falcon    bird      389.0\n1  monkey  mammal        NaN\n\nTake elements at indices 1 and 2 along the axis 1 (column selection).\n\n>>> df.take([1, 2], axis=1)\n    class  max_speed\n0    bird      389.0\n2    bird       24.0\n3  mammal       80.5\n1  mammal        NaN\n\nWe may take elements using negative integers for positive indices,\nstarting from the end of the object, just like with Python lists.\n\n>>> df.take([-1, -2])\n     name   class  max_speed\n1  monkey  mammal        NaN\n3    lion  mammal       80.5", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR02", "Unknown parameters {axis, is_copy, indices, **kwargs}"], ["EX03", "flake8 error: E127 continuation line over-indented for visual indent (2 times)"], ["EX03", "flake8 error: E241 multiple spaces after ',' (4 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.DataFrameGroupBy.skew"}, "pandas.core.groupby.DataFrameGroupBy.tshift": {"type": "property", "docstring": "Shift the time index, using the index's frequency if available.\n\nParameters\n----------\nperiods : int\n    Number of periods to move, can be positive or negative\nfreq : DateOffset, timedelta, or time rule string, default None\n    Increment to use from the tseries module or time rule (e.g. 'EOM')\naxis : int or basestring\n    Corresponds to the axis that contains the Index\n\nReturns\n-------\nshifted : Series/DataFrame\n\nNotes\n-----\nIf freq is not specified then tries to use the freq or inferred_freq\nattributes of the index. If neither of those attributes exist, a\nValueError is thrown", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR02", "Unknown parameters {axis, freq, periods}"], ["PR09", "Parameter \"periods\" description should finish with \".\""], ["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"freq\" description should finish with \".\""], ["PR06", "Parameter \"axis\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"axis\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.DataFrameGroupBy.take"}, "pandas.core.groupby.SeriesGroupBy.nlargest": {"type": "property", "docstring": "Return the largest `n` elements.\n\nParameters\n----------\nn : int, default 5\n    Return this many descending sorted values.\nkeep : {'first', 'last', 'all'}, default 'first'\n    When there are duplicate values that cannot all fit in a\n    Series of `n` elements:\n\n    - ``first`` : return the first `n` occurrences in order\n        of appearance.\n    - ``last`` : return the last `n` occurrences in reverse\n        order of appearance.\n    - ``all`` : keep all occurrences. This can result in a Series of\n        size larger than `n`.\n\nReturns\n-------\nSeries\n    The `n` largest values in the Series, sorted in decreasing order.\n\nSee Also\n--------\nSeries.nsmallest: Get the `n` smallest elements.\nSeries.sort_values: Sort Series by values.\nSeries.head: Return the first `n` rows.\n\nNotes\n-----\nFaster than ``.sort_values(ascending=False).head(n)`` for small `n`\nrelative to the size of the ``Series`` object.\n\nExamples\n--------\n>>> countries_population = {\"Italy\": 59000000, \"France\": 65000000,\n...                         \"Malta\": 434000, \"Maldives\": 434000,\n...                         \"Brunei\": 434000, \"Iceland\": 337000,\n...                         \"Nauru\": 11300, \"Tuvalu\": 11300,\n...                         \"Anguilla\": 11300, \"Monserat\": 5200}\n>>> s = pd.Series(countries_population)\n>>> s\nItaly       59000000\nFrance      65000000\nMalta         434000\nMaldives      434000\nBrunei        434000\nIceland       337000\nNauru          11300\nTuvalu         11300\nAnguilla       11300\nMonserat        5200\ndtype: int64\n\nThe `n` largest elements where ``n=5`` by default.\n\n>>> s.nlargest()\nFrance      65000000\nItaly       59000000\nMalta         434000\nMaldives      434000\nBrunei        434000\ndtype: int64\n\nThe `n` largest elements where ``n=3``. Default `keep` value is 'first'\nso Malta will be kept.\n\n>>> s.nlargest(3)\nFrance    65000000\nItaly     59000000\nMalta       434000\ndtype: int64\n\nThe `n` largest elements where ``n=3`` and keeping the last duplicates.\nBrunei will be kept since it is the last with value 434000 based on\nthe index order.\n\n>>> s.nlargest(3, keep='last')\nFrance      65000000\nItaly       59000000\nBrunei        434000\ndtype: int64\n\nThe `n` largest elements where ``n=3`` with all duplicates kept. Note\nthat the returned Series has five elements due to the three duplicates.\n\n>>> s.nlargest(3, keep='all')\nFrance      65000000\nItaly       59000000\nMalta         434000\nMaldives      434000\nBrunei        434000\ndtype: int64", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR02", "Unknown parameters {keep, n}"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.DataFrameGroupBy.tshift"}, "pandas.core.groupby.SeriesGroupBy.nsmallest": {"type": "property", "docstring": "Return the smallest `n` elements.\n\nParameters\n----------\nn : int, default 5\n    Return this many ascending sorted values.\nkeep : {'first', 'last', 'all'}, default 'first'\n    When there are duplicate values that cannot all fit in a\n    Series of `n` elements:\n\n    - ``first`` : return the first `n` occurrences in order\n        of appearance.\n    - ``last`` : return the last `n` occurrences in reverse\n        order of appearance.\n    - ``all`` : keep all occurrences. This can result in a Series of\n        size larger than `n`.\n\nReturns\n-------\nSeries\n    The `n` smallest values in the Series, sorted in increasing order.\n\nSee Also\n--------\nSeries.nlargest: Get the `n` largest elements.\nSeries.sort_values: Sort Series by values.\nSeries.head: Return the first `n` rows.\n\nNotes\n-----\nFaster than ``.sort_values().head(n)`` for small `n` relative to\nthe size of the ``Series`` object.\n\nExamples\n--------\n>>> countries_population = {\"Italy\": 59000000, \"France\": 65000000,\n...                         \"Brunei\": 434000, \"Malta\": 434000,\n...                         \"Maldives\": 434000, \"Iceland\": 337000,\n...                         \"Nauru\": 11300, \"Tuvalu\": 11300,\n...                         \"Anguilla\": 11300, \"Monserat\": 5200}\n>>> s = pd.Series(countries_population)\n>>> s\nItaly       59000000\nFrance      65000000\nBrunei        434000\nMalta         434000\nMaldives      434000\nIceland       337000\nNauru          11300\nTuvalu         11300\nAnguilla       11300\nMonserat        5200\ndtype: int64\n\nThe `n` smallest elements where ``n=5`` by default.\n\n>>> s.nsmallest()\nMonserat      5200\nNauru        11300\nTuvalu       11300\nAnguilla     11300\nIceland     337000\ndtype: int64\n\nThe `n` smallest elements where ``n=3``. Default `keep` value is\n'first' so Nauru and Tuvalu will be kept.\n\n>>> s.nsmallest(3)\nMonserat     5200\nNauru       11300\nTuvalu      11300\ndtype: int64\n\nThe `n` smallest elements where ``n=3`` and keeping the last\nduplicates. Anguilla and Tuvalu will be kept since they are the last\nwith value 11300 based on the index order.\n\n>>> s.nsmallest(3, keep='last')\nMonserat     5200\nAnguilla    11300\nTuvalu      11300\ndtype: int64\n\nThe `n` smallest elements where ``n=3`` with all duplicates kept. Note\nthat the returned Series has four elements due to the three duplicates.\n\n>>> s.nsmallest(3, keep='all')\nMonserat     5200\nNauru       11300\nTuvalu      11300\nAnguilla    11300\ndtype: int64", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["PR02", "Unknown parameters {keep, n}"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.SeriesGroupBy.nlargest"}, "pandas.core.groupby.SeriesGroupBy.nunique": {"type": "function", "docstring": "Return number of unique elements in the group.\n\nReturns\n-------\nSeries\n    Number of unique values within each group.", "deprecated": false, "file": "pandas/core/groupby/generic.py", "file_line": 1133, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/generic.py#L1133", "errors": [["PR01", "Parameters {dropna} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.SeriesGroupBy.unique": {"type": "property", "docstring": "Return unique values of Series object.\n\nUniques are returned in order of appearance. Hash table-based unique,\ntherefore does NOT sort.\n\nReturns\n-------\nndarray or ExtensionArray\n    The unique values returned as a NumPy array. See Notes.\n\nSee Also\n--------\nunique : Top-level unique method for any 1-d array-like object.\nIndex.unique : Return Index with unique values from an Index object.\n\nNotes\n-----\nReturns the unique values as a NumPy array. In case of an\nextension-array backed Series, a new\n:class:`~api.extensions.ExtensionArray` of that type with just\nthe unique values is returned. This includes\n\n    * Categorical\n    * Period\n    * Datetime with Timezone\n    * Interval\n    * Sparse\n    * IntegerNA\n\nSee Examples section.\n\nExamples\n--------\n>>> pd.Series([2, 1, 3, 3], name='A').unique()\narray([2, 1, 3])\n\n>>> pd.Series([pd.Timestamp('2016-01-01') for _ in range(3)]).unique()\narray(['2016-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\n>>> pd.Series([pd.Timestamp('2016-01-01', tz='US/Eastern')\n...            for _ in range(3)]).unique()\n<DatetimeArray>\n['2016-01-01 00:00:00-05:00']\nLength: 1, dtype: datetime64[ns, US/Eastern]\n\nAn unordered Categorical will return categories in the order of\nappearance.\n\n>>> pd.Series(pd.Categorical(list('baabc'))).unique()\n[b, a, c]\nCategories (3, object): [b, a, c]\n\nAn ordered Categorical preserves the category ordering.\n\n>>> pd.Series(pd.Categorical(list('baabc'), categories=list('abc'),\n...                          ordered=True)).unique()\n[b, a, c]\nCategories (3, object): [a < b < c]", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.SeriesGroupBy.nsmallest"}, "pandas.core.groupby.SeriesGroupBy.value_counts": {"type": "function", "docstring": "", "deprecated": false, "file": "pandas/core/groupby/generic.py", "file_line": 1200, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/generic.py#L1200", "errors": [["GL08", "The object does not have a docstring"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.core.groupby.SeriesGroupBy.is_monotonic_increasing": {"type": "property", "docstring": "Return boolean if values in the object are\nmonotonic_increasing.\n\nReturns\n-------\nbool", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.SeriesGroupBy.unique"}, "pandas.core.groupby.SeriesGroupBy.is_monotonic_decreasing": {"type": "property", "docstring": "Return boolean if values in the object are\nmonotonic_decreasing.\n\nReturns\n-------\nbool", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.SeriesGroupBy.is_monotonic_increasing"}, "pandas.core.groupby.DataFrameGroupBy.corrwith": {"type": "property", "docstring": "Compute pairwise correlation between rows or columns of DataFrame\nwith rows or columns of Series or DataFrame.  DataFrames are first\naligned along both axes before computing the correlations.\n\nParameters\n----------\nother : DataFrame, Series\n    Object with which to compute correlations.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    0 or 'index' to compute column-wise, 1 or 'columns' for row-wise.\ndrop : bool, default False\n    Drop missing indices from result.\nmethod : {'pearson', 'kendall', 'spearman'} or callable\n    * pearson : standard correlation coefficient\n    * kendall : Kendall Tau correlation coefficient\n    * spearman : Spearman rank correlation\n    * callable: callable with input two 1d ndarrays\n        and returning a float\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nSeries\n    Pairwise correlations.\n\nSee Also\n--------\nDataFrame.corr", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["SS06", "Summary should fit in a single line"], ["PR02", "Unknown parameters {axis, drop, other, method}"], ["PR08", "Parameter \"axis\" description should start with a capital letter"], ["PR08", "Parameter \"method\" description should start with a capital letter"], ["PR09", "Parameter \"method\" description should finish with \".\""], ["SA04", "Missing description for See Also \"DataFrame.corr\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": "pandas.core.groupby.SeriesGroupBy.is_monotonic_decreasing"}, "pandas.core.groupby.DataFrameGroupBy.boxplot": {"type": "function", "docstring": "Make box plots from DataFrameGroupBy data.\n\nParameters\n----------\ngrouped : Grouped DataFrame\nsubplots : bool\n    * ``False`` - no subplots will be used\n    * ``True`` - create a subplot for each group\ncolumn : column name or list of names, or vector\n    Can be any valid input to groupby\nfontsize : int or str\nrot : label rotation angle\ngrid : Setting this to True will show the grid\nax : Matplotlib axis object, default None\nfigsize : A tuple (width, height) in inches\nlayout : tuple (optional)\n    (rows, columns) for the layout of the plot\nsharex : bool, default False\n    Whether x-axes will be shared among subplots\n\n    .. versionadded:: 0.23.1\nsharey : bool, default True\n    Whether y-axes will be shared among subplots\n\n    .. versionadded:: 0.23.1\n`**kwds` : Keyword Arguments\n    All other plotting keyword arguments to be passed to\n    matplotlib's boxplot function\n\nReturns\n-------\ndict of key/value = group key/DataFrame.boxplot return value\nor DataFrame.boxplot return value in case subplots=figures=False\n\nExamples\n--------\n>>> import itertools\n>>> tuples = [t for t in itertools.product(range(1000), range(4))]\n>>> index = pd.MultiIndex.from_tuples(tuples, names=['lvl0', 'lvl1'])\n>>> data = np.random.randn(len(index),4)\n>>> df = pd.DataFrame(data, columns=list('ABCD'), index=index)\n>>>\n>>> grouped = df.groupby(level='lvl1')\n>>> boxplot_frame_groupby(grouped)\n>>>\n>>> grouped = df.unstack(level='lvl1').groupby(level=0, axis=1)\n>>> boxplot_frame_groupby(grouped, subplots=False)", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 424, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L424", "errors": [["PR01", "Parameters {**kwds} not documented"], ["PR02", "Unknown parameters {`**kwds`}"], ["PR07", "Parameter \"grouped\" has no description"], ["PR08", "Parameter \"subplots\" description should start with a capital letter"], ["PR09", "Parameter \"subplots\" description should finish with \".\""], ["PR09", "Parameter \"column\" description should finish with \".\""], ["PR07", "Parameter \"fontsize\" has no description"], ["PR07", "Parameter \"rot\" has no description"], ["PR07", "Parameter \"grid\" has no description"], ["PR07", "Parameter \"ax\" has no description"], ["PR07", "Parameter \"figsize\" has no description"], ["PR08", "Parameter \"layout\" description should start with a capital letter"], ["PR09", "Parameter \"layout\" description should finish with \".\""], ["PR09", "Parameter \"sharex\" description should finish with \".\""], ["PR09", "Parameter \"sharey\" description should finish with \".\""], ["PR09", "Parameter \"`**kwds`\" description should finish with \".\""], ["RT03", "Return value has no description"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 45, in pandas.core.groupby.DataFrameGroupBy.boxplot\nFailed example:\n    boxplot_frame_groupby(grouped)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.groupby.DataFrameGroupBy.boxplot[6]>\", line 1, in <module>\n        boxplot_frame_groupby(grouped)\n    NameError: name 'boxplot_frame_groupby' is not defined\n**********************************************************************\nLine 48, in pandas.core.groupby.DataFrameGroupBy.boxplot\nFailed example:\n    boxplot_frame_groupby(grouped, subplots=False)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.groupby.DataFrameGroupBy.boxplot[8]>\", line 1, in <module>\n        boxplot_frame_groupby(grouped, subplots=False)\n    NameError: name 'boxplot_frame_groupby' is not defined\n"], ["EX03", "flake8 error: E231 missing whitespace after ','"], ["EX03", "flake8 error: F821 undefined name 'boxplot_frame_groupby' (2 times)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 45, in pandas.core.groupby.DataFrameGroupBy.boxplot\nFailed example:\n    boxplot_frame_groupby(grouped)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.groupby.DataFrameGroupBy.boxplot[6]>\", line 1, in <module>\n        boxplot_frame_groupby(grouped)\n    NameError: name 'boxplot_frame_groupby' is not defined\n**********************************************************************\nLine 48, in pandas.core.groupby.DataFrameGroupBy.boxplot\nFailed example:\n    boxplot_frame_groupby(grouped, subplots=False)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.core.groupby.DataFrameGroupBy.boxplot[8]>\", line 1, in <module>\n        boxplot_frame_groupby(grouped, subplots=False)\n    NameError: name 'boxplot_frame_groupby' is not defined\n", "in_api": true, "section": "Computations / descriptive stats", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler": {"type": "type", "docstring": "Helps style a DataFrame or Series according to the data with HTML and CSS.\n\nParameters\n----------\ndata : Series or DataFrame\nprecision : int\n    precision to round floats to, defaults to pd.options.display.precision\ntable_styles : list-like, default None\n    list of {selector: (attr, value)} dicts; see Notes\nuuid : str, default None\n    a unique identifier to avoid CSS collisions; generated automatically\ncaption : str, default None\n    caption to attach to the table\ncell_ids : bool, default True\n    If True, each cell will have an ``id`` attribute in their HTML tag.\n    The ``id`` takes the form ``T_<uuid>_row<num_row>_col<num_col>``\n    where ``<uuid>`` is the unique identifier, ``<num_row>`` is the row\n    number and ``<num_col>`` is the column number.\n\nAttributes\n----------\nenv : Jinja2 jinja2.Environment\ntemplate : Jinja2 Template\nloader : Jinja2 Loader\n\nSee Also\n--------\nDataFrame.style\n\nNotes\n-----\nMost styling will be done by passing style functions into\n``Styler.apply`` or ``Styler.applymap``. Style functions should\nreturn values with strings containing CSS ``'attr: value'`` that will\nbe applied to the indicated cells.\n\nIf using in the Jupyter notebook, Styler has defined a ``_repr_html_``\nto automatically render itself. Otherwise call Styler.render to get\nthe generated HTML.\n\nCSS classes are attached to the generated HTML\n\n* Index and Column names include ``index_name`` and ``level<k>``\n  where `k` is its level in a MultiIndex\n* Index label cells include\n\n  * ``row_heading``\n  * ``row<n>`` where `n` is the numeric position of the row\n  * ``level<k>`` where `k` is the level in a MultiIndex\n\n* Column label cells include\n  * ``col_heading``\n  * ``col<n>`` where `n` is the numeric position of the column\n  * ``evel<k>`` where `k` is the level in a MultiIndex\n\n* Blank cells include ``blank``\n* Data cells include ``data``", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 50, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L50", "errors": [["PR01", "Parameters {table_attributes} not documented"], ["PR07", "Parameter \"data\" has no description"], ["PR08", "Parameter \"precision\" description should start with a capital letter"], ["PR09", "Parameter \"precision\" description should finish with \".\""], ["PR08", "Parameter \"table_styles\" description should start with a capital letter"], ["PR09", "Parameter \"table_styles\" description should finish with \".\""], ["PR08", "Parameter \"uuid\" description should start with a capital letter"], ["PR09", "Parameter \"uuid\" description should finish with \".\""], ["PR08", "Parameter \"caption\" description should start with a capital letter"], ["PR09", "Parameter \"caption\" description should finish with \".\""], ["SA04", "Missing description for See Also \"DataFrame.style\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Styler constructor", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler.from_custom_template": {"type": "method", "docstring": "Factory function for creating a subclass of ``Styler``\nwith a custom template and Jinja environment.\n\nParameters\n----------\nsearchpath : str or list\n    Path or paths of directories containing the templates\nname : str\n    Name of your custom template to use for rendering\n\nReturns\n-------\nMyStyler : subclass of Styler\n    Has the correct ``env`` and ``template`` class attributes set.", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 1315, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L1315", "errors": [["SS06", "Summary should fit in a single line"], ["PR09", "Parameter \"searchpath\" description should finish with \".\""], ["PR09", "Parameter \"name\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Styler constructor", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler.env": {"type": "Environment", "docstring": "The core component of Jinja is the `Environment`.  It contains\nimportant shared variables like configuration, filters, tests,\nglobals and others.  Instances of this class may be modified if\nthey are not shared and if no template was loaded so far.\nModifications on environments after the first template was loaded\nwill lead to surprising effects and undefined behavior.\n\nHere are the possible initialization parameters:\n\n    `block_start_string`\n        The string marking the beginning of a block.  Defaults to ``'{%'``.\n\n    `block_end_string`\n        The string marking the end of a block.  Defaults to ``'%}'``.\n\n    `variable_start_string`\n        The string marking the beginning of a print statement.\n        Defaults to ``'{{'``.\n\n    `variable_end_string`\n        The string marking the end of a print statement.  Defaults to\n        ``'}}'``.\n\n    `comment_start_string`\n        The string marking the beginning of a comment.  Defaults to ``'{#'``.\n\n    `comment_end_string`\n        The string marking the end of a comment.  Defaults to ``'#}'``.\n\n    `line_statement_prefix`\n        If given and a string, this will be used as prefix for line based\n        statements.  See also :ref:`line-statements`.\n\n    `line_comment_prefix`\n        If given and a string, this will be used as prefix for line based\n        comments.  See also :ref:`line-statements`.\n\n        .. versionadded:: 2.2\n\n    `trim_blocks`\n        If this is set to ``True`` the first newline after a block is\n        removed (block, not variable tag!).  Defaults to `False`.\n\n    `lstrip_blocks`\n        If this is set to ``True`` leading spaces and tabs are stripped\n        from the start of a line to a block.  Defaults to `False`.\n\n    `newline_sequence`\n        The sequence that starts a newline.  Must be one of ``'\\r'``,\n        ``'\\n'`` or ``'\\r\\n'``.  The default is ``'\\n'`` which is a\n        useful default for Linux and OS X systems as well as web\n        applications.\n\n    `keep_trailing_newline`\n        Preserve the trailing newline when rendering templates.\n        The default is ``False``, which causes a single newline,\n        if present, to be stripped from the end of the template.\n\n        .. versionadded:: 2.7\n\n    `extensions`\n        List of Jinja extensions to use.  This can either be import paths\n        as strings or extension classes.  For more information have a\n        look at :ref:`the extensions documentation <jinja-extensions>`.\n\n    `optimized`\n        should the optimizer be enabled?  Default is ``True``.\n\n    `undefined`\n        :class:`Undefined` or a subclass of it that is used to represent\n        undefined values in the template.\n\n    `finalize`\n        A callable that can be used to process the result of a variable\n        expression before it is output.  For example one can convert\n        ``None`` implicitly into an empty string here.\n\n    `autoescape`\n        If set to ``True`` the XML/HTML autoescaping feature is enabled by\n        default.  For more details about autoescaping see\n        :class:`~jinja2.utils.Markup`.  As of Jinja 2.4 this can also\n        be a callable that is passed the template name and has to\n        return ``True`` or ``False`` depending on autoescape should be\n        enabled by default.\n\n        .. versionchanged:: 2.4\n           `autoescape` can now be a function\n\n    `loader`\n        The template loader for this environment.\n\n    `cache_size`\n        The size of the cache.  Per default this is ``400`` which means\n        that if more than 400 templates are loaded the loader will clean\n        out the least recently used template.  If the cache size is set to\n        ``0`` templates are recompiled all the time, if the cache size is\n        ``-1`` the cache will not be cleaned.\n\n        .. versionchanged:: 2.8\n           The cache size was increased to 400 from a low 50.\n\n    `auto_reload`\n        Some loaders load templates from locations where the template\n        sources may change (ie: file system or database).  If\n        ``auto_reload`` is set to ``True`` (default) every time a template is\n        requested the loader checks if the source changed and if yes, it\n        will reload the template.  For higher performance it's possible to\n        disable that.\n\n    `bytecode_cache`\n        If set to a bytecode cache object, this object will provide a\n        cache for the internal Jinja bytecode so that templates don't\n        have to be parsed if they were not changed.\n\n        See :ref:`bytecode-cache` for more information.\n\n    `enable_async`\n        If set to true this enables async template execution which allows\n        you to take advantage of newer Python features.  This requires\n        Python 3.6 or later.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Styler properties", "subsection": "", "shared_code_with": "pandas.core.groupby.DataFrameGroupBy.corrwith"}, "pandas.io.formats.style.Styler.template": {"type": "Template", "docstring": "The central template object.  This class represents a compiled template\nand is used to evaluate it.\n\nNormally the template object is generated from an :class:`Environment` but\nit also has a constructor that makes it possible to create a template\ninstance directly using the constructor.  It takes the same arguments as\nthe environment constructor but it's not possible to specify a loader.\n\nEvery template object has a few methods and members that are guaranteed\nto exist.  However it's important that a template object should be\nconsidered immutable.  Modifications on the object are not supported.\n\nTemplate objects created from the constructor rather than an environment\ndo have an `environment` attribute that points to a temporary environment\nthat is probably shared with other templates created with the constructor\nand compatible settings.\n\n>>> template = Template('Hello {{ name }}!')\n>>> template.render(name='John Doe') == u'Hello John Doe!'\nTrue\n>>> stream = template.stream(name='John Doe')\n>>> next(stream) == u'Hello John Doe!'\nTrue\n>>> next(stream)\nTraceback (most recent call last):\n    ...\nStopIteration", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Styler properties", "subsection": "", "shared_code_with": "pandas.io.formats.style.Styler.env"}, "pandas.io.formats.style.Styler.loader": {"type": "PackageLoader", "docstring": "Load templates from python eggs or packages.  It is constructed with\nthe name of the python package and the path to the templates in that\npackage::\n\n    loader = PackageLoader('mypackage', 'views')\n\nIf the package path is not given, ``'templates'`` is assumed.\n\nPer default the template encoding is ``'utf-8'`` which can be changed\nby setting the `encoding` parameter to something else.  Due to the nature\nof eggs it's only possible to reload templates if the package was loaded\nfrom the file system and not a zip file.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["SS03", "Summary does not end with a period"], ["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Styler properties", "subsection": "", "shared_code_with": "pandas.io.formats.style.Styler.template"}, "pandas.io.formats.style.Styler.apply": {"type": "function", "docstring": "Apply a function column-wise, row-wise, or table-wise,\nupdating the HTML representation with the result.\n\nParameters\n----------\nfunc : function\n    ``func`` should take a Series or DataFrame (depending\n    on ``axis``), and return an object with the same shape.\n    Must return a DataFrame with identical index and\n    column labels when ``axis=None``\naxis : {0 or 'index', 1 or 'columns', None}, default 0\n    apply to each column (``axis=0`` or ``'index'``), to each row\n    (``axis=1`` or ``'columns'``), or to the entire DataFrame at once\n    with ``axis=None``.\nsubset : IndexSlice\n    a valid indexer to limit ``data`` to *before* applying the\n    function. Consider using a pandas.IndexSlice\nkwargs : dict\n    pass along to ``func``\n\nReturns\n-------\nself : Styler\n\nNotes\n-----\nThe output shape of ``func`` should match the input, i.e. if\n``x`` is the input row, column, or table (depending on ``axis``),\nthen ``func(x).shape == x.shape`` should be true.\n\nThis is similar to ``DataFrame.apply``, except that ``axis=None``\napplies the function to the entire DataFrame at once,\nrather than column-wise or row-wise.\n\nExamples\n--------\n>>> def highlight_max(x):\n...     return ['background-color: yellow' if v == x.max() else ''\n                for v in x]\n...\n>>> df = pd.DataFrame(np.random.randn(5, 2))\n>>> df.style.apply(highlight_max)", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 629, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L629", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {kwargs}"], ["PR08", "Parameter \"func\" description should start with a capital letter"], ["PR09", "Parameter \"func\" description should finish with \".\""], ["PR08", "Parameter \"axis\" description should start with a capital letter"], ["PR08", "Parameter \"subset\" description should start with a capital letter"], ["PR09", "Parameter \"subset\" description should finish with \".\""], ["PR08", "Parameter \"kwargs\" description should start with a capital letter"], ["PR09", "Parameter \"kwargs\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 38, in pandas.io.formats.style.Styler.apply\nFailed example:\n    def highlight_max(x):\n        return ['background-color: yellow' if v == x.max() else ''\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.io.formats.style.Styler.apply[0]>\", line 2\n        return ['background-color: yellow' if v == x.max() else ''\n                                                                 ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 43, in pandas.io.formats.style.Styler.apply\nFailed example:\n    df.style.apply(highlight_max)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.io.formats.style.Styler.apply[2]>\", line 1, in <module>\n        df.style.apply(highlight_max)\n    NameError: name 'highlight_max' is not defined\n"], ["EX03", "flake8 error: E302 expected 2 blank lines, found 0"], ["EX03", "flake8 error: E902 TokenError: EOF in multi-line statement"], ["EX03", "flake8 error: E999 SyntaxError: invalid syntax"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 38, in pandas.io.formats.style.Styler.apply\nFailed example:\n    def highlight_max(x):\n        return ['background-color: yellow' if v == x.max() else ''\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.io.formats.style.Styler.apply[0]>\", line 2\n        return ['background-color: yellow' if v == x.max() else ''\n                                                                 ^\n    SyntaxError: unexpected EOF while parsing\n**********************************************************************\nLine 43, in pandas.io.formats.style.Styler.apply\nFailed example:\n    df.style.apply(highlight_max)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.io.formats.style.Styler.apply[2]>\", line 1, in <module>\n        df.style.apply(highlight_max)\n    NameError: name 'highlight_max' is not defined\n", "in_api": true, "section": "Style application", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler.applymap": {"type": "function", "docstring": "Apply a function elementwise, updating the HTML\nrepresentation with the result.\n\nParameters\n----------\nfunc : function\n    ``func`` should take a scalar and return a scalar\nsubset : IndexSlice\n    a valid indexer to limit ``data`` to *before* applying the\n    function. Consider using a pandas.IndexSlice\nkwargs : dict\n    pass along to ``func``\n\nReturns\n-------\nself : Styler\n\nSee Also\n--------\nStyler.where", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 688, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L688", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {kwargs}"], ["PR08", "Parameter \"func\" description should start with a capital letter"], ["PR09", "Parameter \"func\" description should finish with \".\""], ["PR08", "Parameter \"subset\" description should start with a capital letter"], ["PR09", "Parameter \"subset\" description should finish with \".\""], ["PR08", "Parameter \"kwargs\" description should start with a capital letter"], ["PR09", "Parameter \"kwargs\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Styler.where\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Style application", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler.where": {"type": "function", "docstring": "Apply a function elementwise, updating the HTML\nrepresentation with a style which is selected in\naccordance with the return value of a function.\n\n.. versionadded:: 0.21.0\n\nParameters\n----------\ncond : callable\n    ``cond`` should take a scalar and return a boolean\nvalue : str\n    applied when ``cond`` returns true\nother : str\n    applied when ``cond`` returns false\nsubset : IndexSlice\n    a valid indexer to limit ``data`` to *before* applying the\n    function. Consider using a pandas.IndexSlice\nkwargs : dict\n    pass along to ``cond``\n\nReturns\n-------\nself : Styler\n\nSee Also\n--------\nStyler.applymap", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 716, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L716", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {kwargs}"], ["PR08", "Parameter \"cond\" description should start with a capital letter"], ["PR09", "Parameter \"cond\" description should finish with \".\""], ["PR08", "Parameter \"value\" description should start with a capital letter"], ["PR09", "Parameter \"value\" description should finish with \".\""], ["PR08", "Parameter \"other\" description should start with a capital letter"], ["PR09", "Parameter \"other\" description should finish with \".\""], ["PR08", "Parameter \"subset\" description should start with a capital letter"], ["PR09", "Parameter \"subset\" description should finish with \".\""], ["PR08", "Parameter \"kwargs\" description should start with a capital letter"], ["PR09", "Parameter \"kwargs\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Styler.applymap\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Style application", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler.format": {"type": "function", "docstring": "Format the text display value of cells.\n\nParameters\n----------\nformatter : str, callable, or dict\nsubset : IndexSlice\n    An argument to ``DataFrame.loc`` that restricts which elements\n    ``formatter`` is applied to.\n\nReturns\n-------\nself : Styler\n\nNotes\n-----\n\n``formatter`` is either an ``a`` or a dict ``{column name: a}`` where\n``a`` is one of\n\n- str: this will be wrapped in: ``a.format(x)``\n- callable: called with the value of an individual cell\n\nThe default display value for numeric values is the \"general\" (``g``)\nformat with ``pd.options.display.precision`` precision.\n\nExamples\n--------\n\n>>> df = pd.DataFrame(np.random.randn(4, 2), columns=['a', 'b'])\n>>> df.style.format(\"{:.2%}\")\n>>> df['c'] = ['a', 'b', 'c', 'd']\n>>> df.style.format({'c': str.upper})", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 413, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L413", "errors": [["PR07", "Parameter \"formatter\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 31, in pandas.io.formats.style.Styler.format\nFailed example:\n    df.style.format(\"{:.2%}\")\nExpected nothing\nGot:\n    <pandas.io.formats.style.Styler object at 0x1c21d4b490>\n**********************************************************************\nLine 33, in pandas.io.formats.style.Styler.format\nFailed example:\n    df.style.format({'c': str.upper})\nExpected nothing\nGot:\n    <pandas.io.formats.style.Styler object at 0x1c21cc1790>\n"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 31, in pandas.io.formats.style.Styler.format\nFailed example:\n    df.style.format(\"{:.2%}\")\nExpected nothing\nGot:\n    <pandas.io.formats.style.Styler object at 0x1c21d4b490>\n**********************************************************************\nLine 33, in pandas.io.formats.style.Styler.format\nFailed example:\n    df.style.format({'c': str.upper})\nExpected nothing\nGot:\n    <pandas.io.formats.style.Styler object at 0x1c21cc1790>\n", "in_api": true, "section": "Style application", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler.set_precision": {"type": "function", "docstring": "Set the precision used to render.\n\nParameters\n----------\nprecision : int\n\nReturns\n-------\nself : Styler", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 754, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L754", "errors": [["PR07", "Parameter \"precision\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Style application", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler.set_table_styles": {"type": "function", "docstring": "Set the table styles on a Styler.\n\nThese are placed in a ``<style>`` tag before the generated HTML table.\n\nParameters\n----------\ntable_styles : list\n    Each individual table_style should be a dictionary with\n    ``selector`` and ``props`` keys. ``selector`` should be a CSS\n    selector that the style will be applied to (automatically\n    prefixed by the table's UUID) and ``props`` should be a list of\n    tuples with ``(attribute, value)``.\n\nReturns\n-------\nself : Styler\n\nExamples\n--------\n>>> df = pd.DataFrame(np.random.randn(10, 4))\n>>> df.style.set_table_styles(\n...     [{'selector': 'tr:hover',\n...       'props': [('background-color', 'yellow')]}]\n... )", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 860, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L860", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 22, in pandas.io.formats.style.Styler.set_table_styles\nFailed example:\n    df.style.set_table_styles(\n        [{'selector': 'tr:hover',\n          'props': [('background-color', 'yellow')]}]\n    )\nExpected nothing\nGot:\n    <pandas.io.formats.style.Styler object at 0x1c21f1f290>\n"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 22, in pandas.io.formats.style.Styler.set_table_styles\nFailed example:\n    df.style.set_table_styles(\n        [{'selector': 'tr:hover',\n          'props': [('background-color', 'yellow')]}]\n    )\nExpected nothing\nGot:\n    <pandas.io.formats.style.Styler object at 0x1c21f1f290>\n", "in_api": true, "section": "Style application", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler.set_table_attributes": {"type": "function", "docstring": "Set the table attributes.\n\nThese are the items that show up in the opening ``<table>`` tag\nin addition to to automatic (by default) id.\n\nParameters\n----------\nattributes : string\n\nReturns\n-------\nself : Styler\n\nExamples\n--------\n>>> df = pd.DataFrame(np.random.randn(10, 4))\n>>> df.style.set_table_attributes('class=\"pure-table\"')\n# ... <table class=\"pure-table\"> ...", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 769, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L769", "errors": [["PR06", "Parameter \"attributes\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"attributes\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 18, in pandas.io.formats.style.Styler.set_table_attributes\nFailed example:\n    df.style.set_table_attributes('class=\"pure-table\"')\nExpected:\n    # ... <table class=\"pure-table\"> ...\nGot:\n    <pandas.io.formats.style.Styler object at 0x1c22435bd0>\n"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 18, in pandas.io.formats.style.Styler.set_table_attributes\nFailed example:\n    df.style.set_table_attributes('class=\"pure-table\"')\nExpected:\n    # ... <table class=\"pure-table\"> ...\nGot:\n    <pandas.io.formats.style.Styler object at 0x1c22435bd0>\n", "in_api": true, "section": "Style application", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler.set_caption": {"type": "function", "docstring": "Set the caption on a Styler\n\nParameters\n----------\ncaption : str\n\nReturns\n-------\nself : Styler", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 845, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L845", "errors": [["SS03", "Summary does not end with a period"], ["PR07", "Parameter \"caption\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Style application", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler.set_properties": {"type": "function", "docstring": "Convenience method for setting one or more non-data dependent\nproperties or each cell.\n\nParameters\n----------\nsubset : IndexSlice\n    a valid slice for ``data`` to limit the style application to\nkwargs : dict\n    property: value pairs to be set for each cell\n\nReturns\n-------\nself : Styler\n\nExamples\n--------\n>>> df = pd.DataFrame(np.random.randn(10, 4))\n>>> df.style.set_properties(color=\"white\", align=\"right\")\n>>> df.style.set_properties(**{'background-color': 'yellow'})", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 1072, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L1072", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {kwargs}"], ["PR08", "Parameter \"subset\" description should start with a capital letter"], ["PR09", "Parameter \"subset\" description should finish with \".\""], ["PR08", "Parameter \"kwargs\" description should start with a capital letter"], ["PR09", "Parameter \"kwargs\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 19, in pandas.io.formats.style.Styler.set_properties\nFailed example:\n    df.style.set_properties(color=\"white\", align=\"right\")\nExpected nothing\nGot:\n    <pandas.io.formats.style.Styler object at 0x1c223f7150>\n**********************************************************************\nLine 20, in pandas.io.formats.style.Styler.set_properties\nFailed example:\n    df.style.set_properties(**{'background-color': 'yellow'})\nExpected nothing\nGot:\n    <pandas.io.formats.style.Styler object at 0x1c2411dfd0>\n"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 19, in pandas.io.formats.style.Styler.set_properties\nFailed example:\n    df.style.set_properties(color=\"white\", align=\"right\")\nExpected nothing\nGot:\n    <pandas.io.formats.style.Styler object at 0x1c223f7150>\n**********************************************************************\nLine 20, in pandas.io.formats.style.Styler.set_properties\nFailed example:\n    df.style.set_properties(**{'background-color': 'yellow'})\nExpected nothing\nGot:\n    <pandas.io.formats.style.Styler object at 0x1c2411dfd0>\n", "in_api": true, "section": "Style application", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler.set_uuid": {"type": "function", "docstring": "Set the uuid for a Styler.\n\nParameters\n----------\nuuid : str\n\nReturns\n-------\nself : Styler", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 830, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L830", "errors": [["PR07", "Parameter \"uuid\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Style application", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler.clear": {"type": "function", "docstring": "Reset the styler, removing any previously applied styles.\nReturns None.", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 570, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L570", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Style application", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler.pipe": {"type": "function", "docstring": "Apply ``func(self, *args, **kwargs)``, and return the result.\n\n.. versionadded:: 0.24.0\n\nParameters\n----------\nfunc : function\n    Function to apply to the Styler.  Alternatively, a\n    ``(callable, keyword)`` tuple where ``keyword`` is a string\n    indicating the keyword of ``callable`` that expects the Styler.\n*args, **kwargs :\n    Arguments passed to `func`.\n\nReturns\n-------\nobject :\n    The value returned by ``func``.\n\nSee Also\n--------\nDataFrame.pipe : Analogous method for DataFrame.\nStyler.apply : Apply a function row-wise, column-wise, or table-wise to\n    modify the dataframe's styling.\n\nNotes\n-----\nLike :meth:`DataFrame.pipe`, this method can simplify the\napplication of several user-defined functions to a styler.  Instead\nof writing:\n\n.. code-block:: python\n\n    f(g(df.style.set_precision(3), arg1=a), arg2=b, arg3=c)\n\nusers can write:\n\n.. code-block:: python\n\n    (df.style.set_precision(3)\n       .pipe(g, arg1=a)\n       .pipe(f, arg2=b, arg3=c))\n\nIn particular, this allows users to define functions that take a\nstyler object, along with other parameters, and return the styler after\nmaking styling changes (such as calling :meth:`Styler.apply` or\n:meth:`Styler.set_properties`).  Using ``.pipe``, these user-defined\nstyle \"transformations\" can be interleaved with calls to the built-in\nStyler interface.\n\nExamples\n--------\n>>> def format_conversion(styler):\n...     return (styler.set_properties(**{'text-align': 'right'})\n...                   .format({'conversion': '{:.1%}'}))\n\nThe user-defined ``format_conversion`` function above can be called\nwithin a sequence of other style modifications:\n\n>>> df = pd.DataFrame({'trial': list(range(5)),\n...                    'conversion': [0.75, 0.85, np.nan, 0.7, 0.72]})\n>>> (df.style\n...    .highlight_min(subset=['conversion'], color='yellow')\n...    .pipe(format_conversion)\n...    .set_caption(\"Results with minimum conversion highlighted.\"))", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 1341, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L1341", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs :}"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 62, in pandas.io.formats.style.Styler.pipe\nFailed example:\n    (df.style\n       .highlight_min(subset=['conversion'], color='yellow')\n       .pipe(format_conversion)\n       .set_caption(\"Results with minimum conversion highlighted.\"))\nExpected nothing\nGot:\n    <pandas.io.formats.style.Styler object at 0x1c21f19b10>\n"], ["EX03", "flake8 error: E302 expected 2 blank lines, found 0"], ["EX03", "flake8 error: E305 expected 2 blank lines after class or function definition, found 0"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 62, in pandas.io.formats.style.Styler.pipe\nFailed example:\n    (df.style\n       .highlight_min(subset=['conversion'], color='yellow')\n       .pipe(format_conversion)\n       .set_caption(\"Results with minimum conversion highlighted.\"))\nExpected nothing\nGot:\n    <pandas.io.formats.style.Styler object at 0x1c21f19b10>\n", "in_api": true, "section": "Style application", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler.highlight_max": {"type": "function", "docstring": "Highlight the maximum by shading the background.\n\nParameters\n----------\nsubset : IndexSlice, default None\n    a valid slice for ``data`` to limit the style application to.\ncolor : str, default 'yellow'\naxis : {0 or 'index', 1 or 'columns', None}, default 0\n    apply to each column (``axis=0`` or ``'index'``), to each row\n    (``axis=1`` or ``'columns'``), or to the entire DataFrame at once\n    with ``axis=None``.\n\nReturns\n-------\nself : Styler", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 1245, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L1245", "errors": [["PR08", "Parameter \"subset\" description should start with a capital letter"], ["PR07", "Parameter \"color\" has no description"], ["PR08", "Parameter \"axis\" description should start with a capital letter"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Builtin styles", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler.highlight_min": {"type": "function", "docstring": "Highlight the minimum by shading the background.\n\nParameters\n----------\nsubset : IndexSlice, default None\n    a valid slice for ``data`` to limit the style application to.\ncolor : str, default 'yellow'\naxis : {0 or 'index', 1 or 'columns', None}, default 0\n    apply to each column (``axis=0`` or ``'index'``), to each row\n    (``axis=1`` or ``'columns'``), or to the entire DataFrame at once\n    with ``axis=None``.\n\nReturns\n-------\nself : Styler", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 1265, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L1265", "errors": [["PR08", "Parameter \"subset\" description should start with a capital letter"], ["PR07", "Parameter \"color\" has no description"], ["PR08", "Parameter \"axis\" description should start with a capital letter"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Builtin styles", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler.highlight_null": {"type": "function", "docstring": "Shade the background ``null_color`` for missing values.\n\nParameters\n----------\nnull_color : str\n\nReturns\n-------\nself : Styler", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 934, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L934", "errors": [["PR07", "Parameter \"null_color\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Builtin styles", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler.background_gradient": {"type": "function", "docstring": "Color the background in a gradient according to\nthe data in each column (optionally row).\n\nRequires matplotlib.\n\nParameters\n----------\ncmap : str or colormap\n    matplotlib colormap\nlow, high : float\n    compress the range by these values.\naxis : {0 or 'index', 1 or 'columns', None}, default 0\n    apply to each column (``axis=0`` or ``'index'``), to each row\n    (``axis=1`` or ``'columns'``), or to the entire DataFrame at once\n    with ``axis=None``.\nsubset : IndexSlice\n    a valid slice for ``data`` to limit the style application to.\ntext_color_threshold : float or int\n    luminance threshold for determining text color. Facilitates text\n    visibility across varying background colors. From 0 to 1.\n    0 = all text is dark colored, 1 = all text is light colored.\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nself : Styler\n\nRaises\n------\nValueError\n    If ``text_color_threshold`` is not a value from 0 to 1.\n\nNotes\n-----\nSet ``text_color_threshold`` or tune ``low`` and ``high`` to keep the\ntext legible by not using the entire range of the color map. The range\nof the data is extended by ``low * (x.max() - x.min())`` and ``high *\n(x.max() - x.min())`` before normalizing.", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 949, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L949", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {high, low} not documented"], ["PR02", "Unknown parameters {low, high}"], ["PR08", "Parameter \"cmap\" description should start with a capital letter"], ["PR09", "Parameter \"cmap\" description should finish with \".\""], ["PR08", "Parameter \"low, high\" description should start with a capital letter"], ["PR08", "Parameter \"axis\" description should start with a capital letter"], ["PR08", "Parameter \"subset\" description should start with a capital letter"], ["PR08", "Parameter \"text_color_threshold\" description should start with a capital letter"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Builtin styles", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler.bar": {"type": "function", "docstring": "Draw bar chart in the cell backgrounds.\n\nParameters\n----------\nsubset : IndexSlice, optional\n    A valid slice for `data` to limit the style application to.\naxis : {0 or 'index', 1 or 'columns', None}, default 0\n    apply to each column (``axis=0`` or ``'index'``), to each row\n    (``axis=1`` or ``'columns'``), or to the entire DataFrame at once\n    with ``axis=None``.\ncolor : str or 2-tuple/list\n    If a str is passed, the color is the same for both\n    negative and positive numbers. If 2-tuple/list is used, the\n    first element is the color_negative and the second is the\n    color_positive (eg: ['#d65f5f', '#5fba7d']).\nwidth : float, default 100\n    A number between 0 or 100. The largest value will cover `width`\n    percent of the cell's width.\nalign : {'left', 'zero',' mid'}, default 'left'\n    How to align the bars with the cells.\n\n    - 'left' : the min value starts at the left of the cell.\n    - 'zero' : a value of zero is located at the center of the cell.\n    - 'mid' : the center of the cell is at (max-min)/2, or\n      if values are all negative (positive) the zero is aligned\n      at the right (left) of the cell.\n\n      .. versionadded:: 0.20.0\n\nvmin : float, optional\n    Minimum bar value, defining the left hand limit\n    of the bar drawing range, lower values are clipped to `vmin`.\n    When None (default): the minimum value of the data will be used.\n\n    .. versionadded:: 0.24.0\n\nvmax : float, optional\n    Maximum bar value, defining the right hand limit\n    of the bar drawing range, higher values are clipped to `vmax`.\n    When None (default): the maximum value of the data will be used.\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nself : Styler", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 1158, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L1158", "errors": [["PR08", "Parameter \"axis\" description should start with a capital letter"], ["PR09", "Parameter \"align\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Builtin styles", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler.render": {"type": "function", "docstring": "Render the built up styles to HTML.\n\nParameters\n----------\n**kwargs\n    Any additional keyword arguments are passed\n    through to ``self.template.render``.\n    This is useful when you need to provide\n    additional variables for a custom template.\n\n    .. versionadded:: 0.20\n\nReturns\n-------\nrendered : str\n    The rendered HTML.\n\nNotes\n-----\n``Styler`` objects have defined the ``_repr_html_`` method\nwhich automatically calls ``self.render()`` when it's the\nlast item in a Notebook cell. When calling ``Styler.render()``\ndirectly, wrap the result in ``IPython.display.HTML`` to view\nthe rendered HTML in the notebook.\n\nPandas uses the following keys in render. Arguments passed\nin ``**kwargs`` take precedence, so think carefully if you want\nto override them:\n\n* head\n* cellstyle\n* body\n* uuid\n* precision\n* table_styles\n* caption\n* table_attributes", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 476, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L476", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Style export and import", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler.export": {"type": "function", "docstring": "Export the styles to applied to the current Styler.\n\nCan be applied to a second style with ``Styler.use``.\n\nReturns\n-------\nstyles : list\n\nSee Also\n--------\nStyler.use", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 793, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L793", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Styler.use\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Style export and import", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler.use": {"type": "function", "docstring": "Set the styles on the current Styler, possibly using styles\nfrom ``Styler.export``.\n\nParameters\n----------\nstyles : list\n    list of style functions\n\nReturns\n-------\nself : Styler\n\nSee Also\n--------\nStyler.export", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 809, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L809", "errors": [["SS06", "Summary should fit in a single line"], ["PR08", "Parameter \"styles\" description should start with a capital letter"], ["PR09", "Parameter \"styles\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"Styler.export\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "Style export and import", "subsection": "", "shared_code_with": ""}, "pandas.io.formats.style.Styler.to_excel": {"type": "function", "docstring": "Write Styler to an Excel sheet.\n\nTo write a single Styler to an Excel .xlsx file it is only necessary to\nspecify a target file name. To write to multiple sheets it is necessary to\ncreate an `ExcelWriter` object with a target file name, and specify a sheet\nin the file to write to.\n\nMultiple sheets may be written to by specifying unique `sheet_name`.\nWith all data written to the file it is necessary to save the changes.\nNote that creating an `ExcelWriter` object with a file name that already\nexists will result in the contents of the existing file being erased.\n\nParameters\n----------\nexcel_writer : str or ExcelWriter object\n    File path or existing ExcelWriter.\nsheet_name : str, default 'Sheet1'\n    Name of sheet which will contain DataFrame.\nna_rep : str, default ''\n    Missing data representation.\nfloat_format : str, optional\n    Format string for floating point numbers. For example\n    ``float_format=\"%.2f\"`` will format 0.1234 to 0.12.\ncolumns : sequence or list of str, optional\n    Columns to write.\nheader : bool or list of str, default True\n    Write out the column names. If a list of string is given it is\n    assumed to be aliases for the column names.\nindex : bool, default True\n    Write row names (index).\nindex_label : str or sequence, optional\n    Column label for index column(s) if desired. If not specified, and\n    `header` and `index` are True, then the index names are used. A\n    sequence should be given if the DataFrame uses MultiIndex.\nstartrow : int, default 0\n    Upper left cell row to dump data frame.\nstartcol : int, default 0\n    Upper left cell column to dump data frame.\nengine : str, optional\n    Write engine to use, 'openpyxl' or 'xlsxwriter'. You can also set this\n    via the options ``io.excel.xlsx.writer``, ``io.excel.xls.writer``, and\n    ``io.excel.xlsm.writer``.\nmerge_cells : bool, default True\n    Write MultiIndex and Hierarchical Rows as merged cells.\nencoding : str, optional\n    Encoding of the resulting excel file. Only necessary for xlwt,\n    other writers support unicode natively.\ninf_rep : str, default 'inf'\n    Representation for infinity (there is no native representation for\n    infinity in Excel).\nverbose : bool, default True\n    Display more information in the error logs.\nfreeze_panes : tuple of int (length 2), optional\n    Specifies the one-based bottommost row and rightmost column that\n    is to be frozen.\n\n    .. versionadded:: 0.20.0.\n\nSee Also\n--------\nto_csv : Write DataFrame to a comma-separated values (csv) file.\nExcelWriter : Class for writing DataFrame objects into excel sheets.\nread_excel : Read an Excel file into a pandas DataFrame.\nread_csv : Read a comma-separated values (csv) file into DataFrame.\n\nNotes\n-----\nFor compatibility with :meth:`~DataFrame.to_csv`,\nto_excel serializes lists and dicts to strings before writing.\n\nOnce a workbook has been saved it is not possible write further data\nwithout rewriting the whole workbook.\n\nExamples\n--------\n\nCreate, write to and save a workbook:\n\n>>> df1 = pd.DataFrame([['a', 'b'], ['c', 'd']],\n...                    index=['row 1', 'row 2'],\n...                    columns=['col 1', 'col 2'])\n>>> df1.to_excel(\"output.xlsx\")  # doctest: +SKIP\n\nTo specify the sheet name:\n\n>>> df1.to_excel(\"output.xlsx\",\n...              sheet_name='Sheet_name_1')  # doctest: +SKIP\n\nIf you wish to write to more than one sheet in the workbook, it is\nnecessary to specify an ExcelWriter object:\n\n>>> df2 = df1.copy()\n>>> with pd.ExcelWriter('output.xlsx') as writer:  # doctest: +SKIP\n...     df1.to_excel(writer, sheet_name='Sheet_name_1')\n...     df2.to_excel(writer, sheet_name='Sheet_name_2')\n\nExcelWriter can also be used to append to an existing Excel file:\n\n>>> with pd.ExcelWriter('output.xlsx',\n...                     mode='a') as writer:  # doctest: +SKIP\n...     df.to_excel(writer, sheet_name='Sheet_name_3')\n\nTo set the library that is used to write the Excel file,\nyou can pass the `engine` keyword (the default engine is\nautomatically chosen depending on the file extension):\n\n>>> df1.to_excel('output1.xlsx', engine='xlsxwriter')  # doctest: +SKIP", "deprecated": false, "file": "pandas/io/formats/style.py", "file_line": 166, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/io/formats/style.py#L166", "errors": [["EX03", "flake8 error: F821 undefined name 'df'"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "Style export and import", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.register_extension_dtype": {"type": "function", "docstring": "Register an ExtensionType with pandas as class decorator.\n\n.. versionadded:: 0.24.0\n\nThis enables operations like ``.astype(name)`` for the name\nof the ExtensionDtype.\n\nReturns\n-------\ncallable\n    A class decorator.\n\nExamples\n--------\n>>> from pandas.api.extensions import register_extension_dtype\n>>> from pandas.api.extensions import ExtensionDtype\n>>> @register_extension_dtype\n... class MyExtensionDtype(ExtensionDtype):\n...     pass", "deprecated": false, "file": "pandas/core/dtypes/dtypes.py", "file_line": 26, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/dtypes.py#L26", "errors": [], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.register_dataframe_accessor": {"type": "function", "docstring": "Register a custom accessor on DataFrame objects.\n\nParameters\n----------\nname : str\n    Name under which the accessor should be registered. A warning is issued\n    if this name conflicts with a preexisting attribute.\n\nReturns\n-------\ncallable\n    A class decorator.\n\nSee Also\n--------\nregister_series_accessor, register_index_accessor\n\nNotes\n-----\nWhen accessed, your accessor will be initialized with the pandas object\nthe user is interacting with. So the signature must be\n\n.. code-block:: python\n\n    def __init__(self, pandas_object):  # noqa: E999\n        ...\n\nFor consistency with pandas methods, you should raise an ``AttributeError``\nif the data passed to your accessor has an incorrect dtype.\n\n>>> pd.Series(['a', 'b']).dt\nTraceback (most recent call last):\n...\nAttributeError: Can only use .dt accessor with datetimelike values\n\nExamples\n--------\n\nIn your library code::\n\n    import pandas as pd\n\n    @pd.api.extensions.register_dataframe_accessor(\"geo\")\n    class GeoAccessor:\n        def __init__(self, pandas_obj):\n            self._obj = pandas_obj\n\n        @property\n        def center(self):\n            # return the geographic center point of this DataFrame\n            lat = self._obj.latitude\n            lon = self._obj.longitude\n            return (float(lon.mean()), float(lat.mean()))\n\n        def plot(self):\n            # plot this array's data on a map, e.g., using Cartopy\n            pass\n\nBack in an interactive IPython session:\n\n    >>> ds = pd.DataFrame({'longitude': np.linspace(0, 10),\n    ...                    'latitude': np.linspace(0, 20)})\n    >>> ds.geo.center\n    (5.0, 10.0)\n    >>> ds.geo.plot()\n    # plots data on a map", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 271, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L271", "errors": [["SA04", "Missing description for See Also \"register_series_accessor\" reference"], ["SA04", "Missing description for See Also \"register_index_accessor\" reference"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 64, in pandas.api.extensions.register_dataframe_accessor\nFailed example:\n    ds.geo.center\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.extensions.register_dataframe_accessor[2]>\", line 1, in <module>\n        ds.geo.center\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/generic.py\", line 5153, in __getattr__\n        return object.__getattribute__(self, name)\n    AttributeError: 'DataFrame' object has no attribute 'geo'\n**********************************************************************\nLine 66, in pandas.api.extensions.register_dataframe_accessor\nFailed example:\n    ds.geo.plot()\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.extensions.register_dataframe_accessor[3]>\", line 1, in <module>\n        ds.geo.plot()\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/generic.py\", line 5153, in __getattr__\n        return object.__getattribute__(self, name)\n    AttributeError: 'DataFrame' object has no attribute 'geo'\n"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "**********************************************************************\nLine 64, in pandas.api.extensions.register_dataframe_accessor\nFailed example:\n    ds.geo.center\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.extensions.register_dataframe_accessor[2]>\", line 1, in <module>\n        ds.geo.center\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/generic.py\", line 5153, in __getattr__\n        return object.__getattribute__(self, name)\n    AttributeError: 'DataFrame' object has no attribute 'geo'\n**********************************************************************\nLine 66, in pandas.api.extensions.register_dataframe_accessor\nFailed example:\n    ds.geo.plot()\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.extensions.register_dataframe_accessor[3]>\", line 1, in <module>\n        ds.geo.plot()\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/generic.py\", line 5153, in __getattr__\n        return object.__getattribute__(self, name)\n    AttributeError: 'DataFrame' object has no attribute 'geo'\n", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.register_series_accessor": {"type": "function", "docstring": "Register a custom accessor on Series objects.\n\nParameters\n----------\nname : str\n    Name under which the accessor should be registered. A warning is issued\n    if this name conflicts with a preexisting attribute.\n\nReturns\n-------\ncallable\n    A class decorator.\n\nSee Also\n--------\nregister_dataframe_accessor, register_index_accessor\n\nNotes\n-----\nWhen accessed, your accessor will be initialized with the pandas object\nthe user is interacting with. So the signature must be\n\n.. code-block:: python\n\n    def __init__(self, pandas_object):  # noqa: E999\n        ...\n\nFor consistency with pandas methods, you should raise an ``AttributeError``\nif the data passed to your accessor has an incorrect dtype.\n\n>>> pd.Series(['a', 'b']).dt\nTraceback (most recent call last):\n...\nAttributeError: Can only use .dt accessor with datetimelike values\n\nExamples\n--------\n\nIn your library code::\n\n    import pandas as pd\n\n    @pd.api.extensions.register_dataframe_accessor(\"geo\")\n    class GeoAccessor:\n        def __init__(self, pandas_obj):\n            self._obj = pandas_obj\n\n        @property\n        def center(self):\n            # return the geographic center point of this DataFrame\n            lat = self._obj.latitude\n            lon = self._obj.longitude\n            return (float(lon.mean()), float(lat.mean()))\n\n        def plot(self):\n            # plot this array's data on a map, e.g., using Cartopy\n            pass\n\nBack in an interactive IPython session:\n\n    >>> ds = pd.DataFrame({'longitude': np.linspace(0, 10),\n    ...                    'latitude': np.linspace(0, 20)})\n    >>> ds.geo.center\n    (5.0, 10.0)\n    >>> ds.geo.plot()\n    # plots data on a map", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 283, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L283", "errors": [["SA04", "Missing description for See Also \"register_dataframe_accessor\" reference"], ["SA04", "Missing description for See Also \"register_index_accessor\" reference"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 64, in pandas.api.extensions.register_series_accessor\nFailed example:\n    ds.geo.center\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.extensions.register_series_accessor[2]>\", line 1, in <module>\n        ds.geo.center\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/generic.py\", line 5153, in __getattr__\n        return object.__getattribute__(self, name)\n    AttributeError: 'DataFrame' object has no attribute 'geo'\n**********************************************************************\nLine 66, in pandas.api.extensions.register_series_accessor\nFailed example:\n    ds.geo.plot()\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.extensions.register_series_accessor[3]>\", line 1, in <module>\n        ds.geo.plot()\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/generic.py\", line 5153, in __getattr__\n        return object.__getattribute__(self, name)\n    AttributeError: 'DataFrame' object has no attribute 'geo'\n"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "**********************************************************************\nLine 64, in pandas.api.extensions.register_series_accessor\nFailed example:\n    ds.geo.center\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.extensions.register_series_accessor[2]>\", line 1, in <module>\n        ds.geo.center\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/generic.py\", line 5153, in __getattr__\n        return object.__getattribute__(self, name)\n    AttributeError: 'DataFrame' object has no attribute 'geo'\n**********************************************************************\nLine 66, in pandas.api.extensions.register_series_accessor\nFailed example:\n    ds.geo.plot()\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.extensions.register_series_accessor[3]>\", line 1, in <module>\n        ds.geo.plot()\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/generic.py\", line 5153, in __getattr__\n        return object.__getattribute__(self, name)\n    AttributeError: 'DataFrame' object has no attribute 'geo'\n", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.register_index_accessor": {"type": "function", "docstring": "Register a custom accessor on Index objects.\n\nParameters\n----------\nname : str\n    Name under which the accessor should be registered. A warning is issued\n    if this name conflicts with a preexisting attribute.\n\nReturns\n-------\ncallable\n    A class decorator.\n\nSee Also\n--------\nregister_dataframe_accessor, register_series_accessor\n\nNotes\n-----\nWhen accessed, your accessor will be initialized with the pandas object\nthe user is interacting with. So the signature must be\n\n.. code-block:: python\n\n    def __init__(self, pandas_object):  # noqa: E999\n        ...\n\nFor consistency with pandas methods, you should raise an ``AttributeError``\nif the data passed to your accessor has an incorrect dtype.\n\n>>> pd.Series(['a', 'b']).dt\nTraceback (most recent call last):\n...\nAttributeError: Can only use .dt accessor with datetimelike values\n\nExamples\n--------\n\nIn your library code::\n\n    import pandas as pd\n\n    @pd.api.extensions.register_dataframe_accessor(\"geo\")\n    class GeoAccessor:\n        def __init__(self, pandas_obj):\n            self._obj = pandas_obj\n\n        @property\n        def center(self):\n            # return the geographic center point of this DataFrame\n            lat = self._obj.latitude\n            lon = self._obj.longitude\n            return (float(lon.mean()), float(lat.mean()))\n\n        def plot(self):\n            # plot this array's data on a map, e.g., using Cartopy\n            pass\n\nBack in an interactive IPython session:\n\n    >>> ds = pd.DataFrame({'longitude': np.linspace(0, 10),\n    ...                    'latitude': np.linspace(0, 20)})\n    >>> ds.geo.center\n    (5.0, 10.0)\n    >>> ds.geo.plot()\n    # plots data on a map", "deprecated": false, "file": "pandas/core/accessor.py", "file_line": 295, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/accessor.py#L295", "errors": [["SA04", "Missing description for See Also \"register_dataframe_accessor\" reference"], ["SA04", "Missing description for See Also \"register_series_accessor\" reference"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 64, in pandas.api.extensions.register_index_accessor\nFailed example:\n    ds.geo.center\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.extensions.register_index_accessor[2]>\", line 1, in <module>\n        ds.geo.center\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/generic.py\", line 5153, in __getattr__\n        return object.__getattribute__(self, name)\n    AttributeError: 'DataFrame' object has no attribute 'geo'\n**********************************************************************\nLine 66, in pandas.api.extensions.register_index_accessor\nFailed example:\n    ds.geo.plot()\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.extensions.register_index_accessor[3]>\", line 1, in <module>\n        ds.geo.plot()\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/generic.py\", line 5153, in __getattr__\n        return object.__getattribute__(self, name)\n    AttributeError: 'DataFrame' object has no attribute 'geo'\n"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "**********************************************************************\nLine 64, in pandas.api.extensions.register_index_accessor\nFailed example:\n    ds.geo.center\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.extensions.register_index_accessor[2]>\", line 1, in <module>\n        ds.geo.center\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/generic.py\", line 5153, in __getattr__\n        return object.__getattribute__(self, name)\n    AttributeError: 'DataFrame' object has no attribute 'geo'\n**********************************************************************\nLine 66, in pandas.api.extensions.register_index_accessor\nFailed example:\n    ds.geo.plot()\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.api.extensions.register_index_accessor[3]>\", line 1, in <module>\n        ds.geo.plot()\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/generic.py\", line 5153, in __getattr__\n        return object.__getattribute__(self, name)\n    AttributeError: 'DataFrame' object has no attribute 'geo'\n", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionDtype": {"type": "type", "docstring": "A custom data type, to be paired with an ExtensionArray.\n\n.. versionadded:: 0.23.0\n\nSee Also\n--------\nextensions.register_extension_dtype\nextensions.ExtensionArray\n\nNotes\n-----\nThe interface includes the following abstract methods that must\nbe implemented by subclasses:\n\n* type\n* name\n* construct_from_string\n\nThe following attributes influence the behavior of the dtype in\npandas operations\n\n* _is_numeric\n* _is_boolean\n\nOptionally one can override construct_array_type for construction\nwith the name of this dtype via the Registry. See\n:meth:`extensions.register_extension_dtype`.\n\n* construct_array_type\n\nThe `na_value` class attribute can be used to set the default NA value\nfor this type. :attr:`numpy.nan` is used by default.\n\nExtensionDtypes are required to be hashable. The base class provides\na default implementation, which relies on the ``_metadata`` class\nattribute. ``_metadata`` should be a tuple containing the strings\nthat define your data type. For example, with ``PeriodDtype`` that's\nthe ``freq`` attribute.\n\n**If you have a parametrized dtype you should set the ``_metadata``\nclass property**.\n\nIdeally, the attributes in ``_metadata`` will match the\nparameters to your ``ExtensionDtype.__init__`` (if any). If any of\nthe attributes in ``_metadata`` don't implement the standard\n``__eq__`` or ``__hash__``, the default implementations here will not\nwork.\n\n.. versionchanged:: 0.24.0\n\n   Added ``_metadata``, ``__hash__``, and changed the default definition\n   of ``__eq__``.\n\nThis class does not inherit from 'abc.ABCMeta' for performance reasons.\nMethods and properties required by the interface raise\n``pandas.errors.AbstractMethodError`` and no ``register`` method is\nprovided for registering virtual subclasses.", "deprecated": false, "file": "pandas/core/dtypes/base.py", "file_line": 11, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/base.py#L11", "errors": [["SA04", "Missing description for See Also \"extensions.register_extension_dtype\" reference"], ["SA04", "Missing description for See Also \"extensions.ExtensionArray\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray": {"type": "type", "docstring": "Abstract base class for custom 1-D array types.\n\npandas will recognize instances of this class as proper arrays\nwith a custom type and will not attempt to coerce them to objects. They\nmay be stored directly inside a :class:`DataFrame` or :class:`Series`.\n\n.. versionadded:: 0.23.0\n\nAttributes\n----------\ndtype\nnbytes\nndim\nshape\n\nMethods\n-------\nargsort\nastype\ncopy\ndropna\nfactorize\nfillna\nisna\nravel\nrepeat\nsearchsorted\nshift\ntake\nunique\nview\n_concat_same_type\n_formatter\n_from_factorized\n_from_sequence\n_from_sequence_of_strings\n_ndarray_values\n_reduce\n_values_for_argsort\n_values_for_factorize\n\nNotes\n-----\nThe interface includes the following abstract methods that must be\nimplemented by subclasses:\n\n* _from_sequence\n* _from_factorized\n* __getitem__\n* __len__\n* dtype\n* nbytes\n* isna\n* take\n* copy\n* _concat_same_type\n\nA default repr displaying the type, (truncated) data, length,\nand dtype is provided. It can be customized or replaced by\nby overriding:\n\n* __repr__ : A default repr for the ExtensionArray.\n* _formatter : Print scalars inside a Series or DataFrame.\n\nSome methods require casting the ExtensionArray to an ndarray of Python\nobjects with ``self.astype(object)``, which may be expensive. When\nperformance is a concern, we highly recommend overriding the following\nmethods:\n\n* fillna\n* dropna\n* unique\n* factorize / _values_for_factorize\n* argsort / _values_for_argsort\n* searchsorted\n\nThe remaining methods implemented on this class should be performant,\nas they only compose abstract methods. Still, a more efficient\nimplementation may be available, and these methods can be overridden.\n\nOne can implement methods to handle array reductions.\n\n* _reduce\n\nOne can implement methods to handle parsing from strings that will be used\nin methods such as ``pandas.io.parsers.read_csv``.\n\n* _from_sequence_of_strings\n\nThis class does not inherit from 'abc.ABCMeta' for performance reasons.\nMethods and properties required by the interface raise\n``pandas.errors.AbstractMethodError`` and no ``register`` method is\nprovided for registering virtual subclasses.\n\nExtensionArrays are limited to 1 dimension.\n\nThey may be backed by none, one, or many NumPy arrays. For example,\n``pandas.Categorical`` is an extension array backed by two arrays,\none for codes and one for categories. An array of IPv6 address may\nbe backed by a NumPy structured array with two fields, one for the\nlower 64 bits and one for the upper 64 bits. Or they may be backed\nby some other storage type, like Python lists. Pandas makes no\nassumptions on how the data are stored, just that it can be converted\nto a NumPy array.\nThe ExtensionArray interface does not impose any rules on how this data\nis stored. However, currently, the backing data cannot be stored in\nattributes called ``.values`` or ``._values`` to ensure full compatibility\nwith pandas internals. But other names as ``.data``, ``._data``,\n``._items``, ... can be freely used.\n\nIf implementing NumPy's ``__array_ufunc__`` interface, pandas expects\nthat\n\n1. You defer by returning ``NotImplemented`` when any Series are present\n   in `inputs`. Pandas will extract the arrays and call the ufunc again.\n2. You define a ``_HANDLED_TYPES`` tuple as an attribute on the class.\n   Pandas inspect this to determine whether the ufunc is valid for the\n   types present.\n\nSee :ref:`extending.extension.ufunc` for more.", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 35, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L35", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.arrays.PandasArray": {"type": "type", "docstring": "A pandas ExtensionArray for NumPy data.\n\n.. versionadded:: 0.24.0\n\nThis is mostly for internal compatibility, and is not especially\nuseful on its own.\n\nParameters\n----------\nvalues : ndarray\n    The NumPy ndarray to wrap. Must be 1-dimensional.\ncopy : bool, default False\n    Whether to copy `values`.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone", "deprecated": false, "file": "pandas/core/arrays/numpy_.py", "file_line": 89, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/numpy_.py#L89", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray._concat_same_type": {"type": "method", "docstring": "Concatenate multiple array\n\nParameters\n----------\nto_concat : sequence of this type\n\nReturns\n-------\nExtensionArray", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 955, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L955", "errors": [["SS03", "Summary does not end with a period"], ["PR07", "Parameter \"to_concat\" has no description"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray._formatter": {"type": "function", "docstring": "Formatting function for scalar values.\n\nThis is used in the default '__repr__'. The returned formatting\nfunction receives instances of your scalar type.\n\nParameters\n----------\nboxed : bool, default False\n    An indicated for whether or not your array is being printed\n    within a Series, DataFrame, or Index (True), or just by\n    itself (False). This may be useful if you want scalar values\n    to appear differently within a Series versus on its own (e.g.\n    quoted or not).\n\nReturns\n-------\nCallable[[Any], str]\n    A callable that gets instances of the scalar type and\n    returns a string. By default, :func:`repr` is used\n    when ``boxed=False`` and :func:`str` is used when\n    ``boxed=True``.", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 905, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L905", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray._from_factorized": {"type": "method", "docstring": "Reconstruct an ExtensionArray after factorization.\n\nParameters\n----------\nvalues : ndarray\n    An integer ndarray with the factorized values.\noriginal : ExtensionArray\n    The original ExtensionArray that factorize was called on.\n\nSee Also\n--------\nfactorize\nExtensionArray.factorize", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 212, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L212", "errors": [["SA04", "Missing description for See Also \"factorize\" reference"], ["SA04", "Missing description for See Also \"ExtensionArray.factorize\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray._from_sequence": {"type": "method", "docstring": "Construct a new ExtensionArray from a sequence of scalars.\n\nParameters\n----------\nscalars : Sequence\n    Each element will be an instance of the scalar type for this\n    array, ``cls.dtype.type``.\ndtype : dtype, optional\n    Construct for this particular dtype. This should be a Dtype\n    compatible with the ExtensionArray.\ncopy : boolean, default False\n    If True, copy the underlying data.\n\nReturns\n-------\nExtensionArray", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 167, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L167", "errors": [["PR06", "Parameter \"copy\" type should use \"bool\" instead of \"boolean\""], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray._from_sequence_of_strings": {"type": "method", "docstring": "Construct a new ExtensionArray from a sequence of strings.\n\n.. versionadded:: 0.24.0\n\nParameters\n----------\nstrings : Sequence\n    Each element will be an instance of the scalar type for this\n    array, ``cls.dtype.type``.\ndtype : dtype, optional\n    Construct for this particular dtype. This should be a Dtype\n    compatible with the ExtensionArray.\ncopy : boolean, default False\n    If True, copy the underlying data.\n\nReturns\n-------\nExtensionArray", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 189, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L189", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["PR06", "Parameter \"copy\" type should use \"bool\" instead of \"boolean\""], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray._ndarray_values": {"type": "property", "docstring": "Internal pandas method for lossy conversion to a NumPy ndarray.\n\nThis method is not part of the pandas interface.\n\nThe expectation is that this is cheap to compute, and is primarily\nused for interacting with our indexers.\n\nReturns\n-------\narray : ndarray", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 979, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L979", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray._reduce": {"type": "function", "docstring": "Return a scalar result of performing the reduction operation.\n\nParameters\n----------\nname : str\n    Name of the function, supported values are:\n    { any, all, min, max, sum, mean, median, prod,\n    std, var, sem, kurt, skew }.\nskipna : bool, default True\n    If True, skip NaN values.\n**kwargs\n    Additional keyword arguments passed to the reduction function.\n    Currently, `ddof` is the only supported kwarg.\n\nReturns\n-------\nscalar\n\nRaises\n------\nTypeError : subclass does not define reductions", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 995, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L995", "errors": [["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray._values_for_argsort": {"type": "function", "docstring": "Return values for sorting.\n\nReturns\n-------\nndarray\n    The transformed values should maintain the ordering between values\n    within the array.\n\nSee Also\n--------\nExtensionArray.argsort", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 414, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L414", "errors": [["SA04", "Missing description for See Also \"ExtensionArray.argsort\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray._values_for_factorize": {"type": "function", "docstring": "Return an array and missing value suitable for factorization.\n\nReturns\n-------\nvalues : ndarray\n\n    An array suitable for factorization. This should maintain order\n    and be a supported dtype (Float64, Int64, UInt64, String, Object).\n    By default, the extension array is cast to object dtype.\nna_value : object\n    The value in `values` to consider missing. This will be treated\n    as NA in the factorization routines, so it will be coded as\n    `na_sentinal` and not included in `uniques`. By default,\n    ``np.nan`` is used.\n\nNotes\n-----\nThe values returned by this method are also used in\n:func:`pandas.util.hash_pandas_object`.", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 637, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L637", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray.argsort": {"type": "function", "docstring": "Return the indices that would sort this array.\n\nParameters\n----------\nascending : bool, default True\n    Whether the indices should result in an ascending\n    or descending sort.\nkind : {'quicksort', 'mergesort', 'heapsort'}, optional\n    Sorting algorithm.\n*args, **kwargs:\n    passed through to :func:`numpy.argsort`.\n\nReturns\n-------\nindex_array : ndarray\n    Array of indices that sort ``self``. If NaN values are contained,\n    NaN values are placed at the end.\n\nSee Also\n--------\nnumpy.argsort : Sorting implementation used internally.", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 431, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L431", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs:}"], ["PR08", "Parameter \"*args, **kwargs:\" description should start with a capital letter"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray.astype": {"type": "function", "docstring": "Cast to a NumPy array with 'dtype'.\n\nParameters\n----------\ndtype : str or dtype\n    Typecode or data-type to which the array is cast.\ncopy : bool, default True\n    Whether to copy the data, even if not necessary. If False,\n    a copy is made only if the old dtype does not match the\n    new dtype.\n\nReturns\n-------\narray : ndarray\n    NumPy ndarray with 'dtype' for its dtype.", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 372, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L372", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray.copy": {"type": "function", "docstring": "Return a copy of the array.\n\nReturns\n-------\nExtensionArray", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 855, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L855", "errors": [["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray.view": {"type": "function", "docstring": "Return a view on the array.\n\nParameters\n----------\ndtype : str, np.dtype, or ExtensionDtype, optional\n    Default None\n\nReturns\n-------\nExtensionArray", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 865, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L865", "errors": [["PR09", "Parameter \"dtype\" description should finish with \".\""], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray.dropna": {"type": "function", "docstring": "Return ExtensionArray without NA values\n\nReturns\n-------\nvalid : ExtensionArray", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 515, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L515", "errors": [["SS03", "Summary does not end with a period"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray.factorize": {"type": "function", "docstring": "Encode the extension array as an enumerated type.\n\nParameters\n----------\nna_sentinel : int, default -1\n    Value to use in the `labels` array to indicate missing values.\n\nReturns\n-------\nlabels : ndarray\n    An integer NumPy array that's an indexer into the original\n    ExtensionArray.\nuniques : ExtensionArray\n    An ExtensionArray containing the unique values of `self`.\n\n    .. note::\n\n       uniques will *not* contain an entry for the NA value of\n       the ExtensionArray if there are any missing values present\n       in `self`.\n\nSee Also\n--------\nfactorize : Top-level factorize method that dispatches here.\n\nNotes\n-----\n:meth:`pandas.factorize` offers a `sort` keyword as well.", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 661, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L661", "errors": [], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray.fillna": {"type": "function", "docstring": "Fill NA/NaN values using the specified method.\n\nParameters\n----------\nvalue : scalar, array-like\n    If a scalar value is passed it is used to fill all missing values.\n    Alternatively, an array-like 'value' can be given. It's expected\n    that the array-like have the same length as 'self'.\nmethod : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n    Method to use for filling holes in reindexed Series\n    pad / ffill: propagate last valid observation forward to next valid\n    backfill / bfill: use NEXT valid observation to fill gap\nlimit : int, default None\n    If method is specified, this is the maximum number of consecutive\n    NaN values to forward/backward fill. In other words, if there is\n    a gap with more than this number of consecutive NaNs, it will only\n    be partially filled. If method is not specified, this is the\n    maximum number of entries along the entire axis where NaNs will be\n    filled.\n\nReturns\n-------\nfilled : ExtensionArray with NA/NaN filled", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 464, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L464", "errors": [["PR09", "Parameter \"method\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray.isna": {"type": "function", "docstring": "A 1-D array indicating if each value is missing.\n\nReturns\n-------\nna_values : Union[np.ndarray, ExtensionArray]\n    In most cases, this should return a NumPy ndarray. For\n    exceptional cases like ``SparseArray``, where returning\n    an ndarray would be expensive, an ExtensionArray may be\n    returned.\n\nNotes\n-----\nIf returning an ExtensionArray, then\n\n* ``na_values._is_boolean`` should be True\n* `na_values` should implement :func:`ExtensionArray._reduce`\n* ``na_values.any`` and ``na_values.all`` should be implemented", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 392, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L392", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray.ravel": {"type": "function", "docstring": "Return a flattened view on this array.\n\nParameters\n----------\norder : {None, 'C', 'F', 'A', 'K'}, default 'C'\n\nReturns\n-------\nExtensionArray\n\nNotes\n-----\n- Because ExtensionArrays are 1D-only, this is a no-op.\n- The \"order\" argument is ignored, is for compatibility with NumPy.", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 936, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L936", "errors": [["PR07", "Parameter \"order\" has no description"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray.repeat": {"type": "function", "docstring": "Repeat elements of a ExtensionArray.\n\nReturns a new ExtensionArray where each element of the current ExtensionArray\nis repeated consecutively a given number of times.\n\nParameters\n----------\nrepeats : int or array of ints\n    The number of repetitions for each element. This should be a\n    non-negative integer. Repeating 0 times will return an empty\n    ExtensionArray.\naxis : None\n    Must be ``None``. Has no effect but is accepted for compatibility\n    with numpy.\n\nReturns\n-------\nrepeated_array : ExtensionArray\n    Newly created ExtensionArray with repeated elements.\n\nSee Also\n--------\nSeries.repeat : Equivalent function for Series.\nIndex.repeat : Equivalent function for Index.\nnumpy.repeat : Similar method for :class:`numpy.ndarray`.\nExtensionArray.take : Take arbitrary positions.\n\nExamples\n--------\n>>> cat = pd.Categorical(['a', 'b', 'c'])\n>>> cat\n[a, b, c]\nCategories (3, object): [a, b, c]\n>>> cat.repeat(2)\n[a, a, b, b, c, c]\nCategories (3, object): [a, b, c]\n>>> cat.repeat([1, 2, 3])\n[a, b, b, c, c, c]\nCategories (3, object): [a, b, c]", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 753, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L753", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray.searchsorted": {"type": "function", "docstring": "Find indices where elements should be inserted to maintain order.\n\n.. versionadded:: 0.24.0\n\nFind the indices into a sorted array `self` (a) such that, if the\ncorresponding elements in `value` were inserted before the indices,\nthe order of `self` would be preserved.\n\nAssuming that `self` is sorted:\n\n======  ================================\n`side`  returned index `i` satisfies\n======  ================================\nleft    ``self[i-1] < value <= self[i]``\nright   ``self[i-1] <= value < self[i]``\n======  ================================\n\nParameters\n----------\nvalue : array_like\n    Values to insert into `self`.\nside : {'left', 'right'}, optional\n    If 'left', the index of the first suitable location found is given.\n    If 'right', return the last such index.  If there is no suitable\n    index, return either 0 or N (where N is the length of `self`).\nsorter : 1-D array_like, optional\n    Optional array of integer indices that sort array a into ascending\n    order. They are typically the result of argsort.\n\nReturns\n-------\narray of ints\n    Array of insertion points with the same shape as `value`.\n\nSee Also\n--------\nnumpy.searchsorted : Similar method from NumPy.", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 589, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L589", "errors": [], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray.shift": {"type": "function", "docstring": "Shift values by desired number.\n\nNewly introduced missing values are filled with\n``self.dtype.na_value``.\n\n.. versionadded:: 0.24.0\n\nParameters\n----------\nperiods : int, default 1\n    The number of periods to shift. Negative values are allowed\n    for shifting backwards.\n\nfill_value : object, optional\n    The scalar value to use for newly introduced missing values.\n    The default is ``self.dtype.na_value``\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nshifted : ExtensionArray\n\nNotes\n-----\nIf ``self`` is empty or ``periods`` is 0, a copy of ``self`` is\nreturned.\n\nIf ``periods > len(self)``, then an array of size\nlen(self) is returned, with all values filled with\n``self.dtype.na_value``.", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 525, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L525", "errors": [["PR09", "Parameter \"fill_value\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray.take": {"type": "function", "docstring": "Take elements from an array.\n\nParameters\n----------\nindices : sequence of integers\n    Indices to be taken.\nallow_fill : bool, default False\n    How to handle negative values in `indices`.\n\n    * False: negative values in `indices` indicate positional indices\n      from the right (the default). This is similar to\n      :func:`numpy.take`.\n\n    * True: negative values in `indices` indicate\n      missing values. These values are set to `fill_value`. Any other\n      other negative values raise a ``ValueError``.\n\nfill_value : any, optional\n    Fill value to use for NA-indices when `allow_fill` is True.\n    This may be ``None``, in which case the default NA value for\n    the type, ``self.dtype.na_value``, is used.\n\n    For many ExtensionArrays, there will be two representations of\n    `fill_value`: a user-facing \"boxed\" scalar, and a low-level\n    physical NA value. `fill_value` should be the user-facing version,\n    and the implementation should handle translating that to the\n    physical version for processing the take if necessary.\n\nReturns\n-------\nExtensionArray\n\nRaises\n------\nIndexError\n    When the indices are out of bounds for the array.\nValueError\n    When `indices` contains negative values other than ``-1``\n    and `allow_fill` is True.\n\nSee Also\n--------\nnumpy.take\napi.extensions.take\n\nNotes\n-----\nExtensionArray.take is called by ``Series.__getitem__``, ``.loc``,\n``iloc``, when `indices` is a sequence of values. Additionally,\nit's called by :meth:`Series.reindex`, or any other method\nthat causes realignment, with a `fill_value`.\n\nExamples\n--------\nHere's an example implementation, which relies on casting the\nextension array to object dtype. This uses the helper method\n:func:`pandas.api.extensions.take`.\n\n.. code-block:: python\n\n   def take(self, indices, allow_fill=False, fill_value=None):\n       from pandas.core.algorithms import take\n\n       # If the ExtensionArray is backed by an ndarray, then\n       # just pass that here instead of coercing to object.\n       data = self.astype(object)\n\n       if allow_fill and fill_value is None:\n           fill_value = self.dtype.na_value\n\n       # fill value should always be translated from the scalar\n       # type for the array, to the physical storage type for\n       # the data, before passing to take.\n\n       result = take(data, indices, fill_value=fill_value,\n                     allow_fill=allow_fill)\n       return self._from_sequence(result, dtype=self.dtype)", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 764, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L764", "errors": [["PR06", "Parameter \"indices\" type should use \"int\" instead of \"integer\""], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"numpy.take\" reference"], ["SA04", "Missing description for See Also \"api.extensions.take\" reference"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray.unique": {"type": "function", "docstring": "Compute the ExtensionArray of unique values.\n\nReturns\n-------\nuniques : ExtensionArray", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 578, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L578", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray.dtype": {"type": "property", "docstring": "An instance of 'ExtensionDtype'.", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 338, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L338", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray.nbytes": {"type": "property", "docstring": "The number of bytes needed to store this object in memory.", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 359, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L359", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray.ndim": {"type": "property", "docstring": "Extension Arrays are only allowed to be 1-dimensional.", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 352, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L352", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.api.extensions.ExtensionArray.shape": {"type": "property", "docstring": "Return a tuple of the array dimensions.", "deprecated": false, "file": "pandas/core/arrays/base.py", "file_line": 345, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/base.py#L345", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "", "shared_code_with": ""}, "pandas.DataFrame": {"type": "type", "docstring": "Two-dimensional size-mutable, potentially heterogeneous tabular data\nstructure with labeled axes (rows and columns). Arithmetic operations\nalign on both row and column labels. Can be thought of as a dict-like\ncontainer for Series objects. The primary pandas data structure.\n\nParameters\n----------\ndata : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n    Dict can contain Series, arrays, constants, or list-like objects\n\n    .. versionchanged:: 0.23.0\n       If data is a dict, column order follows insertion-order for\n       Python 3.6 and later.\n\n    .. versionchanged:: 0.25.0\n       If data is a list of dicts, column order follows insertion-order\n       Python 3.6 and later.\n\nindex : Index or array-like\n    Index to use for resulting frame. Will default to RangeIndex if\n    no indexing information part of input data and no index provided\ncolumns : Index or array-like\n    Column labels to use for resulting frame. Will default to\n    RangeIndex (0, 1, 2, ..., n) if no column labels are provided\ndtype : dtype, default None\n    Data type to force. Only a single dtype is allowed. If None, infer\ncopy : boolean, default False\n    Copy data from inputs. Only affects DataFrame / 2d ndarray input\n\nSee Also\n--------\nDataFrame.from_records : Constructor from tuples, also record arrays.\nDataFrame.from_dict : From dicts of Series, arrays, or dicts.\nDataFrame.from_items : From sequence of (key, value) pairs\n    read_csv, pandas.read_table, pandas.read_clipboard.\n\nExamples\n--------\nConstructing DataFrame from a dictionary.\n\n>>> d = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df = pd.DataFrame(data=d)\n>>> df\n   col1  col2\n0     1     3\n1     2     4\n\nNotice that the inferred dtype is int64.\n\n>>> df.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n\nTo enforce a single dtype:\n\n>>> df = pd.DataFrame(data=d, dtype=np.int8)\n>>> df.dtypes\ncol1    int8\ncol2    int8\ndtype: object\n\nConstructing DataFrame from numpy ndarray:\n\n>>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n...                    columns=['a', 'b', 'c'])\n>>> df2\n   a  b  c\n0  1  2  3\n1  4  5  6\n2  7  8  9", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 301, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L301", "errors": [["SS06", "Summary should fit in a single line"], ["PR09", "Parameter \"data\" description should finish with \".\""], ["PR09", "Parameter \"index\" description should finish with \".\""], ["PR09", "Parameter \"columns\" description should finish with \".\""], ["PR09", "Parameter \"dtype\" description should finish with \".\""], ["PR06", "Parameter \"copy\" type should use \"bool\" instead of \"boolean\""], ["PR09", "Parameter \"copy\" description should finish with \".\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Constructor", "shared_code_with": ""}, "pandas.DataFrame.index": {"type": "AxisProperty", "docstring": "The index (row labels) of the DataFrame.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Attributes and underlying data", "shared_code_with": "pandas.io.formats.style.Styler.loader"}, "pandas.DataFrame.columns": {"type": "AxisProperty", "docstring": "The column labels of the DataFrame.", "deprecated": false, "file": null, "file_line": null, "github_link": "https://github.com/pandas-dev/pandas/blob/master/None#LNone", "errors": [["GL01", "Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)"], ["GL02", "Closing quotes should be placed in the line after the last text in the docstring (do not close the quotes in the same line as the text, or leave a blank line between the last text and the quotes)"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Attributes and underlying data", "shared_code_with": "pandas.DataFrame.index"}, "pandas.DataFrame.dtypes": {"type": "property", "docstring": "Return the dtypes in the DataFrame.\n\nThis returns a Series with the data type of each column.\nThe result's index is the original DataFrame's columns. Columns\nwith mixed types are stored with the ``object`` dtype. See\n:ref:`the User Guide <basics.dtypes>` for more.\n\nReturns\n-------\npandas.Series\n    The data type of each column.\n\nSee Also\n--------\nDataFrame.ftypes : Dtype and sparsity information.\n\nExamples\n--------\n>>> df = pd.DataFrame({'float': [1.0],\n...                    'int': [1],\n...                    'datetime': [pd.Timestamp('20180310')],\n...                    'string': ['foo']})\n>>> df.dtypes\nfloat              float64\nint                  int64\ndatetime    datetime64[ns]\nstring              object\ndtype: object", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 5577, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L5577", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Attributes and underlying data", "shared_code_with": ""}, "pandas.DataFrame.ftypes": {"type": "property", "docstring": "Return the ftypes (indication of sparse/dense and dtype) in DataFrame.\n\n.. deprecated:: 0.25.0\n   Use :func:`dtypes` instead.\n\nThis returns a Series with the data type of each column.\nThe result's index is the original DataFrame's columns. Columns\nwith mixed types are stored with the ``object`` dtype.  See\n:ref:`the User Guide <basics.dtypes>` for more.\n\nReturns\n-------\npandas.Series\n    The data type and indication of sparse/dense of each column.\n\nSee Also\n--------\nDataFrame.dtypes: Series with just dtype information.\nSparseDataFrame : Container for sparse tabular data.\n\nNotes\n-----\nSparse data should have the same dtypes as its dense representation.\n\nExamples\n--------\n>>> arr = np.random.RandomState(0).randn(100, 4)\n>>> arr[arr < .8] = np.nan\n>>> pd.DataFrame(arr).ftypes\n0    float64:dense\n1    float64:dense\n2    float64:dense\n3    float64:dense\ndtype: object\n\n>>> pd.SparseDataFrame(arr).ftypes  # doctest: +SKIP\n0    float64:sparse\n1    float64:sparse\n2    float64:sparse\n3    float64:sparse\ndtype: object", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 5613, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L5613", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Attributes and underlying data", "shared_code_with": ""}, "pandas.DataFrame.get_dtype_counts": {"type": "function", "docstring": "Return counts of unique dtypes in this object.\n\n.. deprecated:: 0.25.0\n\nUse `.dtypes.value_counts()` instead.\n\nReturns\n-------\ndtype : Series\n    Series with the count of columns with each dtype.\n\nSee Also\n--------\ndtypes : Return the dtypes in this object.\n\nExamples\n--------\n>>> a = [['a', 1, 1.0], ['b', 2, 2.0], ['c', 3, 3.0]]\n>>> df = pd.DataFrame(a, columns=['str', 'int', 'float'])\n>>> df\n  str  int  float\n0   a    1    1.0\n1   b    2    2.0\n2   c    3    3.0\n\n>>> df.get_dtype_counts()\nfloat64    1\nint64      1\nobject     1\ndtype: int64", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 5486, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L5486", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Attributes and underlying data", "shared_code_with": ""}, "pandas.DataFrame.get_ftype_counts": {"type": "function", "docstring": "Return counts of unique ftypes in this object.\n\n.. deprecated:: 0.23.0\n\nThis is useful for SparseDataFrame or for DataFrames containing\nsparse arrays.\n\nReturns\n-------\ndtype : Series\n    Series with the count of columns with each type and\n    sparsity (dense/sparse).\n\nSee Also\n--------\nftypes : Return ftypes (indication of sparse/dense and dtype) in\n    this object.\n\nExamples\n--------\n>>> a = [['a', 1, 1.0], ['b', 2, 2.0], ['c', 3, 3.0]]\n>>> df = pd.DataFrame(a, columns=['str', 'int', 'float'])\n>>> df\n  str  int  float\n0   a    1    1.0\n1   b    2    2.0\n2   c    3    3.0\n\n>>> df.get_ftype_counts()  # doctest: +SKIP\nfloat64:dense    1\nint64:dense      1\nobject:dense     1\ndtype: int64", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 5531, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L5531", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Attributes and underlying data", "shared_code_with": ""}, "pandas.DataFrame.select_dtypes": {"type": "function", "docstring": "Return a subset of the DataFrame's columns based on the column dtypes.\n\nParameters\n----------\ninclude, exclude : scalar or list-like\n    A selection of dtypes or strings to be included/excluded. At least\n    one of these parameters must be supplied.\n\nReturns\n-------\nDataFrame\n    The subset of the frame including the dtypes in ``include`` and\n    excluding the dtypes in ``exclude``.\n\nRaises\n------\nValueError\n    * If both of ``include`` and ``exclude`` are empty\n    * If ``include`` and ``exclude`` have overlapping elements\n    * If any kind of string dtype is passed in.\n\nNotes\n-----\n* To select all *numeric* types, use ``np.number`` or ``'number'``\n* To select strings you must use the ``object`` dtype, but note that\n  this will return *all* object dtype columns\n* See the `numpy dtype hierarchy\n  <http://docs.scipy.org/doc/numpy/reference/arrays.scalars.html>`__\n* To select datetimes, use ``np.datetime64``, ``'datetime'`` or\n  ``'datetime64'``\n* To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or\n  ``'timedelta64'``\n* To select Pandas categorical dtypes, use ``'category'``\n* To select Pandas datetimetz dtypes, use ``'datetimetz'`` (new in\n  0.20.0) or ``'datetime64[ns, tz]'``\n\nExamples\n--------\n>>> df = pd.DataFrame({'a': [1, 2] * 3,\n...                    'b': [True, False] * 3,\n...                    'c': [1.0, 2.0] * 3})\n>>> df\n        a      b  c\n0       1   True  1.0\n1       2  False  2.0\n2       1   True  1.0\n3       2  False  2.0\n4       1   True  1.0\n5       2  False  2.0\n\n>>> df.select_dtypes(include='bool')\n   b\n0  True\n1  False\n2  True\n3  False\n4  True\n5  False\n\n>>> df.select_dtypes(include=['float64'])\n   c\n0  1.0\n1  2.0\n2  1.0\n3  2.0\n4  1.0\n5  2.0\n\n>>> df.select_dtypes(exclude=['int'])\n       b    c\n0   True  1.0\n1  False  2.0\n2   True  1.0\n3  False  2.0\n4   True  1.0\n5  False  2.0", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 3357, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L3357", "errors": [["PR01", "Parameters {include, exclude} not documented"], ["PR02", "Unknown parameters {include, exclude}"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Attributes and underlying data", "shared_code_with": ""}, "pandas.DataFrame.values": {"type": "property", "docstring": "Return a Numpy representation of the DataFrame.\n\n.. warning::\n\n   We recommend using :meth:`DataFrame.to_numpy` instead.\n\nOnly the values in the DataFrame will be returned, the axes labels\nwill be removed.\n\nReturns\n-------\nnumpy.ndarray\n    The values of the DataFrame.\n\nSee Also\n--------\nDataFrame.to_numpy : Recommended alternative to this method.\nDataFrame.index : Retrieve the index labels.\nDataFrame.columns : Retrieving the column names.\n\nNotes\n-----\nThe dtype will be a lower-common-denominator dtype (implicit\nupcasting); that is to say if the dtypes (even of numeric types)\nare mixed, the one that accommodates all will be chosen. Use this\nwith care if you are not dealing with the blocks.\n\ne.g. If the dtypes are float16 and float32, dtype will be upcast to\nfloat32.  If dtypes are int32 and uint8, dtype will be upcast to\nint32. By :func:`numpy.find_common_type` convention, mixing int64\nand uint64 will result in a float64 dtype.\n\nExamples\n--------\nA DataFrame where all columns are the same type (e.g., int64) results\nin an array of the same type.\n\n>>> df = pd.DataFrame({'age':    [ 3,  29],\n...                    'height': [94, 170],\n...                    'weight': [31, 115]})\n>>> df\n   age  height  weight\n0    3      94      31\n1   29     170     115\n>>> df.dtypes\nage       int64\nheight    int64\nweight    int64\ndtype: object\n>>> df.values\narray([[  3,  94,  31],\n       [ 29, 170, 115]], dtype=int64)\n\nA DataFrame with mixed type columns(e.g., str/object, int64, float32)\nresults in an ndarray of the broadest type that accommodates these\nmixed types (e.g., object).\n\n>>> df2 = pd.DataFrame([('parrot',   24.0, 'second'),\n...                     ('lion',     80.5, 1),\n...                     ('monkey', np.nan, None)],\n...                   columns=('name', 'max_speed', 'rank'))\n>>> df2.dtypes\nname          object\nmax_speed    float64\nrank          object\ndtype: object\n>>> df2.values\narray([['parrot', 24.0, 'second'],\n       ['lion', 80.5, 1],\n       ['monkey', nan, None]], dtype=object)", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 5342, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L5342", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 51, in pandas.DataFrame.values\nFailed example:\n    df.values\nExpected:\n    array([[  3,  94,  31],\n           [ 29, 170, 115]], dtype=int64)\nGot:\n    array([[  3,  94,  31],\n           [ 29, 170, 115]])\n"], ["EX03", "flake8 error: E128 continuation line under-indented for visual indent"], ["EX03", "flake8 error: E201 whitespace after '['"], ["EX03", "flake8 error: E241 multiple spaces after ':' (4 times)"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 51, in pandas.DataFrame.values\nFailed example:\n    df.values\nExpected:\n    array([[  3,  94,  31],\n           [ 29, 170, 115]], dtype=int64)\nGot:\n    array([[  3,  94,  31],\n           [ 29, 170, 115]])\n", "in_api": true, "section": "", "subsection": "Attributes and underlying data", "shared_code_with": ""}, "pandas.DataFrame.get_values": {"type": "function", "docstring": "Return an ndarray after converting sparse values to dense.\n\n.. deprecated:: 0.25.0\n    Use ``np.asarray(..)`` or :meth:`DataFrame.values` instead.\n\nThis is the same as ``.values`` for non-sparse data. For sparse\ndata contained in a `SparseArray`, the data are first\nconverted to a dense representation.\n\nReturns\n-------\nnumpy.ndarray\n    Numpy representation of DataFrame.\n\nSee Also\n--------\nvalues : Numpy representation of DataFrame.\nSparseArray : Container for sparse data.\n\nExamples\n--------\n>>> df = pd.DataFrame({'a': [1, 2], 'b': [True, False],\n...                    'c': [1.0, 2.0]})\n>>> df\n   a      b    c\n0  1   True  1.0\n1  2  False  2.0\n\n>>> df.get_values()\narray([[1, True, 1.0], [2, False, 2.0]], dtype=object)\n\n>>> df = pd.DataFrame({\"a\": pd.SparseArray([1, None, None]),\n...                    \"c\": [1.0, 2.0, 3.0]})\n>>> df\n     a    c\n0  1.0  1.0\n1  NaN  2.0\n2  NaN  3.0\n\n>>> df.get_values()\narray([[ 1.,  1.],\n       [nan,  2.],\n       [nan,  3.]])", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 5429, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L5429", "errors": [["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 41, in pandas.DataFrame.get_values\nFailed example:\n    df.get_values()\nExpected:\n    array([[ 1.,  1.],\n           [nan,  2.],\n           [nan,  3.]])\nGot:\n    array([[1.0, 1.0],\n           [nan, 2.0],\n           [nan, 3.0]], dtype=object)\n"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 41, in pandas.DataFrame.get_values\nFailed example:\n    df.get_values()\nExpected:\n    array([[ 1.,  1.],\n           [nan,  2.],\n           [nan,  3.]])\nGot:\n    array([[1.0, 1.0],\n           [nan, 2.0],\n           [nan, 3.0]], dtype=object)\n", "in_api": true, "section": "", "subsection": "Attributes and underlying data", "shared_code_with": ""}, "pandas.DataFrame.axes": {"type": "property", "docstring": "Return a list representing the axes of the DataFrame.\n\nIt has the row axis labels and column axis labels as the only members.\nThey are returned in that order.\n\nExamples\n--------\n>>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n>>> df.axes\n[RangeIndex(start=0, stop=2, step=1), Index(['col1', 'col2'],\ndtype='object')]", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 487, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L487", "errors": [], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Attributes and underlying data", "shared_code_with": ""}, "pandas.DataFrame.ndim": {"type": "property", "docstring": "Return an int representing the number of axes / array dimensions.\n\nReturn 1 if Series. Otherwise return 2 if DataFrame.\n\nSee Also\n--------\nndarray.ndim : Number of array dimensions.\n\nExamples\n--------\n>>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n>>> s.ndim\n1\n\n>>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n>>> df.ndim\n2", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 513, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L513", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Attributes and underlying data", "shared_code_with": ""}, "pandas.DataFrame.size": {"type": "property", "docstring": "Return an int representing the number of elements in this object.\n\nReturn the number of rows if Series. Otherwise return the number of\nrows times number of columns if DataFrame.\n\nSee Also\n--------\nndarray.size : Number of elements in the array.\n\nExamples\n--------\n>>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n>>> s.size\n3\n\n>>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n>>> df.size\n4", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 536, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L536", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Attributes and underlying data", "shared_code_with": ""}, "pandas.DataFrame.shape": {"type": "property", "docstring": "Return a tuple representing the dimensionality of the DataFrame.\n\nSee Also\n--------\nndarray.shape\n\nExamples\n--------\n>>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n>>> df.shape\n(2, 2)\n\n>>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4],\n...                    'col3': [5, 6]})\n>>> df.shape\n(2, 3)", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 504, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L504", "errors": [["SA04", "Missing description for See Also \"ndarray.shape\" reference"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Attributes and underlying data", "shared_code_with": ""}, "pandas.DataFrame.memory_usage": {"type": "function", "docstring": "Return the memory usage of each column in bytes.\n\nThe memory usage can optionally include the contribution of\nthe index and elements of `object` dtype.\n\nThis value is displayed in `DataFrame.info` by default. This can be\nsuppressed by setting ``pandas.options.display.memory_usage`` to False.\n\nParameters\n----------\nindex : bool, default True\n    Specifies whether to include the memory usage of the DataFrame's\n    index in returned Series. If ``index=True``, the memory usage of\n    the index is the first item in the output.\ndeep : bool, default False\n    If True, introspect the data deeply by interrogating\n    `object` dtypes for system-level memory consumption, and include\n    it in the returned values.\n\nReturns\n-------\nSeries\n    A Series whose index is the original column names and whose values\n    is the memory usage of each column in bytes.\n\nSee Also\n--------\nnumpy.ndarray.nbytes : Total bytes consumed by the elements of an\n    ndarray.\nSeries.memory_usage : Bytes consumed by a Series.\nCategorical : Memory-efficient array for string values with\n    many repeated values.\nDataFrame.info : Concise summary of a DataFrame.\n\nExamples\n--------\n>>> dtypes = ['int64', 'float64', 'complex128', 'object', 'bool']\n>>> data = dict([(t, np.ones(shape=5000).astype(t))\n...              for t in dtypes])\n>>> df = pd.DataFrame(data)\n>>> df.head()\n   int64  float64            complex128  object  bool\n0      1      1.0    1.000000+0.000000j       1  True\n1      1      1.0    1.000000+0.000000j       1  True\n2      1      1.0    1.000000+0.000000j       1  True\n3      1      1.0    1.000000+0.000000j       1  True\n4      1      1.0    1.000000+0.000000j       1  True\n\n>>> df.memory_usage()\nIndex           128\nint64         40000\nfloat64       40000\ncomplex128    80000\nobject        40000\nbool           5000\ndtype: int64\n\n>>> df.memory_usage(index=False)\nint64         40000\nfloat64       40000\ncomplex128    80000\nobject        40000\nbool           5000\ndtype: int64\n\nThe memory footprint of `object` dtype columns is ignored by default:\n\n>>> df.memory_usage(deep=True)\nIndex            128\nint64          40000\nfloat64        40000\ncomplex128     80000\nobject        160000\nbool            5000\ndtype: int64\n\nUse a Categorical for efficient storage of an object-dtype column with\nmany repeated values.\n\n>>> df['object'].astype('category').memory_usage(deep=True)\n5216", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 2540, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L2540", "errors": [["EX03", "flake8 error: C404 Unnecessary list comprehension - rewrite as a dict comprehension."]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Attributes and underlying data", "shared_code_with": ""}, "pandas.DataFrame.empty": {"type": "property", "docstring": "Indicator whether DataFrame is empty.\n\nTrue if DataFrame is entirely empty (no items), meaning any of the\naxes are of length 0.\n\nReturns\n-------\nbool\n    If DataFrame is empty, return True, if not return False.\n\nSee Also\n--------\nSeries.dropna\nDataFrame.dropna\n\nNotes\n-----\nIf DataFrame contains only NaNs, it is still not considered empty. See\nthe example below.\n\nExamples\n--------\nAn example of an actual empty DataFrame. Notice the index is empty:\n\n>>> df_empty = pd.DataFrame({'A' : []})\n>>> df_empty\nEmpty DataFrame\nColumns: [A]\nIndex: []\n>>> df_empty.empty\nTrue\n\nIf we only have NaNs in our DataFrame, it is not considered empty! We\nwill need to drop the NaNs to make the DataFrame empty:\n\n>>> df = pd.DataFrame({'A' : [np.nan]})\n>>> df\n    A\n0 NaN\n>>> df.empty\nFalse\n>>> df.dropna().empty\nTrue", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 1913, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L1913", "errors": [["SA04", "Missing description for See Also \"Series.dropna\" reference"], ["SA04", "Missing description for See Also \"DataFrame.dropna\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Attributes and underlying data", "shared_code_with": ""}, "pandas.DataFrame.is_copy": {"type": "property", "docstring": "Return the copy.", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 206, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L206", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Attributes and underlying data", "shared_code_with": "pandas.Series.is_copy"}, "pandas.DataFrame.astype": {"type": "function", "docstring": "Cast a pandas object to a specified dtype ``dtype``.\n\nParameters\n----------\ndtype : data type, or dict of column name -> data type\n    Use a numpy.dtype or Python type to cast entire pandas object to\n    the same type. Alternatively, use {col: dtype, ...}, where col is a\n    column label and dtype is a numpy.dtype or Python type to cast one\n    or more of the DataFrame's columns to column-specific types.\ncopy : bool, default True\n    Return a copy when ``copy=True`` (be very careful setting\n    ``copy=False`` as changes to values then may propagate to other\n    pandas objects).\nerrors : {'raise', 'ignore'}, default 'raise'\n    Control raising of exceptions on invalid data for provided dtype.\n\n    - ``raise`` : allow exceptions to be raised\n    - ``ignore`` : suppress exceptions. On error return original object\n\n    .. versionadded:: 0.20.0\n\nkwargs : keyword arguments to pass on to the constructor\n\nReturns\n-------\ncasted : same type as caller\n\nSee Also\n--------\nto_datetime : Convert argument to datetime.\nto_timedelta : Convert argument to timedelta.\nto_numeric : Convert argument to a numeric type.\nnumpy.ndarray.astype : Cast a numpy array to a specified type.\n\nExamples\n--------\nCreate a DataFrame:\n\n>>> d = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df = pd.DataFrame(data=d)\n>>> df.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n\nCast all columns to int32:\n\n>>> df.astype('int32').dtypes\ncol1    int32\ncol2    int32\ndtype: object\n\nCast col1 to int32 using a dictionary:\n\n>>> df.astype({'col1': 'int32'}).dtypes\ncol1    int32\ncol2    int64\ndtype: object\n\nCreate a series:\n\n>>> ser = pd.Series([1, 2], dtype='int32')\n>>> ser\n0    1\n1    2\ndtype: int32\n>>> ser.astype('int64')\n0    1\n1    2\ndtype: int64\n\nConvert to categorical type:\n\n>>> ser.astype('category')\n0    1\n1    2\ndtype: category\nCategories (2, int64): [1, 2]\n\nConvert to ordered categorical type with custom ordering:\n\n>>> cat_dtype = pd.api.types.CategoricalDtype(\n...                     categories=[2, 1], ordered=True)\n>>> ser.astype(cat_dtype)\n0    1\n1    2\ndtype: category\nCategories (2, int64): [2 < 1]\n\nNote that using ``copy=False`` and changing data on a new\npandas object may propagate changes:\n\n>>> s1 = pd.Series([1,2])\n>>> s2 = s1.astype('int64', copy=False)\n>>> s2[0] = 10\n>>> s1  # note that s1[0] has changed too\n0    10\n1     2\ndtype: int64", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 5717, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L5717", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {kwargs}"], ["PR09", "Parameter \"errors\" description should finish with \".\""], ["PR07", "Parameter \"kwargs\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["EX03", "flake8 error: E126 continuation line over-indented for hanging indent"], ["EX03", "flake8 error: E231 missing whitespace after ','"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Conversion", "shared_code_with": "pandas.Series.astype"}, "pandas.DataFrame.infer_objects": {"type": "function", "docstring": "Attempt to infer better dtypes for object columns.\n\nAttempts soft conversion of object-dtyped\ncolumns, leaving non-object and unconvertible\ncolumns unchanged. The inference rules are the\nsame as during normal Series/DataFrame construction.\n\n.. versionadded:: 0.21.0\n\nReturns\n-------\nconverted : same type as input object\n\nSee Also\n--------\nto_datetime : Convert argument to datetime.\nto_timedelta : Convert argument to timedelta.\nto_numeric : Convert argument to numeric type.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"A\": [\"a\", 1, 2, 3]})\n>>> df = df.iloc[1:]\n>>> df\n   A\n1  1\n2  2\n3  3\n\n>>> df.dtypes\nA    object\ndtype: object\n\n>>> df.infer_objects().dtypes\nA    int64\ndtype: object", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 6030, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L6030", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Conversion", "shared_code_with": "pandas.Series.infer_objects"}, "pandas.DataFrame.copy": {"type": "function", "docstring": "Make a copy of this object's indices and data.\n\nWhen ``deep=True`` (default), a new object will be created with a\ncopy of the calling object's data and indices. Modifications to\nthe data or indices of the copy will not be reflected in the\noriginal object (see notes below).\n\nWhen ``deep=False``, a new object will be created without copying\nthe calling object's data or index (only references to the data\nand index are copied). Any changes to the data of the original\nwill be reflected in the shallow copy (and vice versa).\n\nParameters\n----------\ndeep : bool, default True\n    Make a deep copy, including a copy of the data and the indices.\n    With ``deep=False`` neither the indices nor the data are copied.\n\nReturns\n-------\ncopy : Series or DataFrame\n    Object type matches caller.\n\nNotes\n-----\nWhen ``deep=True``, data is copied but actual Python objects\nwill not be copied recursively, only the reference to the object.\nThis is in contrast to `copy.deepcopy` in the Standard Library,\nwhich recursively copies object data (see examples below).\n\nWhile ``Index`` objects are copied when ``deep=True``, the underlying\nnumpy array is not copied for performance reasons. Since ``Index`` is\nimmutable, the underlying data can be safely shared and a copy\nis not needed.\n\nExamples\n--------\n>>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n>>> s\na    1\nb    2\ndtype: int64\n\n>>> s_copy = s.copy()\n>>> s_copy\na    1\nb    2\ndtype: int64\n\n**Shallow copy versus default (deep) copy:**\n\n>>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n>>> deep = s.copy()\n>>> shallow = s.copy(deep=False)\n\nShallow copy shares data and index with original.\n\n>>> s is shallow\nFalse\n>>> s.values is shallow.values and s.index is shallow.index\nTrue\n\nDeep copy has own copy of data and index.\n\n>>> s is deep\nFalse\n>>> s.values is deep.values or s.index is deep.index\nFalse\n\nUpdates to the data shared by shallow copy and original is reflected\nin both; deep copy remains unchanged.\n\n>>> s[0] = 3\n>>> shallow[1] = 4\n>>> s\na    3\nb    4\ndtype: int64\n>>> shallow\na    3\nb    4\ndtype: int64\n>>> deep\na    1\nb    2\ndtype: int64\n\nNote that when copying an object containing Python objects, a deep copy\nwill copy the data, but will not do so recursively. Updating a nested\ndata object will be reflected in the deep copy.\n\n>>> s = pd.Series([[1, 2], [3, 4]])\n>>> deep = s.copy()\n>>> s[0][0] = 10\n>>> s\n0    [10, 2]\n1     [3, 4]\ndtype: object\n>>> deep\n0    [10, 2]\n1     [3, 4]\ndtype: object", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 5866, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L5866", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Conversion", "shared_code_with": "pandas.Series.copy"}, "pandas.DataFrame.isna": {"type": "function", "docstring": "Detect missing values.\n\nReturn a boolean same-sized object indicating if the values are NA.\nNA values, such as None or :attr:`numpy.NaN`, gets mapped to True\nvalues.\nEverything else gets mapped to False values. Characters such as empty\nstrings ``''`` or :attr:`numpy.inf` are not considered NA values\n(unless you set ``pandas.options.mode.use_inf_as_na = True``).\n\nReturns\n-------\nDataFrame\n    Mask of bool values for each element in DataFrame that\n    indicates whether an element is not an NA value.\n\nSee Also\n--------\nDataFrame.isnull : Alias of isna.\nDataFrame.notna : Boolean inverse of isna.\nDataFrame.dropna : Omit axes labels with missing values.\nisna : Top-level isna.\n\nExamples\n--------\nShow which entries in a DataFrame are NA.\n\n>>> df = pd.DataFrame({'age': [5, 6, np.NaN],\n...                    'born': [pd.NaT, pd.Timestamp('1939-05-27'),\n...                             pd.Timestamp('1940-04-25')],\n...                    'name': ['Alfred', 'Batman', ''],\n...                    'toy': [None, 'Batmobile', 'Joker']})\n>>> df\n   age       born    name        toy\n0  5.0        NaT  Alfred       None\n1  6.0 1939-05-27  Batman  Batmobile\n2  NaN 1940-04-25              Joker\n\n>>> df.isna()\n     age   born   name    toy\n0  False   True  False   True\n1  False  False  False  False\n2   True  False  False  False\n\nShow which entries in a Series are NA.\n\n>>> ser = pd.Series([5, 6, np.NaN])\n>>> ser\n0    5.0\n1    6.0\n2    NaN\ndtype: float64\n\n>>> ser.isna()\n0    False\n1    False\n2     True\ndtype: bool", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 4643, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L4643", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Conversion", "shared_code_with": ""}, "pandas.DataFrame.notna": {"type": "function", "docstring": "Detect existing (non-missing) values.\n\nReturn a boolean same-sized object indicating if the values are not NA.\nNon-missing values get mapped to True. Characters such as empty\nstrings ``''`` or :attr:`numpy.inf` are not considered NA values\n(unless you set ``pandas.options.mode.use_inf_as_na = True``).\nNA values, such as None or :attr:`numpy.NaN`, get mapped to False\nvalues.\n\nReturns\n-------\nDataFrame\n    Mask of bool values for each element in DataFrame that\n    indicates whether an element is not an NA value.\n\nSee Also\n--------\nDataFrame.notnull : Alias of notna.\nDataFrame.isna : Boolean inverse of notna.\nDataFrame.dropna : Omit axes labels with missing values.\nnotna : Top-level notna.\n\nExamples\n--------\nShow which entries in a DataFrame are not NA.\n\n>>> df = pd.DataFrame({'age': [5, 6, np.NaN],\n...                    'born': [pd.NaT, pd.Timestamp('1939-05-27'),\n...                             pd.Timestamp('1940-04-25')],\n...                    'name': ['Alfred', 'Batman', ''],\n...                    'toy': [None, 'Batmobile', 'Joker']})\n>>> df\n   age       born    name        toy\n0  5.0        NaT  Alfred       None\n1  6.0 1939-05-27  Batman  Batmobile\n2  NaN 1940-04-25              Joker\n\n>>> df.notna()\n     age   born  name    toy\n0   True  False  True  False\n1   True   True  True   True\n2  False   True  True   True\n\nShow which entries in a Series are not NA.\n\n>>> ser = pd.Series([5, 6, np.NaN])\n>>> ser\n0    5.0\n1    6.0\n2    NaN\ndtype: float64\n\n>>> ser.notna()\n0     True\n1     True\n2    False\ndtype: bool", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 4651, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L4651", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Conversion", "shared_code_with": ""}, "pandas.DataFrame.bool": {"type": "function", "docstring": "Return the bool of a single element PandasObject.\n\nThis must be a boolean scalar value, either True or False.  Raise a\nValueError if the PandasObject does not have exactly 1 element, or that\nelement is not boolean\n\nReturns\n-------\nbool\n    Same single boolean value converted to bool type.", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 1536, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L1536", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Conversion", "shared_code_with": "pandas.Series.bool"}, "pandas.DataFrame.head": {"type": "function", "docstring": "Return the first `n` rows.\n\nThis function returns the first `n` rows for the object based\non position. It is useful for quickly testing if your object\nhas the right type of data in it.\n\nParameters\n----------\nn : int, default 5\n    Number of rows to select.\n\nReturns\n-------\nobj_head : same type as caller\n    The first `n` rows of the caller object.\n\nSee Also\n--------\nDataFrame.tail: Returns the last `n` rows.\n\nExamples\n--------\n>>> df = pd.DataFrame({'animal':['alligator', 'bee', 'falcon', 'lion',\n...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n>>> df\n      animal\n0  alligator\n1        bee\n2     falcon\n3       lion\n4     monkey\n5     parrot\n6      shark\n7      whale\n8      zebra\n\nViewing the first 5 lines\n\n>>> df.head()\n      animal\n0  alligator\n1        bee\n2     falcon\n3       lion\n4     monkey\n\nViewing the first `n` lines (three in this case)\n\n>>> df.head(3)\n      animal\n0  alligator\n1        bee\n2     falcon", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 4652, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L4652", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["EX03", "flake8 error: E231 missing whitespace after ':'"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": "pandas.DataFrame.head"}, "pandas.DataFrame.at": {"type": "property", "docstring": "Access a single value for a row/column label pair.\n\nSimilar to ``loc``, in that both provide label-based lookups. Use\n``at`` if you only need to get or set a single value in a DataFrame\nor Series.\n\nRaises\n------\nKeyError\n    When label does not exist in DataFrame\n\nSee Also\n--------\nDataFrame.iat : Access a single value for a row/column pair by integer\n    position.\nDataFrame.loc : Access a group of rows and columns by label(s).\nSeries.at : Access a single value using a label.\n\nExamples\n--------\n>>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],\n...                   index=[4, 5, 6], columns=['A', 'B', 'C'])\n>>> df\n    A   B   C\n4   0   2   3\n5   0   4   1\n6  10  20  30\n\nGet value at specified row/column pair\n\n>>> df.at[4, 'B']\n2\n\nSet value at specified row/column pair\n\n>>> df.at[4, 'B'] = 10\n>>> df.at[4, 'B']\n10\n\nGet value within a Series\n\n>>> df.loc[5].at['B']\n4", "deprecated": false, "file": "pandas/core/indexing.py", "file_line": 2196, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexing.py#L2196", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": "pandas.Series.at"}, "pandas.DataFrame.iat": {"type": "property", "docstring": "Access a single value for a row/column pair by integer position.\n\nSimilar to ``iloc``, in that both provide integer-based lookups. Use\n``iat`` if you only need to get or set a single value in a DataFrame\nor Series.\n\nRaises\n------\nIndexError\n    When integer position is out of bounds\n\nSee Also\n--------\nDataFrame.at : Access a single value for a row/column label pair.\nDataFrame.loc : Access a group of rows and columns by label(s).\nDataFrame.iloc : Access a group of rows and columns by integer position(s).\n\nExamples\n--------\n>>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],\n...                   columns=['A', 'B', 'C'])\n>>> df\n    A   B   C\n0   0   2   3\n1   0   4   1\n2  10  20  30\n\nGet value at specified row/column pair\n\n>>> df.iat[1, 2]\n1\n\nSet value at specified row/column pair\n\n>>> df.iat[1, 2] = 10\n>>> df.iat[1, 2]\n10\n\nGet value within a series\n\n>>> df.loc[0].iat[1]\n2", "deprecated": false, "file": "pandas/core/indexing.py", "file_line": 2271, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexing.py#L2271", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": "pandas.Series.iat"}, "pandas.DataFrame.loc": {"type": "property", "docstring": "Access a group of rows and columns by label(s) or a boolean array.\n\n``.loc[]`` is primarily label based, but may also be used with a\nboolean array.\n\nAllowed inputs are:\n\n- A single label, e.g. ``5`` or ``'a'``, (note that ``5`` is\n  interpreted as a *label* of the index, and **never** as an\n  integer position along the index).\n- A list or array of labels, e.g. ``['a', 'b', 'c']``.\n- A slice object with labels, e.g. ``'a':'f'``.\n\n  .. warning:: Note that contrary to usual python slices, **both** the\n      start and the stop are included\n\n- A boolean array of the same length as the axis being sliced,\n  e.g. ``[True, False, True]``.\n- A ``callable`` function with one argument (the calling Series or\n  DataFrame) and that returns valid output for indexing (one of the above)\n\nSee more at :ref:`Selection by Label <indexing.label>`\n\nRaises\n------\nKeyError:\n    when any items are not found\n\nSee Also\n--------\nDataFrame.at : Access a single value for a row/column label pair.\nDataFrame.iloc : Access group of rows and columns by integer position(s).\nDataFrame.xs : Returns a cross-section (row(s) or column(s)) from the\n    Series/DataFrame.\nSeries.loc : Access group of values using labels.\n\nExamples\n--------\n**Getting values**\n\n>>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n...      index=['cobra', 'viper', 'sidewinder'],\n...      columns=['max_speed', 'shield'])\n>>> df\n            max_speed  shield\ncobra               1       2\nviper               4       5\nsidewinder          7       8\n\nSingle label. Note this returns the row as a Series.\n\n>>> df.loc['viper']\nmax_speed    4\nshield       5\nName: viper, dtype: int64\n\nList of labels. Note using ``[[]]`` returns a DataFrame.\n\n>>> df.loc[['viper', 'sidewinder']]\n            max_speed  shield\nviper               4       5\nsidewinder          7       8\n\nSingle label for row and column\n\n>>> df.loc['cobra', 'shield']\n2\n\nSlice with labels for row and single label for column. As mentioned\nabove, note that both the start and stop of the slice are included.\n\n>>> df.loc['cobra':'viper', 'max_speed']\ncobra    1\nviper    4\nName: max_speed, dtype: int64\n\nBoolean list with the same length as the row axis\n\n>>> df.loc[[False, False, True]]\n            max_speed  shield\nsidewinder          7       8\n\nConditional that returns a boolean Series\n\n>>> df.loc[df['shield'] > 6]\n            max_speed  shield\nsidewinder          7       8\n\nConditional that returns a boolean Series with column labels specified\n\n>>> df.loc[df['shield'] > 6, ['max_speed']]\n            max_speed\nsidewinder          7\n\nCallable that returns a boolean Series\n\n>>> df.loc[lambda df: df['shield'] == 8]\n            max_speed  shield\nsidewinder          7       8\n\n**Setting values**\n\nSet value for all items matching the list of labels\n\n>>> df.loc[['viper', 'sidewinder'], ['shield']] = 50\n>>> df\n            max_speed  shield\ncobra               1       2\nviper               4      50\nsidewinder          7      50\n\nSet value for an entire row\n\n>>> df.loc['cobra'] = 10\n>>> df\n            max_speed  shield\ncobra              10      10\nviper               4      50\nsidewinder          7      50\n\nSet value for an entire column\n\n>>> df.loc[:, 'max_speed'] = 30\n>>> df\n            max_speed  shield\ncobra              30      10\nviper              30      50\nsidewinder         30      50\n\nSet value for rows matching callable condition\n\n>>> df.loc[df['shield'] > 35] = 0\n>>> df\n            max_speed  shield\ncobra              30      10\nviper               0       0\nsidewinder          0       0\n\n**Getting values on a DataFrame with an index that has integer labels**\n\nAnother example using integers for the index\n\n>>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n...      index=[7, 8, 9], columns=['max_speed', 'shield'])\n>>> df\n   max_speed  shield\n7          1       2\n8          4       5\n9          7       8\n\nSlice with integer labels for rows. As mentioned above, note that both\nthe start and stop of the slice are included.\n\n>>> df.loc[7:9]\n   max_speed  shield\n7          1       2\n8          4       5\n9          7       8\n\n**Getting values with a MultiIndex**\n\nA number of examples using a DataFrame with a MultiIndex\n\n>>> tuples = [\n...    ('cobra', 'mark i'), ('cobra', 'mark ii'),\n...    ('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n...    ('viper', 'mark ii'), ('viper', 'mark iii')\n... ]\n>>> index = pd.MultiIndex.from_tuples(tuples)\n>>> values = [[12, 2], [0, 4], [10, 20],\n...         [1, 4], [7, 1], [16, 36]]\n>>> df = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\n>>> df\n                     max_speed  shield\ncobra      mark i           12       2\n           mark ii           0       4\nsidewinder mark i           10      20\n           mark ii           1       4\nviper      mark ii           7       1\n           mark iii         16      36\n\nSingle label. Note this returns a DataFrame with a single index.\n\n>>> df.loc['cobra']\n         max_speed  shield\nmark i          12       2\nmark ii          0       4\n\nSingle index tuple. Note this returns a Series.\n\n>>> df.loc[('cobra', 'mark ii')]\nmax_speed    0\nshield       4\nName: (cobra, mark ii), dtype: int64\n\nSingle label for row and column. Similar to passing in a tuple, this\nreturns a Series.\n\n>>> df.loc['cobra', 'mark i']\nmax_speed    12\nshield        2\nName: (cobra, mark i), dtype: int64\n\nSingle tuple. Note using ``[[]]`` returns a DataFrame.\n\n>>> df.loc[[('cobra', 'mark ii')]]\n               max_speed  shield\ncobra mark ii          0       4\n\nSingle tuple for the index with a single label for the column\n\n>>> df.loc[('cobra', 'mark i'), 'shield']\n2\n\nSlice from index tuple to single label\n\n>>> df.loc[('cobra', 'mark i'):'viper']\n                     max_speed  shield\ncobra      mark i           12       2\n           mark ii           0       4\nsidewinder mark i           10      20\n           mark ii           1       4\nviper      mark ii           7       1\n           mark iii         16      36\n\nSlice from index tuple to index tuple\n\n>>> df.loc[('cobra', 'mark i'):('viper', 'mark ii')]\n                    max_speed  shield\ncobra      mark i          12       2\n           mark ii          0       4\nsidewinder mark i          10      20\n           mark ii          1       4\nviper      mark ii          7       1", "deprecated": false, "file": "pandas/core/indexing.py", "file_line": 1443, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexing.py#L1443", "errors": [["EX03", "flake8 error: E121 continuation line under-indented for hanging indent"], ["EX03", "flake8 error: E126 continuation line over-indented for hanging indent"], ["EX03", "flake8 error: E128 continuation line under-indented for visual indent (3 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": "pandas.Series.loc"}, "pandas.DataFrame.iloc": {"type": "property", "docstring": "Purely integer-location based indexing for selection by position.\n\n``.iloc[]`` is primarily integer position based (from ``0`` to\n``length-1`` of the axis), but may also be used with a boolean\narray.\n\nAllowed inputs are:\n\n- An integer, e.g. ``5``.\n- A list or array of integers, e.g. ``[4, 3, 0]``.\n- A slice object with ints, e.g. ``1:7``.\n- A boolean array.\n- A ``callable`` function with one argument (the calling Series or\n  DataFrame) and that returns valid output for indexing (one of the above).\n  This is useful in method chains, when you don't have a reference to the\n  calling object, but would like to base your selection on some value.\n\n``.iloc`` will raise ``IndexError`` if a requested indexer is\nout-of-bounds, except *slice* indexers which allow out-of-bounds\nindexing (this conforms with python/numpy *slice* semantics).\n\nSee more at :ref:`Selection by Position <indexing.integer>`.\n\nSee Also\n--------\nDataFrame.iat : Fast integer location scalar accessor.\nDataFrame.loc : Purely label-location based indexer for selection by label.\nSeries.iloc : Purely integer-location based indexing for\n               selection by position.\n\nExamples\n--------\n\n>>> mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},\n...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},\n...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000 }]\n>>> df = pd.DataFrame(mydict)\n>>> df\n      a     b     c     d\n0     1     2     3     4\n1   100   200   300   400\n2  1000  2000  3000  4000\n\n**Indexing just the rows**\n\nWith a scalar integer.\n\n>>> type(df.iloc[0])\n<class 'pandas.core.series.Series'>\n>>> df.iloc[0]\na    1\nb    2\nc    3\nd    4\nName: 0, dtype: int64\n\nWith a list of integers.\n\n>>> df.iloc[[0]]\n   a  b  c  d\n0  1  2  3  4\n>>> type(df.iloc[[0]])\n<class 'pandas.core.frame.DataFrame'>\n\n>>> df.iloc[[0, 1]]\n     a    b    c    d\n0    1    2    3    4\n1  100  200  300  400\n\nWith a `slice` object.\n\n>>> df.iloc[:3]\n      a     b     c     d\n0     1     2     3     4\n1   100   200   300   400\n2  1000  2000  3000  4000\n\nWith a boolean mask the same length as the index.\n\n>>> df.iloc[[True, False, True]]\n      a     b     c     d\n0     1     2     3     4\n2  1000  2000  3000  4000\n\nWith a callable, useful in method chains. The `x` passed\nto the ``lambda`` is the DataFrame being sliced. This selects\nthe rows whose index label even.\n\n>>> df.iloc[lambda x: x.index % 2 == 0]\n      a     b     c     d\n0     1     2     3     4\n2  1000  2000  3000  4000\n\n**Indexing both axes**\n\nYou can mix the indexer types for the index and columns. Use ``:`` to\nselect the entire axis.\n\nWith scalar integers.\n\n>>> df.iloc[0, 1]\n2\n\nWith lists of integers.\n\n>>> df.iloc[[0, 2], [1, 3]]\n      b     d\n0     2     4\n2  2000  4000\n\nWith `slice` objects.\n\n>>> df.iloc[1:3, 0:3]\n      a     b     c\n1   100   200   300\n2  1000  2000  3000\n\nWith a boolean array whose length matches the columns.\n\n>>> df.iloc[:, [True, False, True, False]]\n      a     c\n0     1     3\n1   100   300\n2  1000  3000\n\nWith a callable function that expects the Series or DataFrame.\n\n>>> df.iloc[:, lambda df: [0, 2]]\n      a     c\n0     1     3\n1   100   300\n2  1000  3000", "deprecated": false, "file": "pandas/core/indexing.py", "file_line": 1831, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexing.py#L1831", "errors": [["EX03", "flake8 error: E202 whitespace before '}'"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": "pandas.Series.iloc"}, "pandas.DataFrame.insert": {"type": "function", "docstring": "Insert column into DataFrame at specified location.\n\nRaises a ValueError if `column` is already contained in the DataFrame,\nunless `allow_duplicates` is set to True.\n\nParameters\n----------\nloc : int\n    Insertion index. Must verify 0 <= loc <= len(columns)\ncolumn : string, number, or hashable object\n    label of the inserted column\nvalue : int, Series, or array-like\nallow_duplicates : bool, optional", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 3498, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L3498", "errors": [["PR09", "Parameter \"loc\" description should finish with \".\""], ["PR06", "Parameter \"column\" type should use \"str\" instead of \"string\""], ["PR08", "Parameter \"column\" description should start with a capital letter"], ["PR09", "Parameter \"column\" description should finish with \".\""], ["PR07", "Parameter \"value\" has no description"], ["PR07", "Parameter \"allow_duplicates\" has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": ""}, "pandas.DataFrame.__iter__": {"type": "function", "docstring": "Iterate over info axis.\n\nReturns\n-------\niterator\n    Info axis as iterator.", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 1864, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L1864", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": ""}, "pandas.DataFrame.items": {"type": "function", "docstring": "Iterate over (column name, Series) pairs.\n\nIterates over the DataFrame columns, returning a tuple with\nthe column name and the content as a Series.\n\nYields\n------\nlabel : object\n    The column names for the DataFrame being iterated over.\ncontent : Series\n    The column entries belonging to each label, as a Series.\n\nSee Also\n--------\nDataFrame.iterrows : Iterate over DataFrame rows as\n    (index, Series) pairs.\nDataFrame.itertuples : Iterate over DataFrame rows as namedtuples\n    of the values.\n\nExamples\n--------\n>>> df = pd.DataFrame({'species': ['bear', 'bear', 'marsupial'],\n...                   'population': [1864, 22000, 80000]},\n...                   index=['panda', 'polar', 'koala'])\n>>> df\n        species   population\npanda   bear      1864\npolar   bear      22000\nkoala   marsupial 80000\n>>> for label, content in df.items():\n...     print('label:', label)\n...     print('content:', content, sep='\\n')\n...\nlabel: species\ncontent:\npanda         bear\npolar         bear\nkoala    marsupial\nName: species, dtype: object\nlabel: population\ncontent:\npanda     1864\npolar    22000\nkoala    80000\nName: population, dtype: int64", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 820, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L820", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": ""}, "pandas.DataFrame.iteritems": {"type": "function", "docstring": "Iterate over (column name, Series) pairs.\n\nIterates over the DataFrame columns, returning a tuple with\nthe column name and the content as a Series.\n\nYields\n------\nlabel : object\n    The column names for the DataFrame being iterated over.\ncontent : Series\n    The column entries belonging to each label, as a Series.\n\nSee Also\n--------\nDataFrame.iterrows : Iterate over DataFrame rows as\n    (index, Series) pairs.\nDataFrame.itertuples : Iterate over DataFrame rows as namedtuples\n    of the values.\n\nExamples\n--------\n>>> df = pd.DataFrame({'species': ['bear', 'bear', 'marsupial'],\n...                   'population': [1864, 22000, 80000]},\n...                   index=['panda', 'polar', 'koala'])\n>>> df\n        species   population\npanda   bear      1864\npolar   bear      22000\nkoala   marsupial 80000\n>>> for label, content in df.items():\n...     print('label:', label)\n...     print('content:', content, sep='\\n')\n...\nlabel: species\ncontent:\npanda         bear\npolar         bear\nkoala    marsupial\nName: species, dtype: object\nlabel: population\ncontent:\npanda     1864\npolar    22000\nkoala    80000\nName: population, dtype: int64", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 829, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L829", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": ""}, "pandas.DataFrame.keys": {"type": "function", "docstring": "Get the 'info axis' (see Indexing for more)\n\nThis is index for Series, columns for DataFrame.\n\nReturns\n-------\nIndex\n    Info axis.", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 1876, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L1876", "errors": [["SS03", "Summary does not end with a period"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": ""}, "pandas.DataFrame.iterrows": {"type": "function", "docstring": "Iterate over DataFrame rows as (index, Series) pairs.\n\nYields\n------\nindex : label or tuple of label\n    The index of the row. A tuple for a `MultiIndex`.\ndata : Series\n    The data of the row as a Series.\n\nit : generator\n    A generator that iterates over the rows of the frame.\n\nSee Also\n--------\nDataFrame.itertuples : Iterate over DataFrame rows as namedtuples of the values.\nDataFrame.items : Iterate over (column name, Series) pairs.\n\nNotes\n-----\n\n1. Because ``iterrows`` returns a Series for each row,\n   it does **not** preserve dtypes across the rows (dtypes are\n   preserved across columns for DataFrames). For example,\n\n   >>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])\n   >>> row = next(df.iterrows())[1]\n   >>> row\n   int      1.0\n   float    1.5\n   Name: 0, dtype: float64\n   >>> print(row['int'].dtype)\n   float64\n   >>> print(df['int'].dtype)\n   int64\n\n   To preserve dtypes while iterating over the rows, it is better\n   to use :meth:`itertuples` which returns namedtuples of the values\n   and which is generally faster than ``iterrows``.\n\n2. You should **never modify** something you are iterating over.\n   This is not guaranteed to work in all cases. Depending on the\n   data types, the iterator returns a copy and not a view, and writing\n   to it will have no effect.", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L833", "errors": [], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": ""}, "pandas.DataFrame.itertuples": {"type": "function", "docstring": "Iterate over DataFrame rows as namedtuples.\n\nParameters\n----------\nindex : bool, default True\n    If True, return the index as the first element of the tuple.\nname : str or None, default \"Pandas\"\n    The name of the returned namedtuples or None to return regular\n    tuples.\n\nReturns\n-------\niterator\n    An object to iterate over namedtuples for each row in the\n    DataFrame with the first field possibly being the index and\n    following fields being the column values.\n\nSee Also\n--------\nDataFrame.iterrows : Iterate over DataFrame rows as (index, Series)\n    pairs.\nDataFrame.items : Iterate over (column name, Series) pairs.\n\nNotes\n-----\nThe column names will be renamed to positional names if they are\ninvalid Python identifiers, repeated, or start with an underscore.\nWith a large number of columns (>255), regular tuples are returned.\n\nExamples\n--------\n>>> df = pd.DataFrame({'num_legs': [4, 2], 'num_wings': [0, 2]},\n...                   index=['dog', 'hawk'])\n>>> df\n      num_legs  num_wings\ndog          4          0\nhawk         2          2\n>>> for row in df.itertuples():\n...     print(row)\n...\nPandas(Index='dog', num_legs=4, num_wings=0)\nPandas(Index='hawk', num_legs=2, num_wings=2)\n\nBy setting the `index` parameter to False we can remove the index\nas the first element of the tuple:\n\n>>> for row in df.itertuples(index=False):\n...     print(row)\n...\nPandas(num_legs=4, num_wings=0)\nPandas(num_legs=2, num_wings=2)\n\nWith the `name` parameter set we set a custom name for the yielded\nnamedtuples:\n\n>>> for row in df.itertuples(name='Animal'):\n...     print(row)\n...\nAnimal(Index='dog', num_legs=4, num_wings=0)\nAnimal(Index='hawk', num_legs=2, num_wings=2)", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 885, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L885", "errors": [["YD01", "No Yields section found"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": ""}, "pandas.DataFrame.lookup": {"type": "function", "docstring": "Label-based \"fancy indexing\" function for DataFrame.\n\nGiven equal-length arrays of row and column labels, return an\narray of the values corresponding to each (row, col) pair.\n\nParameters\n----------\nrow_labels : sequence\n    The row labels to use for lookup\ncol_labels : sequence\n    The column labels to use for lookup\n\nReturns\n-------\nnumpy.ndarray\n\nNotes\n-----\nAkin to::\n\n    result = [df.get_value(row, col)\n              for row, col in zip(row_labels, col_labels)]\n\nExamples\n--------\nvalues : ndarray\n    The found values", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 3719, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L3719", "errors": [["PR09", "Parameter \"row_labels\" description should finish with \".\""], ["PR09", "Parameter \"col_labels\" description should finish with \".\""], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": ""}, "pandas.DataFrame.pop": {"type": "function", "docstring": "Return item and drop from frame. Raise KeyError if not found.\n\nParameters\n----------\nitem : str\n    Label of column to be popped.\n\nReturns\n-------\nSeries\n\nExamples\n--------\n>>> df = pd.DataFrame([('falcon', 'bird', 389.0),\n...                    ('parrot', 'bird', 24.0),\n...                    ('lion', 'mammal', 80.5),\n...                    ('monkey','mammal', np.nan)],\n...                   columns=('name', 'class', 'max_speed'))\n>>> df\n     name   class  max_speed\n0  falcon    bird      389.0\n1  parrot    bird       24.0\n2    lion  mammal       80.5\n3  monkey  mammal        NaN\n\n>>> df.pop('class')\n0      bird\n1      bird\n2    mammal\n3    mammal\nName: class, dtype: object\n\n>>> df\n     name  max_speed\n0  falcon      389.0\n1  parrot       24.0\n2    lion       80.5\n3  monkey        NaN", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 801, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L801", "errors": [["RT03", "Return value has no description"], ["EX03", "flake8 error: E231 missing whitespace after ','"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": "pandas.Series.pop"}, "pandas.DataFrame.tail": {"type": "function", "docstring": "Return the last `n` rows.\n\nThis function returns last `n` rows from the object based on\nposition. It is useful for quickly verifying data, for example,\nafter sorting or appending rows.\n\nParameters\n----------\nn : int, default 5\n    Number of rows to select.\n\nReturns\n-------\ntype of caller\n    The last `n` rows of the caller object.\n\nSee Also\n--------\nDataFrame.head : The first `n` rows of the caller object.\n\nExamples\n--------\n>>> df = pd.DataFrame({'animal':['alligator', 'bee', 'falcon', 'lion',\n...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n>>> df\n      animal\n0  alligator\n1        bee\n2     falcon\n3       lion\n4     monkey\n5     parrot\n6      shark\n7      whale\n8      zebra\n\nViewing the last 5 lines\n\n>>> df.tail()\n   animal\n4  monkey\n5  parrot\n6   shark\n7   whale\n8   zebra\n\nViewing the last `n` lines (three in this case)\n\n>>> df.tail(3)\n  animal\n6  shark\n7  whale\n8  zebra", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 4711, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L4711", "errors": [["EX03", "flake8 error: E231 missing whitespace after ':'"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": "pandas.DataFrame.tail"}, "pandas.DataFrame.xs": {"type": "function", "docstring": "Return cross-section from the Series/DataFrame.\n\nThis method takes a `key` argument to select data at a particular\nlevel of a MultiIndex.\n\nParameters\n----------\nkey : label or tuple of label\n    Label contained in the index, or partially in a MultiIndex.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Axis to retrieve cross-section on.\nlevel : object, defaults to first n levels (n=1 or len(key))\n    In case of a key partially contained in a MultiIndex, indicate\n    which levels are used. Levels can be referred by label or position.\ndrop_level : bool, default True\n    If False, returns object with same levels as self.\n\nReturns\n-------\nSeries or DataFrame\n    Cross-section from the original Series or DataFrame\n    corresponding to the selected index levels.\n\nSee Also\n--------\nDataFrame.loc : Access a group of rows and columns\n    by label(s) or a boolean array.\nDataFrame.iloc : Purely integer-location based indexing\n    for selection by position.\n\nNotes\n-----\n`xs` can not be used to set values.\n\nMultiIndex Slicers is a generic way to get/set values on\nany level or levels.\nIt is a superset of `xs` functionality, see\n:ref:`MultiIndex Slicers <advanced.mi_slicers>`.\n\nExamples\n--------\n>>> d = {'num_legs': [4, 4, 2, 2],\n...      'num_wings': [0, 0, 2, 2],\n...      'class': ['mammal', 'mammal', 'mammal', 'bird'],\n...      'animal': ['cat', 'dog', 'bat', 'penguin'],\n...      'locomotion': ['walks', 'walks', 'flies', 'walks']}\n>>> df = pd.DataFrame(data=d)\n>>> df = df.set_index(['class', 'animal', 'locomotion'])\n>>> df\n                           num_legs  num_wings\nclass  animal  locomotion\nmammal cat     walks              4          0\n       dog     walks              4          0\n       bat     flies              2          2\nbird   penguin walks              2          2\n\nGet values at specified index\n\n>>> df.xs('mammal')\n                   num_legs  num_wings\nanimal locomotion\ncat    walks              4          0\ndog    walks              4          0\nbat    flies              2          2\n\nGet values at several indexes\n\n>>> df.xs(('mammal', 'dog'))\n            num_legs  num_wings\nlocomotion\nwalks              4          0\n\nGet values at specified index and level\n\n>>> df.xs('cat', level=1)\n                   num_legs  num_wings\nclass  locomotion\nmammal walks              4          0\n\nGet values at several indexes and levels\n\n>>> df.xs(('bird', 'walks'),\n...       level=[0, 'locomotion'])\n         num_legs  num_wings\nanimal\npenguin         2          2\n\nGet values at specified column and axis\n\n>>> df.xs('num_wings', axis=1)\nclass   animal   locomotion\nmammal  cat      walks         0\n        dog      walks         0\n        bat      flies         2\nbird    penguin  walks         2\nName: num_wings, dtype: int64", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 3378, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L3378", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": "pandas.Series.xs"}, "pandas.DataFrame.get": {"type": "function", "docstring": "Get item from object for given key (ex: DataFrame column).\n\nReturns default value if not found.\n\nParameters\n----------\nkey : object\n\nReturns\n-------\nvalue : same type as items contained in object", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 3733, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L3733", "errors": [["PR01", "Parameters {default} not documented"], ["PR07", "Parameter \"key\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": "pandas.Series.get"}, "pandas.DataFrame.isin": {"type": "function", "docstring": "Whether each element in the DataFrame is contained in values.\n\nParameters\n----------\nvalues : iterable, Series, DataFrame or dict\n    The result will only be true at a location if all the\n    labels match. If `values` is a Series, that's the index. If\n    `values` is a dict, the keys must be the column names,\n    which must match. If `values` is a DataFrame,\n    then both the index and column labels must match.\n\nReturns\n-------\nDataFrame\n    DataFrame of booleans showing whether each element in the DataFrame\n    is contained in values.\n\nSee Also\n--------\nDataFrame.eq: Equality test for DataFrame.\nSeries.isin: Equivalent method on Series.\nSeries.str.contains: Test if pattern or regex is contained within a\n    string of a Series or Index.\n\nExamples\n--------\n\n>>> df = pd.DataFrame({'num_legs': [2, 4], 'num_wings': [2, 0]},\n...                   index=['falcon', 'dog'])\n>>> df\n        num_legs  num_wings\nfalcon         2          2\ndog            4          0\n\nWhen ``values`` is a list check whether every value in the DataFrame\nis present in the list (which animals have 0 or 2 legs or wings)\n\n>>> df.isin([0, 2])\n        num_legs  num_wings\nfalcon      True       True\ndog        False       True\n\nWhen ``values`` is a dict, we can pass values to check for each\ncolumn separately:\n\n>>> df.isin({'num_wings': [0, 3]})\n        num_legs  num_wings\nfalcon     False      False\ndog        False       True\n\nWhen ``values`` is a Series or DataFrame the index and column must\nmatch. Note that 'falcon' does not match based on the number of legs\nin df2.\n\n>>> other = pd.DataFrame({'num_legs': [8, 2], 'num_wings': [0, 2]},\n...                      index=['spider', 'falcon'])\n>>> df.isin(other)\n        num_legs  num_wings\nfalcon      True       True\ndog        False      False", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 8294, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L8294", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": ""}, "pandas.DataFrame.where": {"type": "function", "docstring": "Replace values where the condition is False.\n\nParameters\n----------\ncond : boolean Series/DataFrame, array-like, or callable\n    Where `cond` is True, keep the original value. Where\n    False, replace with corresponding value from `other`.\n    If `cond` is callable, it is computed on the Series/DataFrame and\n    should return boolean Series/DataFrame or array. The callable must\n    not change input Series/DataFrame (though pandas doesn't check it).\nother : scalar, Series/DataFrame, or callable\n    Entries where `cond` is False are replaced with\n    corresponding value from `other`.\n    If other is callable, it is computed on the Series/DataFrame and\n    should return scalar or Series/DataFrame. The callable must not\n    change input Series/DataFrame (though pandas doesn't check it).\ninplace : bool, default False\n    Whether to perform the operation in place on the data.\naxis : int, default None\n    Alignment axis if needed.\nlevel : int, default None\n    Alignment level if needed.\nerrors : str, {'raise', 'ignore'}, default 'raise'\n    Note that currently this parameter won't affect\n    the results and will always coerce to a suitable dtype.\n\n    - 'raise' : allow exceptions to be raised.\n    - 'ignore' : suppress exceptions. On error return original object.\n\ntry_cast : bool, default False\n    Try to cast the result back to the input type (if possible).\n\nReturns\n-------\nSame type as caller\n\nSee Also\n--------\n:func:`DataFrame.mask` : Return an object of same shape as\n    self.\n\nNotes\n-----\nThe where method is an application of the if-then idiom. For each\nelement in the calling DataFrame, if ``cond`` is ``True`` the\nelement is used; otherwise the corresponding element from the DataFrame\n``other`` is used.\n\nThe signature for :func:`DataFrame.where` differs from\n:func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to\n``np.where(m, df1, df2)``.\n\nFor further details and examples see the ``where`` documentation in\n:ref:`indexing <indexing.where_mask>`.\n\nExamples\n--------\n>>> s = pd.Series(range(5))\n>>> s.where(s > 0)\n0    NaN\n1    1.0\n2    2.0\n3    3.0\n4    4.0\ndtype: float64\n\n>>> s.mask(s > 0)\n0    0.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n>>> s.where(s > 1, 10)\n0    10\n1    10\n2    2\n3    3\n4    4\ndtype: int64\n\n>>> df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])\n>>> df\n   A  B\n0  0  1\n1  2  3\n2  4  5\n3  6  7\n4  8  9\n>>> m = df % 3 == 0\n>>> df.where(m, -df)\n   A  B\n0  0 -1\n1 -2  3\n2 -4 -5\n3  6 -7\n4 -8  9\n>>> df.where(m, -df) == np.where(m, df, -df)\n      A     B\n0  True  True\n1  True  True\n2  True  True\n3  True  True\n4  True  True\n>>> df.where(m, -df) == df.mask(~m, -df)\n      A     B\n0  True  True\n1  True  True\n2  True  True\n3  True  True\n4  True  True", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 9203, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L9203", "errors": [["PR06", "Parameter \"cond\" type should use \"bool\" instead of \"boolean\""], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": "pandas.Series.where"}, "pandas.DataFrame.mask": {"type": "function", "docstring": "Replace values where the condition is True.\n\nParameters\n----------\ncond : boolean Series/DataFrame, array-like, or callable\n    Where `cond` is False, keep the original value. Where\n    True, replace with corresponding value from `other`.\n    If `cond` is callable, it is computed on the Series/DataFrame and\n    should return boolean Series/DataFrame or array. The callable must\n    not change input Series/DataFrame (though pandas doesn't check it).\nother : scalar, Series/DataFrame, or callable\n    Entries where `cond` is True are replaced with\n    corresponding value from `other`.\n    If other is callable, it is computed on the Series/DataFrame and\n    should return scalar or Series/DataFrame. The callable must not\n    change input Series/DataFrame (though pandas doesn't check it).\ninplace : bool, default False\n    Whether to perform the operation in place on the data.\naxis : int, default None\n    Alignment axis if needed.\nlevel : int, default None\n    Alignment level if needed.\nerrors : str, {'raise', 'ignore'}, default 'raise'\n    Note that currently this parameter won't affect\n    the results and will always coerce to a suitable dtype.\n\n    - 'raise' : allow exceptions to be raised.\n    - 'ignore' : suppress exceptions. On error return original object.\n\ntry_cast : bool, default False\n    Try to cast the result back to the input type (if possible).\n\nReturns\n-------\nSame type as caller\n\nSee Also\n--------\n:func:`DataFrame.where` : Return an object of same shape as\n    self.\n\nNotes\n-----\nThe mask method is an application of the if-then idiom. For each\nelement in the calling DataFrame, if ``cond`` is ``False`` the\nelement is used; otherwise the corresponding element from the DataFrame\n``other`` is used.\n\nThe signature for :func:`DataFrame.where` differs from\n:func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to\n``np.where(m, df1, df2)``.\n\nFor further details and examples see the ``mask`` documentation in\n:ref:`indexing <indexing.where_mask>`.\n\nExamples\n--------\n>>> s = pd.Series(range(5))\n>>> s.where(s > 0)\n0    NaN\n1    1.0\n2    2.0\n3    3.0\n4    4.0\ndtype: float64\n\n>>> s.mask(s > 0)\n0    0.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n>>> s.where(s > 1, 10)\n0    10\n1    10\n2    2\n3    3\n4    4\ndtype: int64\n\n>>> df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])\n>>> df\n   A  B\n0  0  1\n1  2  3\n2  4  5\n3  6  7\n4  8  9\n>>> m = df % 3 == 0\n>>> df.where(m, -df)\n   A  B\n0  0 -1\n1 -2  3\n2 -4 -5\n3  6 -7\n4 -8  9\n>>> df.where(m, -df) == np.where(m, df, -df)\n      A     B\n0  True  True\n1  True  True\n2  True  True\n3  True  True\n4  True  True\n>>> df.where(m, -df) == df.mask(~m, -df)\n      A     B\n0  True  True\n1  True  True\n2  True  True\n3  True  True\n4  True  True", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 9229, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L9229", "errors": [["PR06", "Parameter \"cond\" type should use \"bool\" instead of \"boolean\""], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": "pandas.Series.mask"}, "pandas.DataFrame.query": {"type": "function", "docstring": "Query the columns of a DataFrame with a boolean expression.\n\nParameters\n----------\nexpr : str\n    The query string to evaluate.  You can refer to variables\n    in the environment by prefixing them with an '@' character like\n    ``@a + b``.\n\n    .. versionadded:: 0.25.0\n\n    You can refer to column names that contain spaces by surrounding\n    them in backticks.\n\n    For example, if one of your columns is called ``a a`` and you want\n    to sum it with ``b``, your query should be ```a a` + b``.\n\ninplace : bool\n    Whether the query should modify the data in place or return\n    a modified copy.\n**kwargs\n    See the documentation for :func:`eval` for complete details\n    on the keyword arguments accepted by :meth:`DataFrame.query`.\n\nReturns\n-------\nDataFrame\n    DataFrame resulting from the provided query expression.\n\nSee Also\n--------\neval : Evaluate a string describing operations on\n    DataFrame columns.\nDataFrame.eval : Evaluate a string describing operations on\n    DataFrame columns.\n\nNotes\n-----\nThe result of the evaluation of this expression is first passed to\n:attr:`DataFrame.loc` and if that fails because of a\nmultidimensional key (e.g., a DataFrame) then the result will be passed\nto :meth:`DataFrame.__getitem__`.\n\nThis method uses the top-level :func:`eval` function to\nevaluate the passed query.\n\nThe :meth:`~pandas.DataFrame.query` method uses a slightly\nmodified Python syntax by default. For example, the ``&`` and ``|``\n(bitwise) operators have the precedence of their boolean cousins,\n:keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\nhowever the semantics are different.\n\nYou can change the semantics of the expression by passing the keyword\nargument ``parser='python'``. This enforces the same semantics as\nevaluation in Python space. Likewise, you can pass ``engine='python'``\nto evaluate an expression using Python itself as a backend. This is not\nrecommended as it is inefficient compared to using ``numexpr`` as the\nengine.\n\nThe :attr:`DataFrame.index` and\n:attr:`DataFrame.columns` attributes of the\n:class:`~pandas.DataFrame` instance are placed in the query namespace\nby default, which allows you to treat both the index and columns of the\nframe as a column in the frame.\nThe identifier ``index`` is used for the frame index; you can also\nuse the name of the index to identify it in a query. Please note that\nPython keywords may not be used as identifiers.\n\nFor further details and examples see the ``query`` documentation in\n:ref:`indexing <indexing.query>`.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': range(1, 6),\n...                    'B': range(10, 0, -2),\n...                    'C C': range(10, 5, -1)})\n>>> df\n   A   B  C C\n0  1  10   10\n1  2   8    9\n2  3   6    8\n3  4   4    7\n4  5   2    6\n>>> df.query('A > B')\n   A  B  C C\n4  5  2    6\n\nThe previous expression is equivalent to\n\n>>> df[df.A > df.B]\n   A  B  C C\n4  5  2    6\n\nFor columns with spaces in their name, you can use backtick quoting.\n\n>>> df.query('B == `C C`')\n   A   B  C C\n0  1  10   10\n\nThe previous expression is equivalent to\n\n>>> df[df.B == df['C C']]\n   A   B  C C\n0  1  10   10", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 3128, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L3128", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Indexing, iteration", "shared_code_with": ""}, "pandas.DataFrame.add": {"type": "function", "docstring": "Get Addition of dataframe and other, element-wise (binary operator `add`).\n\nEquivalent to ``dataframe + other``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `radd`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 974, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L974", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": ""}, "pandas.DataFrame.sub": {"type": "function", "docstring": "Get Subtraction of dataframe and other, element-wise (binary operator `sub`).\n\nEquivalent to ``dataframe - other``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `rsub`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 974, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L974", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": "pandas.DataFrame.add"}, "pandas.DataFrame.mul": {"type": "function", "docstring": "Get Multiplication of dataframe and other, element-wise (binary operator `mul`).\n\nEquivalent to ``dataframe * other``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `rmul`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 974, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L974", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": "pandas.DataFrame.sub"}, "pandas.DataFrame.div": {"type": "function", "docstring": "Get Floating division of dataframe and other, element-wise (binary operator `truediv`).\n\nEquivalent to ``dataframe / other``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `rtruediv`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 974, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L974", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": "pandas.DataFrame.mul"}, "pandas.DataFrame.truediv": {"type": "function", "docstring": "Get Floating division of dataframe and other, element-wise (binary operator `truediv`).\n\nEquivalent to ``dataframe / other``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `rtruediv`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 974, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L974", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": "pandas.DataFrame.div"}, "pandas.DataFrame.floordiv": {"type": "function", "docstring": "Get Integer division of dataframe and other, element-wise (binary operator `floordiv`).\n\nEquivalent to ``dataframe // other``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `rfloordiv`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 974, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L974", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": "pandas.DataFrame.truediv"}, "pandas.DataFrame.mod": {"type": "function", "docstring": "Get Modulo of dataframe and other, element-wise (binary operator `mod`).\n\nEquivalent to ``dataframe % other``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `rmod`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 974, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L974", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": "pandas.DataFrame.floordiv"}, "pandas.DataFrame.pow": {"type": "function", "docstring": "Get Exponential power of dataframe and other, element-wise (binary operator `pow`).\n\nEquivalent to ``dataframe ** other``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `rpow`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 974, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L974", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": "pandas.DataFrame.mod"}, "pandas.DataFrame.dot": {"type": "function", "docstring": "Compute the matrix multiplication between the DataFrame and other.\n\nThis method computes the matrix product between the DataFrame and the\nvalues of an other Series, DataFrame or a numpy array.\n\nIt can also be called using ``self @ other`` in Python >= 3.5.\n\nParameters\n----------\nother : Series, DataFrame or array-like\n    The other object to compute the matrix product with.\n\nReturns\n-------\nSeries or DataFrame\n    If other is a Series, return the matrix product between self and\n    other as a Serie. If other is a DataFrame or a numpy.array, return\n    the matrix product of self and other in a DataFrame of a np.array.\n\nSee Also\n--------\nSeries.dot: Similar method for Series.\n\nNotes\n-----\nThe dimensions of DataFrame and other must be compatible in order to\ncompute the matrix multiplication. In addition, the column names of\nDataFrame and the index of other must contain the same values, as they\nwill be aligned prior to the multiplication.\n\nThe dot method for Series computes the inner product, instead of the\nmatrix product here.\n\nExamples\n--------\nHere we multiply a DataFrame with a Series.\n\n>>> df = pd.DataFrame([[0, 1, -2, -1], [1, 1, 1, 1]])\n>>> s = pd.Series([1, 1, 2, 1])\n>>> df.dot(s)\n0    -4\n1     5\ndtype: int64\n\nHere we multiply a DataFrame with another DataFrame.\n\n>>> other = pd.DataFrame([[0, 1], [1, 2], [-1, -1], [2, 0]])\n>>> df.dot(other)\n    0   1\n0   1   4\n1   2   2\n\nNote that the dot method give the same result as @\n\n>>> df @ other\n    0   1\n0   1   4\n1   2   2\n\nThe dot method works also if other is an np.array.\n\n>>> arr = np.array([[0, 1], [1, 2], [-1, -1], [2, 0]])\n>>> df.dot(arr)\n    0   1\n0   1   4\n1   2   2\n\nNote how shuffling of the objects does not change the result.\n\n>>> s2 = s.reindex([1, 0, 2, 3])\n>>> df.dot(s2)\n0    -4\n1     5\ndtype: int64", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 971, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L971", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": ""}, "pandas.DataFrame.radd": {"type": "function", "docstring": "Get Addition of dataframe and other, element-wise (binary operator `radd`).\n\nEquivalent to ``other + dataframe``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `add`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 974, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L974", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": "pandas.DataFrame.pow"}, "pandas.DataFrame.rsub": {"type": "function", "docstring": "Get Subtraction of dataframe and other, element-wise (binary operator `rsub`).\n\nEquivalent to ``other - dataframe``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `sub`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 974, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L974", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": "pandas.DataFrame.radd"}, "pandas.DataFrame.rmul": {"type": "function", "docstring": "Get Multiplication of dataframe and other, element-wise (binary operator `rmul`).\n\nEquivalent to ``other * dataframe``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `mul`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 974, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L974", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": "pandas.DataFrame.rsub"}, "pandas.DataFrame.rdiv": {"type": "function", "docstring": "Get Floating division of dataframe and other, element-wise (binary operator `rtruediv`).\n\nEquivalent to ``other / dataframe``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `truediv`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 974, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L974", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": "pandas.DataFrame.rmul"}, "pandas.DataFrame.rtruediv": {"type": "function", "docstring": "Get Floating division of dataframe and other, element-wise (binary operator `rtruediv`).\n\nEquivalent to ``other / dataframe``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `truediv`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 974, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L974", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": "pandas.DataFrame.rdiv"}, "pandas.DataFrame.rfloordiv": {"type": "function", "docstring": "Get Integer division of dataframe and other, element-wise (binary operator `rfloordiv`).\n\nEquivalent to ``other // dataframe``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `floordiv`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 974, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L974", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": "pandas.DataFrame.rtruediv"}, "pandas.DataFrame.rmod": {"type": "function", "docstring": "Get Modulo of dataframe and other, element-wise (binary operator `rmod`).\n\nEquivalent to ``other % dataframe``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `mod`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 974, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L974", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": "pandas.DataFrame.rfloordiv"}, "pandas.DataFrame.rpow": {"type": "function", "docstring": "Get Exponential power of dataframe and other, element-wise (binary operator `rpow`).\n\nEquivalent to ``other ** dataframe``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `pow`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 974, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L974", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": "pandas.DataFrame.rmod"}, "pandas.DataFrame.lt": {"type": "function", "docstring": "Get Less than of dataframe and other, element-wise (binary operator `lt`).\n\nAmong flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison\noperators.\n\nEquivalent to `==`, `=!`, `<=`, `<`, `>=`, `>` with support to choose axis\n(rows or columns) and level for comparison.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}, default 'columns'\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns').\nlevel : int or label\n    Broadcast across a level, matching Index values on the passed\n    MultiIndex level.\n\nReturns\n-------\nDataFrame of bool\n    Result of the comparison.\n\nSee Also\n--------\nDataFrame.eq : Compare DataFrames for equality elementwise.\nDataFrame.ne : Compare DataFrames for inequality elementwise.\nDataFrame.le : Compare DataFrames for less than inequality\n    or equality elementwise.\nDataFrame.lt : Compare DataFrames for strictly less than\n    inequality elementwise.\nDataFrame.ge : Compare DataFrames for greater than inequality\n    or equality elementwise.\nDataFrame.gt : Compare DataFrames for strictly greater than\n    inequality elementwise.\n\nNotes\n-----\nMismatched indices will be unioned together.\n`NaN` values are considered different (i.e. `NaN` != `NaN`).\n\nExamples\n--------\n>>> df = pd.DataFrame({'cost': [250, 150, 100],\n...                    'revenue': [100, 250, 300]},\n...                   index=['A', 'B', 'C'])\n>>> df\n   cost  revenue\nA   250      100\nB   150      250\nC   100      300\n\nComparison with a scalar, using either the operator or method:\n\n>>> df == 100\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\n>>> df.eq(100)\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\nWhen `other` is a :class:`Series`, the columns of a DataFrame are aligned\nwith the index of `other` and broadcast:\n\n>>> df != pd.Series([100, 250], index=[\"cost\", \"revenue\"])\n    cost  revenue\nA   True     True\nB   True    False\nC  False     True\n\nUse the method to control the broadcast axis:\n\n>>> df.ne(pd.Series([100, 300], index=[\"A\", \"D\"]), axis='index')\n   cost  revenue\nA  True    False\nB  True     True\nC  True     True\nD  True     True\n\nWhen comparing to an arbitrary sequence, the number of columns must\nmatch the number elements in `other`:\n\n>>> df == [250, 100]\n    cost  revenue\nA   True     True\nB  False    False\nC  False    False\n\nUse the method to control the axis:\n\n>>> df.eq([250, 250, 100], axis='index')\n    cost  revenue\nA   True    False\nB  False     True\nC   True    False\n\nCompare to a DataFrame of different shape.\n\n>>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},\n...                      index=['A', 'B', 'C', 'D'])\n>>> other\n   revenue\nA      300\nB      250\nC      100\nD      150\n\n>>> df.gt(other)\n    cost  revenue\nA  False    False\nB  False    False\nC  False     True\nD  False    False\n\nCompare to a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],\n...                              'revenue': [100, 250, 300, 200, 175, 225]},\n...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],\n...                                    ['A', 'B', 'C', 'A', 'B', 'C']])\n>>> df_multindex\n      cost  revenue\nQ1 A   250      100\n   B   150      250\n   C   100      300\nQ2 A   150      200\n   B   300      175\n   C   220      225\n\n>>> df.le(df_multindex, level=1)\n       cost  revenue\nQ1 A   True     True\n   B   True     True\n   C   True     True\nQ2 A  False     True\n   B   True    False\n   C   True    False", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 1019, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L1019", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": ""}, "pandas.DataFrame.gt": {"type": "function", "docstring": "Get Greater than of dataframe and other, element-wise (binary operator `gt`).\n\nAmong flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison\noperators.\n\nEquivalent to `==`, `=!`, `<=`, `<`, `>=`, `>` with support to choose axis\n(rows or columns) and level for comparison.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}, default 'columns'\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns').\nlevel : int or label\n    Broadcast across a level, matching Index values on the passed\n    MultiIndex level.\n\nReturns\n-------\nDataFrame of bool\n    Result of the comparison.\n\nSee Also\n--------\nDataFrame.eq : Compare DataFrames for equality elementwise.\nDataFrame.ne : Compare DataFrames for inequality elementwise.\nDataFrame.le : Compare DataFrames for less than inequality\n    or equality elementwise.\nDataFrame.lt : Compare DataFrames for strictly less than\n    inequality elementwise.\nDataFrame.ge : Compare DataFrames for greater than inequality\n    or equality elementwise.\nDataFrame.gt : Compare DataFrames for strictly greater than\n    inequality elementwise.\n\nNotes\n-----\nMismatched indices will be unioned together.\n`NaN` values are considered different (i.e. `NaN` != `NaN`).\n\nExamples\n--------\n>>> df = pd.DataFrame({'cost': [250, 150, 100],\n...                    'revenue': [100, 250, 300]},\n...                   index=['A', 'B', 'C'])\n>>> df\n   cost  revenue\nA   250      100\nB   150      250\nC   100      300\n\nComparison with a scalar, using either the operator or method:\n\n>>> df == 100\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\n>>> df.eq(100)\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\nWhen `other` is a :class:`Series`, the columns of a DataFrame are aligned\nwith the index of `other` and broadcast:\n\n>>> df != pd.Series([100, 250], index=[\"cost\", \"revenue\"])\n    cost  revenue\nA   True     True\nB   True    False\nC  False     True\n\nUse the method to control the broadcast axis:\n\n>>> df.ne(pd.Series([100, 300], index=[\"A\", \"D\"]), axis='index')\n   cost  revenue\nA  True    False\nB  True     True\nC  True     True\nD  True     True\n\nWhen comparing to an arbitrary sequence, the number of columns must\nmatch the number elements in `other`:\n\n>>> df == [250, 100]\n    cost  revenue\nA   True     True\nB  False    False\nC  False    False\n\nUse the method to control the axis:\n\n>>> df.eq([250, 250, 100], axis='index')\n    cost  revenue\nA   True    False\nB  False     True\nC   True    False\n\nCompare to a DataFrame of different shape.\n\n>>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},\n...                      index=['A', 'B', 'C', 'D'])\n>>> other\n   revenue\nA      300\nB      250\nC      100\nD      150\n\n>>> df.gt(other)\n    cost  revenue\nA  False    False\nB  False    False\nC  False     True\nD  False    False\n\nCompare to a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],\n...                              'revenue': [100, 250, 300, 200, 175, 225]},\n...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],\n...                                    ['A', 'B', 'C', 'A', 'B', 'C']])\n>>> df_multindex\n      cost  revenue\nQ1 A   250      100\n   B   150      250\n   C   100      300\nQ2 A   150      200\n   B   300      175\n   C   220      225\n\n>>> df.le(df_multindex, level=1)\n       cost  revenue\nQ1 A   True     True\n   B   True     True\n   C   True     True\nQ2 A  False     True\n   B   True    False\n   C   True    False", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 1019, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L1019", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": "pandas.DataFrame.lt"}, "pandas.DataFrame.le": {"type": "function", "docstring": "Get Less than or equal to of dataframe and other, element-wise (binary operator `le`).\n\nAmong flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison\noperators.\n\nEquivalent to `==`, `=!`, `<=`, `<`, `>=`, `>` with support to choose axis\n(rows or columns) and level for comparison.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}, default 'columns'\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns').\nlevel : int or label\n    Broadcast across a level, matching Index values on the passed\n    MultiIndex level.\n\nReturns\n-------\nDataFrame of bool\n    Result of the comparison.\n\nSee Also\n--------\nDataFrame.eq : Compare DataFrames for equality elementwise.\nDataFrame.ne : Compare DataFrames for inequality elementwise.\nDataFrame.le : Compare DataFrames for less than inequality\n    or equality elementwise.\nDataFrame.lt : Compare DataFrames for strictly less than\n    inequality elementwise.\nDataFrame.ge : Compare DataFrames for greater than inequality\n    or equality elementwise.\nDataFrame.gt : Compare DataFrames for strictly greater than\n    inequality elementwise.\n\nNotes\n-----\nMismatched indices will be unioned together.\n`NaN` values are considered different (i.e. `NaN` != `NaN`).\n\nExamples\n--------\n>>> df = pd.DataFrame({'cost': [250, 150, 100],\n...                    'revenue': [100, 250, 300]},\n...                   index=['A', 'B', 'C'])\n>>> df\n   cost  revenue\nA   250      100\nB   150      250\nC   100      300\n\nComparison with a scalar, using either the operator or method:\n\n>>> df == 100\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\n>>> df.eq(100)\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\nWhen `other` is a :class:`Series`, the columns of a DataFrame are aligned\nwith the index of `other` and broadcast:\n\n>>> df != pd.Series([100, 250], index=[\"cost\", \"revenue\"])\n    cost  revenue\nA   True     True\nB   True    False\nC  False     True\n\nUse the method to control the broadcast axis:\n\n>>> df.ne(pd.Series([100, 300], index=[\"A\", \"D\"]), axis='index')\n   cost  revenue\nA  True    False\nB  True     True\nC  True     True\nD  True     True\n\nWhen comparing to an arbitrary sequence, the number of columns must\nmatch the number elements in `other`:\n\n>>> df == [250, 100]\n    cost  revenue\nA   True     True\nB  False    False\nC  False    False\n\nUse the method to control the axis:\n\n>>> df.eq([250, 250, 100], axis='index')\n    cost  revenue\nA   True    False\nB  False     True\nC   True    False\n\nCompare to a DataFrame of different shape.\n\n>>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},\n...                      index=['A', 'B', 'C', 'D'])\n>>> other\n   revenue\nA      300\nB      250\nC      100\nD      150\n\n>>> df.gt(other)\n    cost  revenue\nA  False    False\nB  False    False\nC  False     True\nD  False    False\n\nCompare to a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],\n...                              'revenue': [100, 250, 300, 200, 175, 225]},\n...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],\n...                                    ['A', 'B', 'C', 'A', 'B', 'C']])\n>>> df_multindex\n      cost  revenue\nQ1 A   250      100\n   B   150      250\n   C   100      300\nQ2 A   150      200\n   B   300      175\n   C   220      225\n\n>>> df.le(df_multindex, level=1)\n       cost  revenue\nQ1 A   True     True\n   B   True     True\n   C   True     True\nQ2 A  False     True\n   B   True    False\n   C   True    False", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 1019, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L1019", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": "pandas.DataFrame.gt"}, "pandas.DataFrame.ge": {"type": "function", "docstring": "Get Greater than or equal to of dataframe and other, element-wise (binary operator `ge`).\n\nAmong flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison\noperators.\n\nEquivalent to `==`, `=!`, `<=`, `<`, `>=`, `>` with support to choose axis\n(rows or columns) and level for comparison.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}, default 'columns'\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns').\nlevel : int or label\n    Broadcast across a level, matching Index values on the passed\n    MultiIndex level.\n\nReturns\n-------\nDataFrame of bool\n    Result of the comparison.\n\nSee Also\n--------\nDataFrame.eq : Compare DataFrames for equality elementwise.\nDataFrame.ne : Compare DataFrames for inequality elementwise.\nDataFrame.le : Compare DataFrames for less than inequality\n    or equality elementwise.\nDataFrame.lt : Compare DataFrames for strictly less than\n    inequality elementwise.\nDataFrame.ge : Compare DataFrames for greater than inequality\n    or equality elementwise.\nDataFrame.gt : Compare DataFrames for strictly greater than\n    inequality elementwise.\n\nNotes\n-----\nMismatched indices will be unioned together.\n`NaN` values are considered different (i.e. `NaN` != `NaN`).\n\nExamples\n--------\n>>> df = pd.DataFrame({'cost': [250, 150, 100],\n...                    'revenue': [100, 250, 300]},\n...                   index=['A', 'B', 'C'])\n>>> df\n   cost  revenue\nA   250      100\nB   150      250\nC   100      300\n\nComparison with a scalar, using either the operator or method:\n\n>>> df == 100\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\n>>> df.eq(100)\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\nWhen `other` is a :class:`Series`, the columns of a DataFrame are aligned\nwith the index of `other` and broadcast:\n\n>>> df != pd.Series([100, 250], index=[\"cost\", \"revenue\"])\n    cost  revenue\nA   True     True\nB   True    False\nC  False     True\n\nUse the method to control the broadcast axis:\n\n>>> df.ne(pd.Series([100, 300], index=[\"A\", \"D\"]), axis='index')\n   cost  revenue\nA  True    False\nB  True     True\nC  True     True\nD  True     True\n\nWhen comparing to an arbitrary sequence, the number of columns must\nmatch the number elements in `other`:\n\n>>> df == [250, 100]\n    cost  revenue\nA   True     True\nB  False    False\nC  False    False\n\nUse the method to control the axis:\n\n>>> df.eq([250, 250, 100], axis='index')\n    cost  revenue\nA   True    False\nB  False     True\nC   True    False\n\nCompare to a DataFrame of different shape.\n\n>>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},\n...                      index=['A', 'B', 'C', 'D'])\n>>> other\n   revenue\nA      300\nB      250\nC      100\nD      150\n\n>>> df.gt(other)\n    cost  revenue\nA  False    False\nB  False    False\nC  False     True\nD  False    False\n\nCompare to a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],\n...                              'revenue': [100, 250, 300, 200, 175, 225]},\n...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],\n...                                    ['A', 'B', 'C', 'A', 'B', 'C']])\n>>> df_multindex\n      cost  revenue\nQ1 A   250      100\n   B   150      250\n   C   100      300\nQ2 A   150      200\n   B   300      175\n   C   220      225\n\n>>> df.le(df_multindex, level=1)\n       cost  revenue\nQ1 A   True     True\n   B   True     True\n   C   True     True\nQ2 A  False     True\n   B   True    False\n   C   True    False", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 1019, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L1019", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": "pandas.DataFrame.le"}, "pandas.DataFrame.ne": {"type": "function", "docstring": "Get Not equal to of dataframe and other, element-wise (binary operator `ne`).\n\nAmong flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison\noperators.\n\nEquivalent to `==`, `=!`, `<=`, `<`, `>=`, `>` with support to choose axis\n(rows or columns) and level for comparison.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}, default 'columns'\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns').\nlevel : int or label\n    Broadcast across a level, matching Index values on the passed\n    MultiIndex level.\n\nReturns\n-------\nDataFrame of bool\n    Result of the comparison.\n\nSee Also\n--------\nDataFrame.eq : Compare DataFrames for equality elementwise.\nDataFrame.ne : Compare DataFrames for inequality elementwise.\nDataFrame.le : Compare DataFrames for less than inequality\n    or equality elementwise.\nDataFrame.lt : Compare DataFrames for strictly less than\n    inequality elementwise.\nDataFrame.ge : Compare DataFrames for greater than inequality\n    or equality elementwise.\nDataFrame.gt : Compare DataFrames for strictly greater than\n    inequality elementwise.\n\nNotes\n-----\nMismatched indices will be unioned together.\n`NaN` values are considered different (i.e. `NaN` != `NaN`).\n\nExamples\n--------\n>>> df = pd.DataFrame({'cost': [250, 150, 100],\n...                    'revenue': [100, 250, 300]},\n...                   index=['A', 'B', 'C'])\n>>> df\n   cost  revenue\nA   250      100\nB   150      250\nC   100      300\n\nComparison with a scalar, using either the operator or method:\n\n>>> df == 100\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\n>>> df.eq(100)\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\nWhen `other` is a :class:`Series`, the columns of a DataFrame are aligned\nwith the index of `other` and broadcast:\n\n>>> df != pd.Series([100, 250], index=[\"cost\", \"revenue\"])\n    cost  revenue\nA   True     True\nB   True    False\nC  False     True\n\nUse the method to control the broadcast axis:\n\n>>> df.ne(pd.Series([100, 300], index=[\"A\", \"D\"]), axis='index')\n   cost  revenue\nA  True    False\nB  True     True\nC  True     True\nD  True     True\n\nWhen comparing to an arbitrary sequence, the number of columns must\nmatch the number elements in `other`:\n\n>>> df == [250, 100]\n    cost  revenue\nA   True     True\nB  False    False\nC  False    False\n\nUse the method to control the axis:\n\n>>> df.eq([250, 250, 100], axis='index')\n    cost  revenue\nA   True    False\nB  False     True\nC   True    False\n\nCompare to a DataFrame of different shape.\n\n>>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},\n...                      index=['A', 'B', 'C', 'D'])\n>>> other\n   revenue\nA      300\nB      250\nC      100\nD      150\n\n>>> df.gt(other)\n    cost  revenue\nA  False    False\nB  False    False\nC  False     True\nD  False    False\n\nCompare to a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],\n...                              'revenue': [100, 250, 300, 200, 175, 225]},\n...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],\n...                                    ['A', 'B', 'C', 'A', 'B', 'C']])\n>>> df_multindex\n      cost  revenue\nQ1 A   250      100\n   B   150      250\n   C   100      300\nQ2 A   150      200\n   B   300      175\n   C   220      225\n\n>>> df.le(df_multindex, level=1)\n       cost  revenue\nQ1 A   True     True\n   B   True     True\n   C   True     True\nQ2 A  False     True\n   B   True    False\n   C   True    False", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 1019, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L1019", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": "pandas.DataFrame.ge"}, "pandas.DataFrame.eq": {"type": "function", "docstring": "Get Equal to of dataframe and other, element-wise (binary operator `eq`).\n\nAmong flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison\noperators.\n\nEquivalent to `==`, `=!`, `<=`, `<`, `>=`, `>` with support to choose axis\n(rows or columns) and level for comparison.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}, default 'columns'\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns').\nlevel : int or label\n    Broadcast across a level, matching Index values on the passed\n    MultiIndex level.\n\nReturns\n-------\nDataFrame of bool\n    Result of the comparison.\n\nSee Also\n--------\nDataFrame.eq : Compare DataFrames for equality elementwise.\nDataFrame.ne : Compare DataFrames for inequality elementwise.\nDataFrame.le : Compare DataFrames for less than inequality\n    or equality elementwise.\nDataFrame.lt : Compare DataFrames for strictly less than\n    inequality elementwise.\nDataFrame.ge : Compare DataFrames for greater than inequality\n    or equality elementwise.\nDataFrame.gt : Compare DataFrames for strictly greater than\n    inequality elementwise.\n\nNotes\n-----\nMismatched indices will be unioned together.\n`NaN` values are considered different (i.e. `NaN` != `NaN`).\n\nExamples\n--------\n>>> df = pd.DataFrame({'cost': [250, 150, 100],\n...                    'revenue': [100, 250, 300]},\n...                   index=['A', 'B', 'C'])\n>>> df\n   cost  revenue\nA   250      100\nB   150      250\nC   100      300\n\nComparison with a scalar, using either the operator or method:\n\n>>> df == 100\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\n>>> df.eq(100)\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\nWhen `other` is a :class:`Series`, the columns of a DataFrame are aligned\nwith the index of `other` and broadcast:\n\n>>> df != pd.Series([100, 250], index=[\"cost\", \"revenue\"])\n    cost  revenue\nA   True     True\nB   True    False\nC  False     True\n\nUse the method to control the broadcast axis:\n\n>>> df.ne(pd.Series([100, 300], index=[\"A\", \"D\"]), axis='index')\n   cost  revenue\nA  True    False\nB  True     True\nC  True     True\nD  True     True\n\nWhen comparing to an arbitrary sequence, the number of columns must\nmatch the number elements in `other`:\n\n>>> df == [250, 100]\n    cost  revenue\nA   True     True\nB  False    False\nC  False    False\n\nUse the method to control the axis:\n\n>>> df.eq([250, 250, 100], axis='index')\n    cost  revenue\nA   True    False\nB  False     True\nC   True    False\n\nCompare to a DataFrame of different shape.\n\n>>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},\n...                      index=['A', 'B', 'C', 'D'])\n>>> other\n   revenue\nA      300\nB      250\nC      100\nD      150\n\n>>> df.gt(other)\n    cost  revenue\nA  False    False\nB  False    False\nC  False     True\nD  False    False\n\nCompare to a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],\n...                              'revenue': [100, 250, 300, 200, 175, 225]},\n...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],\n...                                    ['A', 'B', 'C', 'A', 'B', 'C']])\n>>> df_multindex\n      cost  revenue\nQ1 A   250      100\n   B   150      250\n   C   100      300\nQ2 A   150      200\n   B   300      175\n   C   220      225\n\n>>> df.le(df_multindex, level=1)\n       cost  revenue\nQ1 A   True     True\n   B   True     True\n   C   True     True\nQ2 A  False     True\n   B   True    False\n   C   True    False", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 1019, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L1019", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": "pandas.DataFrame.ne"}, "pandas.DataFrame.combine": {"type": "function", "docstring": "Perform column-wise combine with another DataFrame.\n\nCombines a DataFrame with `other` DataFrame using `func`\nto element-wise combine columns. The row and column indexes of the\nresulting DataFrame will be the union of the two.\n\nParameters\n----------\nother : DataFrame\n    The DataFrame to merge column-wise.\nfunc : function\n    Function that takes two series as inputs and return a Series or a\n    scalar. Used to merge the two dataframes column by columns.\nfill_value : scalar value, default None\n    The value to fill NaNs with prior to passing any column to the\n    merge func.\noverwrite : bool, default True\n    If True, columns in `self` that do not exist in `other` will be\n    overwritten with NaNs.\n\nReturns\n-------\nDataFrame\n    Combination of the provided DataFrames.\n\nSee Also\n--------\nDataFrame.combine_first : Combine two DataFrame objects and default to\n    non-null values in frame calling the method.\n\nExamples\n--------\nCombine using a simple function that chooses the smaller column.\n\n>>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n>>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n>>> take_smaller = lambda s1, s2: s1 if s1.sum() < s2.sum() else s2\n>>> df1.combine(df2, take_smaller)\n   A  B\n0  0  3\n1  0  3\n\nExample using a true element-wise combine function.\n\n>>> df1 = pd.DataFrame({'A': [5, 0], 'B': [2, 4]})\n>>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n>>> df1.combine(df2, np.minimum)\n   A  B\n0  1  2\n1  0  3\n\nUsing `fill_value` fills Nones prior to passing the column to the\nmerge function.\n\n>>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n>>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n>>> df1.combine(df2, take_smaller, fill_value=-5)\n   A    B\n0  0 -5.0\n1  0  4.0\n\nHowever, if the same element in both dataframes is None, that None\nis preserved\n\n>>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n>>> df2 = pd.DataFrame({'A': [1, 1], 'B': [None, 3]})\n>>> df1.combine(df2, take_smaller, fill_value=-5)\n    A    B\n0  0 -5.0\n1  0  3.0\n\nExample that demonstrates the use of `overwrite` and behavior when\nthe axis differ between the dataframes.\n\n>>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n>>> df2 = pd.DataFrame({'B': [3, 3], 'C': [-10, 1], }, index=[1, 2])\n>>> df1.combine(df2, take_smaller)\n     A    B     C\n0  NaN  NaN   NaN\n1  NaN  3.0 -10.0\n2  NaN  3.0   1.0\n\n>>> df1.combine(df2, take_smaller, overwrite=False)\n     A    B     C\n0  0.0  NaN   NaN\n1  0.0  3.0 -10.0\n2  NaN  3.0   1.0\n\nDemonstrating the preference of the passed in dataframe.\n\n>>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1], }, index=[1, 2])\n>>> df2.combine(df1, take_smaller)\n   A    B   C\n0  0.0  NaN NaN\n1  0.0  3.0 NaN\n2  NaN  3.0 NaN\n\n>>> df2.combine(df1, take_smaller, overwrite=False)\n     A    B   C\n0  0.0  NaN NaN\n1  0.0  3.0 1.0\n2  NaN  3.0 1.0", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 5338, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L5338", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": ""}, "pandas.DataFrame.combine_first": {"type": "function", "docstring": "Update null elements with value in the same location in `other`.\n\nCombine two DataFrame objects by filling null values in one DataFrame\nwith non-null values from other DataFrame. The row and column indexes\nof the resulting DataFrame will be the union of the two.\n\nParameters\n----------\nother : DataFrame\n    Provided DataFrame to use to fill null values.\n\nReturns\n-------\nDataFrame\n\nSee Also\n--------\nDataFrame.combine : Perform series-wise operation on two DataFrames\n    using a given function.\n\nExamples\n--------\n\n>>> df1 = pd.DataFrame({'A': [None, 0], 'B': [None, 4]})\n>>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n>>> df1.combine_first(df2)\n     A    B\n0  1.0  3.0\n1  0.0  4.0\n\nNull values still persist if the location of that null value\ndoes not exist in `other`\n\n>>> df1 = pd.DataFrame({'A': [None, 0], 'B': [4, None]})\n>>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1]}, index=[1, 2])\n>>> df1.combine_first(df2)\n     A    B    C\n0  NaN  4.0  NaN\n1  0.0  3.0  1.0\n2  NaN  3.0  1.0", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 5505, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L5505", "errors": [["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Binary operator functions", "shared_code_with": ""}, "pandas.DataFrame.apply": {"type": "function", "docstring": "Apply a function along an axis of the DataFrame.\n\nObjects passed to the function are Series objects whose index is\neither the DataFrame's index (``axis=0``) or the DataFrame's columns\n(``axis=1``). By default (``result_type=None``), the final return type\nis inferred from the return type of the applied function. Otherwise,\nit depends on the `result_type` argument.\n\nParameters\n----------\nfunc : function\n    Function to apply to each column or row.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Axis along which the function is applied:\n\n    * 0 or 'index': apply function to each column.\n    * 1 or 'columns': apply function to each row.\nbroadcast : bool, optional\n    Only relevant for aggregation functions:\n\n    * ``False`` or ``None`` : returns a Series whose length is the\n      length of the index or the number of columns (based on the\n      `axis` parameter)\n    * ``True`` : results will be broadcast to the original shape\n      of the frame, the original index and columns will be retained.\n\n    .. deprecated:: 0.23.0\n       This argument will be removed in a future version, replaced\n       by result_type='broadcast'.\n\nraw : bool, default False\n    * ``False`` : passes each row or column as a Series to the\n      function.\n    * ``True`` : the passed function will receive ndarray objects\n      instead.\n      If you are just applying a NumPy reduction function this will\n      achieve much better performance.\nreduce : bool or None, default None\n    Try to apply reduction procedures. If the DataFrame is empty,\n    `apply` will use `reduce` to determine whether the result\n    should be a Series or a DataFrame. If ``reduce=None`` (the\n    default), `apply`'s return value will be guessed by calling\n    `func` on an empty Series\n    (note: while guessing, exceptions raised by `func` will be\n    ignored).\n    If ``reduce=True`` a Series will always be returned, and if\n    ``reduce=False`` a DataFrame will always be returned.\n\n    .. deprecated:: 0.23.0\n       This argument will be removed in a future version, replaced\n       by ``result_type='reduce'``.\n\nresult_type : {'expand', 'reduce', 'broadcast', None}, default None\n    These only act when ``axis=1`` (columns):\n\n    * 'expand' : list-like results will be turned into columns.\n    * 'reduce' : returns a Series if possible rather than expanding\n      list-like results. This is the opposite of 'expand'.\n    * 'broadcast' : results will be broadcast to the original shape\n      of the DataFrame, the original index and columns will be\n      retained.\n\n    The default behaviour (None) depends on the return value of the\n    applied function: list-like results will be returned as a Series\n    of those. However if the apply function returns a Series these\n    are expanded to columns.\n\n    .. versionadded:: 0.23.0\n\nargs : tuple\n    Positional arguments to pass to `func` in addition to the\n    array/series.\n**kwds\n    Additional keyword arguments to pass as keywords arguments to\n    `func`.\n\nReturns\n-------\nSeries or DataFrame\n    Result of applying ``func`` along the given axis of the\n    DataFrame.\n\nSee Also\n--------\nDataFrame.applymap: For elementwise operations.\nDataFrame.aggregate: Only perform aggregating type operations.\nDataFrame.transform: Only perform transforming type operations.\n\nNotes\n-----\nIn the current implementation apply calls `func` twice on the\nfirst column/row to decide whether it can take a fast or slow\ncode path. This can lead to unexpected behavior if `func` has\nside-effects, as they will take effect twice for the first\ncolumn/row.\n\nExamples\n--------\n\n>>> df = pd.DataFrame([[4, 9]] * 3, columns=['A', 'B'])\n>>> df\n   A  B\n0  4  9\n1  4  9\n2  4  9\n\nUsing a numpy universal function (in this case the same as\n``np.sqrt(df)``):\n\n>>> df.apply(np.sqrt)\n     A    B\n0  2.0  3.0\n1  2.0  3.0\n2  2.0  3.0\n\nUsing a reducing function on either axis\n\n>>> df.apply(np.sum, axis=0)\nA    12\nB    27\ndtype: int64\n\n>>> df.apply(np.sum, axis=1)\n0    13\n1    13\n2    13\ndtype: int64\n\nReturning a list-like will result in a Series\n\n>>> df.apply(lambda x: [1, 2], axis=1)\n0    [1, 2]\n1    [1, 2]\n2    [1, 2]\ndtype: object\n\nPassing result_type='expand' will expand list-like results\nto columns of a Dataframe\n\n>>> df.apply(lambda x: [1, 2], axis=1, result_type='expand')\n   0  1\n0  1  2\n1  1  2\n2  1  2\n\nReturning a Series inside the function is similar to passing\n``result_type='expand'``. The resulting column names\nwill be the Series index.\n\n>>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)\n   foo  bar\n0    1    2\n1    1    2\n2    1    2\n\nPassing ``result_type='broadcast'`` will ensure the same shape\nresult, whether list-like or scalar is returned by the function,\nand broadcast it along the axis. The resulting column names will\nbe the originals.\n\n>>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast')\n   A  B\n0  1  2\n1  1  2\n2  1  2", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 6651, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L6651", "errors": [["PR08", "Parameter \"raw\" description should start with a capital letter"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Function application, GroupBy & window", "shared_code_with": ""}, "pandas.DataFrame.applymap": {"type": "function", "docstring": "Apply a function to a Dataframe elementwise.\n\nThis method applies a function that accepts and returns a scalar\nto every element of a DataFrame.\n\nParameters\n----------\nfunc : callable\n    Python function, returns a single value from a single value.\n\nReturns\n-------\nDataFrame\n    Transformed DataFrame.\n\nSee Also\n--------\nDataFrame.apply : Apply a function along input axis of DataFrame.\n\nNotes\n-----\nIn the current implementation applymap calls `func` twice on the\nfirst column/row to decide whether it can take a fast or slow\ncode path. This can lead to unexpected behavior if `func` has\nside-effects, as they will take effect twice for the first\ncolumn/row.\n\nExamples\n--------\n>>> df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])\n>>> df\n       0      1\n0  1.000  2.120\n1  3.356  4.567\n\n>>> df.applymap(lambda x: len(str(x)))\n   0  1\n0  3  4\n1  5  5\n\nNote that a vectorized version of `func` often exists, which will\nbe much faster. You could square each number elementwise.\n\n>>> df.applymap(lambda x: x**2)\n           0          1\n0   1.000000   4.494400\n1  11.262736  20.857489\n\nBut it's better to avoid applymap in that case.\n\n>>> df ** 2\n           0          1\n0   1.000000   4.494400\n1  11.262736  20.857489", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 6844, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L6844", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Function application, GroupBy & window", "shared_code_with": ""}, "pandas.DataFrame.pipe": {"type": "function", "docstring": "Apply func(self, \\*args, \\*\\*kwargs).\n\nParameters\n----------\nfunc : function\n    function to apply to the Series/DataFrame.\n    ``args``, and ``kwargs`` are passed into ``func``.\n    Alternatively a ``(callable, data_keyword)`` tuple where\n    ``data_keyword`` is a string indicating the keyword of\n    ``callable`` that expects the Series/DataFrame.\nargs : iterable, optional\n    positional arguments passed into ``func``.\nkwargs : mapping, optional\n    a dictionary of keyword arguments passed into ``func``.\n\nReturns\n-------\nobject : the return type of ``func``.\n\nSee Also\n--------\nDataFrame.apply\nDataFrame.applymap\nSeries.map\n\nNotes\n-----\n\nUse ``.pipe`` when chaining together functions that expect\nSeries, DataFrames or GroupBy objects. Instead of writing\n\n>>> f(g(h(df), arg1=a), arg2=b, arg3=c)\n\nYou can write\n\n>>> (df.pipe(h)\n...    .pipe(g, arg1=a)\n...    .pipe(f, arg2=b, arg3=c)\n... )\n\nIf you have a function that takes the data as (say) the second\nargument, pass a tuple indicating which keyword expects the\ndata. For example, suppose ``f`` takes its data as ``arg2``:\n\n>>> (df.pipe(h)\n...    .pipe(g, arg1=a)\n...    .pipe((f, 'arg2'), arg1=a, arg3=c)\n...  )", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 5000, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L5000", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {kwargs, args}"], ["PR08", "Parameter \"func\" description should start with a capital letter"], ["PR08", "Parameter \"args\" description should start with a capital letter"], ["PR08", "Parameter \"kwargs\" description should start with a capital letter"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"DataFrame.apply\" reference"], ["SA04", "Missing description for See Also \"DataFrame.applymap\" reference"], ["SA04", "Missing description for See Also \"Series.map\" reference"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Function application, GroupBy & window", "shared_code_with": "pandas.Series.pipe"}, "pandas.DataFrame.agg": {"type": "function", "docstring": "Aggregate using one or more operations over the specified axis.\n\n.. versionadded:: 0.20.0\n\nParameters\n----------\nfunc : function, str, list or dict\n    Function to use for aggregating the data. If a function, must either\n    work when passed a DataFrame or when passed to DataFrame.apply.\n\n    Accepted combinations are:\n\n    - function\n    - string function name\n    - list of functions and/or function names, e.g. ``[np.sum, 'mean']``\n    - dict of axis labels -> functions, function names or list of such.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n        If 0 or 'index': apply function to each column.\n        If 1 or 'columns': apply function to each row.\n*args\n    Positional arguments to pass to `func`.\n**kwargs\n    Keyword arguments to pass to `func`.\n\nReturns\n-------\nscalar, Series or DataFrame\n\n    The return can be:\n\n    * scalar : when Series.agg is called with single function\n    * Series : when DataFrame.agg is called with a single function\n    * DataFrame : when DataFrame.agg is called with several functions\n\n    Return scalar, Series or DataFrame.\n\nThe aggregation operations are always performed over an axis, either the\nindex (default) or the column axis. This behavior is different from\n`numpy` aggregation functions (`mean`, `median`, `prod`, `sum`, `std`,\n`var`), where the default is to compute the aggregation of the flattened\narray, e.g., ``numpy.mean(arr_2d)`` as opposed to\n``numpy.mean(arr_2d, axis=0)``.\n\n`agg` is an alias for `aggregate`. Use the alias.\n\nSee Also\n--------\nDataFrame.apply : Perform any type of operations.\nDataFrame.transform : Perform transformation type operations.\ncore.groupby.GroupBy : Perform operations over groups.\ncore.resample.Resampler : Perform operations over resampled bins.\ncore.window.Rolling : Perform operations over rolling window.\ncore.window.Expanding : Perform operations over expanding window.\ncore.window.EWM : Perform operation over exponential weighted\n    window.\n\nNotes\n-----\n`agg` is an alias for `aggregate`. Use the alias.\n\nA passed user-defined-function will be passed a Series for evaluation.\n\nExamples\n--------\n>>> df = pd.DataFrame([[1, 2, 3],\n...                    [4, 5, 6],\n...                    [7, 8, 9],\n...                    [np.nan, np.nan, np.nan]],\n...                   columns=['A', 'B', 'C'])\n\nAggregate these functions over the rows.\n\n>>> df.agg(['sum', 'min'])\n        A     B     C\nsum  12.0  15.0  18.0\nmin   1.0   2.0   3.0\n\nDifferent aggregations per column.\n\n>>> df.agg({'A' : ['sum', 'min'], 'B' : ['min', 'max']})\n        A    B\nmax   NaN  8.0\nmin   1.0  2.0\nsum  12.0  NaN\n\nAggregate over the columns.\n\n>>> df.agg(\"mean\", axis=\"columns\")\n0    2.0\n1    5.0\n2    8.0\n3    NaN\ndtype: float64", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 6614, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L6614", "errors": [["RT03", "Return value has no description"], ["RT03", "Return value has no description"], ["RT03", "Return value has no description"], ["RT03", "Return value has no description"], ["RT03", "Return value has no description"], ["RT03", "Return value has no description"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Function application, GroupBy & window", "shared_code_with": ""}, "pandas.DataFrame.aggregate": {"type": "function", "docstring": "Aggregate using one or more operations over the specified axis.\n\n.. versionadded:: 0.20.0\n\nParameters\n----------\nfunc : function, str, list or dict\n    Function to use for aggregating the data. If a function, must either\n    work when passed a DataFrame or when passed to DataFrame.apply.\n\n    Accepted combinations are:\n\n    - function\n    - string function name\n    - list of functions and/or function names, e.g. ``[np.sum, 'mean']``\n    - dict of axis labels -> functions, function names or list of such.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n        If 0 or 'index': apply function to each column.\n        If 1 or 'columns': apply function to each row.\n*args\n    Positional arguments to pass to `func`.\n**kwargs\n    Keyword arguments to pass to `func`.\n\nReturns\n-------\nscalar, Series or DataFrame\n\n    The return can be:\n\n    * scalar : when Series.agg is called with single function\n    * Series : when DataFrame.agg is called with a single function\n    * DataFrame : when DataFrame.agg is called with several functions\n\n    Return scalar, Series or DataFrame.\n\nThe aggregation operations are always performed over an axis, either the\nindex (default) or the column axis. This behavior is different from\n`numpy` aggregation functions (`mean`, `median`, `prod`, `sum`, `std`,\n`var`), where the default is to compute the aggregation of the flattened\narray, e.g., ``numpy.mean(arr_2d)`` as opposed to\n``numpy.mean(arr_2d, axis=0)``.\n\n`agg` is an alias for `aggregate`. Use the alias.\n\nSee Also\n--------\nDataFrame.apply : Perform any type of operations.\nDataFrame.transform : Perform transformation type operations.\ncore.groupby.GroupBy : Perform operations over groups.\ncore.resample.Resampler : Perform operations over resampled bins.\ncore.window.Rolling : Perform operations over rolling window.\ncore.window.Expanding : Perform operations over expanding window.\ncore.window.EWM : Perform operation over exponential weighted\n    window.\n\nNotes\n-----\n`agg` is an alias for `aggregate`. Use the alias.\n\nA passed user-defined-function will be passed a Series for evaluation.\n\nExamples\n--------\n>>> df = pd.DataFrame([[1, 2, 3],\n...                    [4, 5, 6],\n...                    [7, 8, 9],\n...                    [np.nan, np.nan, np.nan]],\n...                   columns=['A', 'B', 'C'])\n\nAggregate these functions over the rows.\n\n>>> df.agg(['sum', 'min'])\n        A     B     C\nsum  12.0  15.0  18.0\nmin   1.0   2.0   3.0\n\nDifferent aggregations per column.\n\n>>> df.agg({'A' : ['sum', 'min'], 'B' : ['min', 'max']})\n        A    B\nmax   NaN  8.0\nmin   1.0  2.0\nsum  12.0  NaN\n\nAggregate over the columns.\n\n>>> df.agg(\"mean\", axis=\"columns\")\n0    2.0\n1    5.0\n2    8.0\n3    NaN\ndtype: float64", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 6614, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L6614", "errors": [["RT03", "Return value has no description"], ["RT03", "Return value has no description"], ["RT03", "Return value has no description"], ["RT03", "Return value has no description"], ["RT03", "Return value has no description"], ["RT03", "Return value has no description"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Function application, GroupBy & window", "shared_code_with": "pandas.DataFrame.agg"}, "pandas.DataFrame.transform": {"type": "function", "docstring": "Call ``func`` on self producing a DataFrame with transformed values\nand that has the same axis length as self.\n\n.. versionadded:: 0.20.0\n\nParameters\n----------\nfunc : function, str, list or dict\n    Function to use for transforming the data. If a function, must either\n    work when passed a DataFrame or when passed to DataFrame.apply.\n\n    Accepted combinations are:\n\n    - function\n    - string function name\n    - list of functions and/or function names, e.g. ``[np.exp. 'sqrt']``\n    - dict of axis labels -> functions, function names or list of such.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    If 0 or 'index': apply function to each column.\n    If 1 or 'columns': apply function to each row.\n*args\n    Positional arguments to pass to `func`.\n**kwargs\n    Keyword arguments to pass to `func`.\n\nReturns\n-------\nDataFrame\n    A DataFrame that must have the same length as self.\n\nRaises\n------\nValueError : If the returned DataFrame has a different length than self.\n\nSee Also\n--------\nDataFrame.agg : Only perform aggregating type operations.\nDataFrame.apply : Invoke function on a DataFrame.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': range(3), 'B': range(1, 4)})\n>>> df\n   A  B\n0  0  1\n1  1  2\n2  2  3\n>>> df.transform(lambda x: x + 1)\n   A  B\n0  1  2\n1  2  3\n2  3  4\n\nEven though the resulting DataFrame must have the same length as the\ninput DataFrame, it is possible to provide several input functions:\n\n>>> s = pd.Series(range(3))\n>>> s\n0    0\n1    1\n2    2\ndtype: int64\n>>> s.transform([np.sqrt, np.exp])\n       sqrt        exp\n0  0.000000   1.000000\n1  1.000000   2.718282\n2  1.414214   7.389056", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 6644, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L6644", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Function application, GroupBy & window", "shared_code_with": ""}, "pandas.DataFrame.groupby": {"type": "function", "docstring": "Group DataFrame or Series using a mapper or by a Series of columns.\n\nA groupby operation involves some combination of splitting the\nobject, applying a function, and combining the results. This can be\nused to group large amounts of data and compute operations on these\ngroups.\n\nParameters\n----------\nby : mapping, function, label, or list of labels\n    Used to determine the groups for the groupby.\n    If ``by`` is a function, it's called on each value of the object's\n    index. If a dict or Series is passed, the Series or dict VALUES\n    will be used to determine the groups (the Series' values are first\n    aligned; see ``.align()`` method). If an ndarray is passed, the\n    values are used as-is determine the groups. A label or list of\n    labels may be passed to group by the columns in ``self``. Notice\n    that a tuple is interpreted as a (single) key.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Split along rows (0) or columns (1).\nlevel : int, level name, or sequence of such, default None\n    If the axis is a MultiIndex (hierarchical), group by a particular\n    level or levels.\nas_index : bool, default True\n    For aggregated output, return object with group labels as the\n    index. Only relevant for DataFrame input. as_index=False is\n    effectively \"SQL-style\" grouped output.\nsort : bool, default True\n    Sort group keys. Get better performance by turning this off.\n    Note this does not influence the order of observations within each\n    group. Groupby preserves the order of rows within each group.\ngroup_keys : bool, default True\n    When calling apply, add group keys to index to identify pieces.\nsqueeze : bool, default False\n    Reduce the dimensionality of the return type if possible,\n    otherwise return a consistent type.\nobserved : bool, default False\n    This only applies if any of the groupers are Categoricals.\n    If True: only show observed values for categorical groupers.\n    If False: show all values for categorical groupers.\n\n    .. versionadded:: 0.23.0\n\n**kwargs\n    Optional, only accepts keyword argument 'mutated' and is passed\n    to groupby.\n\nReturns\n-------\nDataFrameGroupBy or SeriesGroupBy\n    Depends on the calling object and returns groupby object that\n    contains information about the groups.\n\nSee Also\n--------\nresample : Convenience method for frequency conversion and resampling\n    of time series.\n\nNotes\n-----\nSee the `user guide\n<http://pandas.pydata.org/pandas-docs/stable/groupby.html>`_ for more.\n\nExamples\n--------\n>>> df = pd.DataFrame({'Animal': ['Falcon', 'Falcon',\n...                               'Parrot', 'Parrot'],\n...                    'Max Speed': [380., 370., 24., 26.]})\n>>> df\n   Animal  Max Speed\n0  Falcon      380.0\n1  Falcon      370.0\n2  Parrot       24.0\n3  Parrot       26.0\n>>> df.groupby(['Animal']).mean()\n        Max Speed\nAnimal\nFalcon      375.0\nParrot       25.0\n\n**Hierarchical Indexes**\n\nWe can groupby different levels of a hierarchical index\nusing the `level` parameter:\n\n>>> arrays = [['Falcon', 'Falcon', 'Parrot', 'Parrot'],\n...           ['Captive', 'Wild', 'Captive', 'Wild']]\n>>> index = pd.MultiIndex.from_arrays(arrays, names=('Animal', 'Type'))\n>>> df = pd.DataFrame({'Max Speed': [390., 350., 30., 20.]},\n...                   index=index)\n>>> df\n                Max Speed\nAnimal Type\nFalcon Captive      390.0\n       Wild         350.0\nParrot Captive       30.0\n       Wild          20.0\n>>> df.groupby(level=0).mean()\n        Max Speed\nAnimal\nFalcon      370.0\nParrot       25.0\n>>> df.groupby(level=1).mean()\n         Max Speed\nType\nCaptive      210.0\nWild         185.0", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 7722, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L7722", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Function application, GroupBy & window", "shared_code_with": "pandas.Series.groupby"}, "pandas.DataFrame.rolling": {"type": "function", "docstring": "Provide rolling window calculations.\n\nParameters\n----------\nwindow : int, or offset\n    Size of the moving window. This is the number of observations used for\n    calculating the statistic. Each window will be a fixed size.\n\n    If its an offset then this will be the time period of each window. Each\n    window will be a variable sized based on the observations included in\n    the time-period. This is only valid for datetimelike indexes.\nmin_periods : int, default None\n    Minimum number of observations in window required to have a value\n    (otherwise result is NA). For a window that is specified by an offset,\n    `min_periods` will default to 1. Otherwise, `min_periods` will default\n    to the size of the window.\ncenter : bool, default False\n    Set the labels at the center of the window.\nwin_type : str, default None\n    Provide a window type. If ``None``, all points are evenly weighted.\n    See the notes below for further information.\non : str, optional\n    For a DataFrame, a datetime-like column on which to calculate the rolling\n    window, rather than the DataFrame's index. Provided integer column is\n    ignored and excluded from result since an integer index is not used to\n    calculate the rolling window.\naxis : int or str, default 0\nclosed : str, default None\n    Make the interval closed on the 'right', 'left', 'both' or\n    'neither' endpoints.\n    For offset-based windows, it defaults to 'right'.\n    For fixed windows, defaults to 'both'. Remaining cases not implemented\n    for fixed windows.\n\n    .. versionadded:: 0.20.0\n\nReturns\n-------\na Window or Rolling sub-classed for the particular operation\n\nSee Also\n--------\nexpanding : Provides expanding transformations.\newm : Provides exponential weighted functions.\n\nNotes\n-----\nBy default, the result is set to the right edge of the window. This can be\nchanged to the center of the window by setting ``center=True``.\n\nTo learn more about the offsets & frequency strings, please see `this link\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\nThe recognized win_types are:\n\n* ``boxcar``\n* ``triang``\n* ``blackman``\n* ``hamming``\n* ``bartlett``\n* ``parzen``\n* ``bohman``\n* ``blackmanharris``\n* ``nuttall``\n* ``barthann``\n* ``kaiser`` (needs beta)\n* ``gaussian`` (needs std)\n* ``general_gaussian`` (needs power, width)\n* ``slepian`` (needs width)\n* ``exponential`` (needs tau), center is set to None.\n\nIf ``win_type=None`` all points are evenly weighted. To learn more about\ndifferent window types see `scipy.signal window functions\n<https://docs.scipy.org/doc/scipy/reference/signal.html#window-functions>`__.\n\nExamples\n--------\n\n>>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})\n>>> df\n     B\n0  0.0\n1  1.0\n2  2.0\n3  NaN\n4  4.0\n\nRolling sum with a window length of 2, using the 'triang'\nwindow type.\n\n>>> df.rolling(2, win_type='triang').sum()\n     B\n0  NaN\n1  0.5\n2  1.5\n3  NaN\n4  NaN\n\nRolling sum with a window length of 2, min_periods defaults\nto the window length.\n\n>>> df.rolling(2).sum()\n     B\n0  NaN\n1  1.0\n2  3.0\n3  NaN\n4  NaN\n\nSame as above, but explicitly set the min_periods\n\n>>> df.rolling(2, min_periods=1).sum()\n     B\n0  0.0\n1  1.0\n2  3.0\n3  2.0\n4  4.0\n\nA ragged (meaning not-a-regular frequency), time-indexed DataFrame\n\n>>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]},\n...                   index = [pd.Timestamp('20130101 09:00:00'),\n...                            pd.Timestamp('20130101 09:00:02'),\n...                            pd.Timestamp('20130101 09:00:03'),\n...                            pd.Timestamp('20130101 09:00:05'),\n...                            pd.Timestamp('20130101 09:00:06')])\n\n>>> df\n                       B\n2013-01-01 09:00:00  0.0\n2013-01-01 09:00:02  1.0\n2013-01-01 09:00:03  2.0\n2013-01-01 09:00:05  NaN\n2013-01-01 09:00:06  4.0\n\nContrasting to an integer rolling window, this will roll a variable\nlength window corresponding to the time period.\nThe default for min_periods is 1.\n\n>>> df.rolling('2s').sum()\n                       B\n2013-01-01 09:00:00  0.0\n2013-01-01 09:00:02  1.0\n2013-01-01 09:00:03  3.0\n2013-01-01 09:00:05  NaN\n2013-01-01 09:00:06  4.0", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 10699, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L10699", "errors": [["PR07", "Parameter \"axis\" has no description"], ["RT03", "Return value has no description"], ["EX03", "flake8 error: E251 unexpected spaces around keyword / parameter equals (2 times)"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Function application, GroupBy & window", "shared_code_with": "pandas.Series.rolling"}, "pandas.DataFrame.expanding": {"type": "function", "docstring": "Provide expanding transformations.\n\nParameters\n----------\nmin_periods : int, default 1\n    Minimum number of observations in window required to have a value\n    (otherwise result is NA).\ncenter : bool, default False\n    Set the labels at the center of the window.\naxis : int or str, default 0\n\nReturns\n-------\na Window sub-classed for the particular operation\n\nSee Also\n--------\nrolling : Provides rolling window calculations.\newm : Provides exponential weighted functions.\n\nNotes\n-----\nBy default, the result is set to the right edge of the window. This can be\nchanged to the center of the window by setting ``center=True``.\n\nExamples\n--------\n\n>>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})\n     B\n0  0.0\n1  1.0\n2  2.0\n3  NaN\n4  4.0\n\n>>> df.expanding(2).sum()\n     B\n0  NaN\n1  1.0\n2  3.0\n3  3.0\n4  7.0", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 10737, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L10737", "errors": [["PR07", "Parameter \"axis\" has no description"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 30, in pandas.DataFrame.expanding\nFailed example:\n    df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})\nExpected:\n         B\n    0  0.0\n    1  1.0\n    2  2.0\n    3  NaN\n    4  4.0\nGot nothing\n"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "**********************************************************************\nLine 30, in pandas.DataFrame.expanding\nFailed example:\n    df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})\nExpected:\n         B\n    0  0.0\n    1  1.0\n    2  2.0\n    3  NaN\n    4  4.0\nGot nothing\n", "in_api": true, "section": "", "subsection": "Function application, GroupBy & window", "shared_code_with": "pandas.Series.expanding"}, "pandas.DataFrame.ewm": {"type": "function", "docstring": "Provide exponential weighted functions.\n\nParameters\n----------\ncom : float, optional\n    Specify decay in terms of center of mass,\n    :math:`\\alpha = 1 / (1 + com),\\text{ for } com \\geq 0`.\nspan : float, optional\n    Specify decay in terms of span,\n    :math:`\\alpha = 2 / (span + 1),\\text{ for } span \\geq 1`.\nhalflife : float, optional\n    Specify decay in terms of half-life,\n    :math:`\\alpha = 1 - exp(log(0.5) / halflife),\\text{for} halflife > 0`.\nalpha : float, optional\n    Specify smoothing factor :math:`\\alpha` directly,\n    :math:`0 < \\alpha \\leq 1`.\nmin_periods : int, default 0\n    Minimum number of observations in window required to have a value\n    (otherwise result is NA).\nadjust : bool, default True\n    Divide by decaying adjustment factor in beginning periods to account\n    for imbalance in relative weightings\n    (viewing EWMA as a moving average).\nignore_na : bool, default False\n    Ignore missing values when calculating weights;\n    specify True to reproduce pre-0.15.0 behavior.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to use. The value 0 identifies the rows, and 1\n    identifies the columns.\n\nReturns\n-------\nDataFrame\n    A Window sub-classed for the particular operation.\n\nSee Also\n--------\nrolling : Provides rolling window calculations.\nexpanding : Provides expanding transformations.\n\nNotes\n-----\nExactly one of center of mass, span, half-life, and alpha must be provided.\nAllowed values and relationship between the parameters are specified in the\nparameter descriptions above; see the link at the end of this section for\na detailed explanation.\n\nWhen adjust is True (default), weighted averages are calculated using\nweights (1-alpha)**(n-1), (1-alpha)**(n-2), ..., 1-alpha, 1.\n\nWhen adjust is False, weighted averages are calculated recursively as:\n   weighted_average[0] = arg[0];\n   weighted_average[i] = (1-alpha)*weighted_average[i-1] + alpha*arg[i].\n\nWhen ignore_na is False (default), weights are based on absolute positions.\nFor example, the weights of x and y used in calculating the final weighted\naverage of [x, None, y] are (1-alpha)**2 and 1 (if adjust is True), and\n(1-alpha)**2 and alpha (if adjust is False).\n\nWhen ignore_na is True (reproducing pre-0.15.0 behavior), weights are based\non relative positions. For example, the weights of x and y used in\ncalculating the final weighted average of [x, None, y] are 1-alpha and 1\n(if adjust is True), and 1-alpha and alpha (if adjust is False).\n\nMore details can be found at\nhttp://pandas.pydata.org/pandas-docs/stable/user_guide/computation.html#exponentially-weighted-windows\n\nExamples\n--------\n\n>>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})\n>>> df\n     B\n0  0.0\n1  1.0\n2  2.0\n3  NaN\n4  4.0\n\n>>> df.ewm(com=0.5).mean()\n          B\n0  0.000000\n1  0.750000\n2  1.615385\n3  1.615385\n4  3.670213", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 10744, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L10744", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Function application, GroupBy & window", "shared_code_with": "pandas.Series.ewm"}, "pandas.DataFrame.abs": {"type": "function", "docstring": "Return a Series/DataFrame with absolute numeric value of each element.\n\nThis function only applies to elements that are all numeric.\n\nReturns\n-------\nabs\n    Series/DataFrame containing the absolute value of each element.\n\nSee Also\n--------\nnumpy.absolute : Calculate the absolute value element-wise.\n\nNotes\n-----\nFor ``complex`` inputs, ``1.2 + 1j``, the absolute value is\n:math:`\\sqrt{ a^2 + b^2 }`.\n\nExamples\n--------\nAbsolute numeric values in a Series.\n\n>>> s = pd.Series([-1.10, 2, -3.33, 4])\n>>> s.abs()\n0    1.10\n1    2.00\n2    3.33\n3    4.00\ndtype: float64\n\nAbsolute numeric values in a Series with complex numbers.\n\n>>> s = pd.Series([1.2 + 1j])\n>>> s.abs()\n0    1.56205\ndtype: float64\n\nAbsolute numeric values in a Series with a Timedelta element.\n\n>>> s = pd.Series([pd.Timedelta('1 days')])\n>>> s.abs()\n0   1 days\ndtype: timedelta64[ns]\n\nSelect rows with data closest to certain value using argsort (from\n`StackOverflow <https://stackoverflow.com/a/17758115>`__).\n\n>>> df = pd.DataFrame({\n...     'a': [4, 5, 6, 7],\n...     'b': [10, 20, 30, 40],\n...     'c': [100, 50, -30, -50]\n... })\n>>> df\n     a    b    c\n0    4   10  100\n1    5   20   50\n2    6   30  -30\n3    7   40  -50\n>>> df.loc[(df.c - 43).abs().argsort()]\n     a    b    c\n1    5   20   50\n0    4   10  100\n2    6   30  -30\n3    7   40  -50", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 9825, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L9825", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.Series.abs"}, "pandas.DataFrame.all": {"type": "function", "docstring": "Return whether all elements are True, potentially over an axis.\n\nReturns True unless there at least one element within a series or\nalong a Dataframe axis that is False or equivalent (e.g. zero or\nempty).\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns', None}, default 0\n    Indicate which axis or axes should be reduced.\n\n    * 0 / 'index' : reduce the index, return a Series whose index is the\n      original column labels.\n    * 1 / 'columns' : reduce the columns, return a Series whose index is the\n      original index.\n    * None : reduce all axes, return a scalar.\n\nbool_only : bool, default None\n    Include only boolean columns. If None, will attempt to use everything,\n    then use only boolean data. Not implemented for Series.\nskipna : bool, default True\n    Exclude NA/null values. If the entire row/column is NA and skipna is\n    True, then the result will be True, as for an empty row/column.\n    If skipna is False, then NA are treated as True, because these are not\n    equal to zero.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a Series.\n**kwargs : any, default None\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nSeries or DataFrame\n    If level is specified, then, DataFrame is returned; otherwise, Series\n    is returned.\n\nSee Also\n--------\nSeries.all : Return True if all elements are True.\nDataFrame.any : Return True if one (or more) elements are True.\n\nExamples\n--------\n**Series**\n\n>>> pd.Series([True, True]).all()\nTrue\n>>> pd.Series([True, False]).all()\nFalse\n>>> pd.Series([]).all()\nTrue\n>>> pd.Series([np.nan]).all()\nTrue\n>>> pd.Series([np.nan]).all(skipna=False)\nTrue\n\n**DataFrames**\n\nCreate a dataframe from a dictionary.\n\n>>> df = pd.DataFrame({'col1': [True, True], 'col2': [True, False]})\n>>> df\n   col1   col2\n0  True   True\n1  True  False\n\nDefault behaviour checks if column-wise values all return True.\n\n>>> df.all()\ncol1     True\ncol2    False\ndtype: bool\n\nSpecify ``axis='columns'`` to check if row-wise values all return True.\n\n>>> df.all(axis='columns')\n0     True\n1    False\ndtype: bool\n\nOr ``axis=None`` for whether every value is True.\n\n>>> df.all(axis=None)\nFalse", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11660, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11660", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.Series.any"}, "pandas.DataFrame.any": {"type": "function", "docstring": "Return whether any element is True, potentially over an axis.\n\nReturns False unless there at least one element within a series or\nalong a Dataframe axis that is True or equivalent (e.g. non-zero or\nnon-empty).\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns', None}, default 0\n    Indicate which axis or axes should be reduced.\n\n    * 0 / 'index' : reduce the index, return a Series whose index is the\n      original column labels.\n    * 1 / 'columns' : reduce the columns, return a Series whose index is the\n      original index.\n    * None : reduce all axes, return a scalar.\n\nbool_only : bool, default None\n    Include only boolean columns. If None, will attempt to use everything,\n    then use only boolean data. Not implemented for Series.\nskipna : bool, default True\n    Exclude NA/null values. If the entire row/column is NA and skipna is\n    True, then the result will be False, as for an empty row/column.\n    If skipna is False, then NA are treated as True, because these are not\n    equal to zero.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a Series.\n**kwargs : any, default None\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nSeries or DataFrame\n    If level is specified, then, DataFrame is returned; otherwise, Series\n    is returned.\n\nSee Also\n--------\nnumpy.any : Numpy version of this method.\nSeries.any : Return whether any element is True.\nSeries.all : Return whether all elements are True.\nDataFrame.any : Return whether any element is True over requested axis.\nDataFrame.all : Return whether all elements are True over requested axis.\n\nExamples\n--------\n**Series**\n\nFor Series input, the output is a scalar indicating whether any element\nis True.\n\n>>> pd.Series([False, False]).any()\nFalse\n>>> pd.Series([True, False]).any()\nTrue\n>>> pd.Series([]).any()\nFalse\n>>> pd.Series([np.nan]).any()\nFalse\n>>> pd.Series([np.nan]).any(skipna=False)\nTrue\n\n**DataFrame**\n\nWhether each column contains at least one True element (the default).\n\n>>> df = pd.DataFrame({\"A\": [1, 2], \"B\": [0, 2], \"C\": [0, 0]})\n>>> df\n   A  B  C\n0  1  0  0\n1  2  2  0\n\n>>> df.any()\nA     True\nB     True\nC    False\ndtype: bool\n\nAggregating over the columns.\n\n>>> df = pd.DataFrame({\"A\": [True, False], \"B\": [1, 2]})\n>>> df\n       A  B\n0   True  1\n1  False  2\n\n>>> df.any(axis='columns')\n0    True\n1    True\ndtype: bool\n\n>>> df = pd.DataFrame({\"A\": [True, False], \"B\": [1, 0]})\n>>> df\n       A  B\n0   True  1\n1  False  0\n\n>>> df.any(axis='columns')\n0    True\n1    False\ndtype: bool\n\nAggregating over the entire DataFrame with ``axis=None``.\n\n>>> df.any(axis=None)\nTrue\n\n`any` for an empty DataFrame is an empty Series.\n\n>>> pd.DataFrame([]).any()\nSeries([], dtype: bool)", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11660, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11660", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.DataFrame.all"}, "pandas.DataFrame.clip": {"type": "function", "docstring": "Trim values at input threshold(s).\n\nAssigns values outside boundary to boundary values. Thresholds\ncan be singular values or array like, and in the latter case\nthe clipping is performed element-wise in the specified axis.\n\nParameters\n----------\nlower : float or array_like, default None\n    Minimum threshold value. All values below this\n    threshold will be set to it.\nupper : float or array_like, default None\n    Maximum threshold value. All values above this\n    threshold will be set to it.\naxis : int or str axis name, optional\n    Align object with lower and upper along the given axis.\ninplace : bool, default False\n    Whether to perform the operation in place on the data.\n\n    .. versionadded:: 0.21.0\n*args, **kwargs\n    Additional keywords have no effect but might be accepted\n    for compatibility with numpy.\n\nReturns\n-------\nSeries or DataFrame\n    Same type as calling object with the values outside the\n    clip boundaries replaced.\n\nExamples\n--------\n>>> data = {'col_0': [9, -3, 0, -1, 5], 'col_1': [-2, -7, 6, 8, -5]}\n>>> df = pd.DataFrame(data)\n>>> df\n   col_0  col_1\n0      9     -2\n1     -3     -7\n2      0      6\n3     -1      8\n4      5     -5\n\nClips per column using lower and upper thresholds:\n\n>>> df.clip(-4, 6)\n   col_0  col_1\n0      6     -2\n1     -3     -4\n2      0      6\n3     -1      6\n4      5     -4\n\nClips using specific lower and upper thresholds per column element:\n\n>>> t = pd.Series([2, -4, -1, 6, 3])\n>>> t\n0    2\n1   -4\n2   -1\n3    6\n4    3\ndtype: int64\n\n>>> df.clip(t, t + 4, axis=0)\n   col_0  col_1\n0      6      2\n1     -3     -4\n2      0      3\n3      6      8\n4      5      3", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 7406, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L7406", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs}"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.Series.clip"}, "pandas.DataFrame.clip_lower": {"type": "function", "docstring": "Trim values below a given threshold.\n\n.. deprecated:: 0.24.0\n    Use clip(lower=threshold) instead.\n\nElements below the `threshold` will be changed to match the\n`threshold` value(s). Threshold can be a single value or an array,\nin the latter case it performs the truncation element-wise.\n\nParameters\n----------\nthreshold : numeric or array-like\n    Minimum value allowed. All values below threshold will be set to\n    this value.\n\n    * float : every value is compared to `threshold`.\n    * array-like : The shape of `threshold` should match the object\n      it's compared to. When `self` is a Series, `threshold` should be\n      the length. When `self` is a DataFrame, `threshold` should 2-D\n      and the same shape as `self` for ``axis=None``, or 1-D and the\n      same length as the axis being compared.\n\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Align `self` with `threshold` along the given axis.\n\ninplace : bool, default False\n    Whether to perform the operation in place on the data.\n\n    .. versionadded:: 0.21.0\n\nReturns\n-------\nSeries or DataFrame\n    Original data with values trimmed.\n\nSee Also\n--------\nSeries.clip : General purpose method to trim Series values to given\n    threshold(s).\nDataFrame.clip : General purpose method to trim DataFrame values to\n    given threshold(s).\n\nExamples\n--------\n\nSeries single threshold clipping:\n\n>>> s = pd.Series([5, 6, 7, 8, 9])\n>>> s.clip(lower=8)\n0    8\n1    8\n2    8\n3    8\n4    9\ndtype: int64\n\nSeries clipping element-wise using an array of thresholds. `threshold`\nshould be the same length as the Series.\n\n>>> elemwise_thresholds = [4, 8, 7, 2, 5]\n>>> s.clip(lower=elemwise_thresholds)\n0    5\n1    8\n2    7\n3    8\n4    9\ndtype: int64\n\nDataFrames can be compared to a scalar.\n\n>>> df = pd.DataFrame({\"A\": [1, 3, 5], \"B\": [2, 4, 6]})\n>>> df\n   A  B\n0  1  2\n1  3  4\n2  5  6\n\n>>> df.clip(lower=3)\n   A  B\n0  3  3\n1  3  4\n2  5  6\n\nOr to an array of values. By default, `threshold` should be the same\nshape as the DataFrame.\n\n>>> df.clip(lower=np.array([[3, 4], [2, 2], [6, 2]]))\n   A  B\n0  3  4\n1  3  4\n2  6  6\n\nControl how `threshold` is broadcast with `axis`. In this case\n`threshold` should be the same length as the axis specified by\n`axis`.\n\n>>> df.clip(lower=[3, 3, 5], axis='index')\n   A  B\n0  3  3\n1  3  4\n2  5  6\n\n>>> df.clip(lower=[4, 5], axis='columns')\n   A  B\n0  4  5\n1  4  5\n2  5  6", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 7603, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L7603", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.Series.clip_lower"}, "pandas.DataFrame.clip_upper": {"type": "function", "docstring": "Trim values above a given threshold.\n\n.. deprecated:: 0.24.0\n    Use clip(upper=threshold) instead.\n\nElements above the `threshold` will be changed to match the\n`threshold` value(s). Threshold can be a single value or an array,\nin the latter case it performs the truncation element-wise.\n\nParameters\n----------\nthreshold : numeric or array-like\n    Maximum value allowed. All values above threshold will be set to\n    this value.\n\n    * float : every value is compared to `threshold`.\n    * array-like : The shape of `threshold` should match the object\n      it's compared to. When `self` is a Series, `threshold` should be\n      the length. When `self` is a DataFrame, `threshold` should 2-D\n      and the same shape as `self` for ``axis=None``, or 1-D and the\n      same length as the axis being compared.\n\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Align object with `threshold` along the given axis.\ninplace : bool, default False\n    Whether to perform the operation in place on the data.\n\n    .. versionadded:: 0.21.0\n\nReturns\n-------\nSeries or DataFrame\n    Original data with values trimmed.\n\nSee Also\n--------\nSeries.clip : General purpose method to trim Series values to given\n    threshold(s).\nDataFrame.clip : General purpose method to trim DataFrame values to\n    given threshold(s).\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4, 5])\n>>> s\n0    1\n1    2\n2    3\n3    4\n4    5\ndtype: int64\n\n>>> s.clip(upper=3)\n0    1\n1    2\n2    3\n3    3\n4    3\ndtype: int64\n\n>>> elemwise_thresholds = [5, 4, 3, 2, 1]\n>>> elemwise_thresholds\n[5, 4, 3, 2, 1]\n\n>>> s.clip(upper=elemwise_thresholds)\n0    1\n1    2\n2    3\n3    2\n4    1\ndtype: int64", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 7520, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L7520", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.Series.clip_upper"}, "pandas.DataFrame.compound": {"type": "function", "docstring": "Return the compound percentage of the values for the requested axis.\n\n.. deprecated:: 0.25.0\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a Series.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or DataFrame (if level specified)", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 10492, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L10492", "errors": [["PR02", "Unknown parameters {**kwargs, numeric_only}"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.Series.compound"}, "pandas.DataFrame.corr": {"type": "function", "docstring": "Compute pairwise correlation of columns, excluding NA/null values.\n\nParameters\n----------\nmethod : {'pearson', 'kendall', 'spearman'} or callable\n    * pearson : standard correlation coefficient\n    * kendall : Kendall Tau correlation coefficient\n    * spearman : Spearman rank correlation\n    * callable: callable with input two 1d ndarrays\n        and returning a float. Note that the returned matrix from corr\n        will have 1 along the diagonals and will be symmetric\n        regardless of the callable's behavior\n        .. versionadded:: 0.24.0\n\nmin_periods : int, optional\n    Minimum number of observations required per pair of columns\n    to have a valid result. Currently only available for Pearson\n    and Spearman correlation.\n\nReturns\n-------\nDataFrame\n    Correlation matrix.\n\nSee Also\n--------\nDataFrame.corrwith\nSeries.corr\n\nExamples\n--------\n>>> def histogram_intersection(a, b):\n...     v = np.minimum(a, b).sum().round(decimals=1)\n...     return v\n>>> df = pd.DataFrame([(.2, .3), (.0, .6), (.6, .0), (.2, .1)],\n...                   columns=['dogs', 'cats'])\n>>> df.corr(method=histogram_intersection)\n      dogs  cats\ndogs   1.0   0.3\ncats   0.3   1.0", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 7380, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L7380", "errors": [["PR08", "Parameter \"method\" description should start with a capital letter"], ["PR09", "Parameter \"method\" description should finish with \".\""], ["SA04", "Missing description for See Also \"DataFrame.corrwith\" reference"], ["SA04", "Missing description for See Also \"Series.corr\" reference"], ["EX03", "flake8 error: E302 expected 2 blank lines, found 0"], ["EX03", "flake8 error: E305 expected 2 blank lines after class or function definition, found 0"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": ""}, "pandas.DataFrame.corrwith": {"type": "function", "docstring": "Compute pairwise correlation between rows or columns of DataFrame\nwith rows or columns of Series or DataFrame.  DataFrames are first\naligned along both axes before computing the correlations.\n\nParameters\n----------\nother : DataFrame, Series\n    Object with which to compute correlations.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    0 or 'index' to compute column-wise, 1 or 'columns' for row-wise.\ndrop : bool, default False\n    Drop missing indices from result.\nmethod : {'pearson', 'kendall', 'spearman'} or callable\n    * pearson : standard correlation coefficient\n    * kendall : Kendall Tau correlation coefficient\n    * spearman : Spearman rank correlation\n    * callable: callable with input two 1d ndarrays\n        and returning a float\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nSeries\n    Pairwise correlations.\n\nSee Also\n--------\nDataFrame.corr", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 7575, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L7575", "errors": [["SS06", "Summary should fit in a single line"], ["PR08", "Parameter \"axis\" description should start with a capital letter"], ["PR08", "Parameter \"method\" description should start with a capital letter"], ["PR09", "Parameter \"method\" description should finish with \".\""], ["SA04", "Missing description for See Also \"DataFrame.corr\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": ""}, "pandas.DataFrame.count": {"type": "function", "docstring": "Count non-NA cells for each column or row.\n\nThe values `None`, `NaN`, `NaT`, and optionally `numpy.inf` (depending\non `pandas.options.mode.use_inf_as_na`) are considered NA.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    If 0 or 'index' counts are generated for each column.\n    If 1 or 'columns' counts are generated for each **row**.\nlevel : int or str, optional\n    If the axis is a `MultiIndex` (hierarchical), count along a\n    particular `level`, collapsing into a `DataFrame`.\n    A `str` specifies the level name.\nnumeric_only : bool, default False\n    Include only `float`, `int` or `boolean` data.\n\nReturns\n-------\nSeries or DataFrame\n    For each column/row the number of non-NA/null entries.\n    If `level` is specified returns a `DataFrame`.\n\nSee Also\n--------\nSeries.count: Number of non-NA elements in a Series.\nDataFrame.shape: Number of DataFrame rows and columns (including NA\n    elements).\nDataFrame.isna: Boolean same-sized DataFrame showing places of NA\n    elements.\n\nExamples\n--------\nConstructing DataFrame from a dictionary:\n\n>>> df = pd.DataFrame({\"Person\":\n...                    [\"John\", \"Myla\", \"Lewis\", \"John\", \"Myla\"],\n...                    \"Age\": [24., np.nan, 21., 33, 26],\n...                    \"Single\": [False, True, True, True, False]})\n>>> df\n   Person   Age  Single\n0    John  24.0   False\n1    Myla   NaN    True\n2   Lewis  21.0    True\n3    John  33.0    True\n4    Myla  26.0   False\n\nNotice the uncounted NA values:\n\n>>> df.count()\nPerson    5\nAge       4\nSingle    5\ndtype: int64\n\nCounts for each **row**:\n\n>>> df.count(axis='columns')\n0    3\n1    2\n2    3\n3    3\n4    3\ndtype: int64\n\nCounts for one level of a `MultiIndex`:\n\n>>> df.set_index([\"Person\", \"Single\"]).count(level=\"Person\")\n        Age\nPerson\nJohn      2\nLewis     1\nMyla      1", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 7665, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L7665", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": ""}, "pandas.DataFrame.cov": {"type": "function", "docstring": "Compute pairwise covariance of columns, excluding NA/null values.\n\nCompute the pairwise covariance among the series of a DataFrame.\nThe returned data frame is the `covariance matrix\n<https://en.wikipedia.org/wiki/Covariance_matrix>`__ of the columns\nof the DataFrame.\n\nBoth NA and null values are automatically excluded from the\ncalculation. (See the note below about bias from missing values.)\nA threshold can be set for the minimum number of\nobservations for each value created. Comparisons with observations\nbelow this threshold will be returned as ``NaN``.\n\nThis method is generally used for the analysis of time series data to\nunderstand the relationship between different measures\nacross time.\n\nParameters\n----------\nmin_periods : int, optional\n    Minimum number of observations required per pair of columns\n    to have a valid result.\n\nReturns\n-------\nDataFrame\n    The covariance matrix of the series of the DataFrame.\n\nSee Also\n--------\nSeries.cov : Compute covariance with another Series.\ncore.window.EWM.cov: Exponential weighted sample covariance.\ncore.window.Expanding.cov : Expanding sample covariance.\ncore.window.Rolling.cov : Rolling sample covariance.\n\nNotes\n-----\nReturns the covariance matrix of the DataFrame's time series.\nThe covariance is normalized by N-1.\n\nFor DataFrames that have Series that are missing data (assuming that\ndata is `missing at random\n<https://en.wikipedia.org/wiki/Missing_data#Missing_at_random>`__)\nthe returned covariance matrix will be an unbiased estimate\nof the variance and covariance between the member Series.\n\nHowever, for many applications this estimate may not be acceptable\nbecause the estimate covariance matrix is not guaranteed to be positive\nsemi-definite. This could lead to estimate correlations having\nabsolute values which are greater than one, and/or a non-invertible\ncovariance matrix. See `Estimation of covariance matrices\n<http://en.wikipedia.org/w/index.php?title=Estimation_of_covariance_\nmatrices>`__ for more details.\n\nExamples\n--------\n>>> df = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)],\n...                   columns=['dogs', 'cats'])\n>>> df.cov()\n          dogs      cats\ndogs  0.666667 -1.000000\ncats -1.000000  1.666667\n\n>>> np.random.seed(42)\n>>> df = pd.DataFrame(np.random.randn(1000, 5),\n...                   columns=['a', 'b', 'c', 'd', 'e'])\n>>> df.cov()\n          a         b         c         d         e\na  0.998438 -0.020161  0.059277 -0.008943  0.014144\nb -0.020161  1.059352 -0.008543 -0.024738  0.009826\nc  0.059277 -0.008543  1.010670 -0.001486 -0.000271\nd -0.008943 -0.024738 -0.001486  0.921297 -0.013692\ne  0.014144  0.009826 -0.000271 -0.013692  0.977795\n\n**Minimum number of periods**\n\nThis method also supports an optional ``min_periods`` keyword\nthat specifies the required minimum number of non-NA observations for\neach column pair in order to have a valid result:\n\n>>> np.random.seed(42)\n>>> df = pd.DataFrame(np.random.randn(20, 3),\n...                   columns=['a', 'b', 'c'])\n>>> df.loc[df.index[:5], 'a'] = np.nan\n>>> df.loc[df.index[5:10], 'b'] = np.nan\n>>> df.cov(min_periods=12)\n          a         b         c\na  0.316741       NaN -0.150812\nb       NaN  1.248003  0.191417\nc -0.150812  0.191417  0.895202", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 7465, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L7465", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": ""}, "pandas.DataFrame.cummax": {"type": "function", "docstring": "Return cumulative maximum over a DataFrame or Series axis.\n\nReturns a DataFrame or Series of the same size containing the cumulative\nmaximum.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The index or the name of the axis. 0 is equivalent to None or 'index'.\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\n*args, **kwargs :\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nSeries or DataFrame\n\nSee Also\n--------\ncore.window.Expanding.max : Similar functionality\n    but ignores ``NaN`` values.\nDataFrame.max : Return the maximum over\n    DataFrame axis.\nDataFrame.cummax : Return cumulative maximum over DataFrame axis.\nDataFrame.cummin : Return cumulative minimum over DataFrame axis.\nDataFrame.cumsum : Return cumulative sum over DataFrame axis.\nDataFrame.cumprod : Return cumulative product over DataFrame axis.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cummax()\n0    2.0\n1    NaN\n2    5.0\n3    5.0\n4    5.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cummax(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                    columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the maximum\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cummax()\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  3.0  1.0\n\nTo iterate over columns and find the maximum in each row,\nuse ``axis=1``\n\n>>> df.cummax(axis=1)\n     A    B\n0  2.0  2.0\n1  3.0  NaN\n2  1.0  1.0", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11620, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11620", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs :}"], ["RT03", "Return value has no description"], ["EX03", "flake8 error: E127 continuation line over-indented for visual indent"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.Series.cumsum"}, "pandas.DataFrame.cummin": {"type": "function", "docstring": "Return cumulative minimum over a DataFrame or Series axis.\n\nReturns a DataFrame or Series of the same size containing the cumulative\nminimum.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The index or the name of the axis. 0 is equivalent to None or 'index'.\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\n*args, **kwargs :\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nSeries or DataFrame\n\nSee Also\n--------\ncore.window.Expanding.min : Similar functionality\n    but ignores ``NaN`` values.\nDataFrame.min : Return the minimum over\n    DataFrame axis.\nDataFrame.cummax : Return cumulative maximum over DataFrame axis.\nDataFrame.cummin : Return cumulative minimum over DataFrame axis.\nDataFrame.cumsum : Return cumulative sum over DataFrame axis.\nDataFrame.cumprod : Return cumulative product over DataFrame axis.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cummin()\n0    2.0\n1    NaN\n2    2.0\n3   -1.0\n4   -1.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cummin(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                    columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the minimum\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cummin()\n     A    B\n0  2.0  1.0\n1  2.0  NaN\n2  1.0  0.0\n\nTo iterate over columns and find the minimum in each row,\nuse ``axis=1``\n\n>>> df.cummin(axis=1)\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11620, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11620", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs :}"], ["RT03", "Return value has no description"], ["EX03", "flake8 error: E127 continuation line over-indented for visual indent"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.DataFrame.cummax"}, "pandas.DataFrame.cumprod": {"type": "function", "docstring": "Return cumulative product over a DataFrame or Series axis.\n\nReturns a DataFrame or Series of the same size containing the cumulative\nproduct.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The index or the name of the axis. 0 is equivalent to None or 'index'.\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\n*args, **kwargs :\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nSeries or DataFrame\n\nSee Also\n--------\ncore.window.Expanding.prod : Similar functionality\n    but ignores ``NaN`` values.\nDataFrame.prod : Return the product over\n    DataFrame axis.\nDataFrame.cummax : Return cumulative maximum over DataFrame axis.\nDataFrame.cummin : Return cumulative minimum over DataFrame axis.\nDataFrame.cumsum : Return cumulative sum over DataFrame axis.\nDataFrame.cumprod : Return cumulative product over DataFrame axis.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cumprod()\n0     2.0\n1     NaN\n2    10.0\n3   -10.0\n4    -0.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cumprod(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                    columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the product\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cumprod()\n     A    B\n0  2.0  1.0\n1  6.0  NaN\n2  6.0  0.0\n\nTo iterate over columns and find the product in each row,\nuse ``axis=1``\n\n>>> df.cumprod(axis=1)\n     A    B\n0  2.0  2.0\n1  3.0  NaN\n2  1.0  0.0", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11620, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11620", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs :}"], ["RT03", "Return value has no description"], ["EX03", "flake8 error: E127 continuation line over-indented for visual indent"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.DataFrame.cummin"}, "pandas.DataFrame.cumsum": {"type": "function", "docstring": "Return cumulative sum over a DataFrame or Series axis.\n\nReturns a DataFrame or Series of the same size containing the cumulative\nsum.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The index or the name of the axis. 0 is equivalent to None or 'index'.\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\n*args, **kwargs :\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nSeries or DataFrame\n\nSee Also\n--------\ncore.window.Expanding.sum : Similar functionality\n    but ignores ``NaN`` values.\nDataFrame.sum : Return the sum over\n    DataFrame axis.\nDataFrame.cummax : Return cumulative maximum over DataFrame axis.\nDataFrame.cummin : Return cumulative minimum over DataFrame axis.\nDataFrame.cumsum : Return cumulative sum over DataFrame axis.\nDataFrame.cumprod : Return cumulative product over DataFrame axis.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cumsum()\n0    2.0\n1    NaN\n2    7.0\n3    6.0\n4    6.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cumsum(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                    columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the sum\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cumsum()\n     A    B\n0  2.0  1.0\n1  5.0  NaN\n2  6.0  1.0\n\nTo iterate over columns and find the sum in each row,\nuse ``axis=1``\n\n>>> df.cumsum(axis=1)\n     A    B\n0  2.0  3.0\n1  3.0  NaN\n2  1.0  1.0", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11620, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11620", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs :}"], ["RT03", "Return value has no description"], ["EX03", "flake8 error: E127 continuation line over-indented for visual indent"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.DataFrame.cumprod"}, "pandas.DataFrame.describe": {"type": "function", "docstring": "Generate descriptive statistics that summarize the central tendency,\ndispersion and shape of a dataset's distribution, excluding\n``NaN`` values.\n\nAnalyzes both numeric and object series, as well\nas ``DataFrame`` column sets of mixed data types. The output\nwill vary depending on what is provided. Refer to the notes\nbelow for more detail.\n\nParameters\n----------\npercentiles : list-like of numbers, optional\n    The percentiles to include in the output. All should\n    fall between 0 and 1. The default is\n    ``[.25, .5, .75]``, which returns the 25th, 50th, and\n    75th percentiles.\ninclude : 'all', list-like of dtypes or None (default), optional\n    A white list of data types to include in the result. Ignored\n    for ``Series``. Here are the options:\n\n    - 'all' : All columns of the input will be included in the output.\n    - A list-like of dtypes : Limits the results to the\n      provided data types.\n      To limit the result to numeric types submit\n      ``numpy.number``. To limit it instead to object columns submit\n      the ``numpy.object`` data type. Strings\n      can also be used in the style of\n      ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n      select pandas categorical columns, use ``'category'``\n    - None (default) : The result will include all numeric columns.\nexclude : list-like of dtypes or None (default), optional,\n    A black list of data types to omit from the result. Ignored\n    for ``Series``. Here are the options:\n\n    - A list-like of dtypes : Excludes the provided data types\n      from the result. To exclude numeric types submit\n      ``numpy.number``. To exclude object columns submit the data\n      type ``numpy.object``. Strings can also be used in the style of\n      ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n      exclude pandas categorical columns, use ``'category'``\n    - None (default) : The result will exclude nothing.\n\nReturns\n-------\nSeries or DataFrame\n    Summary statistics of the Series or Dataframe provided.\n\nSee Also\n--------\nDataFrame.count: Count number of non-NA/null observations.\nDataFrame.max: Maximum of the values in the object.\nDataFrame.min: Minimum of the values in the object.\nDataFrame.mean: Mean of the values.\nDataFrame.std: Standard deviation of the observations.\nDataFrame.select_dtypes: Subset of a DataFrame including/excluding\n    columns based on their dtype.\n\nNotes\n-----\nFor numeric data, the result's index will include ``count``,\n``mean``, ``std``, ``min``, ``max`` as well as lower, ``50`` and\nupper percentiles. By default the lower percentile is ``25`` and the\nupper percentile is ``75``. The ``50`` percentile is the\nsame as the median.\n\nFor object data (e.g. strings or timestamps), the result's index\nwill include ``count``, ``unique``, ``top``, and ``freq``. The ``top``\nis the most common value. The ``freq`` is the most common value's\nfrequency. Timestamps also include the ``first`` and ``last`` items.\n\nIf multiple object values have the highest count, then the\n``count`` and ``top`` results will be arbitrarily chosen from\namong those with the highest count.\n\nFor mixed data types provided via a ``DataFrame``, the default is to\nreturn only an analysis of numeric columns. If the dataframe consists\nonly of object and categorical data without any numeric columns, the\ndefault is to return an analysis of both the object and categorical\ncolumns. If ``include='all'`` is provided as an option, the result\nwill include a union of attributes of each type.\n\nThe `include` and `exclude` parameters can be used to limit\nwhich columns in a ``DataFrame`` are analyzed for the output.\nThe parameters are ignored when analyzing a ``Series``.\n\nExamples\n--------\nDescribing a numeric ``Series``.\n\n>>> s = pd.Series([1, 2, 3])\n>>> s.describe()\ncount    3.0\nmean     2.0\nstd      1.0\nmin      1.0\n25%      1.5\n50%      2.0\n75%      2.5\nmax      3.0\ndtype: float64\n\nDescribing a categorical ``Series``.\n\n>>> s = pd.Series(['a', 'a', 'b', 'c'])\n>>> s.describe()\ncount     4\nunique    3\ntop       a\nfreq      2\ndtype: object\n\nDescribing a timestamp ``Series``.\n\n>>> s = pd.Series([\n...   np.datetime64(\"2000-01-01\"),\n...   np.datetime64(\"2010-01-01\"),\n...   np.datetime64(\"2010-01-01\")\n... ])\n>>> s.describe()\ncount                       3\nunique                      2\ntop       2010-01-01 00:00:00\nfreq                        2\nfirst     2000-01-01 00:00:00\nlast      2010-01-01 00:00:00\ndtype: object\n\nDescribing a ``DataFrame``. By default only numeric fields\nare returned.\n\n>>> df = pd.DataFrame({'categorical': pd.Categorical(['d','e','f']),\n...                    'numeric': [1, 2, 3],\n...                    'object': ['a', 'b', 'c']\n...                   })\n>>> df.describe()\n       numeric\ncount      3.0\nmean       2.0\nstd        1.0\nmin        1.0\n25%        1.5\n50%        2.0\n75%        2.5\nmax        3.0\n\nDescribing all columns of a ``DataFrame`` regardless of data type.\n\n>>> df.describe(include='all')\n        categorical  numeric object\ncount            3      3.0      3\nunique           3      NaN      3\ntop              f      NaN      c\nfreq             1      NaN      1\nmean           NaN      2.0    NaN\nstd            NaN      1.0    NaN\nmin            NaN      1.0    NaN\n25%            NaN      1.5    NaN\n50%            NaN      2.0    NaN\n75%            NaN      2.5    NaN\nmax            NaN      3.0    NaN\n\nDescribing a column from a ``DataFrame`` by accessing it as\nan attribute.\n\n>>> df.numeric.describe()\ncount    3.0\nmean     2.0\nstd      1.0\nmin      1.0\n25%      1.5\n50%      2.0\n75%      2.5\nmax      3.0\nName: numeric, dtype: float64\n\nIncluding only numeric columns in a ``DataFrame`` description.\n\n>>> df.describe(include=[np.number])\n       numeric\ncount      3.0\nmean       2.0\nstd        1.0\nmin        1.0\n25%        1.5\n50%        2.0\n75%        2.5\nmax        3.0\n\nIncluding only string columns in a ``DataFrame`` description.\n\n>>> df.describe(include=[np.object])\n       object\ncount       3\nunique      3\ntop         c\nfreq        1\n\nIncluding only categorical columns from a ``DataFrame`` description.\n\n>>> df.describe(include=['category'])\n       categorical\ncount            3\nunique           3\ntop              f\nfreq             1\n\nExcluding numeric columns from a ``DataFrame`` description.\n\n>>> df.describe(exclude=[np.number])\n       categorical object\ncount            3      3\nunique           3      3\ntop              f      c\nfreq             1      1\n\nExcluding object columns from a ``DataFrame`` description.\n\n>>> df.describe(exclude=[np.object])\n       categorical  numeric\ncount            3      3.0\nunique           3      NaN\ntop              f      NaN\nfreq             1      NaN\nmean           NaN      2.0\nstd            NaN      1.0\nmin            NaN      1.0\n25%            NaN      1.5\n50%            NaN      2.0\n75%            NaN      2.5\nmax            NaN      3.0", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 9894, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L9894", "errors": [["SS06", "Summary should fit in a single line"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 149, in pandas.DataFrame.describe\nFailed example:\n    df.describe(include='all')\nExpected:\n            categorical  numeric object\n    count            3      3.0      3\n    unique           3      NaN      3\n    top              f      NaN      c\n    freq             1      NaN      1\n    mean           NaN      2.0    NaN\n    std            NaN      1.0    NaN\n    min            NaN      1.0    NaN\n    25%            NaN      1.5    NaN\n    50%            NaN      2.0    NaN\n    75%            NaN      2.5    NaN\n    max            NaN      3.0    NaN\nGot:\n           categorical  numeric object\n    count            3      3.0      3\n    unique           3      NaN      3\n    top              f      NaN      b\n    freq             1      NaN      1\n    mean           NaN      2.0    NaN\n    std            NaN      1.0    NaN\n    min            NaN      1.0    NaN\n    25%            NaN      1.5    NaN\n    50%            NaN      2.0    NaN\n    75%            NaN      2.5    NaN\n    max            NaN      3.0    NaN\n**********************************************************************\nLine 192, in pandas.DataFrame.describe\nFailed example:\n    df.describe(include=[np.object])\nExpected:\n           object\n    count       3\n    unique      3\n    top         c\n    freq        1\nGot:\n           object\n    count       3\n    unique      3\n    top         b\n    freq        1\n**********************************************************************\nLine 210, in pandas.DataFrame.describe\nFailed example:\n    df.describe(exclude=[np.number])\nExpected:\n           categorical object\n    count            3      3\n    unique           3      3\n    top              f      c\n    freq             1      1\nGot:\n           categorical object\n    count            3      3\n    unique           3      3\n    top              f      b\n    freq             1      1\n"], ["EX03", "flake8 error: E121 continuation line under-indented for hanging indent"], ["EX03", "flake8 error: E124 closing bracket does not match visual indentation"], ["EX03", "flake8 error: E231 missing whitespace after ',' (2 times)"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 149, in pandas.DataFrame.describe\nFailed example:\n    df.describe(include='all')\nExpected:\n            categorical  numeric object\n    count            3      3.0      3\n    unique           3      NaN      3\n    top              f      NaN      c\n    freq             1      NaN      1\n    mean           NaN      2.0    NaN\n    std            NaN      1.0    NaN\n    min            NaN      1.0    NaN\n    25%            NaN      1.5    NaN\n    50%            NaN      2.0    NaN\n    75%            NaN      2.5    NaN\n    max            NaN      3.0    NaN\nGot:\n           categorical  numeric object\n    count            3      3.0      3\n    unique           3      NaN      3\n    top              f      NaN      b\n    freq             1      NaN      1\n    mean           NaN      2.0    NaN\n    std            NaN      1.0    NaN\n    min            NaN      1.0    NaN\n    25%            NaN      1.5    NaN\n    50%            NaN      2.0    NaN\n    75%            NaN      2.5    NaN\n    max            NaN      3.0    NaN\n**********************************************************************\nLine 192, in pandas.DataFrame.describe\nFailed example:\n    df.describe(include=[np.object])\nExpected:\n           object\n    count       3\n    unique      3\n    top         c\n    freq        1\nGot:\n           object\n    count       3\n    unique      3\n    top         b\n    freq        1\n**********************************************************************\nLine 210, in pandas.DataFrame.describe\nFailed example:\n    df.describe(exclude=[np.number])\nExpected:\n           categorical object\n    count            3      3\n    unique           3      3\n    top              f      c\n    freq             1      1\nGot:\n           categorical object\n    count            3      3\n    unique           3      3\n    top              f      b\n    freq             1      1\n", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.Series.describe"}, "pandas.DataFrame.diff": {"type": "function", "docstring": "First discrete difference of element.\n\nCalculates the difference of a DataFrame element compared with another\nelement in the DataFrame (default is the element in the same column\nof the previous row).\n\nParameters\n----------\nperiods : int, default 1\n    Periods to shift for calculating difference, accepts negative\n    values.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Take difference over rows (0) or columns (1).\n\n    .. versionadded:: 0.16.1.\n\nReturns\n-------\nDataFrame\n\nSee Also\n--------\nSeries.diff: First discrete difference for a Series.\nDataFrame.pct_change: Percent change over given number of periods.\nDataFrame.shift: Shift index by desired number of periods with an\n    optional time freq.\n\nExamples\n--------\nDifference with previous row\n\n>>> df = pd.DataFrame({'a': [1, 2, 3, 4, 5, 6],\n...                    'b': [1, 1, 2, 3, 5, 8],\n...                    'c': [1, 4, 9, 16, 25, 36]})\n>>> df\n   a  b   c\n0  1  1   1\n1  2  1   4\n2  3  2   9\n3  4  3  16\n4  5  5  25\n5  6  8  36\n\n>>> df.diff()\n     a    b     c\n0  NaN  NaN   NaN\n1  1.0  0.0   3.0\n2  1.0  1.0   5.0\n3  1.0  1.0   7.0\n4  1.0  2.0   9.0\n5  1.0  3.0  11.0\n\nDifference with previous column\n\n>>> df.diff(axis=1)\n    a    b     c\n0 NaN  0.0   0.0\n1 NaN -1.0   3.0\n2 NaN -1.0   7.0\n3 NaN -1.0  13.0\n4 NaN  0.0  20.0\n5 NaN  2.0  28.0\n\nDifference with 3rd previous row\n\n>>> df.diff(periods=3)\n     a    b     c\n0  NaN  NaN   NaN\n1  NaN  NaN   NaN\n2  NaN  NaN   NaN\n3  3.0  2.0  15.0\n4  3.0  4.0  21.0\n5  3.0  6.0  27.0\n\nDifference with following row\n\n>>> df.diff(periods=-1)\n     a    b     c\n0 -1.0  0.0  -3.0\n1 -1.0 -1.0  -5.0\n2 -1.0 -1.0  -7.0\n3 -1.0 -2.0  -9.0\n4 -1.0 -3.0 -11.0\n5  NaN  NaN   NaN", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 6435, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L6435", "errors": [["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": ""}, "pandas.DataFrame.eval": {"type": "function", "docstring": "Evaluate a string describing operations on DataFrame columns.\n\nOperates on columns only, not specific rows or elements.  This allows\n`eval` to run arbitrary code, which can make you vulnerable to code\ninjection if you pass user input to this function.\n\nParameters\n----------\nexpr : str\n    The expression string to evaluate.\ninplace : bool, default False\n    If the expression contains an assignment, whether to perform the\n    operation inplace and mutate the existing DataFrame. Otherwise,\n    a new DataFrame is returned.\nkwargs : dict\n    See the documentation for :func:`eval` for complete details\n    on the keyword arguments accepted by\n    :meth:`~pandas.DataFrame.query`.\n\nReturns\n-------\nndarray, scalar, or pandas object\n    The result of the evaluation.\n\nSee Also\n--------\nDataFrame.query : Evaluates a boolean expression to query the columns\n    of a frame.\nDataFrame.assign : Can evaluate an expression or function to create new\n    values for a column.\neval : Evaluate a Python expression as a string using various\n    backends.\n\nNotes\n-----\nFor more details see the API documentation for :func:`~eval`.\nFor detailed examples see :ref:`enhancing performance with eval\n<enhancingperf.eval>`.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': range(1, 6), 'B': range(10, 0, -2)})\n>>> df\n   A   B\n0  1  10\n1  2   8\n2  3   6\n3  4   4\n4  5   2\n>>> df.eval('A + B')\n0    11\n1    10\n2     9\n3     8\n4     7\ndtype: int64\n\nAssignment is allowed though by default the original DataFrame is not\nmodified.\n\n>>> df.eval('C = A + B')\n   A   B   C\n0  1  10  11\n1  2   8  10\n2  3   6   9\n3  4   4   8\n4  5   2   7\n>>> df\n   A   B\n0  1  10\n1  2   8\n2  3   6\n3  4   4\n4  5   2\n\nUse ``inplace=True`` to modify the original DataFrame.\n\n>>> df.eval('C = A + B', inplace=True)\n>>> df\n   A   B   C\n0  1  10  11\n1  2   8  10\n2  3   6   9\n3  4   4   8\n4  5   2   7", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 3255, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L3255", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {kwargs}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": ""}, "pandas.DataFrame.kurt": {"type": "function", "docstring": "Return unbiased kurtosis over requested axis using Fisher's definition of\nkurtosis (kurtosis of normal == 0.0). Normalized by N-1.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a Series.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or DataFrame (if level specified)", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11555, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11555", "errors": [["SS06", "Summary should fit in a single line"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.Series.kurtosis"}, "pandas.DataFrame.kurtosis": {"type": "function", "docstring": "Return unbiased kurtosis over requested axis using Fisher's definition of\nkurtosis (kurtosis of normal == 0.0). Normalized by N-1.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a Series.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or DataFrame (if level specified)", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11555, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11555", "errors": [["SS06", "Summary should fit in a single line"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.DataFrame.kurt"}, "pandas.DataFrame.mad": {"type": "function", "docstring": "Return the mean absolute deviation of the values for the requested axis.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a Series.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or DataFrame (if level specified)", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 10431, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L10431", "errors": [["PR02", "Unknown parameters {**kwargs, numeric_only}"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.Series.mad"}, "pandas.DataFrame.max": {"type": "function", "docstring": "Return the maximum of the values for the requested axis.\n\n            If you want the *index* of the maximum, use ``idxmax``. This is\n            the equivalent of the ``numpy.ndarray`` method ``argmax``.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a Series.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or DataFrame (if level specified)\n\nSee Also\n--------\nSeries.sum : Return the sum.\nSeries.min : Return the minimum.\nSeries.max : Return the maximum.\nSeries.idxmin : Return the index of the minimum.\nSeries.idxmax : Return the index of the maximum.\nDataFrame.sum : Return the sum over the requested axis.\nDataFrame.min : Return the minimum over the requested axis.\nDataFrame.max : Return the maximum over the requested axis.\nDataFrame.idxmin : Return the index of the minimum over the requested axis.\nDataFrame.idxmax : Return the index of the maximum over the requested axis.\n\nExamples\n--------\n>>> idx = pd.MultiIndex.from_arrays([\n...     ['warm', 'warm', 'cold', 'cold'],\n...     ['dog', 'falcon', 'fish', 'spider']],\n...     names=['blooded', 'animal'])\n>>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n>>> s\nblooded  animal\nwarm     dog       4\n         falcon    2\ncold     fish      0\n         spider    8\nName: legs, dtype: int64\n\n>>> s.max()\n8\n\nMax using level names, as well as indices.\n\n>>> s.max(level='blooded')\nblooded\nwarm    4\ncold    8\nName: legs, dtype: int64\n\n>>> s.max(level=0)\nblooded\nwarm    4\ncold    8\nName: legs, dtype: int64", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11555, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11555", "errors": [["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.DataFrame.kurtosis"}, "pandas.DataFrame.mean": {"type": "function", "docstring": "Return the mean of the values for the requested axis.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a Series.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or DataFrame (if level specified)", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11555, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11555", "errors": [["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.DataFrame.max"}, "pandas.DataFrame.median": {"type": "function", "docstring": "Return the median of the values for the requested axis.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a Series.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or DataFrame (if level specified)", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11555, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11555", "errors": [["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.DataFrame.mean"}, "pandas.DataFrame.min": {"type": "function", "docstring": "Return the minimum of the values for the requested axis.\n\n            If you want the *index* of the minimum, use ``idxmin``. This is\n            the equivalent of the ``numpy.ndarray`` method ``argmin``.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a Series.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or DataFrame (if level specified)\n\nSee Also\n--------\nSeries.sum : Return the sum.\nSeries.min : Return the minimum.\nSeries.max : Return the maximum.\nSeries.idxmin : Return the index of the minimum.\nSeries.idxmax : Return the index of the maximum.\nDataFrame.sum : Return the sum over the requested axis.\nDataFrame.min : Return the minimum over the requested axis.\nDataFrame.max : Return the maximum over the requested axis.\nDataFrame.idxmin : Return the index of the minimum over the requested axis.\nDataFrame.idxmax : Return the index of the maximum over the requested axis.\n\nExamples\n--------\n>>> idx = pd.MultiIndex.from_arrays([\n...     ['warm', 'warm', 'cold', 'cold'],\n...     ['dog', 'falcon', 'fish', 'spider']],\n...     names=['blooded', 'animal'])\n>>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n>>> s\nblooded  animal\nwarm     dog       4\n         falcon    2\ncold     fish      0\n         spider    8\nName: legs, dtype: int64\n\n>>> s.min()\n0\n\nMin using level names, as well as indices.\n\n>>> s.min(level='blooded')\nblooded\nwarm    2\ncold    0\nName: legs, dtype: int64\n\n>>> s.min(level=0)\nblooded\nwarm    2\ncold    0\nName: legs, dtype: int64", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11555, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11555", "errors": [["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.DataFrame.median"}, "pandas.DataFrame.mode": {"type": "function", "docstring": "Get the mode(s) of each element along the selected axis.\n\nThe mode of a set of values is the value that appears most often.\nIt can be multiple values.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to iterate over while searching for the mode:\n\n    * 0 or 'index' : get mode of each column\n    * 1 or 'columns' : get mode of each row\nnumeric_only : bool, default False\n    If True, only apply to numeric columns.\ndropna : bool, default True\n    Don't consider counts of NaN/NaT.\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nDataFrame\n    The modes of each column or row.\n\nSee Also\n--------\nSeries.mode : Return the highest frequency value in a Series.\nSeries.value_counts : Return the counts of values in a Series.\n\nExamples\n--------\n>>> df = pd.DataFrame([('bird', 2, 2),\n...                    ('mammal', 4, np.nan),\n...                    ('arthropod', 8, 0),\n...                    ('bird', 2, np.nan)],\n...                   index=('falcon', 'horse', 'spider', 'ostrich'),\n...                   columns=('species', 'legs', 'wings'))\n>>> df\n           species  legs  wings\nfalcon        bird     2    2.0\nhorse       mammal     4    NaN\nspider   arthropod     8    0.0\nostrich       bird     2    NaN\n\nBy default, missing values are not considered, and the mode of wings\nare both 0 and 2. The second row of species and legs contains ``NaN``,\nbecause they have only one mode, but the DataFrame has two rows.\n\n>>> df.mode()\n  species  legs  wings\n0    bird   2.0    0.0\n1     NaN   NaN    2.0\n\nSetting ``dropna=False`` ``NaN`` values are considered and they can be\nthe mode (like for wings).\n\n>>> df.mode(dropna=False)\n  species  legs  wings\n0    bird     2    NaN\n\nSetting ``numeric_only=True``, only the mode of numeric columns is\ncomputed, and columns of other types are ignored.\n\n>>> df.mode(numeric_only=True)\n   legs  wings\n0   2.0    0.0\n1   NaN    2.0\n\nTo compute the mode over columns and not rows, use the axis parameter:\n\n>>> df.mode(axis='columns', numeric_only=True)\n           0    1\nfalcon   2.0  NaN\nhorse    4.0  NaN\nspider   0.0  8.0\nostrich  2.0  NaN", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 8046, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L8046", "errors": [["PR09", "Parameter \"axis\" description should finish with \".\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": ""}, "pandas.DataFrame.pct_change": {"type": "function", "docstring": "Percentage change between the current and a prior element.\n\nComputes the percentage change from the immediately previous row by\ndefault. This is useful in comparing the percentage of change in a time\nseries of elements.\n\nParameters\n----------\nperiods : int, default 1\n    Periods to shift for forming percent change.\nfill_method : str, default 'pad'\n    How to handle NAs before computing percent changes.\nlimit : int, default None\n    The number of consecutive NAs to fill before stopping.\nfreq : DateOffset, timedelta, or offset alias string, optional\n    Increment to use from time series API (e.g. 'M' or BDay()).\n**kwargs\n    Additional keyword arguments are passed into\n    `DataFrame.shift` or `Series.shift`.\n\nReturns\n-------\nchg : Series or DataFrame\n    The same type as the calling object.\n\nSee Also\n--------\nSeries.diff : Compute the difference of two elements in a Series.\nDataFrame.diff : Compute the difference of two elements in a DataFrame.\nSeries.shift : Shift the index by some number of periods.\nDataFrame.shift : Shift the index by some number of periods.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([90, 91, 85])\n>>> s\n0    90\n1    91\n2    85\ndtype: int64\n\n>>> s.pct_change()\n0         NaN\n1    0.011111\n2   -0.065934\ndtype: float64\n\n>>> s.pct_change(periods=2)\n0         NaN\n1         NaN\n2   -0.055556\ndtype: float64\n\nSee the percentage change in a Series where filling NAs with last\nvalid observation forward to next valid.\n\n>>> s = pd.Series([90, 91, None, 85])\n>>> s\n0    90.0\n1    91.0\n2     NaN\n3    85.0\ndtype: float64\n\n>>> s.pct_change(fill_method='ffill')\n0         NaN\n1    0.011111\n2    0.000000\n3   -0.065934\ndtype: float64\n\n**DataFrame**\n\nPercentage change in French franc, Deutsche Mark, and Italian lira from\n1980-01-01 to 1980-03-01.\n\n>>> df = pd.DataFrame({\n...     'FR': [4.0405, 4.0963, 4.3149],\n...     'GR': [1.7246, 1.7482, 1.8519],\n...     'IT': [804.74, 810.01, 860.13]},\n...     index=['1980-01-01', '1980-02-01', '1980-03-01'])\n>>> df\n                FR      GR      IT\n1980-01-01  4.0405  1.7246  804.74\n1980-02-01  4.0963  1.7482  810.01\n1980-03-01  4.3149  1.8519  860.13\n\n>>> df.pct_change()\n                  FR        GR        IT\n1980-01-01       NaN       NaN       NaN\n1980-02-01  0.013810  0.013684  0.006549\n1980-03-01  0.053365  0.059318  0.061876\n\nPercentage of change in GOOG and APPL stock volume. Shows computing\nthe percentage change between columns.\n\n>>> df = pd.DataFrame({\n...     '2016': [1769950, 30586265],\n...     '2015': [1500923, 40912316],\n...     '2014': [1371819, 41403351]},\n...     index=['GOOG', 'APPL'])\n>>> df\n          2016      2015      2014\nGOOG   1769950   1500923   1371819\nAPPL  30586265  40912316  41403351\n\n>>> df.pct_change(axis='columns')\n      2016      2015      2014\nGOOG   NaN -0.151997 -0.086016\nAPPL   NaN  0.337604  0.012002", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 10371, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L10371", "errors": [["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.Series.pct_change"}, "pandas.DataFrame.prod": {"type": "function", "docstring": "Return the product of the values for the requested axis.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a Series.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\nmin_count : int, default 0\n    The required number of valid values to perform the operation. If fewer than\n    ``min_count`` non-NA values are present the result will be NA.\n\n    .. versionadded:: 0.22.0\n\n       Added with the default being 0. This means the sum of an all-NA\n       or empty Series is 0, and the product of an all-NA or empty\n       Series is 1.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or DataFrame (if level specified)\n\nExamples\n--------\nBy default, the product of an empty or all-NA Series is ``1``\n\n>>> pd.Series([]).prod()\n1.0\n\nThis can be controlled with the ``min_count`` parameter\n\n>>> pd.Series([]).prod(min_count=1)\nnan\n\nThanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\nempty series identically.\n\n>>> pd.Series([np.nan]).prod()\n1.0\n\n>>> pd.Series([np.nan]).prod(min_count=1)\nnan", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11507, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11507", "errors": [["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.Series.sum"}, "pandas.DataFrame.product": {"type": "function", "docstring": "Return the product of the values for the requested axis.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a Series.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\nmin_count : int, default 0\n    The required number of valid values to perform the operation. If fewer than\n    ``min_count`` non-NA values are present the result will be NA.\n\n    .. versionadded:: 0.22.0\n\n       Added with the default being 0. This means the sum of an all-NA\n       or empty Series is 0, and the product of an all-NA or empty\n       Series is 1.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or DataFrame (if level specified)\n\nExamples\n--------\nBy default, the product of an empty or all-NA Series is ``1``\n\n>>> pd.Series([]).prod()\n1.0\n\nThis can be controlled with the ``min_count`` parameter\n\n>>> pd.Series([]).prod(min_count=1)\nnan\n\nThanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\nempty series identically.\n\n>>> pd.Series([np.nan]).prod()\n1.0\n\n>>> pd.Series([np.nan]).prod(min_count=1)\nnan", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11507, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11507", "errors": [["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.DataFrame.prod"}, "pandas.DataFrame.quantile": {"type": "function", "docstring": "Return values at the given quantile over requested axis.\n\nParameters\n----------\nq : float or array-like, default 0.5 (50% quantile)\n    Value between 0 <= q <= 1, the quantile(s) to compute.\naxis : {0, 1, 'index', 'columns'} (default 0)\n    Equals 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\nnumeric_only : bool, default True\n    If False, the quantile of datetime and timedelta data will be\n    computed as well.\ninterpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n    This optional parameter specifies the interpolation method to use,\n    when the desired quantile lies between two data points `i` and `j`:\n\n    * linear: `i + (j - i) * fraction`, where `fraction` is the\n      fractional part of the index surrounded by `i` and `j`.\n    * lower: `i`.\n    * higher: `j`.\n    * nearest: `i` or `j` whichever is nearest.\n    * midpoint: (`i` + `j`) / 2.\n\nReturns\n-------\nSeries or DataFrame\n\n    If ``q`` is an array, a DataFrame will be returned where the\n      index is ``q``, the columns are the columns of self, and the\n      values are the quantiles.\n    If ``q`` is a float, a Series will be returned where the\n      index is the columns of self and the values are the quantiles.\n\nSee Also\n--------\ncore.window.Rolling.quantile: Rolling quantile.\nnumpy.percentile: Numpy function to compute the percentile.\n\nExamples\n--------\n>>> df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),\n...                   columns=['a', 'b'])\n>>> df.quantile(.1)\na    1.3\nb    3.7\nName: 0.1, dtype: float64\n>>> df.quantile([.1, .5])\n       a     b\n0.1  1.3   3.7\n0.5  2.5  55.0\n\nSpecifying `numeric_only=False` will also compute the quantile of\ndatetime and timedelta data.\n\n>>> df = pd.DataFrame({'A': [1, 2],\n...                    'B': [pd.Timestamp('2010'),\n...                          pd.Timestamp('2011')],\n...                    'C': [pd.Timedelta('1 days'),\n...                          pd.Timedelta('2 days')]})\n>>> df.quantile(0.5, numeric_only=False)\nA                    1.5\nB    2010-07-02 12:00:00\nC        1 days 12:00:00\nName: 0.5, dtype: object", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 8132, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L8132", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": ""}, "pandas.DataFrame.rank": {"type": "function", "docstring": "Compute numerical data ranks (1 through n) along axis.\n\nBy default, equal values are assigned a rank that is the average of the\nranks of those values.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Index to direct ranking.\nmethod : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n    How to rank the group of records that have the same value\n    (i.e. ties):\n\n    * average: average rank of the group\n    * min: lowest rank in the group\n    * max: highest rank in the group\n    * first: ranks assigned in order they appear in the array\n    * dense: like 'min', but rank always increases by 1 between groups\nnumeric_only : bool, optional\n    For DataFrame objects, rank only numeric columns if set to True.\nna_option : {'keep', 'top', 'bottom'}, default 'keep'\n    How to rank NaN values:\n\n    * keep: assign NaN rank to NaN values\n    * top: assign smallest rank to NaN values if ascending\n    * bottom: assign highest rank to NaN values if ascending\nascending : bool, default True\n    Whether or not the elements should be ranked in ascending order.\npct : bool, default False\n    Whether or not to display the returned rankings in percentile\n    form.\n\nReturns\n-------\nsame type as caller\n    Return a Series or DataFrame with data ranks as values.\n\nSee Also\n--------\ncore.groupby.GroupBy.rank : Rank of values within each group.\n\nExamples\n--------\n\n>>> df = pd.DataFrame(data={'Animal': ['cat', 'penguin', 'dog',\n...                                    'spider', 'snake'],\n...                         'Number_legs': [4, 2, 4, 8, np.nan]})\n>>> df\n    Animal  Number_legs\n0      cat          4.0\n1  penguin          2.0\n2      dog          4.0\n3   spider          8.0\n4    snake          NaN\n\nThe following example shows how the method behaves with the above\nparameters:\n\n* default_rank: this is the default behaviour obtained without using\n  any parameter.\n* max_rank: setting ``method = 'max'`` the records that have the\n  same values are ranked using the highest rank (e.g.: since 'cat'\n  and 'dog' are both in the 2nd and 3rd position, rank 3 is assigned.)\n* NA_bottom: choosing ``na_option = 'bottom'``, if there are records\n  with NaN values they are placed at the bottom of the ranking.\n* pct_rank: when setting ``pct = True``, the ranking is expressed as\n  percentile rank.\n\n>>> df['default_rank'] = df['Number_legs'].rank()\n>>> df['max_rank'] = df['Number_legs'].rank(method='max')\n>>> df['NA_bottom'] = df['Number_legs'].rank(na_option='bottom')\n>>> df['pct_rank'] = df['Number_legs'].rank(pct=True)\n>>> df\n    Animal  Number_legs  default_rank  max_rank  NA_bottom  pct_rank\n0      cat          4.0           2.5       3.0        2.5     0.625\n1  penguin          2.0           1.0       1.0        1.0     0.250\n2      dog          4.0           2.5       3.0        2.5     0.625\n3   spider          8.0           4.0       4.0        4.0     1.000\n4    snake          NaN           NaN       NaN        5.0       NaN", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 8536, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L8536", "errors": [["PR09", "Parameter \"method\" description should finish with \".\""], ["PR09", "Parameter \"na_option\" description should finish with \".\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.Series.rank"}, "pandas.DataFrame.round": {"type": "function", "docstring": "Round a DataFrame to a variable number of decimal places.\n\nParameters\n----------\ndecimals : int, dict, Series\n    Number of decimal places to round each column to. If an int is\n    given, round each column to the same number of places.\n    Otherwise dict and Series round to variable numbers of places.\n    Column names should be in the keys if `decimals` is a\n    dict-like, or in the index if `decimals` is a Series. Any\n    columns not included in `decimals` will be left as is. Elements\n    of `decimals` which are not columns of the input will be\n    ignored.\n*args\n    Additional keywords have no effect but might be accepted for\n    compatibility with numpy.\n**kwargs\n    Additional keywords have no effect but might be accepted for\n    compatibility with numpy.\n\nReturns\n-------\nDataFrame\n    A DataFrame with the affected columns rounded to the specified\n    number of decimal places.\n\nSee Also\n--------\nnumpy.around : Round a numpy array to the given number of decimals.\nSeries.round : Round a Series to the given number of decimals.\n\nExamples\n--------\n>>> df = pd.DataFrame([(.21, .32), (.01, .67), (.66, .03), (.21, .18)],\n...                   columns=['dogs', 'cats'])\n>>> df\n    dogs  cats\n0  0.21  0.32\n1  0.01  0.67\n2  0.66  0.03\n3  0.21  0.18\n\nBy providing an integer each column is rounded to the same number\nof decimal places\n\n>>> df.round(1)\n    dogs  cats\n0   0.2   0.3\n1   0.0   0.7\n2   0.7   0.0\n3   0.2   0.2\n\nWith a dict, the number of places for specific columns can be\nspecified with the column names as key and the number of decimal\nplaces as value\n\n>>> df.round({'dogs': 1, 'cats': 0})\n    dogs  cats\n0   0.2   0.0\n1   0.0   1.0\n2   0.7   0.0\n3   0.2   0.0\n\nUsing a Series, the number of places for specific columns can be\nspecified with the column names as index and the number of\ndecimal places as value\n\n>>> decimals = pd.Series([0, 1], index=['cats', 'dogs'])\n>>> df.round(decimals)\n    dogs  cats\n0   0.2   0.0\n1   0.0   1.0\n2   0.7   0.0\n3   0.2   0.0", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 7266, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L7266", "errors": [["YD01", "No Yields section found"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": ""}, "pandas.DataFrame.sem": {"type": "function", "docstring": "Return unbiased standard error of the mean over requested axis.\n\nNormalized by N-1 by default. This can be changed using the ddof argument\n\nParameters\n----------\naxis : {index (0), columns (1)}\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a Series\nddof : int, default 1\n    Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n    where N represents the number of elements.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n\nReturns\n-------\nSeries or DataFrame (if level specified)", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11586, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11586", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR07", "Parameter \"axis\" has no description"], ["PR09", "Parameter \"skipna\" description should finish with \".\""], ["PR09", "Parameter \"level\" description should finish with \".\""], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.Series.var"}, "pandas.DataFrame.skew": {"type": "function", "docstring": "Return unbiased skew over requested axis\nNormalized by N-1.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a Series.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or DataFrame (if level specified)", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11555, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11555", "errors": [["SS06", "Summary should fit in a single line"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.DataFrame.min"}, "pandas.DataFrame.sum": {"type": "function", "docstring": "Return the sum of the values for the requested axis.\n\n            This is equivalent to the method ``numpy.sum``.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a Series.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\nmin_count : int, default 0\n    The required number of valid values to perform the operation. If fewer than\n    ``min_count`` non-NA values are present the result will be NA.\n\n    .. versionadded:: 0.22.0\n\n       Added with the default being 0. This means the sum of an all-NA\n       or empty Series is 0, and the product of an all-NA or empty\n       Series is 1.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or DataFrame (if level specified)\n\nSee Also\n--------\nSeries.sum : Return the sum.\nSeries.min : Return the minimum.\nSeries.max : Return the maximum.\nSeries.idxmin : Return the index of the minimum.\nSeries.idxmax : Return the index of the maximum.\nDataFrame.sum : Return the sum over the requested axis.\nDataFrame.min : Return the minimum over the requested axis.\nDataFrame.max : Return the maximum over the requested axis.\nDataFrame.idxmin : Return the index of the minimum over the requested axis.\nDataFrame.idxmax : Return the index of the maximum over the requested axis.\n\nExamples\n--------\n>>> idx = pd.MultiIndex.from_arrays([\n...     ['warm', 'warm', 'cold', 'cold'],\n...     ['dog', 'falcon', 'fish', 'spider']],\n...     names=['blooded', 'animal'])\n>>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n>>> s\nblooded  animal\nwarm     dog       4\n         falcon    2\ncold     fish      0\n         spider    8\nName: legs, dtype: int64\n\n>>> s.sum()\n14\n\nSum using level names, as well as indices.\n\n>>> s.sum(level='blooded')\nblooded\nwarm    6\ncold    8\nName: legs, dtype: int64\n\n>>> s.sum(level=0)\nblooded\nwarm    6\ncold    8\nName: legs, dtype: int64\n\nBy default, the sum of an empty or all-NA Series is ``0``.\n\n>>> pd.Series([]).sum()  # min_count=0 is the default\n0.0\n\nThis can be controlled with the ``min_count`` parameter. For example, if\nyou'd like the sum of an empty series to be NaN, pass ``min_count=1``.\n\n>>> pd.Series([]).sum(min_count=1)\nnan\n\nThanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\nempty series identically.\n\n>>> pd.Series([np.nan]).sum()\n0.0\n\n>>> pd.Series([np.nan]).sum(min_count=1)\nnan", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11507, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11507", "errors": [["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.DataFrame.product"}, "pandas.DataFrame.std": {"type": "function", "docstring": "Return sample standard deviation over requested axis.\n\nNormalized by N-1 by default. This can be changed using the ddof argument\n\nParameters\n----------\naxis : {index (0), columns (1)}\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a Series\nddof : int, default 1\n    Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n    where N represents the number of elements.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n\nReturns\n-------\nSeries or DataFrame (if level specified)", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11586, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11586", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR07", "Parameter \"axis\" has no description"], ["PR09", "Parameter \"skipna\" description should finish with \".\""], ["PR09", "Parameter \"level\" description should finish with \".\""], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.DataFrame.sem"}, "pandas.DataFrame.var": {"type": "function", "docstring": "Return unbiased variance over requested axis.\n\nNormalized by N-1 by default. This can be changed using the ddof argument\n\nParameters\n----------\naxis : {index (0), columns (1)}\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a Series\nddof : int, default 1\n    Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n    where N represents the number of elements.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n\nReturns\n-------\nSeries or DataFrame (if level specified)", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 11586, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11586", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR07", "Parameter \"axis\" has no description"], ["PR09", "Parameter \"skipna\" description should finish with \".\""], ["PR09", "Parameter \"level\" description should finish with \".\""], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": "pandas.DataFrame.std"}, "pandas.DataFrame.nunique": {"type": "function", "docstring": "Count distinct observations over requested axis.\n\nReturn Series with number of distinct observations. Can ignore NaN\nvalues.\n\n.. versionadded:: 0.20.0\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for\n    column-wise.\ndropna : bool, default True\n    Don't include NaN in the counts.\n\nReturns\n-------\nSeries\n\nSee Also\n--------\nSeries.nunique: Method nunique for Series.\nDataFrame.count: Count non-NA cells for each column or row.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 1, 1]})\n>>> df.nunique()\nA    3\nB    1\ndtype: int64\n\n>>> df.nunique(axis=1)\n0    1\n1    2\n2    2\ndtype: int64", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 7919, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L7919", "errors": [["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Computations / descriptive stats", "shared_code_with": ""}, "pandas.DataFrame.add_prefix": {"type": "function", "docstring": "Prefix labels with string `prefix`.\n\nFor Series, the row labels are prefixed.\nFor DataFrame, the column labels are prefixed.\n\nParameters\n----------\nprefix : str\n    The string to add before each label.\n\nReturns\n-------\nSeries or DataFrame\n    New Series or DataFrame with updated labels.\n\nSee Also\n--------\nSeries.add_suffix: Suffix row labels with string `suffix`.\nDataFrame.add_suffix: Suffix column labels with string `suffix`.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s\n0    1\n1    2\n2    3\n3    4\ndtype: int64\n\n>>> s.add_prefix('item_')\nitem_0    1\nitem_1    2\nitem_2    3\nitem_3    4\ndtype: int64\n\n>>> df = pd.DataFrame({'A': [1, 2, 3, 4],  'B': [3, 4, 5, 6]})\n>>> df\n   A  B\n0  1  3\n1  2  4\n2  3  5\n3  4  6\n\n>>> df.add_prefix('col_')\n     col_A  col_B\n0       1       3\n1       2       4\n2       3       5\n3       4       6", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 3968, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L3968", "errors": [["EX03", "flake8 error: E241 multiple spaces after ','"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": "pandas.Series.add_prefix"}, "pandas.DataFrame.add_suffix": {"type": "function", "docstring": "Suffix labels with string `suffix`.\n\nFor Series, the row labels are suffixed.\nFor DataFrame, the column labels are suffixed.\n\nParameters\n----------\nsuffix : str\n    The string to add after each label.\n\nReturns\n-------\nSeries or DataFrame\n    New Series or DataFrame with updated labels.\n\nSee Also\n--------\nSeries.add_prefix: Prefix row labels with string `prefix`.\nDataFrame.add_prefix: Prefix column labels with string `prefix`.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s\n0    1\n1    2\n2    3\n3    4\ndtype: int64\n\n>>> s.add_suffix('_item')\n0_item    1\n1_item    2\n2_item    3\n3_item    4\ndtype: int64\n\n>>> df = pd.DataFrame({'A': [1, 2, 3, 4],  'B': [3, 4, 5, 6]})\n>>> df\n   A  B\n0  1  3\n1  2  4\n2  3  5\n3  4  6\n\n>>> df.add_suffix('_col')\n     A_col  B_col\n0       1       3\n1       2       4\n2       3       5\n3       4       6", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 4027, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L4027", "errors": [["EX03", "flake8 error: E241 multiple spaces after ','"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": "pandas.Series.add_suffix"}, "pandas.DataFrame.align": {"type": "function", "docstring": "Align two objects on their axes with the\nspecified join method for each axis Index.\n\nParameters\n----------\nother : DataFrame or Series\njoin : {'outer', 'inner', 'left', 'right'}, default 'outer'\naxis : allowed axis of the other object, default None\n    Align on index (0), columns (1), or both (None)\nlevel : int or level name, default None\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level\ncopy : bool, default True\n    Always returns new objects. If copy=False and no reindexing is\n    required then original objects are returned.\nfill_value : scalar, default np.NaN\n    Value to use for missing values. Defaults to NaN, but can be any\n    \"compatible\" value\nmethod : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n    Method to use for filling holes in reindexed Series\n    pad / ffill: propagate last valid observation forward to next valid\n    backfill / bfill: use NEXT valid observation to fill gap\nlimit : int, default None\n    If method is specified, this is the maximum number of consecutive\n    NaN values to forward/backward fill. In other words, if there is\n    a gap with more than this number of consecutive NaNs, it will only\n    be partially filled. If method is not specified, this is the\n    maximum number of entries along the entire axis where NaNs will be\n    filled. Must be greater than 0 if not None.\nfill_axis : {0 or 'index', 1 or 'columns'}, default 0\n    Filling axis, method and limit\nbroadcast_axis : {0 or 'index', 1 or 'columns'}, default None\n    Broadcast values along this axis, if aligning two objects of\n    different dimensions\n\nReturns\n-------\n(left, right) : (DataFrame, type of other)\n    Aligned objects.", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 3855, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L3855", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"other\" has no description"], ["PR07", "Parameter \"join\" has no description"], ["PR09", "Parameter \"axis\" description should finish with \".\""], ["PR09", "Parameter \"level\" description should finish with \".\""], ["PR09", "Parameter \"fill_value\" description should finish with \".\""], ["PR09", "Parameter \"method\" description should finish with \".\""], ["PR09", "Parameter \"fill_axis\" description should finish with \".\""], ["PR09", "Parameter \"broadcast_axis\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": ""}, "pandas.DataFrame.at_time": {"type": "function", "docstring": "Select values at particular time of day (e.g. 9:30AM).\n\nParameters\n----------\ntime : datetime.time or str\naxis : {0 or 'index', 1 or 'columns'}, default 0\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nSeries or DataFrame\n\nRaises\n------\nTypeError\n    If the index is not  a :class:`DatetimeIndex`\n\nSee Also\n--------\nbetween_time : Select values between particular times of the day.\nfirst : Select initial periods of time series based on a date offset.\nlast : Select final periods of time series based on a date offset.\nDatetimeIndex.indexer_at_time : Get just the index locations for\n    values at particular time of the day.\n\nExamples\n--------\n>>> i = pd.date_range('2018-04-09', periods=4, freq='12H')\n>>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n>>> ts\n                     A\n2018-04-09 00:00:00  1\n2018-04-09 12:00:00  2\n2018-04-10 00:00:00  3\n2018-04-10 12:00:00  4\n\n>>> ts.at_time('12:00')\n                     A\n2018-04-09 12:00:00  2\n2018-04-10 12:00:00  4", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 7966, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L7966", "errors": [["PR01", "Parameters {asof} not documented"], ["PR07", "Parameter \"time\" has no description"], ["PR07", "Parameter \"axis\" has no description"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": "pandas.Series.at_time"}, "pandas.DataFrame.between_time": {"type": "function", "docstring": "Select values between particular times of the day (e.g., 9:00-9:30 AM).\n\nBy setting ``start_time`` to be later than ``end_time``,\nyou can get the times that are *not* between the two times.\n\nParameters\n----------\nstart_time : datetime.time or str\nend_time : datetime.time or str\ninclude_start : bool, default True\ninclude_end : bool, default True\naxis : {0 or 'index', 1 or 'columns'}, default 0\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nSeries or DataFrame\n\nRaises\n------\nTypeError\n    If the index is not  a :class:`DatetimeIndex`\n\nSee Also\n--------\nat_time : Select values at a particular time of the day.\nfirst : Select initial periods of time series based on a date offset.\nlast : Select final periods of time series based on a date offset.\nDatetimeIndex.indexer_between_time : Get just the index locations for\n    values between particular times of the day.\n\nExamples\n--------\n>>> i = pd.date_range('2018-04-09', periods=4, freq='1D20min')\n>>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n>>> ts\n                     A\n2018-04-09 00:00:00  1\n2018-04-10 00:20:00  2\n2018-04-11 00:40:00  3\n2018-04-12 01:00:00  4\n\n>>> ts.between_time('0:15', '0:45')\n                     A\n2018-04-10 00:20:00  2\n2018-04-11 00:40:00  3\n\nYou get the times that are *not* between two times by setting\n``start_time`` later than ``end_time``:\n\n>>> ts.between_time('0:45', '0:15')\n                     A\n2018-04-09 00:00:00  1\n2018-04-12 01:00:00  4", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 8022, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L8022", "errors": [["PR07", "Parameter \"start_time\" has no description"], ["PR07", "Parameter \"end_time\" has no description"], ["PR07", "Parameter \"include_start\" has no description"], ["PR07", "Parameter \"include_end\" has no description"], ["PR07", "Parameter \"axis\" has no description"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": "pandas.Series.between_time"}, "pandas.DataFrame.drop": {"type": "function", "docstring": "Drop specified labels from rows or columns.\n\nRemove rows or columns by specifying label names and corresponding\naxis, or by specifying directly index or column names. When using a\nmulti-index, labels on different levels can be removed by specifying\nthe level.\n\nParameters\n----------\nlabels : single label or list-like\n    Index or column labels to drop.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Whether to drop labels from the index (0 or 'index') or\n    columns (1 or 'columns').\nindex : single label or list-like\n    Alternative to specifying axis (``labels, axis=0``\n    is equivalent to ``index=labels``).\n\n    .. versionadded:: 0.21.0\ncolumns : single label or list-like\n    Alternative to specifying axis (``labels, axis=1``\n    is equivalent to ``columns=labels``).\n\n    .. versionadded:: 0.21.0\nlevel : int or level name, optional\n    For MultiIndex, level from which the labels will be removed.\ninplace : bool, default False\n    If True, do operation inplace and return None.\nerrors : {'ignore', 'raise'}, default 'raise'\n    If 'ignore', suppress error and only existing labels are\n    dropped.\n\nReturns\n-------\nDataFrame\n    DataFrame without the removed index or column labels.\n\nRaises\n------\nKeyError\n    If any of the labels is not found in the selected axis.\n\nSee Also\n--------\nDataFrame.loc : Label-location based indexer for selection by label.\nDataFrame.dropna : Return DataFrame with labels on given axis omitted\n    where (all or any) data are missing.\nDataFrame.drop_duplicates : Return DataFrame with duplicate rows\n    removed, optionally only considering certain columns.\nSeries.drop : Return Series with specified index labels removed.\n\nExamples\n--------\n>>> df = pd.DataFrame(np.arange(12).reshape(3, 4),\n...                   columns=['A', 'B', 'C', 'D'])\n>>> df\n   A  B   C   D\n0  0  1   2   3\n1  4  5   6   7\n2  8  9  10  11\n\nDrop columns\n\n>>> df.drop(['B', 'C'], axis=1)\n   A   D\n0  0   3\n1  4   7\n2  8  11\n\n>>> df.drop(columns=['B', 'C'])\n   A   D\n0  0   3\n1  4   7\n2  8  11\n\nDrop a row by index\n\n>>> df.drop([0, 1])\n   A  B   C   D\n2  8  9  10  11\n\nDrop columns and/or rows of MultiIndex DataFrame\n\n>>> midx = pd.MultiIndex(levels=[['lama', 'cow', 'falcon'],\n...                              ['speed', 'weight', 'length']],\n...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n>>> df = pd.DataFrame(index=midx, columns=['big', 'small'],\n...                   data=[[45, 30], [200, 100], [1.5, 1], [30, 20],\n...                         [250, 150], [1.5, 0.8], [320, 250],\n...                         [1, 0.8], [0.3, 0.2]])\n>>> df\n                big     small\nlama    speed   45.0    30.0\n        weight  200.0   100.0\n        length  1.5     1.0\ncow     speed   30.0    20.0\n        weight  250.0   150.0\n        length  1.5     0.8\nfalcon  speed   320.0   250.0\n        weight  1.0     0.8\n        length  0.3     0.2\n\n>>> df.drop(index='cow', columns='small')\n                big\nlama    speed   45.0\n        weight  200.0\n        length  1.5\nfalcon  speed   320.0\n        weight  1.0\n        length  0.3\n\n>>> df.drop(index='length', level=1)\n                big     small\nlama    speed   45.0    30.0\n        weight  200.0   100.0\ncow     speed   30.0    20.0\n        weight  250.0   150.0\nfalcon  speed   320.0   250.0\n        weight  1.0     0.8", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 3903, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L3903", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": ""}, "pandas.DataFrame.drop_duplicates": {"type": "function", "docstring": "Return DataFrame with duplicate rows removed, optionally only\nconsidering certain columns. Indexes, including time indexes\nare ignored.\n\nParameters\n----------\nsubset : column label or sequence of labels, optional\n    Only consider certain columns for identifying duplicates, by\n    default use all of the columns\nkeep : {'first', 'last', False}, default 'first'\n    - ``first`` : Drop duplicates except for the first occurrence.\n    - ``last`` : Drop duplicates except for the last occurrence.\n    - False : Drop all duplicates.\ninplace : boolean, default False\n    Whether to drop duplicates in place or to return a copy\n\nReturns\n-------\nDataFrame", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 4808, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L4808", "errors": [["SS06", "Summary should fit in a single line"], ["PR09", "Parameter \"subset\" description should finish with \".\""], ["PR08", "Parameter \"keep\" description should start with a capital letter"], ["PR06", "Parameter \"inplace\" type should use \"bool\" instead of \"boolean\""], ["PR09", "Parameter \"inplace\" description should finish with \".\""], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": ""}, "pandas.DataFrame.duplicated": {"type": "function", "docstring": "Return boolean Series denoting duplicate rows, optionally only\nconsidering certain columns.\n\nParameters\n----------\nsubset : column label or sequence of labels, optional\n    Only consider certain columns for identifying duplicates, by\n    default use all of the columns\nkeep : {'first', 'last', False}, default 'first'\n    - ``first`` : Mark duplicates as ``True`` except for the\n      first occurrence.\n    - ``last`` : Mark duplicates as ``True`` except for the\n      last occurrence.\n    - False : Mark all duplicates as ``True``.\n\nReturns\n-------\nSeries", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 4843, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L4843", "errors": [["SS06", "Summary should fit in a single line"], ["PR09", "Parameter \"subset\" description should finish with \".\""], ["PR08", "Parameter \"keep\" description should start with a capital letter"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": ""}, "pandas.DataFrame.equals": {"type": "function", "docstring": "Test whether two objects contain the same elements.\n\nThis function allows two Series or DataFrames to be compared against\neach other to see if they have the same shape and elements. NaNs in\nthe same location are considered equal. The column headers do not\nneed to have the same type, but the elements within the columns must\nbe the same dtype.\n\nParameters\n----------\nother : Series or DataFrame\n    The other Series or DataFrame to be compared with the first.\n\nReturns\n-------\nbool\n    True if all elements are the same in both objects, False\n    otherwise.\n\nSee Also\n--------\nSeries.eq : Compare two Series objects of the same length\n    and return a Series where each element is True if the element\n    in each Series is equal, False otherwise.\nDataFrame.eq : Compare two DataFrame objects of the same shape and\n    return a DataFrame where each element is True if the respective\n    element in each DataFrame is equal, False otherwise.\nassert_series_equal : Return True if left and right Series are equal,\n    False otherwise.\nassert_frame_equal : Return True if left and right DataFrames are\n    equal, False otherwise.\nnumpy.array_equal : Return True if two arrays have the same shape\n    and elements, False otherwise.\n\nNotes\n-----\nThis function requires that the elements have the same dtype as their\nrespective elements in the other Series or DataFrame. However, the\ncolumn labels do not need to have the same type, as long as they are\nstill considered equal.\n\nExamples\n--------\n>>> df = pd.DataFrame({1: [10], 2: [20]})\n>>> df\n    1   2\n0  10  20\n\nDataFrames df and exactly_equal have the same types and values for\ntheir elements and column labels, which will return True.\n\n>>> exactly_equal = pd.DataFrame({1: [10], 2: [20]})\n>>> exactly_equal\n    1   2\n0  10  20\n>>> df.equals(exactly_equal)\nTrue\n\nDataFrames df and different_column_type have the same element\ntypes and values, but have different types for the column labels,\nwhich will still return True.\n\n>>> different_column_type = pd.DataFrame({1.0: [10], 2.0: [20]})\n>>> different_column_type\n   1.0  2.0\n0   10   20\n>>> df.equals(different_column_type)\nTrue\n\nDataFrames df and different_data_type have different types for the\nsame values for their elements, and will return False even though\ntheir column labels are the same values and types.\n\n>>> different_data_type = pd.DataFrame({1: [10.0], 2: [20.0]})\n>>> different_data_type\n      1     2\n0  10.0  20.0\n>>> df.equals(different_data_type)\nFalse", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 1393, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L1393", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": "pandas.Series.equals"}, "pandas.DataFrame.filter": {"type": "function", "docstring": "Subset rows or columns of dataframe according to labels in\nthe specified index.\n\nNote that this routine does not filter a dataframe on its\ncontents. The filter is applied to the labels of the index.\n\nParameters\n----------\nitems : list-like\n    Keep labels from axis which are in items.\nlike : str\n    Keep labels from axis for which \"like in label == True\".\nregex : str (regular expression)\n    Keep labels from axis for which re.search(regex, label) == True.\naxis : int or string axis name\n    The axis to filter on.  By default this is the info axis,\n    'index' for Series, 'columns' for DataFrame.\n\nReturns\n-------\nsame type as input object\n\nSee Also\n--------\nDataFrame.loc\n\nNotes\n-----\nThe ``items``, ``like``, and ``regex`` parameters are\nenforced to be mutually exclusive.\n\n``axis`` defaults to the info axis that is used when indexing\nwith ``[]``.\n\nExamples\n--------\n>>> df = pd.DataFrame(np.array(([1, 2, 3], [4, 5, 6])),\n...                   index=['mouse', 'rabbit'],\n...                   columns=['one', 'two', 'three'])\n\n>>> # select columns by name\n>>> df.filter(items=['one', 'three'])\n         one  three\nmouse     1      3\nrabbit    4      6\n\n>>> # select columns by regular expression\n>>> df.filter(regex='e$', axis=1)\n         one  three\nmouse     1      3\nrabbit    4      6\n\n>>> # select rows containing 'bbi'\n>>> df.filter(like='bbi', axis=0)\n         one  two  three\nrabbit    4    5      6", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 4561, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L4561", "errors": [["SS06", "Summary should fit in a single line"], ["PR06", "Parameter \"axis\" type should use \"str\" instead of \"string\""], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"DataFrame.loc\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": "pandas.Series.filter"}, "pandas.DataFrame.first": {"type": "function", "docstring": "Convenience method for subsetting initial periods of time series data\nbased on a date offset.\n\nParameters\n----------\noffset : string, DateOffset, dateutil.relativedelta\n\nReturns\n-------\nsubset : same type as caller\n\nRaises\n------\nTypeError\n    If the index is not  a :class:`DatetimeIndex`\n\nSee Also\n--------\nlast : Select final periods of time series based on a date offset.\nat_time : Select values at a particular time of the day.\nbetween_time : Select values between particular times of the day.\n\nExamples\n--------\n>>> i = pd.date_range('2018-04-09', periods=4, freq='2D')\n>>> ts = pd.DataFrame({'A': [1,2,3,4]}, index=i)\n>>> ts\n            A\n2018-04-09  1\n2018-04-11  2\n2018-04-13  3\n2018-04-15  4\n\nGet the rows for the first 3 days:\n\n>>> ts.first('3D')\n            A\n2018-04-09  1\n2018-04-11  2\n\nNotice the data for 3 first calender days were returned, not the first\n3 days observed in the dataset, and therefore data for 2018-04-13 was\nnot returned.", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 8415, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L8415", "errors": [["SS06", "Summary should fit in a single line"], ["PR06", "Parameter \"offset\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"offset\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["EX03", "flake8 error: E231 missing whitespace after ',' (3 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": "pandas.Series.first"}, "pandas.DataFrame.idxmax": {"type": "function", "docstring": "Return index of first occurrence of maximum over requested axis.\nNA/null values are excluded.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    0 or 'index' for row-wise, 1 or 'columns' for column-wise\nskipna : boolean, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\n\nReturns\n-------\nSeries\n    Indexes of maxima along the specified axis.\n\nRaises\n------\nValueError\n    * If the row/column is empty\n\nSee Also\n--------\nSeries.idxmax\n\nNotes\n-----\nThis method is the DataFrame version of ``ndarray.argmax``.", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 7998, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L7998", "errors": [["SS06", "Summary should fit in a single line"], ["PR08", "Parameter \"axis\" description should start with a capital letter"], ["PR09", "Parameter \"axis\" description should finish with \".\""], ["PR06", "Parameter \"skipna\" type should use \"bool\" instead of \"boolean\""], ["SA04", "Missing description for See Also \"Series.idxmax\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": ""}, "pandas.DataFrame.idxmin": {"type": "function", "docstring": "Return index of first occurrence of minimum over requested axis.\nNA/null values are excluded.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    0 or 'index' for row-wise, 1 or 'columns' for column-wise\nskipna : boolean, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\n\nReturns\n-------\nSeries\n    Indexes of minima along the specified axis.\n\nRaises\n------\nValueError\n    * If the row/column is empty\n\nSee Also\n--------\nSeries.idxmin\n\nNotes\n-----\nThis method is the DataFrame version of ``ndarray.argmin``.", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 7961, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L7961", "errors": [["SS06", "Summary should fit in a single line"], ["PR08", "Parameter \"axis\" description should start with a capital letter"], ["PR09", "Parameter \"axis\" description should finish with \".\""], ["PR06", "Parameter \"skipna\" type should use \"bool\" instead of \"boolean\""], ["SA04", "Missing description for See Also \"Series.idxmin\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": ""}, "pandas.DataFrame.last": {"type": "function", "docstring": "Convenience method for subsetting final periods of time series data\nbased on a date offset.\n\nParameters\n----------\noffset : string, DateOffset, dateutil.relativedelta\n\nReturns\n-------\nsubset : same type as caller\n\nRaises\n------\nTypeError\n    If the index is not  a :class:`DatetimeIndex`\n\nSee Also\n--------\nfirst : Select initial periods of time series based on a date offset.\nat_time : Select values at a particular time of the day.\nbetween_time : Select values between particular times of the day.\n\nExamples\n--------\n>>> i = pd.date_range('2018-04-09', periods=4, freq='2D')\n>>> ts = pd.DataFrame({'A': [1,2,3,4]}, index=i)\n>>> ts\n            A\n2018-04-09  1\n2018-04-11  2\n2018-04-13  3\n2018-04-15  4\n\nGet the rows for the last 3 days:\n\n>>> ts.last('3D')\n            A\n2018-04-13  3\n2018-04-15  4\n\nNotice the data for 3 last calender days were returned, not the last\n3 observed days in the dataset, and therefore data for 2018-04-11 was\nnot returned.", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 8478, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L8478", "errors": [["SS06", "Summary should fit in a single line"], ["PR06", "Parameter \"offset\" type should use \"str\" instead of \"string\""], ["PR07", "Parameter \"offset\" has no description"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["EX03", "flake8 error: E231 missing whitespace after ',' (3 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": "pandas.Series.last"}, "pandas.DataFrame.reindex": {"type": "function", "docstring": "Conform DataFrame to new index with optional filling logic, placing\nNA/NaN in locations having no value in the previous index. A new object\nis produced unless the new index is equivalent to the current one and\n``copy=False``.\n\nParameters\n----------\nlabels : array-like, optional\n            New labels / index to conform the axis specified by 'axis' to.\nindex, columns : array-like, optional\n    New labels / index to conform to, should be specified using\n    keywords. Preferably an Index object to avoid duplicating data\naxis : int or str, optional\n            Axis to target. Can be either the axis name ('index', 'columns')\n            or number (0, 1).\nmethod : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n    Method to use for filling holes in reindexed DataFrame.\n    Please note: this is only applicable to DataFrames/Series with a\n    monotonically increasing/decreasing index.\n\n    * None (default): don't fill gaps\n    * pad / ffill: propagate last valid observation forward to next\n      valid\n    * backfill / bfill: use next valid observation to fill gap\n    * nearest: use nearest valid observations to fill gap\n\ncopy : bool, default True\n    Return a new object, even if the passed indexes are the same.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : scalar, default np.NaN\n    Value to use for missing values. Defaults to NaN, but can be any\n    \"compatible\" value.\nlimit : int, default None\n    Maximum number of consecutive elements to forward or backward fill.\ntolerance : optional\n    Maximum distance between original and new labels for inexact\n    matches. The values of the index at the matching locations most\n    satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n    Tolerance may be a scalar value, which applies the same tolerance\n    to all values, or list-like, which applies variable tolerance per\n    element. List-like includes list, tuple, array, Series, and must be\n    the same size as the index and its dtype must exactly match the\n    index's type.\n\n    .. versionadded:: 0.21.0 (list-like tolerance)\n\nReturns\n-------\nDataFrame with changed index.\n\nSee Also\n--------\nDataFrame.set_index : Set row labels.\nDataFrame.reset_index : Remove row labels or move them to new columns.\nDataFrame.reindex_like : Change to same indices as other DataFrame.\n\nExamples\n--------\n\n``DataFrame.reindex`` supports two calling conventions\n\n* ``(index=index_labels, columns=column_labels, ...)``\n* ``(labels, axis={'index', 'columns'}, ...)``\n\nWe *highly* recommend using keyword arguments to clarify your\nintent.\n\nCreate a dataframe with some fictional data.\n\n>>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n>>> df = pd.DataFrame({\n...      'http_status': [200,200,404,404,301],\n...      'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},\n...       index=index)\n>>> df\n           http_status  response_time\nFirefox            200           0.04\nChrome             200           0.02\nSafari             404           0.07\nIE10               404           0.08\nKonqueror          301           1.00\n\nCreate a new index and reindex the dataframe. By default\nvalues in the new index that do not have corresponding\nrecords in the dataframe are assigned ``NaN``.\n\n>>> new_index= ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',\n...             'Chrome']\n>>> df.reindex(new_index)\n               http_status  response_time\nSafari               404.0           0.07\nIceweasel              NaN            NaN\nComodo Dragon          NaN            NaN\nIE10                 404.0           0.08\nChrome               200.0           0.02\n\nWe can fill in the missing values by passing a value to\nthe keyword ``fill_value``. Because the index is not monotonically\nincreasing or decreasing, we cannot use arguments to the keyword\n``method`` to fill the ``NaN`` values.\n\n>>> df.reindex(new_index, fill_value=0)\n               http_status  response_time\nSafari                 404           0.07\nIceweasel                0           0.00\nComodo Dragon            0           0.00\nIE10                   404           0.08\nChrome                 200           0.02\n\n>>> df.reindex(new_index, fill_value='missing')\n              http_status response_time\nSafari                404          0.07\nIceweasel         missing       missing\nComodo Dragon     missing       missing\nIE10                  404          0.08\nChrome                200          0.02\n\nWe can also reindex the columns.\n\n>>> df.reindex(columns=['http_status', 'user_agent'])\n           http_status  user_agent\nFirefox            200         NaN\nChrome             200         NaN\nSafari             404         NaN\nIE10               404         NaN\nKonqueror          301         NaN\n\nOr we can use \"axis-style\" keyword arguments\n\n>>> df.reindex(['http_status', 'user_agent'], axis=\"columns\")\n           http_status  user_agent\nFirefox            200         NaN\nChrome             200         NaN\nSafari             404         NaN\nIE10               404         NaN\nKonqueror          301         NaN\n\nTo further illustrate the filling functionality in\n``reindex``, we will create a dataframe with a\nmonotonically increasing index (for example, a sequence\nof dates).\n\n>>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')\n>>> df2 = pd.DataFrame({\"prices\": [100, 101, np.nan, 100, 89, 88]},\n...                    index=date_index)\n>>> df2\n            prices\n2010-01-01   100.0\n2010-01-02   101.0\n2010-01-03     NaN\n2010-01-04   100.0\n2010-01-05    89.0\n2010-01-06    88.0\n\nSuppose we decide to expand the dataframe to cover a wider\ndate range.\n\n>>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')\n>>> df2.reindex(date_index2)\n            prices\n2009-12-29     NaN\n2009-12-30     NaN\n2009-12-31     NaN\n2010-01-01   100.0\n2010-01-02   101.0\n2010-01-03     NaN\n2010-01-04   100.0\n2010-01-05    89.0\n2010-01-06    88.0\n2010-01-07     NaN\n\nThe index entries that did not have a value in the original data frame\n(for example, '2009-12-29') are by default filled with ``NaN``.\nIf desired, we can fill in the missing values using one of several\noptions.\n\nFor example, to back-propagate the last valid value to fill the ``NaN``\nvalues, pass ``bfill`` as an argument to the ``method`` keyword.\n\n>>> df2.reindex(date_index2, method='bfill')\n            prices\n2009-12-29   100.0\n2009-12-30   100.0\n2009-12-31   100.0\n2010-01-01   100.0\n2010-01-02   101.0\n2010-01-03     NaN\n2010-01-04   100.0\n2010-01-05    89.0\n2010-01-06    88.0\n2010-01-07     NaN\n\nPlease note that the ``NaN`` value present in the original dataframe\n(at index value 2010-01-03) will not be filled by any of the\nvalue propagation schemes. This is because filling while reindexing\ndoes not look at dataframe values, but only compares the original and\ndesired indexes. If you do want to fill in the ``NaN`` values present\nin the original dataframe, use the ``fillna()`` method.\n\nSee the :ref:`user guide <basics.reindexing>` for more.", "deprecated": false, "file": "pandas/util/_decorators.py", "file_line": 3882, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/_decorators.py#L3882", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {labels, copy, fill_value, index, columns, axis, limit, method, level, tolerance}"], ["PR09", "Parameter \"index, columns\" description should finish with \".\""], ["PR09", "Parameter \"method\" description should finish with \".\""], ["RT03", "Return value has no description"], ["EX03", "flake8 error: E126 continuation line over-indented for hanging indent (2 times)"], ["EX03", "flake8 error: E225 missing whitespace around operator"], ["EX03", "flake8 error: E231 missing whitespace after ',' (4 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": ""}, "pandas.DataFrame.reindex_like": {"type": "function", "docstring": "Return an object with matching indices as other object.\n\nConform the object to the same index on all axes. Optional\nfilling logic, placing NaN in locations having no value\nin the previous index. A new object is produced unless the\nnew index is equivalent to the current one and copy=False.\n\nParameters\n----------\nother : Object of the same data type\n    Its row and column indices are used to define the new indices\n    of this object.\nmethod : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n    Method to use for filling holes in reindexed DataFrame.\n    Please note: this is only applicable to DataFrames/Series with a\n    monotonically increasing/decreasing index.\n\n    * None (default): don't fill gaps\n    * pad / ffill: propagate last valid observation forward to next\n      valid\n    * backfill / bfill: use next valid observation to fill gap\n    * nearest: use nearest valid observations to fill gap\n\ncopy : bool, default True\n    Return a new object, even if the passed indexes are the same.\nlimit : int, default None\n    Maximum number of consecutive labels to fill for inexact matches.\ntolerance : optional\n    Maximum distance between original and new labels for inexact\n    matches. The values of the index at the matching locations most\n    satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n    Tolerance may be a scalar value, which applies the same tolerance\n    to all values, or list-like, which applies variable tolerance per\n    element. List-like includes list, tuple, array, Series, and must be\n    the same size as the index and its dtype must exactly match the\n    index's type.\n\n    .. versionadded:: 0.21.0 (list-like tolerance)\n\nReturns\n-------\nSeries or DataFrame\n    Same type as caller, but with changed indices on each axis.\n\nSee Also\n--------\nDataFrame.set_index : Set row labels.\nDataFrame.reset_index : Remove row labels or move them to new columns.\nDataFrame.reindex : Change to new indices or expand indices.\n\nNotes\n-----\nSame as calling\n``.reindex(index=other.index, columns=other.columns,...)``.\n\nExamples\n--------\n>>> df1 = pd.DataFrame([[24.3, 75.7, 'high'],\n...                     [31, 87.8, 'high'],\n...                     [22, 71.6, 'medium'],\n...                     [35, 95, 'medium']],\n...     columns=['temp_celsius', 'temp_fahrenheit', 'windspeed'],\n...     index=pd.date_range(start='2014-02-12',\n...                         end='2014-02-15', freq='D'))\n\n>>> df1\n            temp_celsius  temp_fahrenheit windspeed\n2014-02-12          24.3             75.7      high\n2014-02-13          31.0             87.8      high\n2014-02-14          22.0             71.6    medium\n2014-02-15          35.0             95.0    medium\n\n>>> df2 = pd.DataFrame([[28, 'low'],\n...                     [30, 'low'],\n...                     [35.1, 'medium']],\n...     columns=['temp_celsius', 'windspeed'],\n...     index=pd.DatetimeIndex(['2014-02-12', '2014-02-13',\n...                             '2014-02-15']))\n\n>>> df2\n            temp_celsius windspeed\n2014-02-12          28.0       low\n2014-02-13          30.0       low\n2014-02-15          35.1    medium\n\n>>> df2.reindex_like(df1)\n            temp_celsius  temp_fahrenheit windspeed\n2014-02-12          28.0              NaN       low\n2014-02-13          30.0              NaN       low\n2014-02-14           NaN              NaN       NaN\n2014-02-15          35.1              NaN    medium", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 3757, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L3757", "errors": [["PR09", "Parameter \"method\" description should finish with \".\""], ["EX03", "flake8 error: E128 continuation line under-indented for visual indent (2 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": "pandas.Series.reindex_like"}, "pandas.DataFrame.rename": {"type": "function", "docstring": "Alter axes labels.\n\nFunction / dict values must be unique (1-to-1). Labels not contained in\na dict / Series will be left as-is. Extra labels listed don't throw an\nerror.\n\nSee the :ref:`user guide <basics.rename>` for more.\n\nParameters\n----------\nmapper : dict-like or function\n    Dict-like or functions transformations to apply to\n    that axis' values. Use either ``mapper`` and ``axis`` to\n    specify the axis to target with ``mapper``, or ``index`` and\n    ``columns``.\nindex : dict-like or function\n    Alternative to specifying axis (``mapper, axis=0``\n    is equivalent to ``index=mapper``).\ncolumns : dict-like or function\n    Alternative to specifying axis (``mapper, axis=1``\n    is equivalent to ``columns=mapper``).\naxis : int or str\n    Axis to target with ``mapper``. Can be either the axis name\n    ('index', 'columns') or number (0, 1). The default is 'index'.\ncopy : bool, default True\n    Also copy underlying data.\ninplace : bool, default False\n    Whether to return a new DataFrame. If True then value of copy is\n    ignored.\nlevel : int or level name, default None\n    In case of a MultiIndex, only rename labels in the specified\n    level.\nerrors : {'ignore', 'raise'}, default 'ignore'\n    If 'raise', raise a `KeyError` when a dict-like `mapper`, `index`,\n    or `columns` contains labels that are not present in the Index\n    being transformed.\n    If 'ignore', existing keys will be renamed and extra keys will be\n    ignored.\n\nReturns\n-------\nDataFrame\n    DataFrame with the renamed axis labels.\n\nRaises\n------\nKeyError\n    If any of the labels is not found in the selected axis and\n    \"errors='raise'\".\n\nSee Also\n--------\nDataFrame.rename_axis : Set the name of the axis.\n\nExamples\n--------\n\n``DataFrame.rename`` supports two calling conventions\n\n* ``(index=index_mapper, columns=columns_mapper, ...)``\n* ``(mapper, axis={'index', 'columns'}, ...)``\n\nWe *highly* recommend using keyword arguments to clarify your\nintent.\n\nRename columns using a mapping:\n\n>>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n>>> df.rename(columns={\"A\": \"a\", \"B\": \"c\"})\n   a  c\n0  1  4\n1  2  5\n2  3  6\n\nRename index using a mapping:\n\n>>> df.rename(index={0: \"x\", 1: \"y\", 2: \"z\"})\n   A  B\nx  1  4\ny  2  5\nz  3  6\n\nCast index labels to a different type:\n\n>>> df.index\nRangeIndex(start=0, stop=3, step=1)\n>>> df.rename(index=str).index\nIndex(['0', '1', '2'], dtype='object')\n\n>>> df.rename(columns={\"A\": \"a\", \"B\": \"b\", \"C\": \"c\"}, errors=\"raise\")\nTraceback (most recent call last):\nKeyError: ['C'] not found in axis\n\nUsing axis-style parameters\n\n>>> df.rename(str.lower, axis='columns')\n   a  b\n0  1  4\n1  2  5\n2  3  6\n\n>>> df.rename({1: 2, 2: 4}, axis='index')\n   A  B\n0  1  4\n2  2  5\n4  3  6", "deprecated": false, "file": "pandas/util/_decorators.py", "file_line": 4045, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/_decorators.py#L4045", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {axis, copy, columns, errors, index, mapper, inplace, level}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": ""}, "pandas.DataFrame.rename_axis": {"type": "function", "docstring": "Set the name of the axis for the index or columns.\n\nParameters\n----------\nmapper : scalar, list-like, optional\n    Value to set the axis name attribute.\nindex, columns : scalar, list-like, dict-like or function, optional\n    A scalar, list-like, dict-like or functions transformations to\n    apply to that axis' values.\n\n    Use either ``mapper`` and ``axis`` to\n    specify the axis to target with ``mapper``, or ``index``\n    and/or ``columns``.\n\n    .. versionchanged:: 0.24.0\n\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to rename.\ncopy : bool, default True\n    Also copy underlying data.\ninplace : bool, default False\n    Modifies the object directly, instead of creating a new Series\n    or DataFrame.\n\nReturns\n-------\nSeries, DataFrame, or None\n    The same type as the caller or None if `inplace` is True.\n\nSee Also\n--------\nSeries.rename : Alter Series index labels or name.\nDataFrame.rename : Alter DataFrame index labels or name.\nIndex.rename : Set new names on index.\n\nNotes\n-----\n``DataFrame.rename_axis`` supports two calling conventions\n\n* ``(index=index_mapper, columns=columns_mapper, ...)``\n* ``(mapper, axis={'index', 'columns'}, ...)``\n\nThe first calling convention will only modify the names of\nthe index and/or the names of the Index object that is the columns.\nIn this case, the parameter ``copy`` is ignored.\n\nThe second calling convention will modify the names of the\nthe corresponding index if mapper is a list or a scalar.\nHowever, if mapper is dict-like or a function, it will use the\ndeprecated behavior of modifying the axis *labels*.\n\nWe *highly* recommend using keyword arguments to clarify your\nintent.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([\"dog\", \"cat\", \"monkey\"])\n>>> s\n0       dog\n1       cat\n2    monkey\ndtype: object\n>>> s.rename_axis(\"animal\")\nanimal\n0    dog\n1    cat\n2    monkey\ndtype: object\n\n**DataFrame**\n\n>>> df = pd.DataFrame({\"num_legs\": [4, 4, 2],\n...                    \"num_arms\": [0, 0, 2]},\n...                   [\"dog\", \"cat\", \"monkey\"])\n>>> df\n        num_legs  num_arms\ndog            4         0\ncat            4         0\nmonkey         2         2\n>>> df = df.rename_axis(\"animal\")\n>>> df\n        num_legs  num_arms\nanimal\ndog            4         0\ncat            4         0\nmonkey         2         2\n>>> df = df.rename_axis(\"limbs\", axis=\"columns\")\n>>> df\nlimbs   num_legs  num_arms\nanimal\ndog            4         0\ncat            4         0\nmonkey         2         2\n\n**MultiIndex**\n\n>>> df.index = pd.MultiIndex.from_product([['mammal'],\n...                                        ['dog', 'cat', 'monkey']],\n...                                       names=['type', 'name'])\n>>> df\nlimbs          num_legs  num_arms\ntype   name\nmammal dog            4         0\n       cat            4         0\n       monkey         2         2\n\n>>> df.rename_axis(index={'type': 'class'})\nlimbs          num_legs  num_arms\nclass  name\nmammal dog            4         0\n       cat            4         0\n       monkey         2         2\n\n>>> df.rename_axis(columns=str.upper)\nLIMBS          num_legs  num_arms\ntype   name\nmammal dog            4         0\n       cat            4         0\n       monkey         2         2", "deprecated": false, "file": "pandas/util/_decorators.py", "file_line": 1153, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/_decorators.py#L1153", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {axis, copy, index, columns, mapper, inplace}"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": "pandas.Series.rename_axis"}, "pandas.DataFrame.reset_index": {"type": "function", "docstring": "Reset the index, or a level of it.\n\nReset the index of the DataFrame, and use the default one instead.\nIf the DataFrame has a MultiIndex, this method can remove one or more\nlevels.\n\nParameters\n----------\nlevel : int, str, tuple, or list, default None\n    Only remove the given levels from the index. Removes all levels by\n    default.\ndrop : bool, default False\n    Do not try to insert index into dataframe columns. This resets\n    the index to the default integer index.\ninplace : bool, default False\n    Modify the DataFrame in place (do not create a new object).\ncol_level : int or str, default 0\n    If the columns have multiple levels, determines which level the\n    labels are inserted into. By default it is inserted into the first\n    level.\ncol_fill : object, default ''\n    If the columns have multiple levels, determines how the other\n    levels are named. If None then the index name is repeated.\n\nReturns\n-------\nDataFrame\n    DataFrame with the new index.\n\nSee Also\n--------\nDataFrame.set_index : Opposite of reset_index.\nDataFrame.reindex : Change to new indices or expand indices.\nDataFrame.reindex_like : Change to same indices as other DataFrame.\n\nExamples\n--------\n>>> df = pd.DataFrame([('bird', 389.0),\n...                    ('bird', 24.0),\n...                    ('mammal', 80.5),\n...                    ('mammal', np.nan)],\n...                   index=['falcon', 'parrot', 'lion', 'monkey'],\n...                   columns=('class', 'max_speed'))\n>>> df\n         class  max_speed\nfalcon    bird      389.0\nparrot    bird       24.0\nlion    mammal       80.5\nmonkey  mammal        NaN\n\nWhen we reset the index, the old index is added as a column, and a\nnew sequential index is used:\n\n>>> df.reset_index()\n    index   class  max_speed\n0  falcon    bird      389.0\n1  parrot    bird       24.0\n2    lion  mammal       80.5\n3  monkey  mammal        NaN\n\nWe can use the `drop` parameter to avoid the old index being added as\na column:\n\n>>> df.reset_index(drop=True)\n    class  max_speed\n0    bird      389.0\n1    bird       24.0\n2  mammal       80.5\n3  mammal        NaN\n\nYou can also use `reset_index` with `MultiIndex`.\n\n>>> index = pd.MultiIndex.from_tuples([('bird', 'falcon'),\n...                                    ('bird', 'parrot'),\n...                                    ('mammal', 'lion'),\n...                                    ('mammal', 'monkey')],\n...                                   names=['class', 'name'])\n>>> columns = pd.MultiIndex.from_tuples([('speed', 'max'),\n...                                      ('species', 'type')])\n>>> df = pd.DataFrame([(389.0, 'fly'),\n...                    ( 24.0, 'fly'),\n...                    ( 80.5, 'run'),\n...                    (np.nan, 'jump')],\n...                   index=index,\n...                   columns=columns)\n>>> df\n               speed species\n                 max    type\nclass  name\nbird   falcon  389.0     fly\n       parrot   24.0     fly\nmammal lion     80.5     run\n       monkey    NaN    jump\n\nIf the index has multiple levels, we can reset a subset of them:\n\n>>> df.reset_index(level='class')\n         class  speed species\n                  max    type\nname\nfalcon    bird  389.0     fly\nparrot    bird   24.0     fly\nlion    mammal   80.5     run\nmonkey  mammal    NaN    jump\n\nIf we are not dropping the index, by default, it is placed in the top\nlevel. We can place it in another level:\n\n>>> df.reset_index(level='class', col_level=1)\n                speed species\n         class    max    type\nname\nfalcon    bird  389.0     fly\nparrot    bird   24.0     fly\nlion    mammal   80.5     run\nmonkey  mammal    NaN    jump\n\nWhen the index is inserted under another level, we can specify under\nwhich one with the parameter `col_fill`:\n\n>>> df.reset_index(level='class', col_level=1, col_fill='species')\n              species  speed species\n                class    max    type\nname\nfalcon           bird  389.0     fly\nparrot           bird   24.0     fly\nlion           mammal   80.5     run\nmonkey         mammal    NaN    jump\n\nIf we specify a nonexistent level for `col_fill`, it is created:\n\n>>> df.reset_index(level='class', col_level=1, col_fill='genus')\n                genus  speed species\n                class    max    type\nname\nfalcon           bird  389.0     fly\nparrot           bird   24.0     fly\nlion           mammal   80.5     run\nmonkey         mammal    NaN    jump", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 4404, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L4404", "errors": [["EX03", "flake8 error: E201 whitespace after '(' (2 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": ""}, "pandas.DataFrame.sample": {"type": "function", "docstring": "Return a random sample of items from an axis of object.\n\nYou can use `random_state` for reproducibility.\n\nParameters\n----------\nn : int, optional\n    Number of items from axis to return. Cannot be used with `frac`.\n    Default = 1 if `frac` = None.\nfrac : float, optional\n    Fraction of axis items to return. Cannot be used with `n`.\nreplace : bool, default False\n    Allow or disallow sampling of the same row more than once.\nweights : str or ndarray-like, optional\n    Default 'None' results in equal probability weighting.\n    If passed a Series, will align with target object on index. Index\n    values in weights not found in sampled object will be ignored and\n    index values in sampled object not in weights will be assigned\n    weights of zero.\n    If called on a DataFrame, will accept the name of a column\n    when axis = 0.\n    Unless weights are a Series, weights must be same length as axis\n    being sampled.\n    If weights do not sum to 1, they will be normalized to sum to 1.\n    Missing values in the weights column will be treated as zero.\n    Infinite values not allowed.\nrandom_state : int or numpy.random.RandomState, optional\n    Seed for the random number generator (if int), or numpy RandomState\n    object.\naxis : int or string, optional\n    Axis to sample. Accepts axis number or name. Default is stat axis\n    for given data type (0 for Series and DataFrames).\n\nReturns\n-------\nSeries or DataFrame\n    A new object of same type as caller containing `n` items randomly\n    sampled from the caller object.\n\nSee Also\n--------\nnumpy.random.choice: Generates a random sample from a given 1-D numpy\n    array.\n\nExamples\n--------\n>>> df = pd.DataFrame({'num_legs': [2, 4, 8, 0],\n...                    'num_wings': [2, 0, 0, 0],\n...                    'num_specimen_seen': [10, 2, 1, 8]},\n...                   index=['falcon', 'dog', 'spider', 'fish'])\n>>> df\n        num_legs  num_wings  num_specimen_seen\nfalcon         2          2                 10\ndog            4          0                  2\nspider         8          0                  1\nfish           0          0                  8\n\nExtract 3 random elements from the ``Series`` ``df['num_legs']``:\nNote that we use `random_state` to ensure the reproducibility of\nthe examples.\n\n>>> df['num_legs'].sample(n=3, random_state=1)\nfish      0\nspider    8\nfalcon    2\nName: num_legs, dtype: int64\n\nA random 50% sample of the ``DataFrame`` with replacement:\n\n>>> df.sample(frac=0.5, replace=True, random_state=1)\n      num_legs  num_wings  num_specimen_seen\ndog          4          0                  2\nfish         0          0                  8\n\nUsing a DataFrame column as weights. Rows with larger value in the\n`num_specimen_seen` column are more likely to be sampled.\n\n>>> df.sample(n=2, weights='num_specimen_seen', random_state=1)\n        num_legs  num_wings  num_specimen_seen\nfalcon         2          2                 10\nfish           0          0                  8", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 4772, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L4772", "errors": [["PR06", "Parameter \"axis\" type should use \"str\" instead of \"string\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": "pandas.Series.sample"}, "pandas.DataFrame.set_axis": {"type": "function", "docstring": "Assign desired index to given axis.\n\nIndexes for column or row labels can be changed by assigning\na list-like or Index.\n\n.. versionchanged:: 0.21.0\n\n   The signature is now `labels` and `axis`, consistent with\n   the rest of pandas API. Previously, the `axis` and `labels`\n   arguments were respectively the first and second positional\n   arguments.\n\nParameters\n----------\nlabels : list-like, Index\n    The values for the new index.\n\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to update. The value 0 identifies the rows, and 1\n    identifies the columns.\n\ninplace : bool, default False\n    Whether to return a new %(klass)s instance.\n\nReturns\n-------\nrenamed : %(klass)s or None\n    An object of same type as caller if inplace=False, None otherwise.\n\nSee Also\n--------\nDataFrame.rename_axis : Alter the name of the index or columns.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([1, 2, 3])\n>>> s\n0    1\n1    2\n2    3\ndtype: int64\n\n>>> s.set_axis(['a', 'b', 'c'], axis=0)\na    1\nb    2\nc    3\ndtype: int64\n\n**DataFrame**\n\n>>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n\nChange the row labels.\n\n>>> df.set_axis(['a', 'b', 'c'], axis='index')\n   A  B\na  1  4\nb  2  5\nc  3  6\n\nChange the column labels.\n\n>>> df.set_axis(['I', 'II'], axis='columns')\n   I  II\n0  1   4\n1  2   5\n2  3   6\n\nNow, update the labels inplace.\n\n>>> df.set_axis(['i', 'ii'], axis='columns', inplace=True)\n>>> df\n   i  ii\n0  1   4\n1  2   5\n2  3   6", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 570, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L570", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": "pandas.Series.set_axis"}, "pandas.DataFrame.set_index": {"type": "function", "docstring": "Set the DataFrame index using existing columns.\n\nSet the DataFrame index (row labels) using one or more existing\ncolumns or arrays (of the correct length). The index can replace the\nexisting index or expand on it.\n\nParameters\n----------\nkeys : label or array-like or list of labels/arrays\n    This parameter can be either a single column key, a single array of\n    the same length as the calling DataFrame, or a list containing an\n    arbitrary combination of column keys and arrays. Here, \"array\"\n    encompasses :class:`Series`, :class:`Index`, ``np.ndarray``, and\n    instances of :class:`~collections.abc.Iterator`.\ndrop : bool, default True\n    Delete columns to be used as the new index.\nappend : bool, default False\n    Whether to append columns to existing index.\ninplace : bool, default False\n    Modify the DataFrame in place (do not create a new object).\nverify_integrity : bool, default False\n    Check the new index for duplicates. Otherwise defer the check until\n    necessary. Setting to False will improve the performance of this\n    method.\n\nReturns\n-------\nDataFrame\n    Changed row labels.\n\nSee Also\n--------\nDataFrame.reset_index : Opposite of set_index.\nDataFrame.reindex : Change to new indices or expand indices.\nDataFrame.reindex_like : Change to same indices as other DataFrame.\n\nExamples\n--------\n>>> df = pd.DataFrame({'month': [1, 4, 7, 10],\n...                    'year': [2012, 2014, 2013, 2014],\n...                    'sale': [55, 40, 84, 31]})\n>>> df\n   month  year  sale\n0      1  2012    55\n1      4  2014    40\n2      7  2013    84\n3     10  2014    31\n\nSet the index to become the 'month' column:\n\n>>> df.set_index('month')\n       year  sale\nmonth\n1      2012    55\n4      2014    40\n7      2013    84\n10     2014    31\n\nCreate a MultiIndex using columns 'year' and 'month':\n\n>>> df.set_index(['year', 'month'])\n            sale\nyear  month\n2012  1     55\n2014  4     40\n2013  7     84\n2014  10    31\n\nCreate a MultiIndex using an Index and a column:\n\n>>> df.set_index([pd.Index([1, 2, 3, 4]), 'year'])\n         month  sale\n   year\n1  2012  1      55\n2  2014  4      40\n3  2013  7      84\n4  2014  10     31\n\nCreate a MultiIndex using two Series:\n\n>>> s = pd.Series([1, 2, 3, 4])\n>>> df.set_index([s, s**2])\n      month  year  sale\n1 1       1  2012    55\n2 4       4  2014    40\n3 9       7  2013    84\n4 16     10  2014    31", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 4212, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L4212", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": ""}, "pandas.DataFrame.take": {"type": "function", "docstring": "Return the elements in the given *positional* indices along an axis.\n\nThis means that we are not indexing according to actual values in\nthe index attribute of the object. We are indexing according to the\nactual position of the element in the object.\n\nParameters\n----------\nindices : array-like\n    An array of ints indicating which positions to take.\naxis : {0 or 'index', 1 or 'columns', None}, default 0\n    The axis on which to select elements. ``0`` means that we are\n    selecting rows, ``1`` means that we are selecting columns.\nis_copy : bool, default True\n    Whether to return a copy of the original object or not.\n**kwargs\n    For compatibility with :meth:`numpy.take`. Has no effect on the\n    output.\n\nReturns\n-------\ntaken : same type as caller\n    An array-like containing the elements taken from the object.\n\nSee Also\n--------\nDataFrame.loc : Select a subset of a DataFrame by labels.\nDataFrame.iloc : Select a subset of a DataFrame by positions.\nnumpy.take : Take elements from an array along an axis.\n\nExamples\n--------\n>>> df = pd.DataFrame([('falcon', 'bird',    389.0),\n...                    ('parrot', 'bird',     24.0),\n...                    ('lion',   'mammal',   80.5),\n...                    ('monkey', 'mammal', np.nan)],\n...                    columns=['name', 'class', 'max_speed'],\n...                    index=[0, 2, 3, 1])\n>>> df\n     name   class  max_speed\n0  falcon    bird      389.0\n2  parrot    bird       24.0\n3    lion  mammal       80.5\n1  monkey  mammal        NaN\n\nTake elements at positions 0 and 3 along the axis 0 (default).\n\nNote how the actual indices selected (0 and 1) do not correspond to\nour selected indices 0 and 3. That's because we are selecting the 0th\nand 3rd rows, not rows whose indices equal 0 and 3.\n\n>>> df.take([0, 3])\n     name   class  max_speed\n0  falcon    bird      389.0\n1  monkey  mammal        NaN\n\nTake elements at indices 1 and 2 along the axis 1 (column selection).\n\n>>> df.take([1, 2], axis=1)\n    class  max_speed\n0    bird      389.0\n2    bird       24.0\n3  mammal       80.5\n1  mammal        NaN\n\nWe may take elements using negative integers for positive indices,\nstarting from the end of the object, just like with Python lists.\n\n>>> df.take([-1, -2])\n     name   class  max_speed\n1  monkey  mammal        NaN\n3    lion  mammal       80.5", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 3287, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L3287", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["EX03", "flake8 error: E127 continuation line over-indented for visual indent (2 times)"], ["EX03", "flake8 error: E241 multiple spaces after ',' (4 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": ""}, "pandas.DataFrame.truncate": {"type": "function", "docstring": "Truncate a Series or DataFrame before and after some index value.\n\nThis is a useful shorthand for boolean indexing based on index\nvalues above or below certain thresholds.\n\nParameters\n----------\nbefore : date, string, int\n    Truncate all rows before this index value.\nafter : date, string, int\n    Truncate all rows after this index value.\naxis : {0 or 'index', 1 or 'columns'}, optional\n    Axis to truncate. Truncates the index (rows) by default.\ncopy : bool, default is True,\n    Return a copy of the truncated section.\n\nReturns\n-------\ntype of caller\n    The truncated Series or DataFrame.\n\nSee Also\n--------\nDataFrame.loc : Select a subset of a DataFrame by label.\nDataFrame.iloc : Select a subset of a DataFrame by position.\n\nNotes\n-----\nIf the index being truncated contains only datetime values,\n`before` and `after` may be specified as strings instead of\nTimestamps.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': ['a', 'b', 'c', 'd', 'e'],\n...                    'B': ['f', 'g', 'h', 'i', 'j'],\n...                    'C': ['k', 'l', 'm', 'n', 'o']},\n...                    index=[1, 2, 3, 4, 5])\n>>> df\n   A  B  C\n1  a  f  k\n2  b  g  l\n3  c  h  m\n4  d  i  n\n5  e  j  o\n\n>>> df.truncate(before=2, after=4)\n   A  B  C\n2  b  g  l\n3  c  h  m\n4  d  i  n\n\nThe columns of a DataFrame can be truncated.\n\n>>> df.truncate(before=\"A\", after=\"B\", axis=\"columns\")\n   A  B\n1  a  f\n2  b  g\n3  c  h\n4  d  i\n5  e  j\n\nFor Series, only rows can be truncated.\n\n>>> df['A'].truncate(before=2, after=4)\n2    b\n3    c\n4    d\nName: A, dtype: object\n\nThe index values in ``truncate`` can be datetimes or string\ndates.\n\n>>> dates = pd.date_range('2016-01-01', '2016-02-01', freq='s')\n>>> df = pd.DataFrame(index=dates, data={'A': 1})\n>>> df.tail()\n                     A\n2016-01-31 23:59:56  1\n2016-01-31 23:59:57  1\n2016-01-31 23:59:58  1\n2016-01-31 23:59:59  1\n2016-02-01 00:00:00  1\n\n>>> df.truncate(before=pd.Timestamp('2016-01-05'),\n...             after=pd.Timestamp('2016-01-10')).tail()\n                     A\n2016-01-09 23:59:56  1\n2016-01-09 23:59:57  1\n2016-01-09 23:59:58  1\n2016-01-09 23:59:59  1\n2016-01-10 00:00:00  1\n\nBecause the index is a DatetimeIndex containing only dates, we can\nspecify `before` and `after` as strings. They will be coerced to\nTimestamps before truncation.\n\n>>> df.truncate('2016-01-05', '2016-01-10').tail()\n                     A\n2016-01-09 23:59:56  1\n2016-01-09 23:59:57  1\n2016-01-09 23:59:58  1\n2016-01-09 23:59:59  1\n2016-01-10 00:00:00  1\n\nNote that ``truncate`` assumes a 0 value for any unspecified time\ncomponent (midnight). This differs from partial string slicing, which\nreturns any partially matching dates.\n\n>>> df.loc['2016-01-05':'2016-01-10', :].tail()\n                     A\n2016-01-10 23:59:55  1\n2016-01-10 23:59:56  1\n2016-01-10 23:59:57  1\n2016-01-10 23:59:58  1\n2016-01-10 23:59:59  1", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 9451, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L9451", "errors": [["PR06", "Parameter \"before\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"after\" type should use \"str\" instead of \"string\""], ["EX03", "flake8 error: E127 continuation line over-indented for visual indent"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reindexing / selection / label manipulation", "shared_code_with": "pandas.Series.truncate"}, "pandas.DataFrame.dropna": {"type": "function", "docstring": "Remove missing values.\n\nSee the :ref:`User Guide <missing_data>` for more on which values are\nconsidered missing, and how to work with missing data.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Determine if rows or columns which contain missing values are\n    removed.\n\n    * 0, or 'index' : Drop rows which contain missing values.\n    * 1, or 'columns' : Drop columns which contain missing value.\n\n    .. deprecated:: 0.23.0\n\n       Pass tuple or list to drop on multiple axes.\n       Only a single axis is allowed.\n\nhow : {'any', 'all'}, default 'any'\n    Determine if row or column is removed from DataFrame, when we have\n    at least one NA or all NA.\n\n    * 'any' : If any NA values are present, drop that row or column.\n    * 'all' : If all values are NA, drop that row or column.\n\nthresh : int, optional\n    Require that many non-NA values.\nsubset : array-like, optional\n    Labels along other axis to consider, e.g. if you are dropping rows\n    these would be a list of columns to include.\ninplace : bool, default False\n    If True, do operation inplace and return None.\n\nReturns\n-------\nDataFrame\n    DataFrame with NA entries dropped from it.\n\nSee Also\n--------\nDataFrame.isna: Indicate missing values.\nDataFrame.notna : Indicate existing (non-missing) values.\nDataFrame.fillna : Replace missing values.\nSeries.dropna : Drop missing values.\nIndex.dropna : Drop missing indices.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"name\": ['Alfred', 'Batman', 'Catwoman'],\n...                    \"toy\": [np.nan, 'Batmobile', 'Bullwhip'],\n...                    \"born\": [pd.NaT, pd.Timestamp(\"1940-04-25\"),\n...                             pd.NaT]})\n>>> df\n       name        toy       born\n0    Alfred        NaN        NaT\n1    Batman  Batmobile 1940-04-25\n2  Catwoman   Bullwhip        NaT\n\nDrop the rows where at least one element is missing.\n\n>>> df.dropna()\n     name        toy       born\n1  Batman  Batmobile 1940-04-25\n\nDrop the columns where at least one element is missing.\n\n>>> df.dropna(axis='columns')\n       name\n0    Alfred\n1    Batman\n2  Catwoman\n\nDrop the rows where all elements are missing.\n\n>>> df.dropna(how='all')\n       name        toy       born\n0    Alfred        NaN        NaT\n1    Batman  Batmobile 1940-04-25\n2  Catwoman   Bullwhip        NaT\n\nKeep only the rows with at least 2 non-NA values.\n\n>>> df.dropna(thresh=2)\n       name        toy       born\n1    Batman  Batmobile 1940-04-25\n2  Catwoman   Bullwhip        NaT\n\nDefine in which columns to look for missing values.\n\n>>> df.dropna(subset=['name', 'born'])\n       name        toy       born\n1    Batman  Batmobile 1940-04-25\n\nKeep the DataFrame with valid entries in the same variable.\n\n>>> df.dropna(inplace=True)\n>>> df\n     name        toy       born\n1  Batman  Batmobile 1940-04-25", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 4659, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L4659", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Missing data handling", "shared_code_with": ""}, "pandas.DataFrame.fillna": {"type": "function", "docstring": "Fill NA/NaN values using the specified method.\n\nParameters\n----------\nvalue : scalar, dict, Series, or DataFrame\n    Value to use to fill holes (e.g. 0), alternately a\n    dict/Series/DataFrame of values specifying which value to use for\n    each index (for a Series) or column (for a DataFrame).  Values not\n    in the dict/Series/DataFrame will not be filled. This value cannot\n    be a list.\nmethod : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n    Method to use for filling holes in reindexed Series\n    pad / ffill: propagate last valid observation forward to next valid\n    backfill / bfill: use next valid observation to fill gap.\naxis : {0 or 'index', 1 or 'columns'}\n    Axis along which to fill missing values.\ninplace : bool, default False\n    If True, fill in-place. Note: this will modify any\n    other views on this object (e.g., a no-copy slice for a column in a\n    DataFrame).\nlimit : int, default None\n    If method is specified, this is the maximum number of consecutive\n    NaN values to forward/backward fill. In other words, if there is\n    a gap with more than this number of consecutive NaNs, it will only\n    be partially filled. If method is not specified, this is the\n    maximum number of entries along the entire axis where NaNs will be\n    filled. Must be greater than 0 if not None.\ndowncast : dict, default is None\n    A dict of item->dtype of what to downcast if possible,\n    or the string 'infer' which will try to downcast to an appropriate\n    equal type (e.g. float64 to int64 if possible).\n\nReturns\n-------\nDataFrame\n    Object with missing values filled.\n\nSee Also\n--------\ninterpolate : Fill NaN values using interpolation.\nreindex : Conform object to new index.\nasfreq : Convert TimeSeries to specified frequency.\n\nExamples\n--------\n>>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n...                    [3, 4, np.nan, 1],\n...                    [np.nan, np.nan, np.nan, 5],\n...                    [np.nan, 3, np.nan, 4]],\n...                   columns=list('ABCD'))\n>>> df\n     A    B   C  D\n0  NaN  2.0 NaN  0\n1  3.0  4.0 NaN  1\n2  NaN  NaN NaN  5\n3  NaN  3.0 NaN  4\n\nReplace all NaN elements with 0s.\n\n>>> df.fillna(0)\n    A   B   C   D\n0   0.0 2.0 0.0 0\n1   3.0 4.0 0.0 1\n2   0.0 0.0 0.0 5\n3   0.0 3.0 0.0 4\n\nWe can also propagate non-null values forward or backward.\n\n>>> df.fillna(method='ffill')\n    A   B   C   D\n0   NaN 2.0 NaN 0\n1   3.0 4.0 NaN 1\n2   3.0 4.0 NaN 5\n3   3.0 3.0 NaN 4\n\nReplace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,\n2, and 3 respectively.\n\n>>> values = {'A': 0, 'B': 1, 'C': 2, 'D': 3}\n>>> df.fillna(value=values)\n    A   B   C   D\n0   0.0 2.0 2.0 0\n1   3.0 4.0 2.0 1\n2   0.0 1.0 2.0 5\n3   0.0 3.0 2.0 4\n\nOnly replace the first NaN element.\n\n>>> df.fillna(value=values, limit=1)\n    A   B   C   D\n0   0.0 2.0 2.0 0\n1   3.0 4.0 NaN 1\n2   NaN 1.0 NaN 5\n3   NaN 3.0 NaN 4", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 4165, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L4165", "errors": [["PR01", "Parameters {**kwargs} not documented"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Missing data handling", "shared_code_with": ""}, "pandas.DataFrame.replace": {"type": "function", "docstring": "Replace values given in `to_replace` with `value`.\n\nValues of the DataFrame are replaced with other values dynamically.\nThis differs from updating with ``.loc`` or ``.iloc``, which require\nyou to specify a location to update with some value.\n\nParameters\n----------\nto_replace : str, regex, list, dict, Series, int, float, or None\n    How to find the values that will be replaced.\n\n    * numeric, str or regex:\n\n        - numeric: numeric values equal to `to_replace` will be\n          replaced with `value`\n        - str: string exactly matching `to_replace` will be replaced\n          with `value`\n        - regex: regexs matching `to_replace` will be replaced with\n          `value`\n\n    * list of str, regex, or numeric:\n\n        - First, if `to_replace` and `value` are both lists, they\n          **must** be the same length.\n        - Second, if ``regex=True`` then all of the strings in **both**\n          lists will be interpreted as regexs otherwise they will match\n          directly. This doesn't matter much for `value` since there\n          are only a few possible substitution regexes you can use.\n        - str, regex and numeric rules apply as above.\n\n    * dict:\n\n        - Dicts can be used to specify different replacement values\n          for different existing values. For example,\n          ``{'a': 'b', 'y': 'z'}`` replaces the value 'a' with 'b' and\n          'y' with 'z'. To use a dict in this way the `value`\n          parameter should be `None`.\n        - For a DataFrame a dict can specify that different values\n          should be replaced in different columns. For example,\n          ``{'a': 1, 'b': 'z'}`` looks for the value 1 in column 'a'\n          and the value 'z' in column 'b' and replaces these values\n          with whatever is specified in `value`. The `value` parameter\n          should not be ``None`` in this case. You can treat this as a\n          special case of passing two lists except that you are\n          specifying the column to search in.\n        - For a DataFrame nested dictionaries, e.g.,\n          ``{'a': {'b': np.nan}}``, are read as follows: look in column\n          'a' for the value 'b' and replace it with NaN. The `value`\n          parameter should be ``None`` to use a nested dict in this\n          way. You can nest regular expressions as well. Note that\n          column names (the top-level dictionary keys in a nested\n          dictionary) **cannot** be regular expressions.\n\n    * None:\n\n        - This means that the `regex` argument must be a string,\n          compiled regular expression, or list, dict, ndarray or\n          Series of such elements. If `value` is also ``None`` then\n          this **must** be a nested dictionary or Series.\n\n    See the examples section for examples of each of these.\nvalue : scalar, dict, list, str, regex, default None\n    Value to replace any values matching `to_replace` with.\n    For a DataFrame a dict of values can be used to specify which\n    value to use for each column (columns not in the dict will not be\n    filled). Regular expressions, strings and lists or dicts of such\n    objects are also allowed.\ninplace : bool, default False\n    If True, in place. Note: this will modify any\n    other views on this object (e.g. a column from a DataFrame).\n    Returns the caller if this is True.\nlimit : int, default None\n    Maximum size gap to forward or backward fill.\nregex : bool or same types as `to_replace`, default False\n    Whether to interpret `to_replace` and/or `value` as regular\n    expressions. If this is ``True`` then `to_replace` *must* be a\n    string. Alternatively, this could be a regular expression or a\n    list, dict, or array of regular expressions in which case\n    `to_replace` must be ``None``.\nmethod : {'pad', 'ffill', 'bfill', `None`}\n    The method to use when for replacement, when `to_replace` is a\n    scalar, list or tuple and `value` is ``None``.\n\n    .. versionchanged:: 0.23.0\n        Added to DataFrame.\n\nReturns\n-------\nDataFrame\n    Object after replacement.\n\nRaises\n------\nAssertionError\n    * If `regex` is not a ``bool`` and `to_replace` is not\n      ``None``.\nTypeError\n    * If `to_replace` is a ``dict`` and `value` is not a ``list``,\n      ``dict``, ``ndarray``, or ``Series``\n    * If `to_replace` is ``None`` and `regex` is not compilable\n      into a regular expression or is a list, dict, ndarray, or\n      Series.\n    * When replacing multiple ``bool`` or ``datetime64`` objects and\n      the arguments to `to_replace` does not match the type of the\n      value being replaced\nValueError\n    * If a ``list`` or an ``ndarray`` is passed to `to_replace` and\n      `value` but they are not the same length.\n\nSee Also\n--------\nDataFrame.fillna : Fill NA values.\nDataFrame.where : Replace values based on boolean condition.\nSeries.str.replace : Simple string replacement.\n\nNotes\n-----\n* Regex substitution is performed under the hood with ``re.sub``. The\n  rules for substitution for ``re.sub`` are the same.\n* Regular expressions will only substitute on strings, meaning you\n  cannot provide, for example, a regular expression matching floating\n  point numbers and expect the columns in your frame that have a\n  numeric dtype to be matched. However, if those floating point\n  numbers *are* strings, then you can do this.\n* This method has *a lot* of options. You are encouraged to experiment\n  and play with this method to gain intuition about how it works.\n* When dict is used as the `to_replace` value, it is like\n  key(s) in the dict are the to_replace part and\n  value(s) in the dict are the value parameter.\n\nExamples\n--------\n\n**Scalar `to_replace` and `value`**\n\n>>> s = pd.Series([0, 1, 2, 3, 4])\n>>> s.replace(0, 5)\n0    5\n1    1\n2    2\n3    3\n4    4\ndtype: int64\n\n>>> df = pd.DataFrame({'A': [0, 1, 2, 3, 4],\n...                    'B': [5, 6, 7, 8, 9],\n...                    'C': ['a', 'b', 'c', 'd', 'e']})\n>>> df.replace(0, 5)\n   A  B  C\n0  5  5  a\n1  1  6  b\n2  2  7  c\n3  3  8  d\n4  4  9  e\n\n**List-like `to_replace`**\n\n>>> df.replace([0, 1, 2, 3], 4)\n   A  B  C\n0  4  5  a\n1  4  6  b\n2  4  7  c\n3  4  8  d\n4  4  9  e\n\n>>> df.replace([0, 1, 2, 3], [4, 3, 2, 1])\n   A  B  C\n0  4  5  a\n1  3  6  b\n2  2  7  c\n3  1  8  d\n4  4  9  e\n\n>>> s.replace([1, 2], method='bfill')\n0    0\n1    3\n2    3\n3    3\n4    4\ndtype: int64\n\n**dict-like `to_replace`**\n\n>>> df.replace({0: 10, 1: 100})\n     A  B  C\n0   10  5  a\n1  100  6  b\n2    2  7  c\n3    3  8  d\n4    4  9  e\n\n>>> df.replace({'A': 0, 'B': 5}, 100)\n     A    B  C\n0  100  100  a\n1    1    6  b\n2    2    7  c\n3    3    8  d\n4    4    9  e\n\n>>> df.replace({'A': {0: 100, 4: 400}})\n     A  B  C\n0  100  5  a\n1    1  6  b\n2    2  7  c\n3    3  8  d\n4  400  9  e\n\n**Regular expression `to_replace`**\n\n>>> df = pd.DataFrame({'A': ['bat', 'foo', 'bait'],\n...                    'B': ['abc', 'bar', 'xyz']})\n>>> df.replace(to_replace=r'^ba.$', value='new', regex=True)\n      A    B\n0   new  abc\n1   foo  new\n2  bait  xyz\n\n>>> df.replace({'A': r'^ba.$'}, {'A': 'new'}, regex=True)\n      A    B\n0   new  abc\n1   foo  bar\n2  bait  xyz\n\n>>> df.replace(regex=r'^ba.$', value='new')\n      A    B\n0   new  abc\n1   foo  new\n2  bait  xyz\n\n>>> df.replace(regex={r'^ba.$': 'new', 'foo': 'xyz'})\n      A    B\n0   new  abc\n1   xyz  new\n2  bait  xyz\n\n>>> df.replace(regex=[r'^ba.$', 'foo'], value='new')\n      A    B\n0   new  abc\n1   new  new\n2  bait  xyz\n\nNote that when replacing multiple ``bool`` or ``datetime64`` objects,\nthe data types in the `to_replace` parameter must match the data\ntype of the value being replaced:\n\n>>> df = pd.DataFrame({'A': [True, False, True],\n...                    'B': [False, True, False]})\n>>> df.replace({'a string': 'new value', True: False})  # raises\nTraceback (most recent call last):\n    ...\nTypeError: Cannot compare types 'ndarray(dtype=bool)' and 'str'\n\nThis raises a ``TypeError`` because one of the ``dict`` keys is not of\nthe correct type for replacement.\n\nCompare the behavior of ``s.replace({'a': None})`` and\n``s.replace('a', None)`` to understand the peculiarities\nof the `to_replace` parameter:\n\n>>> s = pd.Series([10, 'a', 'a', 'b', 'a'])\n\nWhen one uses a dict as the `to_replace` value, it is like the\nvalue(s) in the dict are equal to the `value` parameter.\n``s.replace({'a': None})`` is equivalent to\n``s.replace(to_replace={'a': None}, value=None, method=None)``:\n\n>>> s.replace({'a': None})\n0      10\n1    None\n2    None\n3       b\n4    None\ndtype: object\n\nWhen ``value=None`` and `to_replace` is a scalar, list or\ntuple, `replace` uses the method parameter (default 'pad') to do the\nreplacement. So this is why the 'a' values are being replaced by 10\nin rows 1 and 2 and 'b' in row 4 in this case.\nThe command ``s.replace('a', None)`` is actually equivalent to\n``s.replace(to_replace='a', value=None, method='pad')``:\n\n>>> s.replace('a', None)\n0    10\n1    10\n2    10\n3     b\n4     b\ndtype: object", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 4187, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L4187", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Missing data handling", "shared_code_with": ""}, "pandas.DataFrame.interpolate": {"type": "function", "docstring": "Interpolate values according to different methods.\n\nPlease note that only ``method='linear'`` is supported for\nDataFrame/Series with a MultiIndex.\n\nParameters\n----------\nmethod : str, default 'linear'\n    Interpolation technique to use. One of:\n\n    * 'linear': Ignore the index and treat the values as equally\n      spaced. This is the only method supported on MultiIndexes.\n    * 'time': Works on daily and higher resolution data to interpolate\n      given length of interval.\n    * 'index', 'values': use the actual numerical values of the index.\n    * 'pad': Fill in NaNs using existing values.\n    * 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'spline',\n      'barycentric', 'polynomial': Passed to\n      `scipy.interpolate.interp1d`. These methods use the numerical\n      values of the index.  Both 'polynomial' and 'spline' require that\n      you also specify an `order` (int), e.g.\n      ``df.interpolate(method='polynomial', order=5)``.\n    * 'krogh', 'piecewise_polynomial', 'spline', 'pchip', 'akima':\n      Wrappers around the SciPy interpolation methods of similar\n      names. See `Notes`.\n    * 'from_derivatives': Refers to\n      `scipy.interpolate.BPoly.from_derivatives` which\n      replaces 'piecewise_polynomial' interpolation method in\n      scipy 0.18.\naxis : {0 or 'index', 1 or 'columns', None}, default None\n    Axis to interpolate along.\nlimit : int, optional\n    Maximum number of consecutive NaNs to fill. Must be greater than\n    0.\ninplace : bool, default False\n    Update the data in place if possible.\nlimit_direction : {'forward', 'backward', 'both'}, default 'forward'\n    If limit is specified, consecutive NaNs will be filled in this\n    direction.\nlimit_area : {`None`, 'inside', 'outside'}, default None\n    If limit is specified, consecutive NaNs will be filled with this\n    restriction.\n\n    * ``None``: No fill restriction.\n    * 'inside': Only fill NaNs surrounded by valid values\n      (interpolate).\n    * 'outside': Only fill NaNs outside valid values (extrapolate).\n\n    .. versionadded:: 0.23.0\n\ndowncast : optional, 'infer' or None, defaults to None\n    Downcast dtypes if possible.\n**kwargs\n    Keyword arguments to pass on to the interpolating function.\n\nReturns\n-------\nSeries or DataFrame\n    Returns the same object type as the caller, interpolated at\n    some or all ``NaN`` values.\n\nSee Also\n--------\nfillna : Fill missing values using different methods.\nscipy.interpolate.Akima1DInterpolator : Piecewise cubic polynomials\n    (Akima interpolator).\nscipy.interpolate.BPoly.from_derivatives : Piecewise polynomial in the\n    Bernstein basis.\nscipy.interpolate.interp1d : Interpolate a 1-D function.\nscipy.interpolate.KroghInterpolator : Interpolate polynomial (Krogh\n    interpolator).\nscipy.interpolate.PchipInterpolator : PCHIP 1-d monotonic cubic\n    interpolation.\nscipy.interpolate.CubicSpline : Cubic spline data interpolator.\n\nNotes\n-----\nThe 'krogh', 'piecewise_polynomial', 'spline', 'pchip' and 'akima'\nmethods are wrappers around the respective SciPy implementations of\nsimilar names. These use the actual numerical values of the index.\nFor more information on their behavior, see the\n`SciPy documentation\n<http://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation>`__\nand `SciPy tutorial\n<http://docs.scipy.org/doc/scipy/reference/tutorial/interpolate.html>`__.\n\nExamples\n--------\nFilling in ``NaN`` in a :class:`~pandas.Series` via linear\ninterpolation.\n\n>>> s = pd.Series([0, 1, np.nan, 3])\n>>> s\n0    0.0\n1    1.0\n2    NaN\n3    3.0\ndtype: float64\n>>> s.interpolate()\n0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float64\n\nFilling in ``NaN`` in a Series by padding, but filling at most two\nconsecutive ``NaN`` at a time.\n\n>>> s = pd.Series([np.nan, \"single_one\", np.nan,\n...                \"fill_two_more\", np.nan, np.nan, np.nan,\n...                4.71, np.nan])\n>>> s\n0              NaN\n1       single_one\n2              NaN\n3    fill_two_more\n4              NaN\n5              NaN\n6              NaN\n7             4.71\n8              NaN\ndtype: object\n>>> s.interpolate(method='pad', limit=2)\n0              NaN\n1       single_one\n2       single_one\n3    fill_two_more\n4    fill_two_more\n5    fill_two_more\n6              NaN\n7             4.71\n8             4.71\ndtype: object\n\nFilling in ``NaN`` in a Series via polynomial interpolation or splines:\nBoth 'polynomial' and 'spline' methods require that you also specify\nan ``order`` (int).\n\n>>> s = pd.Series([0, 2, np.nan, 8])\n>>> s.interpolate(method='polynomial', order=2)\n0    0.000000\n1    2.000000\n2    4.666667\n3    8.000000\ndtype: float64\n\nFill the DataFrame forward (that is, going down) along each column\nusing linear interpolation.\n\nNote how the last entry in column 'a' is interpolated differently,\nbecause there is no entry after it to use for interpolation.\nNote how the first entry in column 'b' remains ``NaN``, because there\nis no entry before it to use for interpolation.\n\n>>> df = pd.DataFrame([(0.0, np.nan, -1.0, 1.0),\n...                    (np.nan, 2.0, np.nan, np.nan),\n...                    (2.0, 3.0, np.nan, 9.0),\n...                    (np.nan, 4.0, -4.0, 16.0)],\n...                   columns=list('abcd'))\n>>> df\n     a    b    c     d\n0  0.0  NaN -1.0   1.0\n1  NaN  2.0  NaN   NaN\n2  2.0  3.0  NaN   9.0\n3  NaN  4.0 -4.0  16.0\n>>> df.interpolate(method='linear', limit_direction='forward', axis=0)\n     a    b    c     d\n0  0.0  NaN -1.0   1.0\n1  1.0  2.0 -2.0   5.0\n2  2.0  3.0 -3.0   9.0\n3  2.0  4.0 -4.0  16.0\n\nUsing polynomial interpolation.\n\n>>> df['d'].interpolate(method='polynomial', order=2)\n0     1.0\n1     4.0\n2     9.0\n3    16.0\nName: d, dtype: float64", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 6949, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L6949", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Missing data handling", "shared_code_with": "pandas.Series.interpolate"}, "pandas.DataFrame.droplevel": {"type": "function", "docstring": "Return DataFrame with requested index / column level(s) removed.\n\n.. versionadded:: 0.24.0\n\nParameters\n----------\nlevel : int, str, or list-like\n    If a string is given, must be the name of a level\n    If list-like, elements must be names or positional indexes\n    of levels.\n\naxis : {0 or 'index', 1 or 'columns'}, default 0\n\nReturns\n-------\nDataFrame.droplevel()\n\nExamples\n--------\n>>> df = pd.DataFrame([\n...     [1, 2, 3, 4],\n...     [5, 6, 7, 8],\n...     [9, 10, 11, 12]\n... ]).set_index([0, 1]).rename_axis(['a', 'b'])\n\n>>> df.columns = pd.MultiIndex.from_tuples([\n...    ('c', 'e'), ('d', 'f')\n... ], names=['level_1', 'level_2'])\n\n>>> df\nlevel_1   c   d\nlevel_2   e   f\na b\n1 2      3   4\n5 6      7   8\n9 10    11  12\n\n>>> df.droplevel('a')\nlevel_1   c   d\nlevel_2   e   f\nb\n2        3   4\n6        7   8\n10      11  12\n\n>>> df.droplevel('level2', axis=1)\nlevel_1   c   d\na b\n1 2      3   4\n5 6      7   8\n9 10    11  12", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 742, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L742", "errors": [["PR07", "Parameter \"axis\" has no description"], ["RT03", "Return value has no description"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 47, in pandas.DataFrame.droplevel\nFailed example:\n    df.droplevel('level2', axis=1)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/indexes/multi.py\", line 1301, in _get_level_number\n        level = self.names.index(level)\n    ValueError: 'level2' is not in list\n\n    During handling of the above exception, another exception occurred:\n\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.DataFrame.droplevel[4]>\", line 1, in <module>\n        df.droplevel('level2', axis=1)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/generic.py\", line 797, in droplevel\n        new_labels = labels.droplevel(level)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/indexes/base.py\", line 1600, in droplevel\n        levnums = sorted(self._get_level_number(lev) for lev in level)[::-1]\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/indexes/base.py\", line 1600, in <genexpr>\n        levnums = sorted(self._get_level_number(lev) for lev in level)[::-1]\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/indexes/multi.py\", line 1304, in _get_level_number\n        raise KeyError(\"Level %s not found\" % str(level))\n    KeyError: 'Level level2 not found'\n"], ["EX03", "flake8 error: E121 continuation line under-indented for hanging indent"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "**********************************************************************\nLine 47, in pandas.DataFrame.droplevel\nFailed example:\n    df.droplevel('level2', axis=1)\nException raised:\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/indexes/multi.py\", line 1301, in _get_level_number\n        level = self.names.index(level)\n    ValueError: 'level2' is not in list\n\n    During handling of the above exception, another exception occurred:\n\n    Traceback (most recent call last):\n      File \"/Users/tanyaacjain/anaconda3/envs/pandas-dev/lib/python3.7/doctest.py\", line 1329, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest pandas.DataFrame.droplevel[4]>\", line 1, in <module>\n        df.droplevel('level2', axis=1)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/generic.py\", line 797, in droplevel\n        new_labels = labels.droplevel(level)\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/indexes/base.py\", line 1600, in droplevel\n        levnums = sorted(self._get_level_number(lev) for lev in level)[::-1]\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/indexes/base.py\", line 1600, in <genexpr>\n        levnums = sorted(self._get_level_number(lev) for lev in level)[::-1]\n      File \"/Users/tanyaacjain/Documents/GitHub/pandas-tanyaacjain/pandas/core/indexes/multi.py\", line 1304, in _get_level_number\n        raise KeyError(\"Level %s not found\" % str(level))\n    KeyError: 'Level level2 not found'\n", "in_api": true, "section": "", "subsection": "Reshaping, sorting, transposing", "shared_code_with": "pandas.Series.droplevel"}, "pandas.DataFrame.pivot": {"type": "function", "docstring": "Return reshaped DataFrame organized by given index / column values.\n\nReshape data (produce a \"pivot\" table) based on column values. Uses\nunique values from specified `index` / `columns` to form axes of the\nresulting DataFrame. This function does not support data\naggregation, multiple values will result in a MultiIndex in the\ncolumns. See the :ref:`User Guide <reshaping>` for more on reshaping.\n\nParameters\n----------\nindex : string or object, optional\n    Column to use to make new frame's index. If None, uses\n    existing index.\ncolumns : string or object\n    Column to use to make new frame's columns.\nvalues : string, object or a list of the previous, optional\n    Column(s) to use for populating new frame's values. If not\n    specified, all remaining columns will be used and the result will\n    have hierarchically indexed columns.\n\n    .. versionchanged:: 0.23.0\n       Also accept list of column names.\n\nReturns\n-------\nDataFrame\n    Returns reshaped DataFrame.\n\nRaises\n------\nValueError:\n    When there are any `index`, `columns` combinations with multiple\n    values. `DataFrame.pivot_table` when you need to aggregate.\n\nSee Also\n--------\nDataFrame.pivot_table : Generalization of pivot that can handle\n    duplicate values for one index/column pair.\nDataFrame.unstack : Pivot based on the index values instead of a\n    column.\n\nNotes\n-----\nFor finer-tuned control, see hierarchical indexing documentation along\nwith the related stack/unstack methods.\n\nExamples\n--------\n>>> df = pd.DataFrame({'foo': ['one', 'one', 'one', 'two', 'two',\n...                            'two'],\n...                    'bar': ['A', 'B', 'C', 'A', 'B', 'C'],\n...                    'baz': [1, 2, 3, 4, 5, 6],\n...                    'zoo': ['x', 'y', 'z', 'q', 'w', 't']})\n>>> df\n    foo   bar  baz  zoo\n0   one   A    1    x\n1   one   B    2    y\n2   one   C    3    z\n3   two   A    4    q\n4   two   B    5    w\n5   two   C    6    t\n\n>>> df.pivot(index='foo', columns='bar', values='baz')\nbar  A   B   C\nfoo\none  1   2   3\ntwo  4   5   6\n\n>>> df.pivot(index='foo', columns='bar')['baz']\nbar  A   B   C\nfoo\none  1   2   3\ntwo  4   5   6\n\n>>> df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])\n      baz       zoo\nbar   A  B  C   A  B  C\nfoo\none   1  2  3   x  y  z\ntwo   4  5  6   q  w  t\n\nA ValueError is raised if there are any duplicates.\n\n>>> df = pd.DataFrame({\"foo\": ['one', 'one', 'two', 'two'],\n...                    \"bar\": ['A', 'A', 'B', 'C'],\n...                    \"baz\": [1, 2, 3, 4]})\n>>> df\n   foo bar  baz\n0  one   A    1\n1  one   A    2\n2  two   B    3\n3  two   C    4\n\nNotice that the first two rows are the same for our `index`\nand `columns` arguments.\n\n>>> df.pivot(index='foo', columns='bar', values='baz')\nTraceback (most recent call last):\n   ...\nValueError: Index contains duplicate entries, cannot reshape", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 5845, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L5845", "errors": [["PR06", "Parameter \"index\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"columns\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"values\" type should use \"str\" instead of \"string\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reshaping, sorting, transposing", "shared_code_with": ""}, "pandas.DataFrame.pivot_table": {"type": "function", "docstring": "Create a spreadsheet-style pivot table as a DataFrame. The levels in\nthe pivot table will be stored in MultiIndex objects (hierarchical\nindexes) on the index and columns of the result DataFrame.\n\nParameters\n----------\nvalues : column to aggregate, optional\nindex : column, Grouper, array, or list of the previous\n    If an array is passed, it must be the same length as the data. The\n    list can contain any of the other types (except list).\n    Keys to group by on the pivot table index.  If an array is passed,\n    it is being used as the same manner as column values.\ncolumns : column, Grouper, array, or list of the previous\n    If an array is passed, it must be the same length as the data. The\n    list can contain any of the other types (except list).\n    Keys to group by on the pivot table column.  If an array is passed,\n    it is being used as the same manner as column values.\naggfunc : function, list of functions, dict, default numpy.mean\n    If list of functions passed, the resulting pivot table will have\n    hierarchical columns whose top level are the function names\n    (inferred from the function objects themselves)\n    If dict is passed, the key is column to aggregate and value\n    is function or list of functions\nfill_value : scalar, default None\n    Value to replace missing values with\nmargins : boolean, default False\n    Add all row / columns (e.g. for subtotal / grand totals)\ndropna : boolean, default True\n    Do not include columns whose entries are all NaN\nmargins_name : string, default 'All'\n    Name of the row / column that will contain the totals\n    when margins is True.\nobserved : boolean, default False\n    This only applies if any of the groupers are Categoricals.\n    If True: only show observed values for categorical groupers.\n    If False: show all values for categorical groupers.\n\n    .. versionchanged:: 0.25.0\n\nReturns\n-------\nDataFrame\n\nSee Also\n--------\nDataFrame.pivot : Pivot without aggregation that can handle\n    non-numeric data.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\",\n...                          \"bar\", \"bar\", \"bar\", \"bar\"],\n...                    \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\",\n...                          \"one\", \"one\", \"two\", \"two\"],\n...                    \"C\": [\"small\", \"large\", \"large\", \"small\",\n...                          \"small\", \"large\", \"small\", \"small\",\n...                          \"large\"],\n...                    \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7],\n...                    \"E\": [2, 4, 5, 5, 6, 6, 8, 9, 9]})\n>>> df\n     A    B      C  D  E\n0  foo  one  small  1  2\n1  foo  one  large  2  4\n2  foo  one  large  2  5\n3  foo  two  small  3  5\n4  foo  two  small  3  6\n5  bar  one  large  4  6\n6  bar  one  small  5  8\n7  bar  two  small  6  9\n8  bar  two  large  7  9\n\nThis first example aggregates values by taking the sum.\n\n>>> table = pd.pivot_table(df, values='D', index=['A', 'B'],\n...                     columns=['C'], aggfunc=np.sum)\n>>> table\nC        large  small\nA   B\nbar one    4.0    5.0\n    two    7.0    6.0\nfoo one    4.0    1.0\n    two    NaN    6.0\n\nWe can also fill missing values using the `fill_value` parameter.\n\n>>> table = pd.pivot_table(df, values='D', index=['A', 'B'],\n...                     columns=['C'], aggfunc=np.sum, fill_value=0)\n>>> table\nC        large  small\nA   B\nbar one      4      5\n    two      7      6\nfoo one      4      1\n    two      0      6\n\nThe next example aggregates by taking the mean across multiple columns.\n\n>>> table = pd.pivot_table(df, values=['D', 'E'], index=['A', 'C'],\n...                     aggfunc={'D': np.mean,\n...                              'E': np.mean})\n>>> table\n                D         E\nA   C\nbar large  5.500000  7.500000\n    small  5.500000  8.500000\nfoo large  2.000000  4.500000\n    small  2.333333  4.333333\n\nWe can also calculate multiple types of aggregations for any given\nvalue column.\n\n>>> table = pd.pivot_table(df, values=['D', 'E'], index=['A', 'C'],\n...                     aggfunc={'D': np.mean,\n...                              'E': [min, max, np.mean]})\n>>> table\n                D    E\n            mean  max      mean  min\nA   C\nbar large  5.500000  9.0  7.500000  6.0\n    small  5.500000  9.0  8.500000  8.0\nfoo large  2.000000  5.0  4.500000  4.0\n    small  2.333333  6.0  4.333333  2.0", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 5979, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L5979", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"values\" has no description"], ["PR09", "Parameter \"aggfunc\" description should finish with \".\""], ["PR09", "Parameter \"fill_value\" description should finish with \".\""], ["PR06", "Parameter \"margins\" type should use \"bool\" instead of \"boolean\""], ["PR09", "Parameter \"margins\" description should finish with \".\""], ["PR06", "Parameter \"dropna\" type should use \"bool\" instead of \"boolean\""], ["PR09", "Parameter \"dropna\" description should finish with \".\""], ["PR06", "Parameter \"margins_name\" type should use \"str\" instead of \"string\""], ["PR06", "Parameter \"observed\" type should use \"bool\" instead of \"boolean\""], ["RT03", "Return value has no description"], ["EX03", "flake8 error: E128 continuation line under-indented for visual indent (4 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reshaping, sorting, transposing", "shared_code_with": ""}, "pandas.DataFrame.reorder_levels": {"type": "function", "docstring": "Rearrange index levels using input order. May not drop or\nduplicate levels.\n\nParameters\n----------\norder : list of int or list of str\n    List representing new level order. Reference level by number\n    (position) or by key (label).\naxis : int\n    Where to reorder levels.\n\nReturns\n-------\ntype of caller (new object)", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 5261, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L5261", "errors": [["SS06", "Summary should fit in a single line"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reshaping, sorting, transposing", "shared_code_with": ""}, "pandas.DataFrame.sort_values": {"type": "function", "docstring": "Sort by the values along either axis.\n\nParameters\n----------\n        by : str or list of str\n            Name or list of names to sort by.\n\n            - if `axis` is 0 or `'index'` then `by` may contain index\n              levels and/or column labels\n            - if `axis` is 1 or `'columns'` then `by` may contain column\n              levels and/or index labels\n\n            .. versionchanged:: 0.23.0\n               Allow specifying index or column level names.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n     Axis to be sorted.\nascending : bool or list of bool, default True\n     Sort ascending vs. descending. Specify list for multiple sort\n     orders.  If this is a list of bools, must match the length of\n     the by.\ninplace : bool, default False\n     If True, perform operation in-place.\nkind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n     Choice of sorting algorithm. See also ndarray.np.sort for more\n     information.  `mergesort` is the only stable algorithm. For\n     DataFrames, this option is only applied when sorting on a single\n     column or label.\nna_position : {'first', 'last'}, default 'last'\n     Puts NaNs at the beginning if `first`; `last` puts NaNs at the\n     end.\n\nReturns\n-------\nsorted_obj : DataFrame or None\n    DataFrame with sorted values if inplace=False, None otherwise.\n\nExamples\n--------\n>>> df = pd.DataFrame({\n...     'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n...     'col2': [2, 1, 9, 8, 7, 4],\n...     'col3': [0, 1, 9, 4, 2, 3],\n... })\n>>> df\n    col1 col2 col3\n0   A    2    0\n1   A    1    1\n2   B    9    9\n3   NaN  8    4\n4   D    7    2\n5   C    4    3\n\nSort by col1\n\n>>> df.sort_values(by=['col1'])\n    col1 col2 col3\n0   A    2    0\n1   A    1    1\n2   B    9    9\n5   C    4    3\n4   D    7    2\n3   NaN  8    4\n\nSort by multiple columns\n\n>>> df.sort_values(by=['col1', 'col2'])\n    col1 col2 col3\n1   A    1    1\n0   A    2    0\n2   B    9    9\n5   C    4    3\n4   D    7    2\n3   NaN  8    4\n\nSort Descending\n\n>>> df.sort_values(by='col1', ascending=False)\n    col1 col2 col3\n4   D    7    2\n5   C    4    3\n2   B    9    9\n0   A    2    0\n1   A    1    1\n3   NaN  8    4\n\nPutting NAs first\n\n>>> df.sort_values(by='col1', ascending=False, na_position='first')\n    col1 col2 col3\n3   NaN  8    4\n4   D    7    2\n5   C    4    3\n2   B    9    9\n0   A    2    0\n1   A    1    1", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 4902, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L4902", "errors": [["PR09", "Parameter \"by\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reshaping, sorting, transposing", "shared_code_with": ""}, "pandas.DataFrame.sort_index": {"type": "function", "docstring": "Sort object by labels (along an axis).\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis along which to sort.  The value 0 identifies the rows,\n    and 1 identifies the columns.\nlevel : int or level name or list of ints or list of level names\n    If not None, sort on values in specified index level(s).\nascending : bool, default True\n    Sort ascending vs. descending.\ninplace : bool, default False\n    If True, perform operation in-place.\nkind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n    Choice of sorting algorithm. See also ndarray.np.sort for more\n    information.  `mergesort` is the only stable algorithm. For\n    DataFrames, this option is only applied when sorting on a single\n    column or label.\nna_position : {'first', 'last'}, default 'last'\n    Puts NaNs at the beginning if `first`; `last` puts NaNs at the end.\n    Not implemented for MultiIndex.\nsort_remaining : bool, default True\n    If True and sorting by level and index is multilevel, sort by other\n    levels too (in order) after sorting by specified level.\n\nReturns\n-------\nsorted_obj : DataFrame or None\n    DataFrame with sorted index if inplace=False, None otherwise.", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 4951, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L4951", "errors": [["PR01", "Parameters {by} not documented"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reshaping, sorting, transposing", "shared_code_with": ""}, "pandas.DataFrame.nlargest": {"type": "function", "docstring": "Return the first `n` rows ordered by `columns` in descending order.\n\nReturn the first `n` rows with the largest values in `columns`, in\ndescending order. The columns that are not specified are returned as\nwell, but not used for ordering.\n\nThis method is equivalent to\n``df.sort_values(columns, ascending=False).head(n)``, but more\nperformant.\n\nParameters\n----------\nn : int\n    Number of rows to return.\ncolumns : label or list of labels\n    Column label(s) to order by.\nkeep : {'first', 'last', 'all'}, default 'first'\n    Where there are duplicate values:\n\n    - `first` : prioritize the first occurrence(s)\n    - `last` : prioritize the last occurrence(s)\n    - ``all`` : do not drop any duplicates, even it means\n                selecting more than `n` items.\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nDataFrame\n    The first `n` rows ordered by the given columns in descending\n    order.\n\nSee Also\n--------\nDataFrame.nsmallest : Return the first `n` rows ordered by `columns` in\n    ascending order.\nDataFrame.sort_values : Sort DataFrame by the values.\nDataFrame.head : Return the first `n` rows without re-ordering.\n\nNotes\n-----\nThis function cannot be used with all column types. For example, when\nspecifying columns with `object` or `category` dtypes, ``TypeError`` is\nraised.\n\nExamples\n--------\n>>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n...                                   434000, 434000, 337000, 11300,\n...                                   11300, 11300],\n...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n...                            17036, 182, 38, 311],\n...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n...                   index=[\"Italy\", \"France\", \"Malta\",\n...                          \"Maldives\", \"Brunei\", \"Iceland\",\n...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n>>> df\n          population      GDP alpha-2\nItaly       59000000  1937894      IT\nFrance      65000000  2583560      FR\nMalta         434000    12011      MT\nMaldives      434000     4520      MV\nBrunei        434000    12128      BN\nIceland       337000    17036      IS\nNauru          11300      182      NR\nTuvalu         11300       38      TV\nAnguilla       11300      311      AI\n\nIn the following example, we will use ``nlargest`` to select the three\nrows having the largest values in column \"population\".\n\n>>> df.nlargest(3, 'population')\n        population      GDP alpha-2\nFrance    65000000  2583560      FR\nItaly     59000000  1937894      IT\nMalta       434000    12011      MT\n\nWhen using ``keep='last'``, ties are resolved in reverse order:\n\n>>> df.nlargest(3, 'population', keep='last')\n        population      GDP alpha-2\nFrance    65000000  2583560      FR\nItaly     59000000  1937894      IT\nBrunei      434000    12128      BN\n\nWhen using ``keep='all'``, all duplicate items are maintained:\n\n>>> df.nlargest(3, 'population', keep='all')\n          population      GDP alpha-2\nFrance      65000000  2583560      FR\nItaly       59000000  1937894      IT\nMalta         434000    12011      MT\nMaldives      434000     4520      MV\nBrunei        434000    12128      BN\n\nTo order by the largest values in column \"population\" and then \"GDP\",\nwe can specify multiple columns like in the next example.\n\n>>> df.nlargest(3, ['population', 'GDP'])\n        population      GDP alpha-2\nFrance    65000000  2583560      FR\nItaly     59000000  1937894      IT\nBrunei      434000    12128      BN", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 5029, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L5029", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reshaping, sorting, transposing", "shared_code_with": ""}, "pandas.DataFrame.nsmallest": {"type": "function", "docstring": "Return the first `n` rows ordered by `columns` in ascending order.\n\nReturn the first `n` rows with the smallest values in `columns`, in\nascending order. The columns that are not specified are returned as\nwell, but not used for ordering.\n\nThis method is equivalent to\n``df.sort_values(columns, ascending=True).head(n)``, but more\nperformant.\n\nParameters\n----------\nn : int\n    Number of items to retrieve.\ncolumns : list or str\n    Column name or names to order by.\nkeep : {'first', 'last', 'all'}, default 'first'\n    Where there are duplicate values:\n\n    - ``first`` : take the first occurrence.\n    - ``last`` : take the last occurrence.\n    - ``all`` : do not drop any duplicates, even it means\n      selecting more than `n` items.\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nDataFrame\n\nSee Also\n--------\nDataFrame.nlargest : Return the first `n` rows ordered by `columns` in\n    descending order.\nDataFrame.sort_values : Sort DataFrame by the values.\nDataFrame.head : Return the first `n` rows without re-ordering.\n\nExamples\n--------\n>>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n...                                   434000, 434000, 337000, 11300,\n...                                   11300, 11300],\n...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n...                            17036, 182, 38, 311],\n...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n...                   index=[\"Italy\", \"France\", \"Malta\",\n...                          \"Maldives\", \"Brunei\", \"Iceland\",\n...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n>>> df\n          population      GDP alpha-2\nItaly       59000000  1937894      IT\nFrance      65000000  2583560      FR\nMalta         434000    12011      MT\nMaldives      434000     4520      MV\nBrunei        434000    12128      BN\nIceland       337000    17036      IS\nNauru          11300      182      NR\nTuvalu         11300       38      TV\nAnguilla       11300      311      AI\n\nIn the following example, we will use ``nsmallest`` to select the\nthree rows having the smallest values in column \"a\".\n\n>>> df.nsmallest(3, 'population')\n          population  GDP alpha-2\nNauru          11300  182      NR\nTuvalu         11300   38      TV\nAnguilla       11300  311      AI\n\nWhen using ``keep='last'``, ties are resolved in reverse order:\n\n>>> df.nsmallest(3, 'population', keep='last')\n          population  GDP alpha-2\nAnguilla       11300  311      AI\nTuvalu         11300   38      TV\nNauru          11300  182      NR\n\nWhen using ``keep='all'``, all duplicate items are maintained:\n\n>>> df.nsmallest(3, 'population', keep='all')\n          population  GDP alpha-2\nNauru          11300  182      NR\nTuvalu         11300   38      TV\nAnguilla       11300  311      AI\n\nTo order by the largest values in column \"a\" and then \"c\", we can\nspecify multiple columns like in the next example.\n\n>>> df.nsmallest(3, ['population', 'GDP'])\n          population  GDP alpha-2\nTuvalu         11300   38      TV\nNauru          11300  182      NR\nAnguilla       11300  311      AI", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 5138, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L5138", "errors": [["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reshaping, sorting, transposing", "shared_code_with": ""}, "pandas.DataFrame.swaplevel": {"type": "function", "docstring": "Swap levels i and j in a MultiIndex on a particular axis.\n\nParameters\n----------\ni, j : int, string (can be mixed)\n    Level of index to be swapped. Can pass level name as string.\n\nReturns\n-------\nDataFrame", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 5239, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L5239", "errors": [["PR01", "Parameters {axis, j, i} not documented"], ["PR02", "Unknown parameters {i, j}"], ["PR06", "Parameter \"i, j\" type should use \"str\" instead of \"string\""], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reshaping, sorting, transposing", "shared_code_with": ""}, "pandas.DataFrame.stack": {"type": "function", "docstring": "Stack the prescribed level(s) from columns to index.\n\nReturn a reshaped DataFrame or Series having a multi-level\nindex with one or more new inner-most levels compared to the current\nDataFrame. The new inner-most levels are created by pivoting the\ncolumns of the current dataframe:\n\n  - if the columns have a single level, the output is a Series;\n  - if the columns have multiple levels, the new index\n    level(s) is (are) taken from the prescribed level(s) and\n    the output is a DataFrame.\n\nThe new index levels are sorted.\n\nParameters\n----------\nlevel : int, str, list, default -1\n    Level(s) to stack from the column axis onto the index\n    axis, defined as one index or label, or a list of indices\n    or labels.\ndropna : bool, default True\n    Whether to drop rows in the resulting Frame/Series with\n    missing values. Stacking a column level onto the index\n    axis can create combinations of index and column values\n    that are missing from the original dataframe. See Examples\n    section.\n\nReturns\n-------\nDataFrame or Series\n    Stacked dataframe or series.\n\nSee Also\n--------\nDataFrame.unstack : Unstack prescribed level(s) from index axis\n     onto column axis.\nDataFrame.pivot : Reshape dataframe from long format to wide\n     format.\nDataFrame.pivot_table : Create a spreadsheet-style pivot table\n     as a DataFrame.\n\nNotes\n-----\nThe function is named by analogy with a collection of books\nbeing reorganized from being side by side on a horizontal\nposition (the columns of the dataframe) to being stacked\nvertically on top of each other (in the index of the\ndataframe).\n\nExamples\n--------\n**Single level columns**\n\n>>> df_single_level_cols = pd.DataFrame([[0, 1], [2, 3]],\n...                                     index=['cat', 'dog'],\n...                                     columns=['weight', 'height'])\n\nStacking a dataframe with a single level column axis returns a Series:\n\n>>> df_single_level_cols\n     weight height\ncat       0      1\ndog       2      3\n>>> df_single_level_cols.stack()\ncat  weight    0\n     height    1\ndog  weight    2\n     height    3\ndtype: int64\n\n**Multi level columns: simple case**\n\n>>> multicol1 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n...                                        ('weight', 'pounds')])\n>>> df_multi_level_cols1 = pd.DataFrame([[1, 2], [2, 4]],\n...                                     index=['cat', 'dog'],\n...                                     columns=multicol1)\n\nStacking a dataframe with a multi-level column axis:\n\n>>> df_multi_level_cols1\n     weight\n         kg    pounds\ncat       1        2\ndog       2        4\n>>> df_multi_level_cols1.stack()\n            weight\ncat kg           1\n    pounds       2\ndog kg           2\n    pounds       4\n\n**Missing values**\n\n>>> multicol2 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n...                                        ('height', 'm')])\n>>> df_multi_level_cols2 = pd.DataFrame([[1.0, 2.0], [3.0, 4.0]],\n...                                     index=['cat', 'dog'],\n...                                     columns=multicol2)\n\nIt is common to have missing values when stacking a dataframe\nwith multi-level columns, as the stacked dataframe typically\nhas more values than the original dataframe. Missing values\nare filled with NaNs:\n\n>>> df_multi_level_cols2\n    weight height\n        kg      m\ncat    1.0    2.0\ndog    3.0    4.0\n>>> df_multi_level_cols2.stack()\n        height  weight\ncat kg     NaN     1.0\n    m      2.0     NaN\ndog kg     NaN     3.0\n    m      4.0     NaN\n\n**Prescribing the level(s) to be stacked**\n\nThe first parameter controls which level or levels are stacked:\n\n>>> df_multi_level_cols2.stack(0)\n             kg    m\ncat height  NaN  2.0\n    weight  1.0  NaN\ndog height  NaN  4.0\n    weight  3.0  NaN\n>>> df_multi_level_cols2.stack([0, 1])\ncat  height  m     2.0\n     weight  kg    1.0\ndog  height  m     4.0\n     weight  kg    3.0\ndtype: float64\n\n**Dropping missing values**\n\n>>> df_multi_level_cols3 = pd.DataFrame([[None, 1.0], [2.0, 3.0]],\n...                                     index=['cat', 'dog'],\n...                                     columns=multicol2)\n\nNote that rows where all values are missing are dropped by\ndefault but this behaviour can be controlled via the dropna\nkeyword parameter:\n\n>>> df_multi_level_cols3\n    weight height\n        kg      m\ncat    NaN    1.0\ndog    2.0    3.0\n>>> df_multi_level_cols3.stack(dropna=False)\n        height  weight\ncat kg     NaN     NaN\n    m      1.0     NaN\ndog kg     NaN     2.0\n    m      3.0     NaN\n>>> df_multi_level_cols3.stack(dropna=True)\n        height  weight\ncat m      1.0     NaN\ndog kg     NaN     2.0\n    m      3.0     NaN", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 6008, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L6008", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reshaping, sorting, transposing", "shared_code_with": ""}, "pandas.DataFrame.unstack": {"type": "function", "docstring": "Pivot a level of the (necessarily hierarchical) index labels, returning\na DataFrame having a new level of column labels whose inner-most level\nconsists of the pivoted index labels.\n\nIf the index is not a MultiIndex, the output will be a Series\n(the analogue of stack when the columns are not a MultiIndex).\n\nThe level involved will automatically get sorted.\n\nParameters\n----------\nlevel : int, string, or list of these, default -1 (last level)\n    Level(s) of index to unstack, can pass level name\nfill_value : replace NaN with this value if the unstack produces\n    missing values\n\nReturns\n-------\nSeries or DataFrame\n\nSee Also\n--------\nDataFrame.pivot : Pivot a table based on column values.\nDataFrame.stack : Pivot a level of the column labels (inverse operation\n    from `unstack`).\n\nExamples\n--------\n>>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),\n...                                    ('two', 'a'), ('two', 'b')])\n>>> s = pd.Series(np.arange(1.0, 5.0), index=index)\n>>> s\none  a   1.0\n     b   2.0\ntwo  a   3.0\n     b   4.0\ndtype: float64\n\n>>> s.unstack(level=-1)\n     a   b\none  1.0  2.0\ntwo  3.0  4.0\n\n>>> s.unstack(level=0)\n   one  two\na  1.0   3.0\nb  2.0   4.0\n\n>>> df = s.unstack(level=0)\n>>> df.unstack()\none  a  1.0\n     b  2.0\ntwo  a  3.0\n     b  4.0\ndtype: float64", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 6247, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L6247", "errors": [["SS06", "Summary should fit in a single line"], ["PR06", "Parameter \"level\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"level\" description should finish with \".\""], ["PR08", "Parameter \"fill_value\" description should start with a capital letter"], ["PR09", "Parameter \"fill_value\" description should finish with \".\""], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reshaping, sorting, transposing", "shared_code_with": ""}, "pandas.DataFrame.swapaxes": {"type": "function", "docstring": "Interchange axes and swap values axes appropriately.\n\nReturns\n-------\ny : same as input", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 717, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L717", "errors": [["PR01", "Parameters {axis1, axis2, copy} not documented"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reshaping, sorting, transposing", "shared_code_with": ""}, "pandas.DataFrame.melt": {"type": "function", "docstring": "Unpivot a DataFrame from wide format to long format, optionally\nleaving identifier variables set.\n\nThis function is useful to massage a DataFrame into a format where one\nor more columns are identifier variables (`id_vars`), while all other\ncolumns, considered measured variables (`value_vars`), are \"unpivoted\" to\nthe row axis, leaving just two non-identifier columns, 'variable' and\n'value'.\n.. versionadded:: 0.20.0\n\nParameters\n----------\nframe : DataFrame\nid_vars : tuple, list, or ndarray, optional\n    Column(s) to use as identifier variables.\nvalue_vars : tuple, list, or ndarray, optional\n    Column(s) to unpivot. If not specified, uses all columns that\n    are not set as `id_vars`.\nvar_name : scalar\n    Name to use for the 'variable' column. If None it uses\n    ``frame.columns.name`` or 'variable'.\nvalue_name : scalar, default 'value'\n    Name to use for the 'value' column.\ncol_level : int or string, optional\n    If columns are a MultiIndex then use this level to melt.\n\nReturns\n-------\nDataFrame\n    Unpivoted DataFrame.\n\nSee Also\n--------\nmelt\npivot_table\nDataFrame.pivot\nSeries.explode\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': {0: 'a', 1: 'b', 2: 'c'},\n...                    'B': {0: 1, 1: 3, 2: 5},\n...                    'C': {0: 2, 1: 4, 2: 6}})\n>>> df\n   A  B  C\n0  a  1  2\n1  b  3  4\n2  c  5  6\n\n>>> df.melt(id_vars=['A'], value_vars=['B'])\n   A variable  value\n0  a        B      1\n1  b        B      3\n2  c        B      5\n\n>>> df.melt(id_vars=['A'], value_vars=['B', 'C'])\n   A variable  value\n0  a        B      1\n1  b        B      3\n2  c        B      5\n3  a        C      2\n4  b        C      4\n5  c        C      6\n\nThe names of 'variable' and 'value' columns can be customized:\n\n>>> df.melt(id_vars=['A'], value_vars=['B'],\n...         var_name='myVarname', value_name='myValname')\n   A myVarname  myValname\n0  a         B          1\n1  b         B          3\n2  c         B          5\n\nIf you have multi-index columns:\n\n>>> df.columns = [list('ABC'), list('DEF')]\n>>> df\n   A  B  C\n   D  E  F\n0  a  1  2\n1  b  3  4\n2  c  5  6\n\n>>> df.melt(col_level=0, id_vars=['A'], value_vars=['B'])\n   A variable  value\n0  a        B      1\n1  b        B      3\n2  c        B      5\n\n>>> df.melt(id_vars=[('A', 'D')], value_vars=[('B', 'E')])\n  (A, D) variable_0 variable_1  value\n0      a          B          E      1\n1      b          B          E      3\n2      c          B          E      5", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 6407, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L6407", "errors": [["SS06", "Summary should fit in a single line"], ["PR02", "Unknown parameters {frame}"], ["PR07", "Parameter \"frame\" has no description"], ["PR06", "Parameter \"col_level\" type should use \"str\" instead of \"string\""], ["SA04", "Missing description for See Also \"melt\" reference"], ["SA04", "Missing description for See Also \"pivot_table\" reference"], ["SA04", "Missing description for See Also \"DataFrame.pivot\" reference"], ["SA04", "Missing description for See Also \"Series.explode\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reshaping, sorting, transposing", "shared_code_with": ""}, "pandas.DataFrame.explode": {"type": "function", "docstring": "Transform each element of a list-like to a row, replicating the\nindex values.\n\n.. versionadded:: 0.25.0\n\nParameters\n----------\ncolumn : str or tuple\n\nReturns\n-------\nDataFrame\n    Exploded lists to rows of the subset columns;\n    index will be duplicated for these rows.\n\nRaises\n------\nValueError :\n    if columns of the frame are not unique.\n\nSee Also\n--------\nDataFrame.unstack : Pivot a level of the (necessarily hierarchical)\n    index labels\nDataFrame.melt : Unpivot a DataFrame from wide format to long format\nSeries.explode : Explode a DataFrame from list-like columns to long format.\n\nNotes\n-----\nThis routine will explode list-likes including lists, tuples,\nSeries, and np.ndarray. The result dtype of the subset rows will\nbe object. Scalars will be returned unchanged. Empty list-likes will\nresult in a np.nan for that row.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': [[1, 2, 3], 'foo', [], [3, 4]], 'B': 1})\n>>> df\n           A  B\n0  [1, 2, 3]  1\n1        foo  1\n2         []  1\n3     [3, 4]  1\n\n>>> df.explode('A')\n     A  B\n0    1  1\n0    2  1\n0    3  1\n1  foo  1\n2  NaN  1\n3    3  1\n3    4  1", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 6178, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L6178", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"column\" has no description"], ["SA02", "Missing period at end of description for See Also \"DataFrame.unstack\" reference"], ["SA02", "Missing period at end of description for See Also \"DataFrame.melt\" reference"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reshaping, sorting, transposing", "shared_code_with": ""}, "pandas.DataFrame.squeeze": {"type": "function", "docstring": "Squeeze 1 dimensional axis objects into scalars.\n\nSeries or DataFrames with a single element are squeezed to a scalar.\nDataFrames with a single column or a single row are squeezed to a\nSeries. Otherwise the object is unchanged.\n\nThis method is most useful when you don't know if your\nobject is a Series or DataFrame, but you do know it has just a single\ncolumn. In that case you can safely call `squeeze` to ensure you have a\nSeries.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns', None}, default None\n    A specific axis to squeeze. By default, all length-1 axes are\n    squeezed.\n\n    .. versionadded:: 0.20.0\n\nReturns\n-------\nDataFrame, Series, or scalar\n    The projection after squeezing `axis` or all the axes.\n\nSee Also\n--------\nSeries.iloc : Integer-location based indexing for selecting scalars.\nDataFrame.iloc : Integer-location based indexing for selecting Series.\nSeries.to_frame : Inverse of DataFrame.squeeze for a\n    single-column DataFrame.\n\nExamples\n--------\n>>> primes = pd.Series([2, 3, 5, 7])\n\nSlicing might produce a Series with a single value:\n\n>>> even_primes = primes[primes % 2 == 0]\n>>> even_primes\n0    2\ndtype: int64\n\n>>> even_primes.squeeze()\n2\n\nSqueezing objects with more than one value in every axis does nothing:\n\n>>> odd_primes = primes[primes % 2 == 1]\n>>> odd_primes\n1    3\n2    5\n3    7\ndtype: int64\n\n>>> odd_primes.squeeze()\n1    3\n2    5\n3    7\ndtype: int64\n\nSqueezing is even more effective when used with DataFrames.\n\n>>> df = pd.DataFrame([[1, 2], [3, 4]], columns=['a', 'b'])\n>>> df\n   a  b\n0  1  2\n1  3  4\n\nSlicing a single column will produce a DataFrame with the columns\nhaving only one value:\n\n>>> df_a = df[['a']]\n>>> df_a\n   a\n0  1\n1  3\n\nSo the columns can be squeezed down, resulting in a Series:\n\n>>> df_a.squeeze('columns')\n0    1\n1    3\nName: a, dtype: int64\n\nSlicing a single row from a single column will produce a single\nscalar DataFrame:\n\n>>> df_0a = df.loc[df.index < 1, ['a']]\n>>> df_0a\n   a\n0  1\n\nSqueezing the rows produces a single scalar Series:\n\n>>> df_0a.squeeze('rows')\na    1\nName: 0, dtype: int64\n\nSqueezing all axes will project directly into a scalar:\n\n>>> df_0a.squeeze()\n1", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 851, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L851", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reshaping, sorting, transposing", "shared_code_with": "pandas.Series.squeeze"}, "pandas.DataFrame.to_xarray": {"type": "function", "docstring": "Return an xarray object from the pandas object.\n\nReturns\n-------\nxarray.DataArray or xarray.Dataset\n    Data in the pandas structure converted to Dataset if the object is\n    a DataFrame, or a DataArray if the object is a Series.\n\nSee Also\n--------\nDataFrame.to_hdf : Write DataFrame to an HDF5 file.\nDataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\nNotes\n-----\nSee the `xarray docs <http://xarray.pydata.org/en/stable/>`__\n\nExamples\n--------\n>>> df = pd.DataFrame([('falcon', 'bird',  389.0, 2),\n...                    ('parrot', 'bird', 24.0, 2),\n...                    ('lion',   'mammal', 80.5, 4),\n...                    ('monkey', 'mammal', np.nan, 4)],\n...                    columns=['name', 'class', 'max_speed',\n...                             'num_legs'])\n>>> df\n     name   class  max_speed  num_legs\n0  falcon    bird      389.0         2\n1  parrot    bird       24.0         2\n2    lion  mammal       80.5         4\n3  monkey  mammal        NaN         4\n\n>>> df.to_xarray()\n<xarray.Dataset>\nDimensions:    (index: 4)\nCoordinates:\n  * index      (index) int64 0 1 2 3\nData variables:\n    name       (index) object 'falcon' 'parrot' 'lion' 'monkey'\n    class      (index) object 'bird' 'bird' 'mammal' 'mammal'\n    max_speed  (index) float64 389.0 24.0 80.5 nan\n    num_legs   (index) int64 2 2 4 4\n\n>>> df['max_speed'].to_xarray()\n<xarray.DataArray 'max_speed' (index: 4)>\narray([389. ,  24. ,  80.5,   nan])\nCoordinates:\n  * index    (index) int64 0 1 2 3\n\n>>> dates = pd.to_datetime(['2018-01-01', '2018-01-01',\n...                         '2018-01-02', '2018-01-02'])\n>>> df_multiindex = pd.DataFrame({'date': dates,\n...                    'animal': ['falcon', 'parrot', 'falcon',\n...                               'parrot'],\n...                    'speed': [350, 18, 361, 15]}).set_index(['date',\n...                                                    'animal'])\n>>> df_multiindex\n                   speed\ndate       animal\n2018-01-01 falcon    350\n           parrot     18\n2018-01-02 falcon    361\n           parrot     15\n\n>>> df_multiindex.to_xarray()\n<xarray.Dataset>\nDimensions:  (animal: 2, date: 2)\nCoordinates:\n  * date     (date) datetime64[ns] 2018-01-01 2018-01-02\n  * animal   (animal) object 'falcon' 'parrot'\nData variables:\n    speed    (date, animal) int64 350 18 361 15", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 2810, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L2810", "errors": [["EX03", "flake8 error: E127 continuation line over-indented for visual indent"], ["EX03", "flake8 error: E128 continuation line under-indented for visual indent (3 times)"], ["EX03", "flake8 error: E241 multiple spaces after ',' (2 times)"]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reshaping, sorting, transposing", "shared_code_with": "pandas.Series.to_xarray"}, "pandas.DataFrame.T": {"type": "property", "docstring": "Transpose index and columns.\n\nReflect the DataFrame over its main diagonal by writing rows as columns\nand vice-versa. The property :attr:`.T` is an accessor to the method\n:meth:`transpose`.\n\nParameters\n----------\ncopy : bool, default False\n    If True, the underlying data is copied. Otherwise (default), no\n    copy is made if possible.\n*args, **kwargs\n    Additional keywords have no effect but might be accepted for\n    compatibility with numpy.\n\nReturns\n-------\nDataFrame\n    The transposed DataFrame.\n\nSee Also\n--------\nnumpy.transpose : Permute the dimensions of a given array.\n\nNotes\n-----\nTransposing a DataFrame with mixed dtypes will result in a homogeneous\nDataFrame with the `object` dtype. In such a case, a copy of the data\nis always made.\n\nExamples\n--------\n**Square DataFrame with homogeneous dtype**\n\n>>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df1 = pd.DataFrame(data=d1)\n>>> df1\n   col1  col2\n0     1     3\n1     2     4\n\n>>> df1_transposed = df1.T # or df1.transpose()\n>>> df1_transposed\n      0  1\ncol1  1  2\ncol2  3  4\n\nWhen the dtype is homogeneous in the original DataFrame, we get a\ntransposed DataFrame with the same dtype:\n\n>>> df1.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n>>> df1_transposed.dtypes\n0    int64\n1    int64\ndtype: object\n\n**Non-square DataFrame with mixed dtypes**\n\n>>> d2 = {'name': ['Alice', 'Bob'],\n...       'score': [9.5, 8],\n...       'employed': [False, True],\n...       'kids': [0, 0]}\n>>> df2 = pd.DataFrame(data=d2)\n>>> df2\n    name  score  employed  kids\n0  Alice    9.5     False     0\n1    Bob    8.0      True     0\n\n>>> df2_transposed = df2.T # or df2.transpose()\n>>> df2_transposed\n              0     1\nname      Alice   Bob\nscore       9.5     8\nemployed  False  True\nkids          0     0\n\nWhen the DataFrame has mixed dtypes, we get a transposed DataFrame with\nthe `object` dtype:\n\n>>> df2.dtypes\nname         object\nscore       float64\nemployed       bool\nkids          int64\ndtype: object\n>>> df2_transposed.dtypes\n0    object\n1    object\ndtype: object", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 2634, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L2634", "errors": [["PR02", "Unknown parameters {*args, **kwargs, copy}"], ["EX03", "flake8 error: E261 at least two spaces before inline comment (2 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reshaping, sorting, transposing", "shared_code_with": ""}, "pandas.DataFrame.transpose": {"type": "function", "docstring": "Transpose index and columns.\n\nReflect the DataFrame over its main diagonal by writing rows as columns\nand vice-versa. The property :attr:`.T` is an accessor to the method\n:meth:`transpose`.\n\nParameters\n----------\ncopy : bool, default False\n    If True, the underlying data is copied. Otherwise (default), no\n    copy is made if possible.\n*args, **kwargs\n    Additional keywords have no effect but might be accepted for\n    compatibility with numpy.\n\nReturns\n-------\nDataFrame\n    The transposed DataFrame.\n\nSee Also\n--------\nnumpy.transpose : Permute the dimensions of a given array.\n\nNotes\n-----\nTransposing a DataFrame with mixed dtypes will result in a homogeneous\nDataFrame with the `object` dtype. In such a case, a copy of the data\nis always made.\n\nExamples\n--------\n**Square DataFrame with homogeneous dtype**\n\n>>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df1 = pd.DataFrame(data=d1)\n>>> df1\n   col1  col2\n0     1     3\n1     2     4\n\n>>> df1_transposed = df1.T # or df1.transpose()\n>>> df1_transposed\n      0  1\ncol1  1  2\ncol2  3  4\n\nWhen the dtype is homogeneous in the original DataFrame, we get a\ntransposed DataFrame with the same dtype:\n\n>>> df1.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n>>> df1_transposed.dtypes\n0    int64\n1    int64\ndtype: object\n\n**Non-square DataFrame with mixed dtypes**\n\n>>> d2 = {'name': ['Alice', 'Bob'],\n...       'score': [9.5, 8],\n...       'employed': [False, True],\n...       'kids': [0, 0]}\n>>> df2 = pd.DataFrame(data=d2)\n>>> df2\n    name  score  employed  kids\n0  Alice    9.5     False     0\n1    Bob    8.0      True     0\n\n>>> df2_transposed = df2.T # or df2.transpose()\n>>> df2_transposed\n              0     1\nname      Alice   Bob\nscore       9.5     8\nemployed  False  True\nkids          0     0\n\nWhen the DataFrame has mixed dtypes, we get a transposed DataFrame with\nthe `object` dtype:\n\n>>> df2.dtypes\nname         object\nscore       float64\nemployed       bool\nkids          int64\ndtype: object\n>>> df2_transposed.dtypes\n0    object\n1    object\ndtype: object", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 2634, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L2634", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {*args, **kwargs, copy}"], ["EX03", "flake8 error: E261 at least two spaces before inline comment (2 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Reshaping, sorting, transposing", "shared_code_with": "pandas.DataFrame.T"}, "pandas.DataFrame.append": {"type": "function", "docstring": "Append rows of `other` to the end of caller, returning a new object.\n\nColumns in `other` that are not in the caller are added as new columns.\n\nParameters\n----------\nother : DataFrame or Series/dict-like object, or list of these\n    The data to append.\nignore_index : boolean, default False\n    If True, do not use the index labels.\nverify_integrity : boolean, default False\n    If True, raise ValueError on creating index with duplicates.\nsort : boolean, default None\n    Sort columns if the columns of `self` and `other` are not aligned.\n    The default sorting is deprecated and will change to not-sorting\n    in a future version of pandas. Explicitly pass ``sort=True`` to\n    silence the warning and sort. Explicitly pass ``sort=False`` to\n    silence the warning and not sort.\n\n    .. versionadded:: 0.23.0\n\nReturns\n-------\nDataFrame\n\nSee Also\n--------\nconcat : General function to concatenate DataFrame or Series objects.\n\nNotes\n-----\nIf a list of dict/series is passed and the keys are all contained in\nthe DataFrame's index, the order of the columns in the resulting\nDataFrame will be unchanged.\n\nIteratively appending rows to a DataFrame can be more computationally\nintensive than a single concatenate. A better solution is to append\nthose rows to a list and then concatenate the list with the original\nDataFrame all at once.\n\nExamples\n--------\n\n>>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n>>> df\n   A  B\n0  1  2\n1  3  4\n>>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n>>> df.append(df2)\n   A  B\n0  1  2\n1  3  4\n0  5  6\n1  7  8\n\nWith `ignore_index` set to True:\n\n>>> df.append(df2, ignore_index=True)\n   A  B\n0  1  2\n1  3  4\n2  5  6\n3  7  8\n\nThe following, while not recommended methods for generating DataFrames,\nshow two ways to generate a DataFrame from multiple data sources.\n\nLess efficient:\n\n>>> df = pd.DataFrame(columns=['A'])\n>>> for i in range(5):\n...     df = df.append({'A': i}, ignore_index=True)\n>>> df\n   A\n0  0\n1  1\n2  2\n3  3\n4  4\n\nMore efficient:\n\n>>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n...           ignore_index=True)\n   A\n0  0\n1  1\n2  2\n3  3\n4  4", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 6913, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L6913", "errors": [["PR06", "Parameter \"ignore_index\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"verify_integrity\" type should use \"bool\" instead of \"boolean\""], ["PR06", "Parameter \"sort\" type should use \"bool\" instead of \"boolean\""], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Combining / joining / merging", "shared_code_with": ""}, "pandas.DataFrame.assign": {"type": "function", "docstring": "Assign new columns to a DataFrame.\n\nReturns a new object with all original columns in addition to new ones.\nExisting columns that are re-assigned will be overwritten.\n\nParameters\n----------\n**kwargs : dict of {str: callable or Series}\n    The column names are keywords. If the values are\n    callable, they are computed on the DataFrame and\n    assigned to the new columns. The callable must not\n    change input DataFrame (though pandas doesn't check it).\n    If the values are not callable, (e.g. a Series, scalar, or array),\n    they are simply assigned.\n\nReturns\n-------\nDataFrame\n    A new DataFrame with the new columns in addition to\n    all the existing columns.\n\nNotes\n-----\nAssigning multiple columns within the same ``assign`` is possible.\nFor Python 3.6 and above, later items in '\\*\\*kwargs' may refer to\nnewly created or modified columns in 'df'; items are computed and\nassigned into 'df' in order.  For Python 3.5 and below, the order of\nkeyword arguments is not specified, you cannot refer to newly created\nor modified columns. All items are computed first, and then assigned\nin alphabetical order.\n\n.. versionchanged:: 0.23.0\n\n   Keyword argument order is maintained for Python 3.6 and later.\n\nExamples\n--------\n>>> df = pd.DataFrame({'temp_c': [17.0, 25.0]},\n...                   index=['Portland', 'Berkeley'])\n>>> df\n          temp_c\nPortland    17.0\nBerkeley    25.0\n\nWhere the value is a callable, evaluated on `df`:\n\n>>> df.assign(temp_f=lambda x: x.temp_c * 9 / 5 + 32)\n          temp_c  temp_f\nPortland    17.0    62.6\nBerkeley    25.0    77.0\n\nAlternatively, the same behavior can be achieved by directly\nreferencing an existing Series or sequence:\n\n>>> df.assign(temp_f=df['temp_c'] * 9 / 5 + 32)\n          temp_c  temp_f\nPortland    17.0    62.6\nBerkeley    25.0    77.0\n\nIn Python 3.6+, you can create multiple columns within the same assign\nwhere one of the columns depends on another one defined within the same\nassign:\n\n>>> df.assign(temp_f=lambda x: x['temp_c'] * 9 / 5 + 32,\n...           temp_k=lambda x: (x['temp_f'] +  459.67) * 5 / 9)\n          temp_c  temp_f  temp_k\nPortland    17.0    62.6  290.15\nBerkeley    25.0    77.0  298.15", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 3518, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L3518", "errors": [["EX03", "flake8 error: E222 multiple spaces after operator"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Combining / joining / merging", "shared_code_with": ""}, "pandas.DataFrame.join": {"type": "function", "docstring": "Join columns of another DataFrame.\n\nJoin columns with `other` DataFrame either on index or on a key\ncolumn. Efficiently join multiple DataFrame objects by index at once by\npassing a list.\n\nParameters\n----------\nother : DataFrame, Series, or list of DataFrame\n    Index should be similar to one of the columns in this one. If a\n    Series is passed, its name attribute must be set, and that will be\n    used as the column name in the resulting joined DataFrame.\non : str, list of str, or array-like, optional\n    Column or index level name(s) in the caller to join on the index\n    in `other`, otherwise joins index-on-index. If multiple\n    values given, the `other` DataFrame must have a MultiIndex. Can\n    pass an array as the join key if it is not already contained in\n    the calling DataFrame. Like an Excel VLOOKUP operation.\nhow : {'left', 'right', 'outer', 'inner'}, default 'left'\n    How to handle the operation of the two objects.\n\n    * left: use calling frame's index (or column if on is specified)\n    * right: use `other`'s index.\n    * outer: form union of calling frame's index (or column if on is\n      specified) with `other`'s index, and sort it.\n      lexicographically.\n    * inner: form intersection of calling frame's index (or column if\n      on is specified) with `other`'s index, preserving the order\n      of the calling's one.\nlsuffix : str, default ''\n    Suffix to use from left frame's overlapping columns.\nrsuffix : str, default ''\n    Suffix to use from right frame's overlapping columns.\nsort : bool, default False\n    Order result DataFrame lexicographically by the join key. If False,\n    the order of the join key depends on the join type (how keyword).\n\nReturns\n-------\nDataFrame\n    A dataframe containing columns from both the caller and `other`.\n\nSee Also\n--------\nDataFrame.merge : For column(s)-on-columns(s) operations.\n\nNotes\n-----\nParameters `on`, `lsuffix`, and `rsuffix` are not supported when\npassing a list of `DataFrame` objects.\n\nSupport for specifying index levels as the `on` parameter was added\nin version 0.23.0.\n\nExamples\n--------\n>>> df = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n...                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n\n>>> df\n  key   A\n0  K0  A0\n1  K1  A1\n2  K2  A2\n3  K3  A3\n4  K4  A4\n5  K5  A5\n\n>>> other = pd.DataFrame({'key': ['K0', 'K1', 'K2'],\n...                       'B': ['B0', 'B1', 'B2']})\n\n>>> other\n  key   B\n0  K0  B0\n1  K1  B1\n2  K2  B2\n\nJoin DataFrames using their indexes.\n\n>>> df.join(other, lsuffix='_caller', rsuffix='_other')\n  key_caller   A key_other    B\n0         K0  A0        K0   B0\n1         K1  A1        K1   B1\n2         K2  A2        K2   B2\n3         K3  A3       NaN  NaN\n4         K4  A4       NaN  NaN\n5         K5  A5       NaN  NaN\n\nIf we want to join using the key columns, we need to set key to be\nthe index in both `df` and `other`. The joined DataFrame will have\nkey as its index.\n\n>>> df.set_index('key').join(other.set_index('key'))\n      A    B\nkey\nK0   A0   B0\nK1   A1   B1\nK2   A2   B2\nK3   A3  NaN\nK4   A4  NaN\nK5   A5  NaN\n\nAnother option to join using the key columns is to use the `on`\nparameter. DataFrame.join always uses `other`'s index but we can use\nany column in `df`. This method preserves the original DataFrame's\nindex in the result.\n\n>>> df.join(other.set_index('key'), on='key')\n  key   A    B\n0  K0  A0   B0\n1  K1  A1   B1\n2  K2  A2   B2\n3  K3  A3  NaN\n4  K4  A4  NaN\n5  K5  A5  NaN", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 7055, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L7055", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Combining / joining / merging", "shared_code_with": ""}, "pandas.DataFrame.merge": {"type": "function", "docstring": "Merge DataFrame or named Series objects with a database-style join.\n\nThe join is done on columns or indexes. If joining columns on\ncolumns, the DataFrame indexes *will be ignored*. Otherwise if joining indexes\non indexes or indexes on a column or columns, the index will be passed on.\n\nParameters\n----------\nright : DataFrame or named Series\n    Object to merge with.\nhow : {'left', 'right', 'outer', 'inner'}, default 'inner'\n    Type of merge to be performed.\n\n    * left: use only keys from left frame, similar to a SQL left outer join;\n      preserve key order.\n    * right: use only keys from right frame, similar to a SQL right outer join;\n      preserve key order.\n    * outer: use union of keys from both frames, similar to a SQL full outer\n      join; sort keys lexicographically.\n    * inner: use intersection of keys from both frames, similar to a SQL inner\n      join; preserve the order of the left keys.\non : label or list\n    Column or index level names to join on. These must be found in both\n    DataFrames. If `on` is None and not merging on indexes then this defaults\n    to the intersection of the columns in both DataFrames.\nleft_on : label or list, or array-like\n    Column or index level names to join on in the left DataFrame. Can also\n    be an array or list of arrays of the length of the left DataFrame.\n    These arrays are treated as if they are columns.\nright_on : label or list, or array-like\n    Column or index level names to join on in the right DataFrame. Can also\n    be an array or list of arrays of the length of the right DataFrame.\n    These arrays are treated as if they are columns.\nleft_index : bool, default False\n    Use the index from the left DataFrame as the join key(s). If it is a\n    MultiIndex, the number of keys in the other DataFrame (either the index\n    or a number of columns) must match the number of levels.\nright_index : bool, default False\n    Use the index from the right DataFrame as the join key. Same caveats as\n    left_index.\nsort : bool, default False\n    Sort the join keys lexicographically in the result DataFrame. If False,\n    the order of the join keys depends on the join type (how keyword).\nsuffixes : tuple of (str, str), default ('_x', '_y')\n    Suffix to apply to overlapping column names in the left and right\n    side, respectively. To raise an exception on overlapping columns use\n    (False, False).\ncopy : bool, default True\n    If False, avoid copy if possible.\nindicator : bool or str, default False\n    If True, adds a column to output DataFrame called \"_merge\" with\n    information on the source of each row.\n    If string, column with information on source of each row will be added to\n    output DataFrame, and column will be named value of string.\n    Information column is Categorical-type and takes on a value of \"left_only\"\n    for observations whose merge key only appears in 'left' DataFrame,\n    \"right_only\" for observations whose merge key only appears in 'right'\n    DataFrame, and \"both\" if the observation's merge key is found in both.\n\nvalidate : str, optional\n    If specified, checks if merge is of specified type.\n\n    * \"one_to_one\" or \"1:1\": check if merge keys are unique in both\n      left and right datasets.\n    * \"one_to_many\" or \"1:m\": check if merge keys are unique in left\n      dataset.\n    * \"many_to_one\" or \"m:1\": check if merge keys are unique in right\n      dataset.\n    * \"many_to_many\" or \"m:m\": allowed, but does not result in checks.\n\n    .. versionadded:: 0.21.0\n\nReturns\n-------\nDataFrame\n    A DataFrame of the two merged objects.\n\nSee Also\n--------\nmerge_ordered : Merge with optional filling/interpolation.\nmerge_asof : Merge on nearest keys.\nDataFrame.join : Similar method using indices.\n\nNotes\n-----\nSupport for specifying index levels as the `on`, `left_on`, and\n`right_on` parameters was added in version 0.23.0\nSupport for merging named Series objects was added in version 0.24.0\n\nExamples\n--------\n\n>>> df1 = pd.DataFrame({'lkey': ['foo', 'bar', 'baz', 'foo'],\n...                     'value': [1, 2, 3, 5]})\n>>> df2 = pd.DataFrame({'rkey': ['foo', 'bar', 'baz', 'foo'],\n...                     'value': [5, 6, 7, 8]})\n>>> df1\n    lkey value\n0   foo      1\n1   bar      2\n2   baz      3\n3   foo      5\n>>> df2\n    rkey value\n0   foo      5\n1   bar      6\n2   baz      7\n3   foo      8\n\nMerge df1 and df2 on the lkey and rkey columns. The value columns have\nthe default suffixes, _x and _y, appended.\n\n>>> df1.merge(df2, left_on='lkey', right_on='rkey')\n  lkey  value_x rkey  value_y\n0  foo        1  foo        5\n1  foo        1  foo        8\n2  foo        5  foo        5\n3  foo        5  foo        8\n4  bar        2  bar        6\n5  baz        3  baz        7\n\nMerge DataFrames df1 and df2 with specified left and right suffixes\nappended to any overlapping columns.\n\n>>> df1.merge(df2, left_on='lkey', right_on='rkey',\n...           suffixes=('_left', '_right'))\n  lkey  value_left rkey  value_right\n0  foo           1  foo            5\n1  foo           1  foo            8\n2  foo           5  foo            5\n3  foo           5  foo            8\n4  bar           2  bar            6\n5  baz           3  baz            7\n\nMerge DataFrames df1 and df2, but raise an exception if the DataFrames have\nany overlapping columns.\n\n>>> df1.merge(df2, left_on='lkey', right_on='rkey', suffixes=(False, False))\nTraceback (most recent call last):\n...\nValueError: columns overlap but no suffix specified:\n    Index(['value'], dtype='object')", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 7231, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L7231", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Combining / joining / merging", "shared_code_with": ""}, "pandas.DataFrame.update": {"type": "function", "docstring": "Modify in place using non-NA values from another DataFrame.\n\nAligns on indices. There is no return value.\n\nParameters\n----------\nother : DataFrame, or object coercible into a DataFrame\n    Should have at least one matching index/column label\n    with the original DataFrame. If a Series is passed,\n    its name attribute must be set, and that will be\n    used as the column name to align with the original DataFrame.\njoin : {'left'}, default 'left'\n    Only left join is implemented, keeping the index and columns of the\n    original object.\noverwrite : bool, default True\n    How to handle non-NA values for overlapping keys:\n\n    * True: overwrite original DataFrame's values\n      with values from `other`.\n    * False: only update values that are NA in\n      the original DataFrame.\n\nfilter_func : callable(1d-array) -> bool 1d-array, optional\n    Can choose to replace values other than NA. Return True for values\n    that should be updated.\nerrors : {'raise', 'ignore'}, default 'ignore'\n    If 'raise', will raise a ValueError if the DataFrame and `other`\n    both contain non-NA data in the same place.\n\n    .. versionchanged:: 0.24.0\n       Changed from `raise_conflict=False|True`\n       to `errors='ignore'|'raise'`.\n\nReturns\n-------\nNone : method directly changes calling object\n\nRaises\n------\nValueError\n    * When `errors='raise'` and there's overlapping non-NA data.\n    * When `errors` is not either `'ignore'` or `'raise'`\nNotImplementedError\n    * If `join != 'left'`\n\nSee Also\n--------\ndict.update : Similar method for dictionaries.\nDataFrame.merge : For column(s)-on-columns(s) operations.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': [1, 2, 3],\n...                    'B': [400, 500, 600]})\n>>> new_df = pd.DataFrame({'B': [4, 5, 6],\n...                        'C': [7, 8, 9]})\n>>> df.update(new_df)\n>>> df\n   A  B\n0  1  4\n1  2  5\n2  3  6\n\nThe DataFrame's length does not increase as a result of the update,\nonly values at matching index/column labels are updated.\n\n>>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n...                    'B': ['x', 'y', 'z']})\n>>> new_df = pd.DataFrame({'B': ['d', 'e', 'f', 'g', 'h', 'i']})\n>>> df.update(new_df)\n>>> df\n   A  B\n0  a  d\n1  b  e\n2  c  f\n\nFor Series, it's name attribute must be set.\n\n>>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n...                    'B': ['x', 'y', 'z']})\n>>> new_column = pd.Series(['d', 'e'], name='B', index=[0, 2])\n>>> df.update(new_column)\n>>> df\n   A  B\n0  a  d\n1  b  y\n2  c  e\n>>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n...                    'B': ['x', 'y', 'z']})\n>>> new_df = pd.DataFrame({'B': ['d', 'e']}, index=[1, 2])\n>>> df.update(new_df)\n>>> df\n   A  B\n0  a  x\n1  b  d\n2  c  e\n\nIf `other` contains NaNs the corresponding values are not updated\nin the original dataframe.\n\n>>> df = pd.DataFrame({'A': [1, 2, 3],\n...                    'B': [400, 500, 600]})\n>>> new_df = pd.DataFrame({'B': [4, np.nan, 6]})\n>>> df.update(new_df)\n>>> df\n   A      B\n0  1    4.0\n1  2  500.0\n2  3    6.0", "deprecated": false, "file": "pandas/util/_decorators.py", "file_line": 5581, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/_decorators.py#L5581", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {join, overwrite, errors, filter_func, other}"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Combining / joining / merging", "shared_code_with": ""}, "pandas.DataFrame.asfreq": {"type": "function", "docstring": "Convert TimeSeries to specified frequency.\n\nOptionally provide filling method to pad/backfill missing values.\n\nReturns the original data conformed to a new index with the specified\nfrequency. ``resample`` is more appropriate if an operation, such as\nsummarization, is necessary to represent the data at the new frequency.\n\nParameters\n----------\nfreq : DateOffset or str\nmethod : {'backfill'/'bfill', 'pad'/'ffill'}, default None\n    Method to use for filling holes in reindexed Series (note this\n    does not fill NaNs that already were present):\n\n    * 'pad' / 'ffill': propagate last valid observation forward to next\n      valid\n    * 'backfill' / 'bfill': use NEXT valid observation to fill\nhow : {'start', 'end'}, default end\n    For PeriodIndex only, see PeriodIndex.asfreq\nnormalize : bool, default False\n    Whether to reset output index to midnight\nfill_value : scalar, optional\n    Value to use for missing values, applied during upsampling (note\n    this does not fill NaNs that already were present).\n\n    .. versionadded:: 0.20.0\n\nReturns\n-------\nconverted : same type as caller\n\nSee Also\n--------\nreindex\n\nNotes\n-----\nTo learn more about the frequency strings, please see `this link\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\nExamples\n--------\n\nStart by creating a series with 4 one minute timestamps.\n\n>>> index = pd.date_range('1/1/2000', periods=4, freq='T')\n>>> series = pd.Series([0.0, None, 2.0, 3.0], index=index)\n>>> df = pd.DataFrame({'s':series})\n>>> df\n                       s\n2000-01-01 00:00:00    0.0\n2000-01-01 00:01:00    NaN\n2000-01-01 00:02:00    2.0\n2000-01-01 00:03:00    3.0\n\nUpsample the series into 30 second bins.\n\n>>> df.asfreq(freq='30S')\n                       s\n2000-01-01 00:00:00    0.0\n2000-01-01 00:00:30    NaN\n2000-01-01 00:01:00    NaN\n2000-01-01 00:01:30    NaN\n2000-01-01 00:02:00    2.0\n2000-01-01 00:02:30    NaN\n2000-01-01 00:03:00    3.0\n\nUpsample again, providing a ``fill value``.\n\n>>> df.asfreq(freq='30S', fill_value=9.0)\n                       s\n2000-01-01 00:00:00    0.0\n2000-01-01 00:00:30    9.0\n2000-01-01 00:01:00    NaN\n2000-01-01 00:01:30    9.0\n2000-01-01 00:02:00    2.0\n2000-01-01 00:02:30    9.0\n2000-01-01 00:03:00    3.0\n\nUpsample again, providing a ``method``.\n\n>>> df.asfreq(freq='30S', method='bfill')\n                       s\n2000-01-01 00:00:00    0.0\n2000-01-01 00:00:30    NaN\n2000-01-01 00:01:00    NaN\n2000-01-01 00:01:30    2.0\n2000-01-01 00:02:00    2.0\n2000-01-01 00:02:30    3.0\n2000-01-01 00:03:00    3.0", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 7861, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L7861", "errors": [["PR07", "Parameter \"freq\" has no description"], ["PR09", "Parameter \"method\" description should finish with \".\""], ["PR09", "Parameter \"how\" description should finish with \".\""], ["PR09", "Parameter \"normalize\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"reindex\" reference"], ["EX03", "flake8 error: E231 missing whitespace after ':'"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Time series-related", "shared_code_with": "pandas.Series.asfreq"}, "pandas.DataFrame.asof": {"type": "function", "docstring": "Return the last row(s) without any NaNs before `where`.\n\nThe last row (for each element in `where`, if list) without any\nNaN is taken.\nIn case of a :class:`~pandas.DataFrame`, the last row without NaN\nconsidering only the subset of columns (if not `None`)\n\nIf there is no good value, NaN is returned for a Series or\na Series of NaN values for a DataFrame\n\nParameters\n----------\nwhere : date or array-like of dates\n    Date(s) before which the last row(s) are returned.\nsubset : str or array-like of str, default `None`\n    For DataFrame, if not `None`, only use these columns to\n    check for NaNs.\n\nReturns\n-------\nscalar, Series, or DataFrame\n\n    The return can be:\n\n    * scalar : when `self` is a Series and `where` is a scalar\n    * Series: when `self` is a Series and `where` is an array-like,\n      or when `self` is a DataFrame and `where` is a scalar\n    * DataFrame : when `self` is a DataFrame and `where` is an\n      array-like\n\n    Return scalar, Series, or DataFrame.\n\nSee Also\n--------\nmerge_asof : Perform an asof merge. Similar to left join.\n\nNotes\n-----\nDates are assumed to be sorted. Raises if this is not the case.\n\nExamples\n--------\nA Series and a scalar `where`.\n\n>>> s = pd.Series([1, 2, np.nan, 4], index=[10, 20, 30, 40])\n>>> s\n10    1.0\n20    2.0\n30    NaN\n40    4.0\ndtype: float64\n\n>>> s.asof(20)\n2.0\n\nFor a sequence `where`, a Series is returned. The first value is\nNaN, because the first element of `where` is before the first\nindex value.\n\n>>> s.asof([5, 20])\n5     NaN\n20    2.0\ndtype: float64\n\nMissing values are not considered. The following is ``2.0``, not\nNaN, even though NaN is at the index location for ``30``.\n\n>>> s.asof(30)\n2.0\n\nTake all columns into consideration\n\n>>> df = pd.DataFrame({'a': [10, 20, 30, 40, 50],\n...                    'b': [None, None, None, None, 500]},\n...                   index=pd.DatetimeIndex(['2018-02-27 09:01:00',\n...                                           '2018-02-27 09:02:00',\n...                                           '2018-02-27 09:03:00',\n...                                           '2018-02-27 09:04:00',\n...                                           '2018-02-27 09:05:00']))\n>>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n...                           '2018-02-27 09:04:30']))\n                      a   b\n2018-02-27 09:03:30 NaN NaN\n2018-02-27 09:04:30 NaN NaN\n\nTake a single column into consideration\n\n>>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n...                           '2018-02-27 09:04:30']),\n...         subset=['a'])\n                         a   b\n2018-02-27 09:03:30   30.0 NaN\n2018-02-27 09:04:30   40.0 NaN", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 7048, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L7048", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Time series-related", "shared_code_with": "pandas.Series.asof"}, "pandas.DataFrame.shift": {"type": "function", "docstring": "Shift index by desired number of periods with an optional time `freq`.\n\nWhen `freq` is not passed, shift the index without realigning the data.\nIf `freq` is passed (in this case, the index must be date or datetime,\nor it will raise a `NotImplementedError`), the index will be\nincreased using the periods and the `freq`.\n\nParameters\n----------\nperiods : int\n    Number of periods to shift. Can be positive or negative.\nfreq : DateOffset, tseries.offsets, timedelta, or str, optional\n    Offset to use from the tseries module or time rule (e.g. 'EOM').\n    If `freq` is specified then the index values are shifted but the\n    data is not realigned. That is, use `freq` if you would like to\n    extend the index when shifting and preserve the original data.\naxis : {0 or 'index', 1 or 'columns', None}, default None\n    Shift direction.\nfill_value : object, optional\n    The scalar value to use for newly introduced missing values.\n    the default depends on the dtype of `self`.\n    For numeric data, ``np.nan`` is used.\n    For datetime, timedelta, or period data, etc. :attr:`NaT` is used.\n    For extension dtypes, ``self.dtype.na_value`` is used.\n\n    .. versionchanged:: 0.24.0\n\nReturns\n-------\nDataFrame\n    Copy of input object, shifted.\n\nSee Also\n--------\nIndex.shift : Shift values of Index.\nDatetimeIndex.shift : Shift values of DatetimeIndex.\nPeriodIndex.shift : Shift values of PeriodIndex.\ntshift : Shift the time index, using the index's frequency if\n    available.\n\nExamples\n--------\n>>> df = pd.DataFrame({'Col1': [10, 20, 15, 30, 45],\n...                    'Col2': [13, 23, 18, 33, 48],\n...                    'Col3': [17, 27, 22, 37, 52]})\n\n>>> df.shift(periods=3)\n   Col1  Col2  Col3\n0   NaN   NaN   NaN\n1   NaN   NaN   NaN\n2   NaN   NaN   NaN\n3  10.0  13.0  17.0\n4  20.0  23.0  27.0\n\n>>> df.shift(periods=1, axis='columns')\n   Col1  Col2  Col3\n0   NaN  10.0  13.0\n1   NaN  20.0  23.0\n2   NaN  15.0  18.0\n3   NaN  30.0  33.0\n4   NaN  45.0  48.0\n\n>>> df.shift(periods=3, fill_value=0)\n   Col1  Col2  Col3\n0     0     0     0\n1     0     0     0\n2     0     0     0\n3    10    13    17\n4    20    23    27", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 4206, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L4206", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Time series-related", "shared_code_with": ""}, "pandas.DataFrame.slice_shift": {"type": "function", "docstring": "Equivalent to `shift` without copying data. The shifted data will\nnot include the dropped periods and the shifted axis will be smaller\nthan the original.\n\nParameters\n----------\nperiods : int\n    Number of periods to move, can be positive or negative\n\nReturns\n-------\nshifted : same type as caller\n\nNotes\n-----\nWhile the `slice_shift` is faster than `shift`, you may pay for it\nlater during alignment.", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 9356, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L9356", "errors": [["SS06", "Summary should fit in a single line"], ["PR01", "Parameters {axis} not documented"], ["PR09", "Parameter \"periods\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Time series-related", "shared_code_with": "pandas.Series.slice_shift"}, "pandas.DataFrame.tshift": {"type": "function", "docstring": "Shift the time index, using the index's frequency if available.\n\nParameters\n----------\nperiods : int\n    Number of periods to move, can be positive or negative\nfreq : DateOffset, timedelta, or time rule string, default None\n    Increment to use from the tseries module or time rule (e.g. 'EOM')\naxis : int or basestring\n    Corresponds to the axis that contains the Index\n\nReturns\n-------\nshifted : Series/DataFrame\n\nNotes\n-----\nIf freq is not specified then tries to use the freq or inferred_freq\nattributes of the index. If neither of those attributes exist, a\nValueError is thrown", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 9392, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L9392", "errors": [["PR09", "Parameter \"periods\" description should finish with \".\""], ["PR06", "Parameter \"freq\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"freq\" description should finish with \".\""], ["PR06", "Parameter \"axis\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"axis\" description should finish with \".\""], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Time series-related", "shared_code_with": "pandas.Series.tshift"}, "pandas.DataFrame.first_valid_index": {"type": "function", "docstring": "Return index for first non-NA/null value.\n\nReturns\n-------\nscalar : type of index\n\nNotes\n-----\nIf all elements are non-NA/null, returns None.\nAlso returns None for empty Series/DataFrame.", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 10832, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L10832", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Time series-related", "shared_code_with": "pandas.Series.first_valid_index"}, "pandas.DataFrame.last_valid_index": {"type": "function", "docstring": "Return index for last non-NA/null value.\n\nReturns\n-------\nscalar : type of index\n\nNotes\n-----\nIf all elements are non-NA/null, returns None.\nAlso returns None for empty Series/DataFrame.", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 10838, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L10838", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Time series-related", "shared_code_with": "pandas.Series.last_valid_index"}, "pandas.DataFrame.resample": {"type": "function", "docstring": "Resample time-series data.\n\nConvenience method for frequency conversion and resampling of time\nseries. Object must have a datetime-like index (`DatetimeIndex`,\n`PeriodIndex`, or `TimedeltaIndex`), or pass datetime-like values\nto the `on` or `level` keyword.\n\nParameters\n----------\nrule : DateOffset, Timedelta or str\n    The offset string or object representing target conversion.\nhow : str\n    Method for down/re-sampling, default to 'mean' for downsampling.\n\n    .. deprecated:: 0.18.0\n       The new syntax is ``.resample(...).mean()``, or\n       ``.resample(...).apply(<func>)``\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Which axis to use for up- or down-sampling. For `Series` this\n    will default to 0, i.e. along the rows. Must be\n    `DatetimeIndex`, `TimedeltaIndex` or `PeriodIndex`.\nfill_method : str, default None\n    Filling method for upsampling.\n\n    .. deprecated:: 0.18.0\n       The new syntax is ``.resample(...).<func>()``,\n       e.g. ``.resample(...).pad()``\nclosed : {'right', 'left'}, default None\n    Which side of bin interval is closed. The default is 'left'\n    for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n    'BA', 'BQ', and 'W' which all have a default of 'right'.\nlabel : {'right', 'left'}, default None\n    Which bin edge label to label bucket with. The default is 'left'\n    for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n    'BA', 'BQ', and 'W' which all have a default of 'right'.\nconvention : {'start', 'end', 's', 'e'}, default 'start'\n    For `PeriodIndex` only, controls whether to use the start or\n    end of `rule`.\nkind : {'timestamp', 'period'}, optional, default None\n    Pass 'timestamp' to convert the resulting index to a\n    `DateTimeIndex` or 'period' to convert it to a `PeriodIndex`.\n    By default the input representation is retained.\nloffset : timedelta, default None\n    Adjust the resampled time labels.\nlimit : int, default None\n    Maximum size gap when reindexing with `fill_method`.\n\n    .. deprecated:: 0.18.0\nbase : int, default 0\n    For frequencies that evenly subdivide 1 day, the \"origin\" of the\n    aggregated intervals. For example, for '5min' frequency, base could\n    range from 0 through 4. Defaults to 0.\non : str, optional\n    For a DataFrame, column to use instead of index for resampling.\n    Column must be datetime-like.\n\nlevel : str or int, optional\n    For a MultiIndex, level (name or number) to use for\n    resampling. `level` must be datetime-like.\n\nReturns\n-------\nResampler object\n\nSee Also\n--------\ngroupby : Group by mapping, function, label, or list of labels.\nSeries.resample : Resample a Series.\nDataFrame.resample: Resample a DataFrame.\n\nNotes\n-----\nSee the `user guide\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling>`_\nfor more.\n\nTo learn more about the offset strings, please see `this link\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`__.\n\nExamples\n--------\n\nStart by creating a series with 9 one minute timestamps.\n\n>>> index = pd.date_range('1/1/2000', periods=9, freq='T')\n>>> series = pd.Series(range(9), index=index)\n>>> series\n2000-01-01 00:00:00    0\n2000-01-01 00:01:00    1\n2000-01-01 00:02:00    2\n2000-01-01 00:03:00    3\n2000-01-01 00:04:00    4\n2000-01-01 00:05:00    5\n2000-01-01 00:06:00    6\n2000-01-01 00:07:00    7\n2000-01-01 00:08:00    8\nFreq: T, dtype: int64\n\nDownsample the series into 3 minute bins and sum the values\nof the timestamps falling into a bin.\n\n>>> series.resample('3T').sum()\n2000-01-01 00:00:00     3\n2000-01-01 00:03:00    12\n2000-01-01 00:06:00    21\nFreq: 3T, dtype: int64\n\nDownsample the series into 3 minute bins as above, but label each\nbin using the right edge instead of the left. Please note that the\nvalue in the bucket used as the label is not included in the bucket,\nwhich it labels. For example, in the original series the\nbucket ``2000-01-01 00:03:00`` contains the value 3, but the summed\nvalue in the resampled bucket with the label ``2000-01-01 00:03:00``\ndoes not include 3 (if it did, the summed value would be 6, not 3).\nTo include this value close the right side of the bin interval as\nillustrated in the example below this one.\n\n>>> series.resample('3T', label='right').sum()\n2000-01-01 00:03:00     3\n2000-01-01 00:06:00    12\n2000-01-01 00:09:00    21\nFreq: 3T, dtype: int64\n\nDownsample the series into 3 minute bins as above, but close the right\nside of the bin interval.\n\n>>> series.resample('3T', label='right', closed='right').sum()\n2000-01-01 00:00:00     0\n2000-01-01 00:03:00     6\n2000-01-01 00:06:00    15\n2000-01-01 00:09:00    15\nFreq: 3T, dtype: int64\n\nUpsample the series into 30 second bins.\n\n>>> series.resample('30S').asfreq()[0:5]   # Select first 5 rows\n2000-01-01 00:00:00   0.0\n2000-01-01 00:00:30   NaN\n2000-01-01 00:01:00   1.0\n2000-01-01 00:01:30   NaN\n2000-01-01 00:02:00   2.0\nFreq: 30S, dtype: float64\n\nUpsample the series into 30 second bins and fill the ``NaN``\nvalues using the ``pad`` method.\n\n>>> series.resample('30S').pad()[0:5]\n2000-01-01 00:00:00    0\n2000-01-01 00:00:30    0\n2000-01-01 00:01:00    1\n2000-01-01 00:01:30    1\n2000-01-01 00:02:00    2\nFreq: 30S, dtype: int64\n\nUpsample the series into 30 second bins and fill the\n``NaN`` values using the ``bfill`` method.\n\n>>> series.resample('30S').bfill()[0:5]\n2000-01-01 00:00:00    0\n2000-01-01 00:00:30    1\n2000-01-01 00:01:00    1\n2000-01-01 00:01:30    2\n2000-01-01 00:02:00    2\nFreq: 30S, dtype: int64\n\nPass a custom function via ``apply``\n\n>>> def custom_resampler(array_like):\n...     return np.sum(array_like) + 5\n...\n>>> series.resample('3T').apply(custom_resampler)\n2000-01-01 00:00:00     8\n2000-01-01 00:03:00    17\n2000-01-01 00:06:00    26\nFreq: 3T, dtype: int64\n\nFor a Series with a PeriodIndex, the keyword `convention` can be\nused to control whether to use the start or end of `rule`.\n\nResample a year by quarter using 'start' `convention`. Values are\nassigned to the first quarter of the period.\n\n>>> s = pd.Series([1, 2], index=pd.period_range('2012-01-01',\n...                                             freq='A',\n...                                             periods=2))\n>>> s\n2012    1\n2013    2\nFreq: A-DEC, dtype: int64\n>>> s.resample('Q', convention='start').asfreq()\n2012Q1    1.0\n2012Q2    NaN\n2012Q3    NaN\n2012Q4    NaN\n2013Q1    2.0\n2013Q2    NaN\n2013Q3    NaN\n2013Q4    NaN\nFreq: Q-DEC, dtype: float64\n\nResample quarters by month using 'end' `convention`. Values are\nassigned to the last month of the period.\n\n>>> q = pd.Series([1, 2, 3, 4], index=pd.period_range('2018-01-01',\n...                                                   freq='Q',\n...                                                   periods=4))\n>>> q\n2018Q1    1\n2018Q2    2\n2018Q3    3\n2018Q4    4\nFreq: Q-DEC, dtype: int64\n>>> q.resample('M', convention='end').asfreq()\n2018-03    1.0\n2018-04    NaN\n2018-05    NaN\n2018-06    2.0\n2018-07    NaN\n2018-08    NaN\n2018-09    3.0\n2018-10    NaN\n2018-11    NaN\n2018-12    4.0\nFreq: M, dtype: float64\n\nFor DataFrame objects, the keyword `on` can be used to specify the\ncolumn instead of the index for resampling.\n\n>>> d = dict({'price': [10, 11, 9, 13, 14, 18, 17, 19],\n...           'volume': [50, 60, 40, 100, 50, 100, 40, 50]})\n>>> df = pd.DataFrame(d)\n>>> df['week_starting'] = pd.date_range('01/01/2018',\n...                                     periods=8,\n...                                     freq='W')\n>>> df\n   price  volume week_starting\n0     10      50    2018-01-07\n1     11      60    2018-01-14\n2      9      40    2018-01-21\n3     13     100    2018-01-28\n4     14      50    2018-02-04\n5     18     100    2018-02-11\n6     17      40    2018-02-18\n7     19      50    2018-02-25\n>>> df.resample('M', on='week_starting').mean()\n               price  volume\nweek_starting\n2018-01-31     10.75    62.5\n2018-02-28     17.00    60.0\n\nFor a DataFrame with MultiIndex, the keyword `level` can be used to\nspecify on which level the resampling needs to take place.\n\n>>> days = pd.date_range('1/1/2000', periods=4, freq='D')\n>>> d2 = dict({'price': [10, 11, 9, 13, 14, 18, 17, 19],\n...            'volume': [50, 60, 40, 100, 50, 100, 40, 50]})\n>>> df2 = pd.DataFrame(d2,\n...                    index=pd.MultiIndex.from_product([days,\n...                                                     ['morning',\n...                                                      'afternoon']]\n...                                                     ))\n>>> df2\n                      price  volume\n2000-01-01 morning       10      50\n           afternoon     11      60\n2000-01-02 morning        9      40\n           afternoon     13     100\n2000-01-03 morning       14      50\n           afternoon     18     100\n2000-01-04 morning       17      40\n           afternoon     19      50\n>>> df2.resample('D', level=0).sum()\n            price  volume\n2000-01-01     21     110\n2000-01-02     22     140\n2000-01-03     32     150\n2000-01-04     36      90", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 8099, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L8099", "errors": [["RT03", "Return value has no description"], ["EX03", "flake8 error: E302 expected 2 blank lines, found 0"], ["EX03", "flake8 error: E305 expected 2 blank lines after class or function definition, found 0"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Time series-related", "shared_code_with": "pandas.Series.resample"}, "pandas.DataFrame.to_period": {"type": "function", "docstring": "Convert DataFrame from DatetimeIndex to PeriodIndex with desired\nfrequency (inferred from index if not passed).\n\nParameters\n----------\nfreq : str, default\n    Frequency of the PeriodIndex.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to convert (the index by default).\ncopy : bool, default True\n    If False then underlying input data is not copied.\n\nReturns\n-------\nTimeSeries with PeriodIndex", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 8262, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L8262", "errors": [["SS06", "Summary should fit in a single line"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Time series-related", "shared_code_with": ""}, "pandas.DataFrame.to_timestamp": {"type": "function", "docstring": "Cast to DatetimeIndex of timestamps, at *beginning* of period.\n\nParameters\n----------\nfreq : str, default frequency of PeriodIndex\n    Desired frequency.\nhow : {'s', 'e', 'start', 'end'}\n    Convention for converting period to timestamp; start of period\n    vs. end.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to convert (the index by default).\ncopy : bool, default True\n    If False then underlying input data is not copied.\n\nReturns\n-------\nDataFrame with DatetimeIndex", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 8228, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L8228", "errors": [["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Time series-related", "shared_code_with": ""}, "pandas.DataFrame.tz_convert": {"type": "function", "docstring": "Convert tz-aware axis to target time zone.\n\nParameters\n----------\ntz : str or tzinfo object\naxis : the axis to convert\nlevel : int, str, default None\n    If axis is a MultiIndex, convert a specific level. Otherwise\n    must be None.\ncopy : bool, default True\n    Also make a copy of the underlying data.\n\nReturns\n-------\n%(klass)s\n    Object with time zone converted axis.\n\nRaises\n------\nTypeError\n    If the axis is tz-naive.", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 9604, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L9604", "errors": [["PR07", "Parameter \"tz\" has no description"], ["PR07", "Parameter \"axis\" has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Time series-related", "shared_code_with": "pandas.Series.tz_convert"}, "pandas.DataFrame.tz_localize": {"type": "function", "docstring": "Localize tz-naive index of a Series or DataFrame to target time zone.\n\nThis operation localizes the Index. To localize the values in a\ntimezone-naive Series, use :meth:`Series.dt.tz_localize`.\n\nParameters\n----------\ntz : str or tzinfo\naxis : the axis to localize\nlevel : int, str, default None\n    If axis ia a MultiIndex, localize a specific level. Otherwise\n    must be None\ncopy : bool, default True\n    Also make a copy of the underlying data\nambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n    When clocks moved backward due to DST, ambiguous times may arise.\n    For example in Central European Time (UTC+01), when going from\n    03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n    00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n    `ambiguous` parameter dictates how ambiguous times should be\n    handled.\n\n    - 'infer' will attempt to infer fall dst-transition hours based on\n      order\n    - bool-ndarray where True signifies a DST time, False designates\n      a non-DST time (note that this flag is only applicable for\n      ambiguous times)\n    - 'NaT' will return NaT where there are ambiguous times\n    - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n      times\nnonexistent : str, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST. Valid values are:\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nSeries or DataFrame\n    Same type as the input.\n\nRaises\n------\nTypeError\n    If the TimeSeries is tz-aware and tz is not None.\n\nExamples\n--------\n\nLocalize local times:\n\n>>> s = pd.Series([1],\n... index=pd.DatetimeIndex(['2018-09-15 01:30:00']))\n>>> s.tz_localize('CET')\n2018-09-15 01:30:00+02:00    1\ndtype: int64\n\nBe careful with DST changes. When there is sequential data, pandas\ncan infer the DST time:\n\n>>> s = pd.Series(range(7), index=pd.DatetimeIndex([\n... '2018-10-28 01:30:00',\n... '2018-10-28 02:00:00',\n... '2018-10-28 02:30:00',\n... '2018-10-28 02:00:00',\n... '2018-10-28 02:30:00',\n... '2018-10-28 03:00:00',\n... '2018-10-28 03:30:00']))\n>>> s.tz_localize('CET', ambiguous='infer')\n2018-10-28 01:30:00+02:00    0\n2018-10-28 02:00:00+02:00    1\n2018-10-28 02:30:00+02:00    2\n2018-10-28 02:00:00+01:00    3\n2018-10-28 02:30:00+01:00    4\n2018-10-28 03:00:00+01:00    5\n2018-10-28 03:30:00+01:00    6\ndtype: int64\n\nIn some cases, inferring the DST is impossible. In such cases, you can\npass an ndarray to the ambiguous parameter to set the DST explicitly\n\n>>> s = pd.Series(range(3), index=pd.DatetimeIndex([\n... '2018-10-28 01:20:00',\n... '2018-10-28 02:36:00',\n... '2018-10-28 03:46:00']))\n>>> s.tz_localize('CET', ambiguous=np.array([True, True, False]))\n2018-10-28 01:20:00+02:00    0\n2018-10-28 02:36:00+02:00    1\n2018-10-28 03:46:00+01:00    2\ndtype: int64\n\nIf the DST transition causes nonexistent times, you can shift these\ndates forward or backwards with a timedelta object or `'shift_forward'`\nor `'shift_backwards'`.\n>>> s = pd.Series(range(2), index=pd.DatetimeIndex([\n... '2015-03-29 02:30:00',\n... '2015-03-29 03:30:00']))\n>>> s.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\n2015-03-29 03:00:00+02:00    0\n2015-03-29 03:30:00+02:00    1\ndtype: int64\n>>> s.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\n2015-03-29 01:59:59.999999999+01:00    0\n2015-03-29 03:30:00+02:00              1\ndtype: int64\n>>> s.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1H'))\n2015-03-29 03:30:00+02:00    0\n2015-03-29 03:30:00+02:00    1\ndtype: int64", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 9659, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L9659", "errors": [["PR07", "Parameter \"tz\" has no description"], ["PR07", "Parameter \"axis\" has no description"], ["PR09", "Parameter \"level\" description should finish with \".\""], ["PR09", "Parameter \"copy\" description should finish with \".\""], ["PR09", "Parameter \"ambiguous\" description should finish with \".\""], ["PR09", "Parameter \"nonexistent\" description should finish with \".\""], ["EX03", "flake8 error: E122 continuation line missing indentation or outdented (12 times)"], ["EX03", "flake8 error: E128 continuation line under-indented for visual indent"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Time series-related", "shared_code_with": "pandas.Series.tz_localize"}, "pandas.DataFrame.plot": {"type": "type", "docstring": "Make plots of Series or DataFrame using the backend specified by the\noption ``plotting.backend``. By default, matplotlib is used.\n\nParameters\n----------\ndata : Series or DataFrame\n    The object for which the method is called\nx : label or position, default None\n    Only used if data is a DataFrame.\ny : label, position or list of label, positions, default None\n    Allows plotting of one column versus another. Only used if data is a\n    DataFrame.\nkind : str\n    - 'line' : line plot (default)\n    - 'bar' : vertical bar plot\n    - 'barh' : horizontal bar plot\n    - 'hist' : histogram\n    - 'box' : boxplot\n    - 'kde' : Kernel Density Estimation plot\n    - 'density' : same as 'kde'\n    - 'area' : area plot\n    - 'pie' : pie plot\n    - 'scatter' : scatter plot\n    - 'hexbin' : hexbin plot\nfigsize : a tuple (width, height) in inches\nuse_index : bool, default True\n    Use index as ticks for x axis\ntitle : str or list\n    Title to use for the plot. If a string is passed, print the string\n    at the top of the figure. If a list is passed and `subplots` is\n    True, print each item in the list above the corresponding subplot.\ngrid : bool, default None (matlab style default)\n    Axis grid lines\nlegend : False/True/'reverse'\n    Place legend on axis subplots\nstyle : list or dict\n    matplotlib line style per column\nlogx : bool or 'sym', default False\n    Use log scaling or symlog scaling on x axis\n    .. versionchanged:: 0.25.0\n\nlogy : bool or 'sym' default False\n    Use log scaling or symlog scaling on y axis\n    .. versionchanged:: 0.25.0\n\nloglog : bool or 'sym', default False\n    Use log scaling or symlog scaling on both x and y axes\n    .. versionchanged:: 0.25.0\n\nxticks : sequence\n    Values to use for the xticks.\nyticks : sequence\n    Values to use for the yticks.\nxlim : 2-tuple/list\nylim : 2-tuple/list\nrot : int, default None\n    Rotation for ticks (xticks for vertical, yticks for horizontal\n    plots)\nfontsize : int, default None\n    Font size for xticks and yticks.\ncolormap : str or matplotlib colormap object, default None\n    Colormap to select colors from. If string, load colormap with that\n    name from matplotlib.\ncolorbar : bool, optional\n    If True, plot colorbar (only relevant for 'scatter' and 'hexbin'\n    plots)\nposition : float\n    Specify relative alignments for bar plot layout.\n    From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5\n    (center)\ntable : bool, Series or DataFrame, default False\n    If True, draw a table using the data in the DataFrame and the data\n    will be transposed to meet matplotlib's default layout.\n    If a Series or DataFrame is passed, use passed data to draw a\n    table.\nyerr : DataFrame, Series, array-like, dict and str\n    See :ref:`Plotting with Error Bars <visualization.errorbars>` for\n    detail.\nxerr : DataFrame, Series, array-like, dict and str\n    Equivalent to yerr.\nmark_right : bool, default True\n    When using a secondary_y axis, automatically mark the column\n    labels with \"(right)\" in the legend\ninclude_bool : bool, default is False\n    If True, boolean values can be plotted.\n`**kwds` : keywords\n    Options to pass to matplotlib plotting method.\n\nReturns\n-------\n:class:`matplotlib.axes.Axes` or numpy.ndarray of them\n    If the backend is not the default matplotlib one, the return value\n    will be the object returned by the backend.\n\nNotes\n-----\n- See matplotlib documentation online for more on this subject\n- If `kind` = 'bar' or 'barh', you can specify relative alignments\n  for bar plot layout by `position` keyword.\n  From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5\n  (center)", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 504, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L504", "errors": [["SS06", "Summary should fit in a single line"], ["PR02", "Unknown parameters {`**kwds`, logy, position, kind, figsize, y, ylim, fontsize, xerr, mark_right, loglog, yticks, xlim, table, rot, logx, include_bool, use_index, legend, x, xticks, colorbar, grid, title, colormap, style, yerr}"], ["PR09", "Parameter \"data\" description should finish with \".\""], ["PR08", "Parameter \"kind\" description should start with a capital letter"], ["PR09", "Parameter \"kind\" description should finish with \".\""], ["PR07", "Parameter \"figsize\" has no description"], ["PR09", "Parameter \"use_index\" description should finish with \".\""], ["PR09", "Parameter \"grid\" description should finish with \".\""], ["PR09", "Parameter \"legend\" description should finish with \".\""], ["PR08", "Parameter \"style\" description should start with a capital letter"], ["PR09", "Parameter \"style\" description should finish with \".\""], ["PR09", "Parameter \"logx\" description should finish with \".\""], ["PR09", "Parameter \"logy\" description should finish with \".\""], ["PR09", "Parameter \"loglog\" description should finish with \".\""], ["PR07", "Parameter \"xlim\" has no description"], ["PR07", "Parameter \"ylim\" has no description"], ["PR09", "Parameter \"rot\" description should finish with \".\""], ["PR09", "Parameter \"colorbar\" description should finish with \".\""], ["PR09", "Parameter \"position\" description should finish with \".\""], ["PR09", "Parameter \"mark_right\" description should finish with \".\""]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Plotting", "shared_code_with": "pandas.Series.plot"}, "pandas.DataFrame.plot.area": {"type": "function", "docstring": "Draw a stacked area plot.\n\nAn area plot displays quantitative data visually.\nThis function wraps the matplotlib area function.\n\nParameters\n----------\nx : label or position, optional\n    Coordinates for the X axis. By default uses the index.\ny : label or position, optional\n    Column to plot. By default uses all columns.\nstacked : bool, default True\n    Area plots are stacked by default. Set to False to create a\n    unstacked plot.\n**kwds : optional\n    Additional keyword arguments are documented in\n    :meth:`DataFrame.plot`.\n\nReturns\n-------\nmatplotlib.axes.Axes or numpy.ndarray\n    Area plot, or array of area plots if subplots is True.\n\nSee Also\n--------\nDataFrame.plot : Make plots of DataFrame using matplotlib / pylab.\n\nExamples\n--------\nDraw an area plot based on basic business metrics:\n\n.. plot::\n    :context: close-figs\n\n    >>> df = pd.DataFrame({\n    ...     'sales': [3, 2, 3, 9, 10, 6],\n    ...     'signups': [5, 5, 6, 12, 14, 13],\n    ...     'visits': [20, 42, 28, 62, 81, 50],\n    ... }, index=pd.date_range(start='2018/01/01', end='2018/07/01',\n    ...                        freq='M'))\n    >>> ax = df.plot.area()\n\nArea plots are stacked by default. To produce an unstacked plot,\npass ``stacked=False``:\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = df.plot.area(stacked=False)\n\nDraw an area plot for a single column:\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = df.plot.area(y='sales')\n\nDraw with a different `x`:\n\n.. plot::\n    :context: close-figs\n\n    >>> df = pd.DataFrame({\n    ...     'sales': [3, 2, 3],\n    ...     'visits': [20, 42, 28],\n    ...     'day': [1, 2, 3],\n    ... })\n    >>> ax = df.plot.area(x='day')", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 1239, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L1239", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {**kwds, stacked}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Plotting", "shared_code_with": "pandas.Series.plot.area"}, "pandas.DataFrame.plot.bar": {"type": "function", "docstring": "Vertical bar plot.\n\nA bar plot is a plot that presents categorical data with\nrectangular bars with lengths proportional to the values that they\nrepresent. A bar plot shows comparisons among discrete categories. One\naxis of the plot shows the specific categories being compared, and the\nother axis represents a measured value.\n\nParameters\n----------\nx : label or position, optional\n    Allows plotting of one column versus another. If not specified,\n    the index of the DataFrame is used.\ny : label or position, optional\n    Allows plotting of one column versus another. If not specified,\n    all numerical columns are used.\n**kwds\n    Additional keyword arguments are documented in\n    :meth:`DataFrame.plot`.\n\nReturns\n-------\nmatplotlib.axes.Axes or np.ndarray of them\n    An ndarray is returned with one :class:`matplotlib.axes.Axes`\n    per column when ``subplots=True``.\n\nSee Also\n--------\nDataFrame.plot.barh : Horizontal bar plot.\nDataFrame.plot : Make plots of a DataFrame.\nmatplotlib.pyplot.bar : Make a bar plot with matplotlib.\n\nExamples\n--------\nBasic plot.\n\n.. plot::\n    :context: close-figs\n\n    >>> df = pd.DataFrame({'lab':['A', 'B', 'C'], 'val':[10, 30, 20]})\n    >>> ax = df.plot.bar(x='lab', y='val', rot=0)\n\nPlot a whole dataframe to a bar plot. Each column is assigned a\ndistinct color, and each row is nested in a group along the\nhorizontal axis.\n\n.. plot::\n    :context: close-figs\n\n    >>> speed = [0.1, 17.5, 40, 48, 52, 69, 88]\n    >>> lifespan = [2, 8, 70, 1.5, 25, 12, 28]\n    >>> index = ['snail', 'pig', 'elephant',\n    ...          'rabbit', 'giraffe', 'coyote', 'horse']\n    >>> df = pd.DataFrame({'speed': speed,\n    ...                    'lifespan': lifespan}, index=index)\n    >>> ax = df.plot.bar(rot=0)\n\nInstead of nesting, the figure can be split by column with\n``subplots=True``. In this case, a :class:`numpy.ndarray` of\n:class:`matplotlib.axes.Axes` are returned.\n\n.. plot::\n    :context: close-figs\n\n    >>> axes = df.plot.bar(rot=0, subplots=True)\n    >>> axes[1].legend(loc=2)  # doctest: +SKIP\n\nPlot a single column.\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = df.plot.bar(y='speed', rot=0)\n\nPlot only selected categories for the DataFrame.\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = df.plot.bar(x='lifespan', rot=0)", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 867, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L867", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {**kwds}"], ["EX03", "flake8 error: E231 missing whitespace after ':' (2 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Plotting", "shared_code_with": "pandas.Series.plot.bar"}, "pandas.DataFrame.plot.barh": {"type": "function", "docstring": "Make a horizontal bar plot.\n\nA horizontal bar plot is a plot that presents quantitative data with\nrectangular bars with lengths proportional to the values that they\nrepresent. A bar plot shows comparisons among discrete categories. One\naxis of the plot shows the specific categories being compared, and the\nother axis represents a measured value.\n\nParameters\n----------\nx : label or position, default DataFrame.index\n    Column to be used for categories.\ny : label or position, default All numeric columns in dataframe\n    Columns to be plotted from the DataFrame.\n**kwds\n    Keyword arguments to pass on to :meth:`DataFrame.plot`.\n\nReturns\n-------\n:class:`matplotlib.axes.Axes` or numpy.ndarray of them\n\nSee Also\n--------\nDataFrame.plot.bar: Vertical bar plot.\nDataFrame.plot : Make plots of DataFrame using matplotlib.\nmatplotlib.axes.Axes.bar : Plot a vertical bar plot using matplotlib.\n\nExamples\n--------\nBasic example\n\n.. plot::\n    :context: close-figs\n\n    >>> df = pd.DataFrame({'lab': ['A', 'B', 'C'], 'val': [10, 30, 20]})\n    >>> ax = df.plot.barh(x='lab', y='val')\n\nPlot a whole DataFrame to a horizontal bar plot\n\n.. plot::\n    :context: close-figs\n\n    >>> speed = [0.1, 17.5, 40, 48, 52, 69, 88]\n    >>> lifespan = [2, 8, 70, 1.5, 25, 12, 28]\n    >>> index = ['snail', 'pig', 'elephant',\n    ...          'rabbit', 'giraffe', 'coyote', 'horse']\n    >>> df = pd.DataFrame({'speed': speed,\n    ...                    'lifespan': lifespan}, index=index)\n    >>> ax = df.plot.barh()\n\nPlot a column of the DataFrame to a horizontal bar plot\n\n.. plot::\n    :context: close-figs\n\n    >>> speed = [0.1, 17.5, 40, 48, 52, 69, 88]\n    >>> lifespan = [2, 8, 70, 1.5, 25, 12, 28]\n    >>> index = ['snail', 'pig', 'elephant',\n    ...          'rabbit', 'giraffe', 'coyote', 'horse']\n    >>> df = pd.DataFrame({'speed': speed,\n    ...                    'lifespan': lifespan}, index=index)\n    >>> ax = df.plot.barh(y='speed')\n\nPlot DataFrame versus the desired column\n\n.. plot::\n    :context: close-figs\n\n    >>> speed = [0.1, 17.5, 40, 48, 52, 69, 88]\n    >>> lifespan = [2, 8, 70, 1.5, 25, 12, 28]\n    >>> index = ['snail', 'pig', 'elephant',\n    ...          'rabbit', 'giraffe', 'coyote', 'horse']\n    >>> df = pd.DataFrame({'speed': speed,\n    ...                    'lifespan': lifespan}, index=index)\n    >>> ax = df.plot.barh(x='lifespan')", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 952, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L952", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {**kwds}"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Plotting", "shared_code_with": "pandas.Series.plot.barh"}, "pandas.DataFrame.plot.box": {"type": "function", "docstring": "Make a box plot of the DataFrame columns.\n\nA box plot is a method for graphically depicting groups of numerical\ndata through their quartiles.\nThe box extends from the Q1 to Q3 quartile values of the data,\nwith a line at the median (Q2). The whiskers extend from the edges\nof box to show the range of the data. The position of the whiskers\nis set by default to 1.5*IQR (IQR = Q3 - Q1) from the edges of the\nbox. Outlier points are those past the end of the whiskers.\n\nFor further details see Wikipedia's\nentry for `boxplot <https://en.wikipedia.org/wiki/Box_plot>`__.\n\nA consideration when using this chart is that the box and the whiskers\ncan overlap, which is very common when plotting small sets of data.\n\nParameters\n----------\nby : str or sequence\n    Column in the DataFrame to group by.\n**kwds : optional\n    Additional keywords are documented in\n    :meth:`DataFrame.plot`.\n\nReturns\n-------\n:class:`matplotlib.axes.Axes` or numpy.ndarray of them\n\nSee Also\n--------\nDataFrame.boxplot: Another method to draw a box plot.\nSeries.plot.box: Draw a box plot from a Series object.\nmatplotlib.pyplot.boxplot: Draw a box plot in matplotlib.\n\nExamples\n--------\nDraw a box plot from a DataFrame with four columns of randomly\ngenerated data.\n\n.. plot::\n    :context: close-figs\n\n    >>> data = np.random.randn(25, 4)\n    >>> df = pd.DataFrame(data, columns=list('ABCD'))\n    >>> ax = df.plot.box()", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 1032, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L1032", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {**kwds}"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Plotting", "shared_code_with": "pandas.Series.plot.box"}, "pandas.DataFrame.plot.density": {"type": "function", "docstring": "Generate Kernel Density Estimate plot using Gaussian kernels.\n\nIn statistics, `kernel density estimation`_ (KDE) is a non-parametric\nway to estimate the probability density function (PDF) of a random\nvariable. This function uses Gaussian kernels and includes automatic\nbandwidth determination.\n\n.. _kernel density estimation:\n    https://en.wikipedia.org/wiki/Kernel_density_estimation\n\nParameters\n----------\nbw_method : str, scalar or callable, optional\n    The method used to calculate the estimator bandwidth. This can be\n    'scott', 'silverman', a scalar constant or a callable.\n    If None (default), 'scott' is used.\n    See :class:`scipy.stats.gaussian_kde` for more information.\nind : NumPy array or integer, optional\n    Evaluation points for the estimated PDF. If None (default),\n    1000 equally spaced points are used. If `ind` is a NumPy array, the\n    KDE is evaluated at the points passed. If `ind` is an integer,\n    `ind` number of equally spaced points are used.\n**kwds : optional\n    Additional keyword arguments are documented in\n    :meth:`pandas.%(this-datatype)s.plot`.\n\nReturns\n-------\nmatplotlib.axes.Axes or numpy.ndarray of them\n\nSee Also\n--------\nscipy.stats.gaussian_kde : Representation of a kernel-density\n    estimate using Gaussian kernels. This is the function used\n    internally to estimate the PDF.\n\nExamples\n--------\nGiven a Series of points randomly sampled from an unknown\ndistribution, estimate its PDF using KDE with automatic\nbandwidth determination and plot the results, evaluating them at\n1000 equally spaced points (default):\n\n.. plot::\n    :context: close-figs\n\n    >>> s = pd.Series([1, 2, 2.5, 3, 3.5, 4, 5])\n    >>> ax = s.plot.kde()\n\nA scalar bandwidth can be specified. Using a small bandwidth value can\nlead to over-fitting, while using a large bandwidth value may result\nin under-fitting:\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = s.plot.kde(bw_method=0.3)\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = s.plot.kde(bw_method=3)\n\nFinally, the `ind` parameter determines the evaluation points for the\nplot of the estimated PDF:\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = s.plot.kde(ind=[1, 2, 3, 4, 5])\n\nFor DataFrame, it works in the same way:\n\n.. plot::\n    :context: close-figs\n\n    >>> df = pd.DataFrame({\n    ...     'x': [1, 2, 2.5, 3, 3.5, 4, 5],\n    ...     'y': [4, 4, 4.5, 5, 5.5, 6, 6],\n    ... })\n    >>> ax = df.plot.kde()\n\nA scalar bandwidth can be specified. Using a small bandwidth value can\nlead to over-fitting, while using a large bandwidth value may result\nin under-fitting:\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = df.plot.kde(bw_method=0.3)\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = df.plot.kde(bw_method=3)\n\nFinally, the `ind` parameter determines the evaluation points for the\nplot of the estimated PDF:\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = df.plot.kde(ind=[1, 2, 3, 4, 5, 6])", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 1129, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L1129", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {**kwds}"], ["PR06", "Parameter \"ind\" type should use \"int\" instead of \"integer\""], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Plotting", "shared_code_with": "pandas.Series.plot.kde"}, "pandas.DataFrame.plot.hexbin": {"type": "function", "docstring": "Generate a hexagonal binning plot.\n\nGenerate a hexagonal binning plot of `x` versus `y`. If `C` is `None`\n(the default), this is a histogram of the number of occurrences\nof the observations at ``(x[i], y[i])``.\n\nIf `C` is specified, specifies values at given coordinates\n``(x[i], y[i])``. These values are accumulated for each hexagonal\nbin and then reduced according to `reduce_C_function`,\nhaving as default the NumPy's mean function (:meth:`numpy.mean`).\n(If `C` is specified, it must also be a 1-D sequence\nof the same length as `x` and `y`, or a column label.)\n\nParameters\n----------\nx : int or str\n    The column label or position for x points.\ny : int or str\n    The column label or position for y points.\nC : int or str, optional\n    The column label or position for the value of `(x, y)` point.\nreduce_C_function : callable, default `np.mean`\n    Function of one argument that reduces all the values in a bin to\n    a single number (e.g. `np.mean`, `np.max`, `np.sum`, `np.std`).\ngridsize : int or tuple of (int, int), default 100\n    The number of hexagons in the x-direction.\n    The corresponding number of hexagons in the y-direction is\n    chosen in a way that the hexagons are approximately regular.\n    Alternatively, gridsize can be a tuple with two elements\n    specifying the number of hexagons in the x-direction and the\n    y-direction.\n**kwds\n    Additional keyword arguments are documented in\n    :meth:`DataFrame.plot`.\n\nReturns\n-------\nmatplotlib.AxesSubplot\n    The matplotlib ``Axes`` on which the hexbin is plotted.\n\nSee Also\n--------\nDataFrame.plot : Make plots of a DataFrame.\nmatplotlib.pyplot.hexbin : Hexagonal binning plot using matplotlib,\n    the matplotlib function that is used under the hood.\n\nExamples\n--------\nThe following examples are generated with random data from\na normal distribution.\n\n.. plot::\n    :context: close-figs\n\n    >>> n = 10000\n    >>> df = pd.DataFrame({'x': np.random.randn(n),\n    ...                    'y': np.random.randn(n)})\n    >>> ax = df.plot.hexbin(x='x', y='y', gridsize=20)\n\nThe next example uses `C` and `np.sum` as `reduce_C_function`.\nNote that `'observations'` values ranges from 1 to 5 but the result\nplot shows values up to more than 25. This is because of the\n`reduce_C_function`.\n\n.. plot::\n    :context: close-figs\n\n    >>> n = 500\n    >>> df = pd.DataFrame({\n    ...     'coord_x': np.random.uniform(-3, 3, size=n),\n    ...     'coord_y': np.random.uniform(30, 50, size=n),\n    ...     'observations': np.random.randint(1,5, size=n)\n    ...     })\n    >>> ax = df.plot.hexbin(x='coord_x',\n    ...                     y='coord_y',\n    ...                     C='observations',\n    ...                     reduce_C_function=np.sum,\n    ...                     gridsize=10,\n    ...                     cmap=\"viridis\")", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 1448, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L1448", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {**kwds}"], ["EX03", "flake8 error: E123 closing bracket does not match indentation of opening bracket's line"], ["EX03", "flake8 error: E231 missing whitespace after ','"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Plotting", "shared_code_with": ""}, "pandas.DataFrame.plot.hist": {"type": "function", "docstring": "Draw one histogram of the DataFrame's columns.\n\nA histogram is a representation of the distribution of data.\nThis function groups the values of all given Series in the DataFrame\ninto bins and draws all bins in one :class:`matplotlib.axes.Axes`.\nThis is useful when the DataFrame's Series are in a similar scale.\n\nParameters\n----------\nby : str or sequence, optional\n    Column in the DataFrame to group by.\nbins : int, default 10\n    Number of histogram bins to be used.\n**kwds\n    Additional keyword arguments are documented in\n    :meth:`DataFrame.plot`.\n\nReturns\n-------\nclass:`matplotlib.AxesSubplot`\n    Return a histogram plot.\n\nSee Also\n--------\nDataFrame.hist : Draw histograms per DataFrame's Series.\nSeries.hist : Draw a histogram with Series' data.\n\nExamples\n--------\nWhen we draw a dice 6000 times, we expect to get each value around 1000\ntimes. But when we draw two dices and sum the result, the distribution\nis going to be quite different. A histogram illustrates those\ndistributions.\n\n.. plot::\n    :context: close-figs\n\n    >>> df = pd.DataFrame(\n    ...     np.random.randint(1, 7, 6000),\n    ...     columns = ['one'])\n    >>> df['two'] = df['one'] + np.random.randint(1, 7, 6000)\n    >>> ax = df.plot.hist(bins=12, alpha=0.5)", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 1082, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L1082", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {**kwds}"], ["EX03", "flake8 error: E251 unexpected spaces around keyword / parameter equals (2 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Plotting", "shared_code_with": "pandas.Series.plot.hist"}, "pandas.DataFrame.plot.kde": {"type": "function", "docstring": "Generate Kernel Density Estimate plot using Gaussian kernels.\n\nIn statistics, `kernel density estimation`_ (KDE) is a non-parametric\nway to estimate the probability density function (PDF) of a random\nvariable. This function uses Gaussian kernels and includes automatic\nbandwidth determination.\n\n.. _kernel density estimation:\n    https://en.wikipedia.org/wiki/Kernel_density_estimation\n\nParameters\n----------\nbw_method : str, scalar or callable, optional\n    The method used to calculate the estimator bandwidth. This can be\n    'scott', 'silverman', a scalar constant or a callable.\n    If None (default), 'scott' is used.\n    See :class:`scipy.stats.gaussian_kde` for more information.\nind : NumPy array or integer, optional\n    Evaluation points for the estimated PDF. If None (default),\n    1000 equally spaced points are used. If `ind` is a NumPy array, the\n    KDE is evaluated at the points passed. If `ind` is an integer,\n    `ind` number of equally spaced points are used.\n**kwds : optional\n    Additional keyword arguments are documented in\n    :meth:`pandas.%(this-datatype)s.plot`.\n\nReturns\n-------\nmatplotlib.axes.Axes or numpy.ndarray of them\n\nSee Also\n--------\nscipy.stats.gaussian_kde : Representation of a kernel-density\n    estimate using Gaussian kernels. This is the function used\n    internally to estimate the PDF.\n\nExamples\n--------\nGiven a Series of points randomly sampled from an unknown\ndistribution, estimate its PDF using KDE with automatic\nbandwidth determination and plot the results, evaluating them at\n1000 equally spaced points (default):\n\n.. plot::\n    :context: close-figs\n\n    >>> s = pd.Series([1, 2, 2.5, 3, 3.5, 4, 5])\n    >>> ax = s.plot.kde()\n\nA scalar bandwidth can be specified. Using a small bandwidth value can\nlead to over-fitting, while using a large bandwidth value may result\nin under-fitting:\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = s.plot.kde(bw_method=0.3)\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = s.plot.kde(bw_method=3)\n\nFinally, the `ind` parameter determines the evaluation points for the\nplot of the estimated PDF:\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = s.plot.kde(ind=[1, 2, 3, 4, 5])\n\nFor DataFrame, it works in the same way:\n\n.. plot::\n    :context: close-figs\n\n    >>> df = pd.DataFrame({\n    ...     'x': [1, 2, 2.5, 3, 3.5, 4, 5],\n    ...     'y': [4, 4, 4.5, 5, 5.5, 6, 6],\n    ... })\n    >>> ax = df.plot.kde()\n\nA scalar bandwidth can be specified. Using a small bandwidth value can\nlead to over-fitting, while using a large bandwidth value may result\nin under-fitting:\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = df.plot.kde(bw_method=0.3)\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = df.plot.kde(bw_method=3)\n\nFinally, the `ind` parameter determines the evaluation points for the\nplot of the estimated PDF:\n\n.. plot::\n    :context: close-figs\n\n    >>> ax = df.plot.kde(ind=[1, 2, 3, 4, 5, 6])", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 1129, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L1129", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {**kwds}"], ["PR06", "Parameter \"ind\" type should use \"int\" instead of \"integer\""], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Plotting", "shared_code_with": "pandas.DataFrame.plot.density"}, "pandas.DataFrame.plot.line": {"type": "function", "docstring": "Plot Series or DataFrame as lines.\n\nThis function is useful to plot lines using DataFrame's values\nas coordinates.\n\nParameters\n----------\nx : int or str, optional\n    Columns to use for the horizontal axis.\n    Either the location or the label of the columns to be used.\n    By default, it will use the DataFrame indices.\ny : int, str, or list of them, optional\n    The values to be plotted.\n    Either the location or the label of the columns to be used.\n    By default, it will use the remaining DataFrame numeric columns.\n**kwds\n    Keyword arguments to pass on to :meth:`DataFrame.plot`.\n\nReturns\n-------\n:class:`matplotlib.axes.Axes` or :class:`numpy.ndarray`\n    Return an ndarray when ``subplots=True``.\n\nSee Also\n--------\nmatplotlib.pyplot.plot : Plot y versus x as lines and/or markers.\n\nExamples\n--------\n\n.. plot::\n    :context: close-figs\n\n    >>> s = pd.Series([1, 3, 2])\n    >>> s.plot.line()\n\n.. plot::\n    :context: close-figs\n\n    The following example shows the populations for some animals\n    over the years.\n\n    >>> df = pd.DataFrame({\n    ...    'pig': [20, 18, 489, 675, 1776],\n    ...    'horse': [4, 25, 281, 600, 1900]\n    ...    }, index=[1990, 1997, 2003, 2009, 2014])\n    >>> lines = df.plot.line()\n\n.. plot::\n   :context: close-figs\n\n   An example with subplots, so an array of axes is returned.\n\n   >>> axes = df.plot.line(subplots=True)\n   >>> type(axes)\n   <class 'numpy.ndarray'>\n\n.. plot::\n    :context: close-figs\n\n    The following example shows the relationship between both\n    populations.\n\n    >>> lines = df.plot.line(x='pig', y='horse')", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 798, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L798", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {**kwds}"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 36, in pandas.DataFrame.plot.line\nFailed example:\n    s.plot.line()\nExpected nothing\nGot:\n    <matplotlib.axes._subplots.AxesSubplot object at 0x1c22995a10>\n"], ["EX03", "flake8 error: E121 continuation line under-indented for hanging indent"], ["EX03", "flake8 error: E123 closing bracket does not match indentation of opening bracket's line"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 36, in pandas.DataFrame.plot.line\nFailed example:\n    s.plot.line()\nExpected nothing\nGot:\n    <matplotlib.axes._subplots.AxesSubplot object at 0x1c22995a10>\n", "in_api": true, "section": "", "subsection": "Plotting", "shared_code_with": "pandas.Series.plot.line"}, "pandas.DataFrame.plot.pie": {"type": "function", "docstring": "Generate a pie plot.\n\nA pie plot is a proportional representation of the numerical data in a\ncolumn. This function wraps :meth:`matplotlib.pyplot.pie` for the\nspecified column. If no column reference is passed and\n``subplots=True`` a pie plot is drawn for each numerical column\nindependently.\n\nParameters\n----------\ny : int or label, optional\n    Label or position of the column to plot.\n    If not provided, ``subplots=True`` argument must be passed.\n**kwds\n    Keyword arguments to pass on to :meth:`DataFrame.plot`.\n\nReturns\n-------\nmatplotlib.axes.Axes or np.ndarray of them\n    A NumPy array is returned when `subplots` is True.\n\nSee Also\n--------\nSeries.plot.pie : Generate a pie plot for a Series.\nDataFrame.plot : Make plots of a DataFrame.\n\nExamples\n--------\nIn the example below we have a DataFrame with the information about\nplanet's mass and radius. We pass the the 'mass' column to the\npie function to get a pie plot.\n\n.. plot::\n    :context: close-figs\n\n    >>> df = pd.DataFrame({'mass': [0.330, 4.87 , 5.97],\n    ...                    'radius': [2439.7, 6051.8, 6378.1]},\n    ...                   index=['Mercury', 'Venus', 'Earth'])\n    >>> plot = df.plot.pie(y='mass', figsize=(5, 5))\n\n.. plot::\n    :context: close-figs\n\n    >>> plot = df.plot.pie(subplots=True, figsize=(6, 3))", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 1312, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L1312", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {**kwds, y}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Plotting", "shared_code_with": "pandas.Series.plot.pie"}, "pandas.DataFrame.plot.scatter": {"type": "function", "docstring": "Create a scatter plot with varying marker point size and color.\n\nThe coordinates of each point are defined by two dataframe columns and\nfilled circles are used to represent each point. This kind of plot is\nuseful to see complex correlations between two variables. Points could\nbe for instance natural 2D coordinates like longitude and latitude in\na map or, in general, any pair of metrics that can be plotted against\neach other.\n\nParameters\n----------\nx : int or str\n    The column name or column position to be used as horizontal\n    coordinates for each point.\ny : int or str\n    The column name or column position to be used as vertical\n    coordinates for each point.\ns : scalar or array_like, optional\n    The size of each point. Possible values are:\n\n    - A single scalar so all points have the same size.\n\n    - A sequence of scalars, which will be used for each point's size\n      recursively. For instance, when passing [2,14] all points size\n      will be either 2 or 14, alternatively.\n\nc : str, int or array_like, optional\n    The color of each point. Possible values are:\n\n    - A single color string referred to by name, RGB or RGBA code,\n      for instance 'red' or '#a98d19'.\n\n    - A sequence of color strings referred to by name, RGB or RGBA\n      code, which will be used for each point's color recursively. For\n      instance ['green','yellow'] all points will be filled in green or\n      yellow, alternatively.\n\n    - A column name or position whose values will be used to color the\n      marker points according to a colormap.\n\n**kwds\n    Keyword arguments to pass on to :meth:`DataFrame.plot`.\n\nReturns\n-------\n:class:`matplotlib.axes.Axes` or numpy.ndarray of them\n\nSee Also\n--------\nmatplotlib.pyplot.scatter : Scatter plot using multiple input data\n    formats.\n\nExamples\n--------\nLet's see how to draw a scatter plot using coordinates from the values\nin a DataFrame's columns.\n\n.. plot::\n    :context: close-figs\n\n    >>> df = pd.DataFrame([[5.1, 3.5, 0], [4.9, 3.0, 0], [7.0, 3.2, 1],\n    ...                    [6.4, 3.2, 1], [5.9, 3.0, 2]],\n    ...                   columns=['length', 'width', 'species'])\n    >>> ax1 = df.plot.scatter(x='length',\n    ...                       y='width',\n    ...                       c='DarkBlue')\n\nAnd now with the color determined by a column as well.\n\n.. plot::\n    :context: close-figs\n\n    >>> ax2 = df.plot.scatter(x='length',\n    ...                       y='width',\n    ...                       c='species',\n    ...                       colormap='viridis')", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 1367, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L1367", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {**kwds}"], ["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Plotting", "shared_code_with": ""}, "pandas.DataFrame.boxplot": {"type": "function", "docstring": "Make a box plot from DataFrame columns.\n\nMake a box-and-whisker plot from DataFrame columns, optionally grouped\nby some other columns. A box plot is a method for graphically depicting\ngroups of numerical data through their quartiles.\nThe box extends from the Q1 to Q3 quartile values of the data,\nwith a line at the median (Q2). The whiskers extend from the edges\nof box to show the range of the data. The position of the whiskers\nis set by default to `1.5 * IQR (IQR = Q3 - Q1)` from the edges of the box.\nOutlier points are those past the end of the whiskers.\n\nFor further details see\nWikipedia's entry for `boxplot <https://en.wikipedia.org/wiki/Box_plot>`_.\n\nParameters\n----------\ncolumn : str or list of str, optional\n    Column name or list of names, or vector.\n    Can be any valid input to :meth:`pandas.DataFrame.groupby`.\nby : str or array-like, optional\n    Column in the DataFrame to :meth:`pandas.DataFrame.groupby`.\n    One box-plot will be done per value of columns in `by`.\nax : object of class matplotlib.axes.Axes, optional\n    The matplotlib axes to be used by boxplot.\nfontsize : float or str\n    Tick label font size in points or as a string (e.g., `large`).\nrot : int or float, default 0\n    The rotation angle of labels (in degrees)\n    with respect to the screen coordinate system.\ngrid : bool, default True\n    Setting this to True will show the grid.\nfigsize : A tuple (width, height) in inches\n    The size of the figure to create in matplotlib.\nlayout : tuple (rows, columns), optional\n    For example, (3, 5) will display the subplots\n    using 3 columns and 5 rows, starting from the top-left.\nreturn_type : {'axes', 'dict', 'both'} or None, default 'axes'\n    The kind of object to return. The default is ``axes``.\n\n    * 'axes' returns the matplotlib axes the boxplot is drawn on.\n    * 'dict' returns a dictionary whose values are the matplotlib\n      Lines of the boxplot.\n    * 'both' returns a namedtuple with the axes and dict.\n    * when grouping with ``by``, a Series mapping columns to\n      ``return_type`` is returned.\n\n      If ``return_type`` is `None`, a NumPy array\n      of axes with the same shape as ``layout`` is returned.\n**kwds\n    All other plotting keyword arguments to be passed to\n    :func:`matplotlib.pyplot.boxplot`.\n\nReturns\n-------\nresult\n    See Notes.\n\nSee Also\n--------\nSeries.plot.hist: Make a histogram.\nmatplotlib.pyplot.boxplot : Matplotlib equivalent plot.\n\nNotes\n-----\nThe return type depends on the `return_type` parameter:\n\n* 'axes' : object of class matplotlib.axes.Axes\n* 'dict' : dict of matplotlib.lines.Line2D objects\n* 'both' : a namedtuple with structure (ax, lines)\n\nFor data grouped with ``by``, return a Series of the above or a numpy\narray:\n\n* :class:`~pandas.Series`\n* :class:`~numpy.array` (for ``return_type = None``)\n\nUse ``return_type='dict'`` when you want to tweak the appearance\nof the lines after plotting. In this case a dict containing the Lines\nmaking up the boxes, caps, fliers, medians, and whiskers is returned.\n\nExamples\n--------\n\nBoxplots can be created for every column in the dataframe\nby ``df.boxplot()`` or indicating the columns to be used:\n\n.. plot::\n    :context: close-figs\n\n    >>> np.random.seed(1234)\n    >>> df = pd.DataFrame(np.random.randn(10,4),\n    ...                   columns=['Col1', 'Col2', 'Col3', 'Col4'])\n    >>> boxplot = df.boxplot(column=['Col1', 'Col2', 'Col3'])\n\nBoxplots of variables distributions grouped by the values of a third\nvariable can be created using the option ``by``. For instance:\n\n.. plot::\n    :context: close-figs\n\n    >>> df = pd.DataFrame(np.random.randn(10, 2),\n    ...                   columns=['Col1', 'Col2'])\n    >>> df['X'] = pd.Series(['A', 'A', 'A', 'A', 'A',\n    ...                      'B', 'B', 'B', 'B', 'B'])\n    >>> boxplot = df.boxplot(by='X')\n\nA list of strings (i.e. ``['X', 'Y']``) can be passed to boxplot\nin order to group the data by combination of the variables in the x-axis:\n\n.. plot::\n    :context: close-figs\n\n    >>> df = pd.DataFrame(np.random.randn(10,3),\n    ...                   columns=['Col1', 'Col2', 'Col3'])\n    >>> df['X'] = pd.Series(['A', 'A', 'A', 'A', 'A',\n    ...                      'B', 'B', 'B', 'B', 'B'])\n    >>> df['Y'] = pd.Series(['A', 'B', 'A', 'B', 'A',\n    ...                      'B', 'A', 'B', 'A', 'B'])\n    >>> boxplot = df.boxplot(column=['Col1', 'Col2'], by=['X', 'Y'])\n\nThe layout of boxplot can be adjusted giving a tuple to ``layout``:\n\n.. plot::\n    :context: close-figs\n\n    >>> boxplot = df.boxplot(column=['Col1', 'Col2'], by='X',\n    ...                      layout=(2, 1))\n\nAdditional formatting can be done to the boxplot, like suppressing the grid\n(``grid=False``), rotating the labels in the x-axis (i.e. ``rot=45``)\nor changing the fontsize (i.e. ``fontsize=15``):\n\n.. plot::\n    :context: close-figs\n\n    >>> boxplot = df.boxplot(grid=False, rot=45, fontsize=15)\n\nThe parameter ``return_type`` can be used to select the type of element\nreturned by `boxplot`.  When ``return_type='axes'`` is selected,\nthe matplotlib axes on which the boxplot is drawn are returned:\n\n    >>> boxplot = df.boxplot(column=['Col1','Col2'], return_type='axes')\n    >>> type(boxplot)\n    <class 'matplotlib.axes._subplots.AxesSubplot'>\n\nWhen grouping with ``by``, a Series mapping columns to ``return_type``\nis returned:\n\n    >>> boxplot = df.boxplot(column=['Col1', 'Col2'], by='X',\n    ...                      return_type='axes')\n    >>> type(boxplot)\n    <class 'pandas.core.series.Series'>\n\nIf ``return_type`` is `None`, a NumPy array of axes with the same shape\nas ``layout`` is returned:\n\n    >>> boxplot = df.boxplot(column=['Col1', 'Col2'], by='X',\n    ...                      return_type=None)\n    >>> type(boxplot)\n    <class 'numpy.ndarray'>", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 394, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L394", "errors": [["EX03", "flake8 error: E231 missing whitespace after ',' (3 times)"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Plotting", "shared_code_with": ""}, "pandas.DataFrame.hist": {"type": "function", "docstring": "Make a histogram of the DataFrame's.\n\nA `histogram`_ is a representation of the distribution of data.\nThis function calls :meth:`matplotlib.pyplot.hist`, on each series in\nthe DataFrame, resulting in one histogram per column.\n\n.. _histogram: https://en.wikipedia.org/wiki/Histogram\n\nParameters\n----------\ndata : DataFrame\n    The pandas object holding the data.\ncolumn : str or sequence\n    If passed, will be used to limit data to a subset of columns.\nby : object, optional\n    If passed, then used to form histograms for separate groups.\ngrid : bool, default True\n    Whether to show axis grid lines.\nxlabelsize : int, default None\n    If specified changes the x-axis label size.\nxrot : float, default None\n    Rotation of x axis labels. For example, a value of 90 displays the\n    x labels rotated 90 degrees clockwise.\nylabelsize : int, default None\n    If specified changes the y-axis label size.\nyrot : float, default None\n    Rotation of y axis labels. For example, a value of 90 displays the\n    y labels rotated 90 degrees clockwise.\nax : Matplotlib axes object, default None\n    The axes to plot the histogram on.\nsharex : bool, default True if ax is None else False\n    In case subplots=True, share x axis and set some x axis labels to\n    invisible; defaults to True if ax is None otherwise False if an ax\n    is passed in.\n    Note that passing in both an ax and sharex=True will alter all x axis\n    labels for all subplots in a figure.\nsharey : bool, default False\n    In case subplots=True, share y axis and set some y axis labels to\n    invisible.\nfigsize : tuple\n    The size in inches of the figure to create. Uses the value in\n    `matplotlib.rcParams` by default.\nlayout : tuple, optional\n    Tuple of (rows, columns) for the layout of the histograms.\nbins : int or sequence, default 10\n    Number of histogram bins to be used. If an integer is given, bins + 1\n    bin edges are calculated and returned. If bins is a sequence, gives\n    bin edges, including left edge of first bin and right edge of last\n    bin. In this case, bins is returned unmodified.\n**kwds\n    All other plotting keyword arguments to be passed to\n    :meth:`matplotlib.pyplot.hist`.\n\nReturns\n-------\nmatplotlib.AxesSubplot or numpy.ndarray of them\n\nSee Also\n--------\nmatplotlib.pyplot.hist : Plot a histogram using matplotlib.\n\nExamples\n--------\n\n.. plot::\n    :context: close-figs\n\n    This example draws a histogram based on the length and width of\n    some animals, displayed in three bins\n\n    >>> df = pd.DataFrame({\n    ...     'length': [1.5, 0.5, 1.2, 0.9, 3],\n    ...     'width': [0.7, 0.2, 0.15, 0.2, 1.1]\n    ...     }, index=['pig', 'rabbit', 'duck', 'chicken', 'horse'])\n    >>> hist = df.hist(bins=3)", "deprecated": false, "file": "pandas/plotting/_core.py", "file_line": 89, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/plotting/_core.py#L89", "errors": [["RT03", "Return value has no description"], ["EX03", "flake8 error: E123 closing bracket does not match indentation of opening bracket's line"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Plotting", "shared_code_with": ""}, "pandas.DataFrame.sparse.density": {"type": "property", "docstring": "Ratio of non-sparse points to total (dense) data points\nrepresented in the DataFrame.", "deprecated": false, "file": "pandas/core/arrays/sparse.py", "file_line": 2227, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/sparse.py#L2227", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.DataFrame.sparse.from_spmatrix": {"type": "method", "docstring": "Create a new DataFrame from a scipy sparse matrix.\n\n.. versionadded:: 0.25.0\n\nParameters\n----------\ndata : scipy.sparse.spmatrix\n    Must be convertible to csc format.\nindex, columns : Index, optional\n    Row and column labels to use for the resulting DataFrame.\n    Defaults to a RangeIndex.\n\nReturns\n-------\nDataFrame\n    Each column of the DataFrame is stored as a\n    :class:`SparseArray`.\n\nExamples\n--------\n>>> import scipy.sparse\n>>> mat = scipy.sparse.eye(3)\n>>> pd.DataFrame.sparse.from_spmatrix(mat)\n     0    1    2\n0  1.0  0.0  0.0\n1  0.0  1.0  0.0\n2  0.0  0.0  1.0", "deprecated": false, "file": "pandas/core/arrays/sparse.py", "file_line": 2119, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/sparse.py#L2119", "errors": [["PR01", "Parameters {columns, index} not documented"], ["PR02", "Unknown parameters {index, columns}"]], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.DataFrame.sparse.to_coo": {"type": "function", "docstring": "Return the contents of the frame as a sparse SciPy COO matrix.\n\n.. versionadded:: 0.25.0\n\nReturns\n-------\ncoo_matrix : scipy.sparse.spmatrix\n    If the caller is heterogeneous and contains booleans or objects,\n    the result will be of dtype=object. See Notes.\n\nNotes\n-----\nThe dtype will be the lowest-common-denominator type (implicit\nupcasting); that is to say if the dtypes (even of numeric types)\nare mixed, the one that accommodates all will be chosen.\n\ne.g. If the dtypes are float16 and float32, dtype will be upcast to\nfloat32. By numpy.find_common_type convention, mixing int64 and\nand uint64 will result in a float64 dtype.", "deprecated": false, "file": "pandas/core/arrays/sparse.py", "file_line": 2185, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/sparse.py#L2185", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.DataFrame.sparse.to_dense": {"type": "function", "docstring": "Convert a DataFrame with sparse values to dense.\n\n.. versionadded:: 0.25.0\n\nReturns\n-------\nDataFrame\n    A DataFrame with the same values stored as dense arrays.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"A\": pd.SparseArray([0, 1, 0])})\n>>> df.sparse.to_dense()\n   A\n0  0\n1  1\n2  0", "deprecated": false, "file": "pandas/core/arrays/sparse.py", "file_line": 2160, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/sparse.py#L2160", "errors": [], "warnings": [["SA01", "See Also section not found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Sparse accessor", "shared_code_with": ""}, "pandas.DataFrame.from_dict": {"type": "method", "docstring": "Construct DataFrame from dict of array-like or dicts.\n\nCreates DataFrame object from dictionary by columns or by index\nallowing dtype specification.\n\nParameters\n----------\ndata : dict\n    Of the form {field : array-like} or {field : dict}.\norient : {'columns', 'index'}, default 'columns'\n    The \"orientation\" of the data. If the keys of the passed dict\n    should be the columns of the resulting DataFrame, pass 'columns'\n    (default). Otherwise if the keys should be rows, pass 'index'.\ndtype : dtype, default None\n    Data type to force, otherwise infer.\ncolumns : list, default None\n    Column labels to use when ``orient='index'``. Raises a ValueError\n    if used with ``orient='columns'``.\n\n    .. versionadded:: 0.23.0\n\nReturns\n-------\nDataFrame\n\nSee Also\n--------\nDataFrame.from_records : DataFrame from ndarray (structured\n    dtype), list of tuples, dict, or DataFrame.\nDataFrame : DataFrame object creation using constructor.\n\nExamples\n--------\nBy default the keys of the dict become the DataFrame columns:\n\n>>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\n>>> pd.DataFrame.from_dict(data)\n   col_1 col_2\n0      3     a\n1      2     b\n2      1     c\n3      0     d\n\nSpecify ``orient='index'`` to create the DataFrame using dictionary\nkeys as rows:\n\n>>> data = {'row_1': [3, 2, 1, 0], 'row_2': ['a', 'b', 'c', 'd']}\n>>> pd.DataFrame.from_dict(data, orient='index')\n       0  1  2  3\nrow_1  3  2  1  0\nrow_2  a  b  c  d\n\nWhen using the 'index' orientation, the column names can be\nspecified manually:\n\n>>> pd.DataFrame.from_dict(data, orient='index',\n...                        columns=['A', 'B', 'C', 'D'])\n       A  B  C  D\nrow_1  3  2  1  0\nrow_2  a  b  c  d", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 1097, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L1097", "errors": [["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": ""}, "pandas.DataFrame.from_items": {"type": "method", "docstring": "Construct a DataFrame from a list of tuples.\n\n.. deprecated:: 0.23.0\n  `from_items` is deprecated and will be removed in a future version.\n  Use :meth:`DataFrame.from_dict(dict(items)) <DataFrame.from_dict>`\n  instead.\n  :meth:`DataFrame.from_dict(OrderedDict(items)) <DataFrame.from_dict>`\n  may be used to preserve the key order.\n\nConvert (key, value) pairs to DataFrame. The keys will be the axis\nindex (usually the columns, but depends on the specified\norientation). The values should be arrays or Series.\n\nParameters\n----------\nitems : sequence of (key, value) pairs\n    Values should be arrays or Series.\ncolumns : sequence of column labels, optional\n    Must be passed if orient='index'.\norient : {'columns', 'index'}, default 'columns'\n    The \"orientation\" of the data. If the keys of the\n    input correspond to column labels, pass 'columns'\n    (default). Otherwise if the keys correspond to the index,\n    pass 'index'.\n\nReturns\n-------\nDataFrame", "deprecated": true, "file": "pandas/core/frame.py", "file_line": 1812, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L1812", "errors": [["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": ""}, "pandas.DataFrame.from_records": {"type": "method", "docstring": "Convert structured or record ndarray to DataFrame.\n\nParameters\n----------\ndata : ndarray (structured dtype), list of tuples, dict, or DataFrame\nindex : string, list of fields, array-like\n    Field of array to use as the index, alternately a specific set of\n    input labels to use\nexclude : sequence, default None\n    Columns or fields to exclude\ncolumns : sequence, default None\n    Column names to use. If the passed data do not have names\n    associated with them, this argument provides names for the\n    columns. Otherwise this argument indicates the order of the columns\n    in the result (any names not found in the data will become all-NA\n    columns)\ncoerce_float : boolean, default False\n    Attempt to convert values of non-string, non-numeric objects (like\n    decimal.Decimal) to floating point, useful for SQL result sets\nnrows : int, default None\n    Number of rows to read if data is an iterator\n\nReturns\n-------\nDataFrame", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 1497, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L1497", "errors": [["PR07", "Parameter \"data\" has no description"], ["PR06", "Parameter \"index\" type should use \"str\" instead of \"string\""], ["PR09", "Parameter \"index\" description should finish with \".\""], ["PR09", "Parameter \"exclude\" description should finish with \".\""], ["PR09", "Parameter \"columns\" description should finish with \".\""], ["PR06", "Parameter \"coerce_float\" type should use \"bool\" instead of \"boolean\""], ["PR09", "Parameter \"coerce_float\" description should finish with \".\""], ["PR09", "Parameter \"nrows\" description should finish with \".\""], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": ""}, "pandas.DataFrame.info": {"type": "function", "docstring": "Print a concise summary of a DataFrame.\n\nThis method prints information about a DataFrame including\nthe index dtype and column dtypes, non-null values and memory usage.\n\nParameters\n----------\nverbose : bool, optional\n    Whether to print the full summary. By default, the setting in\n    ``pandas.options.display.max_info_columns`` is followed.\nbuf : writable buffer, defaults to sys.stdout\n    Where to send the output. By default, the output is printed to\n    sys.stdout. Pass a writable buffer if you need to further process\n    the output.\nmax_cols : int, optional\n    When to switch from the verbose to the truncated output. If the\n    DataFrame has more than `max_cols` columns, the truncated output\n    is used. By default, the setting in\n    ``pandas.options.display.max_info_columns`` is used.\nmemory_usage : bool, str, optional\n    Specifies whether total memory usage of the DataFrame\n    elements (including the index) should be displayed. By default,\n    this follows the ``pandas.options.display.memory_usage`` setting.\n\n    True always show memory usage. False never shows memory usage.\n    A value of 'deep' is equivalent to \"True with deep introspection\".\n    Memory usage is shown in human-readable units (base-2\n    representation). Without deep introspection a memory estimation is\n    made based in column dtype and number of rows assuming values\n    consume the same memory amount for corresponding dtypes. With deep\n    memory introspection, a real memory usage calculation is performed\n    at the cost of computational resources.\nnull_counts : bool, optional\n    Whether to show the non-null counts. By default, this is shown\n    only if the frame is smaller than\n    ``pandas.options.display.max_info_rows`` and\n    ``pandas.options.display.max_info_columns``. A value of True always\n    shows the counts, and False never shows the counts.\n\nReturns\n-------\nNone\n    This method prints a summary of a DataFrame and returns None.\n\nSee Also\n--------\nDataFrame.describe: Generate descriptive statistics of DataFrame\n    columns.\nDataFrame.memory_usage: Memory usage of DataFrame columns.\n\nExamples\n--------\n>>> int_values = [1, 2, 3, 4, 5]\n>>> text_values = ['alpha', 'beta', 'gamma', 'delta', 'epsilon']\n>>> float_values = [0.0, 0.25, 0.5, 0.75, 1.0]\n>>> df = pd.DataFrame({\"int_col\": int_values, \"text_col\": text_values,\n...                   \"float_col\": float_values})\n>>> df\n   int_col text_col  float_col\n0        1    alpha       0.00\n1        2     beta       0.25\n2        3    gamma       0.50\n3        4    delta       0.75\n4        5  epsilon       1.00\n\nPrints information of all columns:\n\n>>> df.info(verbose=True)\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5 entries, 0 to 4\nData columns (total 3 columns):\nint_col      5 non-null int64\ntext_col     5 non-null object\nfloat_col    5 non-null float64\ndtypes: float64(1), int64(1), object(1)\nmemory usage: 248.0+ bytes\n\nPrints a summary of columns count and its dtypes but not per column\ninformation:\n\n>>> df.info(verbose=False)\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5 entries, 0 to 4\nColumns: 3 entries, int_col to float_col\ndtypes: float64(1), int64(1), object(1)\nmemory usage: 248.0+ bytes\n\nPipe output of DataFrame.info to buffer instead of sys.stdout, get\nbuffer content and writes to a text file:\n\n>>> import io\n>>> buffer = io.StringIO()\n>>> df.info(buf=buffer)\n>>> s = buffer.getvalue()\n>>> with open(\"df_info.txt\", \"w\",\n...           encoding=\"utf-8\") as f:  # doctest: +SKIP\n...     f.write(s)\n260\n\nThe `memory_usage` parameter allows deep introspection mode, specially\nuseful for big DataFrames and fine-tune memory optimization:\n\n>>> random_strings_array = np.random.choice(['a', 'b', 'c'], 10 ** 6)\n>>> df = pd.DataFrame({\n...     'column_1': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n...     'column_2': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n...     'column_3': np.random.choice(['a', 'b', 'c'], 10 ** 6)\n... })\n>>> df.info()\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1000000 entries, 0 to 999999\nData columns (total 3 columns):\ncolumn_1    1000000 non-null object\ncolumn_2    1000000 non-null object\ncolumn_3    1000000 non-null object\ndtypes: object(3)\nmemory usage: 22.9+ MB\n\n>>> df.info(memory_usage='deep')\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1000000 entries, 0 to 999999\nData columns (total 3 columns):\ncolumn_1    1000000 non-null object\ncolumn_2    1000000 non-null object\ncolumn_3    1000000 non-null object\ndtypes: object(3)\nmemory usage: 188.8 MB", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 2298, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L2298", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": ""}, "pandas.DataFrame.to_parquet": {"type": "function", "docstring": "Write a DataFrame to the binary parquet format.\n\n.. versionadded:: 0.21.0\n\nThis function writes the dataframe as a `parquet file\n<https://parquet.apache.org/>`_. You can choose different parquet\nbackends, and have the option of compression. See\n:ref:`the user guide <io.parquet>` for more details.\n\nParameters\n----------\nfname : str\n    File path or Root Directory path. Will be used as Root Directory\n    path while writing a partitioned dataset.\n\n    .. versionchanged:: 0.24.0\n\nengine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'\n    Parquet library to use. If 'auto', then the option\n    ``io.parquet.engine`` is used. The default ``io.parquet.engine``\n    behavior is to try 'pyarrow', falling back to 'fastparquet' if\n    'pyarrow' is unavailable.\ncompression : {'snappy', 'gzip', 'brotli', None}, default 'snappy'\n    Name of the compression to use. Use ``None`` for no compression.\nindex : bool, default None\n    If ``True``, include the dataframe's index(es) in the file output.\n    If ``False``, they will not be written to the file. If ``None``,\n    the behavior depends on the chosen engine.\n\n    .. versionadded:: 0.24.0\n\npartition_cols : list, optional, default None\n    Column names by which to partition the dataset\n    Columns are partitioned in the order they are given\n\n    .. versionadded:: 0.24.0\n\n**kwargs\n    Additional arguments passed to the parquet library. See\n    :ref:`pandas io <io.parquet>` for more details.\n\nSee Also\n--------\nread_parquet : Read a parquet file.\nDataFrame.to_csv : Write a csv file.\nDataFrame.to_sql : Write to a sql table.\nDataFrame.to_hdf : Write to hdf.\n\nNotes\n-----\nThis function requires either the `fastparquet\n<https://pypi.org/project/fastparquet>`_ or `pyarrow\n<https://arrow.apache.org/docs/python/>`_ library.\n\nExamples\n--------\n>>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n>>> df.to_parquet('df.parquet.gzip',\n...               compression='gzip')  # doctest: +SKIP\n>>> pd.read_parquet('df.parquet.gzip')  # doctest: +SKIP\n   col1  col2\n0     1     3\n1     2     4", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 2118, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L2118", "errors": [["PR09", "Parameter \"partition_cols\" description should finish with \".\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": ""}, "pandas.DataFrame.to_pickle": {"type": "function", "docstring": "Pickle (serialize) object to file.\n\nParameters\n----------\npath : str\n    File path where the pickled object will be stored.\ncompression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None},         default 'infer'\n    A string representing the compression to use in the output file. By\n    default, infers from the file extension in specified path.\n\n    .. versionadded:: 0.20.0\nprotocol : int\n    Int which indicates which protocol should be used by the pickler,\n    default HIGHEST_PROTOCOL (see [1]_ paragraph 12.1.2). The possible\n    values are 0, 1, 2, 3, 4. A negative value for the protocol\n    parameter is equivalent to setting its value to HIGHEST_PROTOCOL.\n\n    .. [1] https://docs.python.org/3/library/pickle.html\n    .. versionadded:: 0.21.0\n\nSee Also\n--------\nread_pickle : Load pickled pandas object (or any object) from file.\nDataFrame.to_hdf : Write DataFrame to an HDF5 file.\nDataFrame.to_sql : Write DataFrame to a SQL database.\nDataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\nExamples\n--------\n>>> original_df = pd.DataFrame({\"foo\": range(5), \"bar\": range(5, 10)})\n>>> original_df\n   foo  bar\n0    0    5\n1    1    6\n2    2    7\n3    3    8\n4    4    9\n>>> original_df.to_pickle(\"./dummy.pkl\")\n\n>>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")\n>>> unpickled_df\n   foo  bar\n0    0    5\n1    1    6\n2    2    7\n3    3    8\n4    4    9\n\n>>> import os\n>>> os.remove(\"./dummy.pkl\")", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 2694, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L2694", "errors": [["PR09", "Parameter \"protocol\" description should finish with \".\""]], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": "pandas.Series.to_pickle"}, "pandas.DataFrame.to_csv": {"type": "function", "docstring": "Write object to a comma-separated values (csv) file.\n\n.. versionchanged:: 0.24.0\n    The order of arguments for Series was changed.\n\nParameters\n----------\npath_or_buf : str or file handle, default None\n    File path or object, if None is provided the result is returned as\n    a string.  If a file object is passed it should be opened with\n    `newline=''`, disabling universal newlines.\n\n    .. versionchanged:: 0.24.0\n\n       Was previously named \"path\" for Series.\n\nsep : str, default ','\n    String of length 1. Field delimiter for the output file.\nna_rep : str, default ''\n    Missing data representation.\nfloat_format : str, default None\n    Format string for floating point numbers.\ncolumns : sequence, optional\n    Columns to write.\nheader : bool or list of str, default True\n    Write out the column names. If a list of strings is given it is\n    assumed to be aliases for the column names.\n\n    .. versionchanged:: 0.24.0\n\n       Previously defaulted to False for Series.\n\nindex : bool, default True\n    Write row names (index).\nindex_label : str or sequence, or False, default None\n    Column label for index column(s) if desired. If None is given, and\n    `header` and `index` are True, then the index names are used. A\n    sequence should be given if the object uses MultiIndex. If\n    False do not print fields for index names. Use index_label=False\n    for easier importing in R.\nmode : str\n    Python write mode, default 'w'.\nencoding : str, optional\n    A string representing the encoding to use in the output file,\n    defaults to 'utf-8'.\ncompression : str, default 'infer'\n    Compression mode among the following possible values: {'infer',\n    'gzip', 'bz2', 'zip', 'xz', None}. If 'infer' and `path_or_buf`\n    is path-like, then detect compression from the following\n    extensions: '.gz', '.bz2', '.zip' or '.xz'. (otherwise no\n    compression).\n\n    .. versionchanged:: 0.24.0\n\n       'infer' option added and set to default.\n\nquoting : optional constant from csv module\n    Defaults to csv.QUOTE_MINIMAL. If you have set a `float_format`\n    then floats are converted to strings and thus csv.QUOTE_NONNUMERIC\n    will treat them as non-numeric.\nquotechar : str, default '\\\"'\n    String of length 1. Character used to quote fields.\nline_terminator : str, optional\n    The newline character or character sequence to use in the output\n    file. Defaults to `os.linesep`, which depends on the OS in which\n    this method is called ('\\n' for linux, '\\r\\n' for Windows, i.e.).\n\n    .. versionchanged:: 0.24.0\nchunksize : int or None\n    Rows to write at a time.\ndate_format : str, default None\n    Format string for datetime objects.\ndoublequote : bool, default True\n    Control quoting of `quotechar` inside a field.\nescapechar : str, default None\n    String of length 1. Character used to escape `sep` and `quotechar`\n    when appropriate.\ndecimal : str, default '.'\n    Character recognized as decimal separator. E.g. use ',' for\n    European data.\n\nReturns\n-------\nNone or str\n    If path_or_buf is None, returns the resulting csv format as a\n    string. Otherwise returns None.\n\nSee Also\n--------\nread_csv : Load a CSV file into a DataFrame.\nto_excel : Write DataFrame to an Excel file.\n\nExamples\n--------\n>>> df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n...                    'mask': ['red', 'purple'],\n...                    'weapon': ['sai', 'bo staff']})\n>>> df.to_csv(index=False)\n'name,mask,weapon\\nRaphael,red,sai\\nDonatello,purple,bo staff\\n'", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 3052, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L3052", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": ""}, "pandas.DataFrame.to_hdf": {"type": "function", "docstring": "Write the contained data to an HDF5 file using HDFStore.\n\nHierarchical Data Format (HDF) is self-describing, allowing an\napplication to interpret the structure and contents of a file with\nno outside information. One HDF file can hold a mix of related objects\nwhich can be accessed as a group or as individual objects.\n\nIn order to add another DataFrame or Series to an existing HDF file\nplease use append mode and a different a key.\n\nFor more information see the :ref:`user guide <io.hdf5>`.\n\nParameters\n----------\npath_or_buf : str or pandas.HDFStore\n    File path or HDFStore object.\nkey : str\n    Identifier for the group in the store.\nmode : {'a', 'w', 'r+'}, default 'a'\n    Mode to open file:\n\n    - 'w': write, a new file is created (an existing file with\n      the same name would be deleted).\n    - 'a': append, an existing file is opened for reading and\n      writing, and if the file does not exist it is created.\n    - 'r+': similar to 'a', but the file must already exist.\nformat : {'fixed', 'table'}, default 'fixed'\n    Possible values:\n\n    - 'fixed': Fixed format. Fast writing/reading. Not-appendable,\n      nor searchable.\n    - 'table': Table format. Write as a PyTables Table structure\n      which may perform worse but allow more flexible operations\n      like searching / selecting subsets of the data.\nappend : bool, default False\n    For Table formats, append the input data to the existing.\ndata_columns :  list of columns or True, optional\n    List of columns to create as indexed data columns for on-disk\n    queries, or True to use all columns. By default only the axes\n    of the object are indexed. See :ref:`io.hdf5-query-data-columns`.\n    Applicable only to format='table'.\ncomplevel : {0-9}, optional\n    Specifies a compression level for data.\n    A value of 0 disables compression.\ncomplib : {'zlib', 'lzo', 'bzip2', 'blosc'}, default 'zlib'\n    Specifies the compression library to be used.\n    As of v0.20.2 these additional compressors for Blosc are supported\n    (default if no compressor specified: 'blosc:blosclz'):\n    {'blosc:blosclz', 'blosc:lz4', 'blosc:lz4hc', 'blosc:snappy',\n    'blosc:zlib', 'blosc:zstd'}.\n    Specifying a compression library which is not available issues\n    a ValueError.\nfletcher32 : bool, default False\n    If applying compression use the fletcher32 checksum.\ndropna : bool, default False\n    If true, ALL nan rows will not be written to store.\nerrors : str, default 'strict'\n    Specifies how encoding and decoding errors are to be handled.\n    See the errors argument for :func:`open` for a full list\n    of options.\n\nSee Also\n--------\nDataFrame.read_hdf : Read from HDF file.\nDataFrame.to_parquet : Write a DataFrame to the binary parquet format.\nDataFrame.to_sql : Write to a sql table.\nDataFrame.to_feather : Write out feather-format for DataFrames.\nDataFrame.to_csv : Write out to a csv file.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]},\n...                   index=['a', 'b', 'c'])\n>>> df.to_hdf('data.h5', key='df', mode='w')\n\nWe can add another object to the same file:\n\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s.to_hdf('data.h5', key='s')\n\nReading from HDF file:\n\n>>> pd.read_hdf('data.h5', 'df')\nA  B\na  1  4\nb  2  5\nc  3  6\n>>> pd.read_hdf('data.h5', 's')\n0    1\n1    2\n2    3\n3    4\ndtype: int64\n\nDeleting file with data:\n\n>>> import os\n>>> os.remove('data.h5')", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 2406, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L2406", "errors": [["PR01", "Parameters {**kwargs} not documented"], ["PR02", "Unknown parameters {data_columns, complib, format, errors, append, mode, fletcher32, complevel, dropna}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": "pandas.Series.to_hdf"}, "pandas.DataFrame.to_sql": {"type": "function", "docstring": "Write records stored in a DataFrame to a SQL database.\n\nDatabases supported by SQLAlchemy [1]_ are supported. Tables can be\nnewly created, appended to, or overwritten.\n\nParameters\n----------\nname : str\n    Name of SQL table.\ncon : sqlalchemy.engine.Engine or sqlite3.Connection\n    Using SQLAlchemy makes it possible to use any DB supported by that\n    library. Legacy support is provided for sqlite3.Connection objects.\nschema : str, optional\n    Specify the schema (if database flavor supports this). If None, use\n    default schema.\nif_exists : {'fail', 'replace', 'append'}, default 'fail'\n    How to behave if the table already exists.\n\n    * fail: Raise a ValueError.\n    * replace: Drop the table before inserting new values.\n    * append: Insert new values to the existing table.\n\nindex : bool, default True\n    Write DataFrame index as a column. Uses `index_label` as the column\n    name in the table.\nindex_label : str or sequence, default None\n    Column label for index column(s). If None is given (default) and\n    `index` is True, then the index names are used.\n    A sequence should be given if the DataFrame uses MultiIndex.\nchunksize : int, optional\n    Rows will be written in batches of this size at a time. By default,\n    all rows will be written at once.\ndtype : dict, optional\n    Specifying the datatype for columns. The keys should be the column\n    names and the values should be the SQLAlchemy types or strings for\n    the sqlite3 legacy mode.\nmethod : {None, 'multi', callable}, default None\n    Controls the SQL insertion clause used:\n\n    * None : Uses standard SQL ``INSERT`` clause (one per row).\n    * 'multi': Pass multiple values in a single ``INSERT`` clause.\n    * callable with signature ``(pd_table, conn, keys, data_iter)``.\n\n    Details and a sample callable implementation can be found in the\n    section :ref:`insert method <io.sql.method>`.\n\n    .. versionadded:: 0.24.0\n\nRaises\n------\nValueError\n    When the table already exists and `if_exists` is 'fail' (the\n    default).\n\nSee Also\n--------\nread_sql : Read a DataFrame from a table.\n\nNotes\n-----\nTimezone aware datetime columns will be written as\n``Timestamp with timezone`` type with SQLAlchemy if supported by the\ndatabase. Otherwise, the datetimes will be stored as timezone unaware\ntimestamps local to the original timezone.\n\n.. versionadded:: 0.24.0\n\nReferences\n----------\n.. [1] http://docs.sqlalchemy.org\n.. [2] https://www.python.org/dev/peps/pep-0249/\n\nExamples\n--------\n\nCreate an in-memory SQLite database.\n\n>>> from sqlalchemy import create_engine\n>>> engine = create_engine('sqlite://', echo=False)\n\nCreate a table from scratch with 3 rows.\n\n>>> df = pd.DataFrame({'name' : ['User 1', 'User 2', 'User 3']})\n>>> df\n     name\n0  User 1\n1  User 2\n2  User 3\n\n>>> df.to_sql('users', con=engine)\n>>> engine.execute(\"SELECT * FROM users\").fetchall()\n[(0, 'User 1'), (1, 'User 2'), (2, 'User 3')]\n\n>>> df1 = pd.DataFrame({'name' : ['User 4', 'User 5']})\n>>> df1.to_sql('users', con=engine, if_exists='append')\n>>> engine.execute(\"SELECT * FROM users\").fetchall()\n[(0, 'User 1'), (1, 'User 2'), (2, 'User 3'),\n (0, 'User 4'), (1, 'User 5')]\n\nOverwrite the table with just ``df1``.\n\n>>> df1.to_sql('users', con=engine, if_exists='replace',\n...            index_label='id')\n>>> engine.execute(\"SELECT * FROM users\").fetchall()\n[(0, 'User 4'), (1, 'User 5')]\n\nSpecify the dtype (especially useful for integers with missing values).\nNotice that while pandas is forced to store the data as floating point,\nthe database supports nullable integers. When fetching the data with\nPython, we get back integer scalars.\n\n>>> df = pd.DataFrame({\"A\": [1, None, 2]})\n>>> df\n     A\n0  1.0\n1  NaN\n2  2.0\n\n>>> from sqlalchemy.types import Integer\n>>> df.to_sql('integers', con=engine, index=False,\n...           dtype={\"A\": Integer()})\n\n>>> engine.execute(\"SELECT * FROM integers\").fetchall()\n[(1,), (None,), (2,)]", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 2541, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L2541", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": "pandas.Series.to_sql"}, "pandas.DataFrame.to_dict": {"type": "function", "docstring": "Convert the DataFrame to a dictionary.\n\nThe type of the key-value pairs can be customized with the parameters\n(see below).\n\nParameters\n----------\norient : str {'dict', 'list', 'series', 'split', 'records', 'index'}\n    Determines the type of the values of the dictionary.\n\n    - 'dict' (default) : dict like {column -> {index -> value}}\n    - 'list' : dict like {column -> [values]}\n    - 'series' : dict like {column -> Series(values)}\n    - 'split' : dict like\n      {'index' -> [index], 'columns' -> [columns], 'data' -> [values]}\n    - 'records' : list like\n      [{column -> value}, ... , {column -> value}]\n    - 'index' : dict like {index -> {column -> value}}\n\n    Abbreviations are allowed. `s` indicates `series` and `sp`\n    indicates `split`.\n\ninto : class, default dict\n    The collections.abc.Mapping subclass used for all Mappings\n    in the return value.  Can be the actual class or an empty\n    instance of the mapping type you want.  If you want a\n    collections.defaultdict, you must pass it initialized.\n\n    .. versionadded:: 0.21.0\n\nReturns\n-------\ndict, list or collections.abc.Mapping\n    Return a collections.abc.Mapping object representing the DataFrame.\n    The resulting transformation depends on the `orient` parameter.\n\nSee Also\n--------\nDataFrame.from_dict: Create a DataFrame from a dictionary.\nDataFrame.to_json: Convert a DataFrame to JSON format.\n\nExamples\n--------\n>>> df = pd.DataFrame({'col1': [1, 2],\n...                    'col2': [0.5, 0.75]},\n...                   index=['row1', 'row2'])\n>>> df\n      col1  col2\nrow1     1  0.50\nrow2     2  0.75\n>>> df.to_dict()\n{'col1': {'row1': 1, 'row2': 2}, 'col2': {'row1': 0.5, 'row2': 0.75}}\n\nYou can specify the return orientation.\n\n>>> df.to_dict('series')\n{'col1': row1    1\n         row2    2\nName: col1, dtype: int64,\n'col2': row1    0.50\n        row2    0.75\nName: col2, dtype: float64}\n\n>>> df.to_dict('split')\n{'index': ['row1', 'row2'], 'columns': ['col1', 'col2'],\n 'data': [[1, 0.5], [2, 0.75]]}\n\n>>> df.to_dict('records')\n[{'col1': 1, 'col2': 0.5}, {'col1': 2, 'col2': 0.75}]\n\n>>> df.to_dict('index')\n{'row1': {'col1': 1, 'col2': 0.5}, 'row2': {'col1': 2, 'col2': 0.75}}\n\nYou can also specify the mapping type.\n\n>>> from collections import OrderedDict, defaultdict\n>>> df.to_dict(into=OrderedDict)\nOrderedDict([('col1', OrderedDict([('row1', 1), ('row2', 2)])),\n             ('col2', OrderedDict([('row1', 0.5), ('row2', 0.75)]))])\n\nIf you want a `defaultdict`, you need to initialize it:\n\n>>> dd = defaultdict(list)\n>>> df.to_dict('records', into=dd)\n[defaultdict(<class 'list'>, {'col1': 1, 'col2': 0.5}),\n defaultdict(<class 'list'>, {'col1': 2, 'col2': 0.75})]", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 1233, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L1233", "errors": [], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": ""}, "pandas.DataFrame.to_excel": {"type": "function", "docstring": "Write object to an Excel sheet.\n\nTo write a single object to an Excel .xlsx file it is only necessary to\nspecify a target file name. To write to multiple sheets it is necessary to\ncreate an `ExcelWriter` object with a target file name, and specify a sheet\nin the file to write to.\n\nMultiple sheets may be written to by specifying unique `sheet_name`.\nWith all data written to the file it is necessary to save the changes.\nNote that creating an `ExcelWriter` object with a file name that already\nexists will result in the contents of the existing file being erased.\n\nParameters\n----------\nexcel_writer : str or ExcelWriter object\n    File path or existing ExcelWriter.\nsheet_name : str, default 'Sheet1'\n    Name of sheet which will contain DataFrame.\nna_rep : str, default ''\n    Missing data representation.\nfloat_format : str, optional\n    Format string for floating point numbers. For example\n    ``float_format=\"%.2f\"`` will format 0.1234 to 0.12.\ncolumns : sequence or list of str, optional\n    Columns to write.\nheader : bool or list of str, default True\n    Write out the column names. If a list of string is given it is\n    assumed to be aliases for the column names.\nindex : bool, default True\n    Write row names (index).\nindex_label : str or sequence, optional\n    Column label for index column(s) if desired. If not specified, and\n    `header` and `index` are True, then the index names are used. A\n    sequence should be given if the DataFrame uses MultiIndex.\nstartrow : int, default 0\n    Upper left cell row to dump data frame.\nstartcol : int, default 0\n    Upper left cell column to dump data frame.\nengine : str, optional\n    Write engine to use, 'openpyxl' or 'xlsxwriter'. You can also set this\n    via the options ``io.excel.xlsx.writer``, ``io.excel.xls.writer``, and\n    ``io.excel.xlsm.writer``.\nmerge_cells : bool, default True\n    Write MultiIndex and Hierarchical Rows as merged cells.\nencoding : str, optional\n    Encoding of the resulting excel file. Only necessary for xlwt,\n    other writers support unicode natively.\ninf_rep : str, default 'inf'\n    Representation for infinity (there is no native representation for\n    infinity in Excel).\nverbose : bool, default True\n    Display more information in the error logs.\nfreeze_panes : tuple of int (length 2), optional\n    Specifies the one-based bottommost row and rightmost column that\n    is to be frozen.\n\n    .. versionadded:: 0.20.0.\n\nSee Also\n--------\nto_csv : Write DataFrame to a comma-separated values (csv) file.\nExcelWriter : Class for writing DataFrame objects into excel sheets.\nread_excel : Read an Excel file into a pandas DataFrame.\nread_csv : Read a comma-separated values (csv) file into DataFrame.\n\nNotes\n-----\nFor compatibility with :meth:`~DataFrame.to_csv`,\nto_excel serializes lists and dicts to strings before writing.\n\nOnce a workbook has been saved it is not possible write further data\nwithout rewriting the whole workbook.\n\nExamples\n--------\n\nCreate, write to and save a workbook:\n\n>>> df1 = pd.DataFrame([['a', 'b'], ['c', 'd']],\n...                    index=['row 1', 'row 2'],\n...                    columns=['col 1', 'col 2'])\n>>> df1.to_excel(\"output.xlsx\")  # doctest: +SKIP\n\nTo specify the sheet name:\n\n>>> df1.to_excel(\"output.xlsx\",\n...              sheet_name='Sheet_name_1')  # doctest: +SKIP\n\nIf you wish to write to more than one sheet in the workbook, it is\nnecessary to specify an ExcelWriter object:\n\n>>> df2 = df1.copy()\n>>> with pd.ExcelWriter('output.xlsx') as writer:  # doctest: +SKIP\n...     df1.to_excel(writer, sheet_name='Sheet_name_1')\n...     df2.to_excel(writer, sheet_name='Sheet_name_2')\n\nExcelWriter can also be used to append to an existing Excel file:\n\n>>> with pd.ExcelWriter('output.xlsx',\n...                     mode='a') as writer:  # doctest: +SKIP\n...     df.to_excel(writer, sheet_name='Sheet_name_3')\n\nTo set the library that is used to write the Excel file,\nyou can pass the `engine` keyword (the default engine is\nautomatically chosen depending on the file extension):\n\n>>> df1.to_excel('output1.xlsx', engine='xlsxwriter')  # doctest: +SKIP", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 2196, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L2196", "errors": [["EX03", "flake8 error: F821 undefined name 'df'"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": "pandas.Series.to_excel"}, "pandas.DataFrame.to_json": {"type": "function", "docstring": "Convert the object to a JSON string.\n\nNote NaN's and None will be converted to null and datetime objects\nwill be converted to UNIX timestamps.\n\nParameters\n----------\npath_or_buf : str or file handle, optional\n    File path or object. If not specified, the result is returned as\n    a string.\norient : str\n    Indication of expected JSON string format.\n\n    * Series\n\n      - default is 'index'\n      - allowed values are: {'split','records','index','table'}\n\n    * DataFrame\n\n      - default is 'columns'\n      - allowed values are:\n        {'split','records','index','columns','values','table'}\n\n    * The format of the JSON string\n\n      - 'split' : dict like {'index' -> [index],\n        'columns' -> [columns], 'data' -> [values]}\n      - 'records' : list like\n        [{column -> value}, ... , {column -> value}]\n      - 'index' : dict like {index -> {column -> value}}\n      - 'columns' : dict like {column -> {index -> value}}\n      - 'values' : just the values array\n      - 'table' : dict like {'schema': {schema}, 'data': {data}}\n        describing the data, and the data component is\n        like ``orient='records'``.\n\n        .. versionchanged:: 0.20.0\n\ndate_format : {None, 'epoch', 'iso'}\n    Type of date conversion. 'epoch' = epoch milliseconds,\n    'iso' = ISO8601. The default depends on the `orient`. For\n    ``orient='table'``, the default is 'iso'. For all other orients,\n    the default is 'epoch'.\ndouble_precision : int, default 10\n    The number of decimal places to use when encoding\n    floating point values.\nforce_ascii : bool, default True\n    Force encoded string to be ASCII.\ndate_unit : string, default 'ms' (milliseconds)\n    The time unit to encode to, governs timestamp and ISO8601\n    precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n    microsecond, and nanosecond respectively.\ndefault_handler : callable, default None\n    Handler to call if object cannot otherwise be converted to a\n    suitable format for JSON. Should receive a single argument which is\n    the object to convert and return a serialisable object.\nlines : bool, default False\n    If 'orient' is 'records' write out line delimited json format. Will\n    throw ValueError if incorrect 'orient' since others are not list\n    like.\n\ncompression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}\n\n    A string representing the compression to use in the output file,\n    only used when the first argument is a filename. By default, the\n    compression is inferred from the filename.\n\n    .. versionadded:: 0.21.0\n    .. versionchanged:: 0.24.0\n       'infer' option added and set to default\nindex : bool, default True\n    Whether to include the index values in the JSON string. Not\n    including the index (``index=False``) is only supported when\n    orient is 'split' or 'table'.\n\n    .. versionadded:: 0.23.0\n\nReturns\n-------\nNone or str\n    If path_or_buf is None, returns the resulting json format as a\n    string. Otherwise returns None.\n\nSee Also\n--------\nread_json\n\nExamples\n--------\n\n>>> df = pd.DataFrame([['a', 'b'], ['c', 'd']],\n...                   index=['row 1', 'row 2'],\n...                   columns=['col 1', 'col 2'])\n>>> df.to_json(orient='split')\n'{\"columns\":[\"col 1\",\"col 2\"],\n  \"index\":[\"row 1\",\"row 2\"],\n  \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n\nEncoding/decoding a Dataframe using ``'records'`` formatted JSON.\nNote that index labels are not preserved with this encoding.\n\n>>> df.to_json(orient='records')\n'[{\"col 1\":\"a\",\"col 2\":\"b\"},{\"col 1\":\"c\",\"col 2\":\"d\"}]'\n\nEncoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n>>> df.to_json(orient='index')\n'{\"row 1\":{\"col 1\":\"a\",\"col 2\":\"b\"},\"row 2\":{\"col 1\":\"c\",\"col 2\":\"d\"}}'\n\nEncoding/decoding a Dataframe using ``'columns'`` formatted JSON:\n\n>>> df.to_json(orient='columns')\n'{\"col 1\":{\"row 1\":\"a\",\"row 2\":\"c\"},\"col 2\":{\"row 1\":\"b\",\"row 2\":\"d\"}}'\n\nEncoding/decoding a Dataframe using ``'values'`` formatted JSON:\n\n>>> df.to_json(orient='values')\n'[[\"a\",\"b\"],[\"c\",\"d\"]]'\n\nEncoding with Table Schema\n\n>>> df.to_json(orient='table')\n'{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                        {\"name\": \"col 1\", \"type\": \"string\"},\n                        {\"name\": \"col 2\", \"type\": \"string\"}],\n             \"primaryKey\": \"index\",\n             \"pandas_version\": \"0.20.0\"},\n  \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n           {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 2240, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L2240", "errors": [["PR09", "Parameter \"orient\" description should finish with \".\""], ["PR06", "Parameter \"date_unit\" type should use \"str\" instead of \"string\""], ["SA04", "Missing description for See Also \"read_json\" reference"], ["EX02", "Examples do not pass tests:\n**********************************************************************\nLine 96, in pandas.DataFrame.to_json\nFailed example:\n    df.to_json(orient='split')\nExpected:\n    '{\"columns\":[\"col 1\",\"col 2\"],\n      \"index\":[\"row 1\",\"row 2\"],\n      \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\nGot:\n    '{\"columns\":[\"col 1\",\"col 2\"],\"index\":[\"row 1\",\"row 2\"],\"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n**********************************************************************\nLine 124, in pandas.DataFrame.to_json\nFailed example:\n    df.to_json(orient='table')\nExpected:\n    '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                            {\"name\": \"col 1\", \"type\": \"string\"},\n                            {\"name\": \"col 2\", \"type\": \"string\"}],\n                 \"primaryKey\": \"index\",\n                 \"pandas_version\": \"0.20.0\"},\n      \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n               {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'\nGot:\n    '{\"schema\": {\"fields\":[{\"name\":\"index\",\"type\":\"string\"},{\"name\":\"col 1\",\"type\":\"string\"},{\"name\":\"col 2\",\"type\":\"string\"}],\"primaryKey\":[\"index\"],\"pandas_version\":\"0.20.0\"}, \"data\": [{\"index\":\"row 1\",\"col 1\":\"a\",\"col 2\":\"b\"},{\"index\":\"row 2\",\"col 1\":\"c\",\"col 2\":\"d\"}]}'\n"]], "warnings": [], "examples_errors": "**********************************************************************\nLine 96, in pandas.DataFrame.to_json\nFailed example:\n    df.to_json(orient='split')\nExpected:\n    '{\"columns\":[\"col 1\",\"col 2\"],\n      \"index\":[\"row 1\",\"row 2\"],\n      \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\nGot:\n    '{\"columns\":[\"col 1\",\"col 2\"],\"index\":[\"row 1\",\"row 2\"],\"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n**********************************************************************\nLine 124, in pandas.DataFrame.to_json\nFailed example:\n    df.to_json(orient='table')\nExpected:\n    '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                            {\"name\": \"col 1\", \"type\": \"string\"},\n                            {\"name\": \"col 2\", \"type\": \"string\"}],\n                 \"primaryKey\": \"index\",\n                 \"pandas_version\": \"0.20.0\"},\n      \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n               {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'\nGot:\n    '{\"schema\": {\"fields\":[{\"name\":\"index\",\"type\":\"string\"},{\"name\":\"col 1\",\"type\":\"string\"},{\"name\":\"col 2\",\"type\":\"string\"}],\"primaryKey\":[\"index\"],\"pandas_version\":\"0.20.0\"}, \"data\": [{\"index\":\"row 1\",\"col 1\":\"a\",\"col 2\":\"b\"},{\"index\":\"row 2\",\"col 1\":\"c\",\"col 2\":\"d\"}]}'\n", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": "pandas.Series.to_json"}, "pandas.DataFrame.to_html": {"type": "function", "docstring": "Render a DataFrame as an HTML table.\n\nParameters\n----------\nbuf : str, Path or StringIO-like, optional, default None\n    Buffer to write to. If None, the output is returned as a string.\ncolumns : sequence, optional, default None\n    The subset of columns to write. Writes all columns by default.\ncol_space : str or int, optional\n    The minimum width of each column in CSS length units.  An int is assumed to be px units.\n\n    .. versionadded:: 0.25.0\n        Ability to use str.\nheader : bool, optional\n    Whether to print column labels, default True.\nindex : bool, optional, default True\n    Whether to print index (row) labels.\nna_rep : str, optional, default 'NaN'\n    String representation of NAN to use.\nformatters : list, tuple or dict of one-param. functions, optional\n    Formatter functions to apply to columns' elements by position or\n    name.\n    The result of each function must be a unicode string.\n    List/tuple must be of length equal to the number of columns.\nfloat_format : one-parameter function, optional, default None\n    Formatter function to apply to columns' elements if they are\n    floats. The result of this function must be a unicode string.\nsparsify : bool, optional, default True\n    Set to False for a DataFrame with a hierarchical index to print\n    every multiindex key at each row.\nindex_names : bool, optional, default True\n    Prints the names of the indexes.\njustify : str, default None\n    How to justify the column labels. If None uses the option from\n    the print configuration (controlled by set_option), 'right' out\n    of the box. Valid values are\n\n    * left\n    * right\n    * center\n    * justify\n    * justify-all\n    * start\n    * end\n    * inherit\n    * match-parent\n    * initial\n    * unset.\nmax_rows : int, optional\n    Maximum number of rows to display in the console.\nmin_rows : int, optional\n    The number of rows to display in the console in a truncated repr\n    (when number of rows is above `max_rows`).\nmax_cols : int, optional\n    Maximum number of columns to display in the console.\nshow_dimensions : bool, default False\n    Display DataFrame dimensions (number of rows by number of columns).\ndecimal : str, default '.'\n    Character recognized as decimal separator, e.g. ',' in Europe.\n\nbold_rows : bool, default True\n    Make the row labels bold in the output.\nclasses : str or list or tuple, default None\n    CSS class(es) to apply to the resulting html table.\nescape : bool, default True\n    Convert the characters <, >, and & to HTML-safe sequences.\nnotebook : {True, False}, default False\n    Whether the generated HTML is for IPython Notebook.\nborder : int\n    A ``border=border`` attribute is included in the opening\n    `<table>` tag. Default ``pd.options.display.html.border``.\ntable_id : str, optional\n    A css id is included in the opening `<table>` tag if specified.\n\n    .. versionadded:: 0.23.0\n\nrender_links : bool, default False\n    Convert URLs to HTML links.\n\n    .. versionadded:: 0.24.0\n\nReturns\n-------\nstr or None\n    If buf is None, returns the result as a string. Otherwise returns\n    None.\n\nSee Also\n--------\nto_string : Convert DataFrame to a string.", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 2204, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L2204", "errors": [["PR02", "Unknown parameters {min_rows}"]], "warnings": [["ES01", "No extended summary found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": ""}, "pandas.DataFrame.to_feather": {"type": "function", "docstring": "Write out the binary feather-format for DataFrames.\n\n.. versionadded:: 0.20.0\n\nParameters\n----------\nfname : str\n    string file path", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 2103, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L2103", "errors": [["PR08", "Parameter \"fname\" description should start with a capital letter"], ["PR09", "Parameter \"fname\" description should finish with \".\""]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": ""}, "pandas.DataFrame.to_latex": {"type": "function", "docstring": "Render an object to a LaTeX tabular environment table.\n\nRender an object to a tabular environment table. You can splice\nthis into a LaTeX document. Requires \\usepackage{booktabs}.\n\n.. versionchanged:: 0.20.2\n   Added to Series\n\nParameters\n----------\nbuf : str, Path or StringIO-like, optional, default None\n    Buffer to write to. If None, the output is returned as a string.\ncolumns : list of label, optional\n    The subset of columns to write. Writes all columns by default.\ncol_space : int, optional\n    The minimum width of each column.\nheader : bool or list of str, default True\n    Write out the column names. If a list of strings is given,\n    it is assumed to be aliases for the column names.\nindex : bool, default True\n    Write row names (index).\nna_rep : str, default 'NaN'\n    Missing data representation.\nformatters : list of functions or dict of {str: function}, optional\n    Formatter functions to apply to columns' elements by position or\n    name. The result of each function must be a unicode string.\n    List must be of length equal to the number of columns.\nfloat_format : one-parameter function or str, optional, default None\n    Formatter for floating point numbers. For example\n    ``float_format=\"%.2f\"`` and ``float_format=\"{:0.2f}\".format`` will\n    both result in 0.1234 being formatted as 0.12.\nsparsify : bool, optional\n    Set to False for a DataFrame with a hierarchical index to print\n    every multiindex key at each row. By default, the value will be\n    read from the config module.\nindex_names : bool, default True\n    Prints the names of the indexes.\nbold_rows : bool, default False\n    Make the row labels bold in the output.\ncolumn_format : str, optional\n    The columns format as specified in `LaTeX table format\n    <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g. 'rcl' for 3\n    columns. By default, 'l' will be used for all columns except\n    columns of numbers, which default to 'r'.\nlongtable : bool, optional\n    By default, the value will be read from the pandas config\n    module. Use a longtable environment instead of tabular. Requires\n    adding a \\usepackage{longtable} to your LaTeX preamble.\nescape : bool, optional\n    By default, the value will be read from the pandas config\n    module. When set to False prevents from escaping latex special\n    characters in column names.\nencoding : str, optional\n    A string representing the encoding to use in the output file,\n    defaults to 'utf-8'.\ndecimal : str, default '.'\n    Character recognized as decimal separator, e.g. ',' in Europe.\nmulticolumn : bool, default True\n    Use \\multicolumn to enhance MultiIndex columns.\n    The default will be read from the config module.\n\n    .. versionadded:: 0.20.0\nmulticolumn_format : str, default 'l'\n    The alignment for multicolumns, similar to `column_format`\n    The default will be read from the config module.\n\n    .. versionadded:: 0.20.0\nmultirow : bool, default False\n    Use \\multirow to enhance MultiIndex rows. Requires adding a\n    \\usepackage{multirow} to your LaTeX preamble. Will print\n    centered labels (instead of top-aligned) across the contained\n    rows, separating groups via clines. The default will be read\n    from the pandas config module.\n\n    .. versionadded:: 0.20.0\n\nReturns\n-------\nstr or None\n    If buf is None, returns the result as a string. Otherwise returns\n    None.\n\nSee Also\n--------\nDataFrame.to_string : Render a DataFrame to a console-friendly\n    tabular output.\nDataFrame.to_html : Render a DataFrame as an HTML table.\n\nExamples\n--------\n>>> df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n...                    'mask': ['red', 'purple'],\n...                    'weapon': ['sai', 'bo staff']})\n>>> print(df.to_latex(index=False)) # doctest: +NORMALIZE_WHITESPACE\n\\begin{tabular}{lll}\n \\toprule\n       name &    mask &    weapon \\\\\n \\midrule\n    Raphael &     red &       sai \\\\\n  Donatello &  purple &  bo staff \\\\\n\\bottomrule\n\\end{tabular}", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 2892, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L2892", "errors": [["EX03", "flake8 error: E261 at least two spaces before inline comment"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": "pandas.Series.to_latex"}, "pandas.DataFrame.to_stata": {"type": "function", "docstring": "Export DataFrame object to Stata dta format.\n\nWrites the DataFrame to a Stata dataset file.\n\"dta\" files contain a Stata dataset.\n\nParameters\n----------\nfname : str, buffer or path object\n    String, path object (pathlib.Path or py._path.local.LocalPath) or\n    object implementing a binary write() function. If using a buffer\n    then the buffer will not be automatically closed after the file\n    data has been written.\nconvert_dates : dict\n    Dictionary mapping columns containing datetime types to stata\n    internal format to use when writing the dates. Options are 'tc',\n    'td', 'tm', 'tw', 'th', 'tq', 'ty'. Column can be either an integer\n    or a name. Datetime columns that do not have a conversion type\n    specified will be converted to 'tc'. Raises NotImplementedError if\n    a datetime column has timezone information.\nwrite_index : bool\n    Write the index to Stata dataset.\nencoding : str\n    Default is latin-1. Unicode is not supported.\nbyteorder : str\n    Can be \">\", \"<\", \"little\", or \"big\". default is `sys.byteorder`.\ntime_stamp : datetime\n    A datetime to use as file creation date.  Default is the current\n    time.\ndata_label : str, optional\n    A label for the data set.  Must be 80 characters or smaller.\nvariable_labels : dict\n    Dictionary containing columns as keys and variable labels as\n    values. Each label must be 80 characters or smaller.\nversion : {114, 117}, default 114\n    Version to use in the output dta file.  Version 114 can be used\n    read by Stata 10 and later.  Version 117 can be read by Stata 13\n    or later. Version 114 limits string variables to 244 characters or\n    fewer while 117 allows strings with lengths up to 2,000,000\n    characters.\n\n    .. versionadded:: 0.23.0\n\nconvert_strl : list, optional\n    List of column names to convert to string columns to Stata StrL\n    format. Only available if version is 117.  Storing strings in the\n    StrL format can produce smaller dta files if strings have more than\n    8 characters and values are repeated.\n\n    .. versionadded:: 0.23.0\n\nRaises\n------\nNotImplementedError\n    * If datetimes contain timezone information\n    * Column dtype is not representable in Stata\nValueError\n    * Columns listed in convert_dates are neither datetime64[ns]\n      or datetime.datetime\n    * Column listed in convert_dates is not in DataFrame\n    * Categorical label contains more than 32,000 characters\n\nSee Also\n--------\nread_stata : Import Stata data files.\nio.stata.StataWriter : Low-level writer for Stata data files.\nio.stata.StataWriter117 : Low-level writer for version 117 files.\n\nExamples\n--------\n>>> df = pd.DataFrame({'animal': ['falcon', 'parrot', 'falcon',\n...                               'parrot'],\n...                    'speed': [350, 18, 361, 15]})\n>>> df.to_stata('animals.dta')  # doctest: +SKIP", "deprecated": false, "file": "pandas/util/_decorators.py", "file_line": 1989, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/util/_decorators.py#L1989", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["PR02", "Unknown parameters {write_index, variable_labels, convert_dates, convert_strl, encoding, fname, data_label, byteorder, version, time_stamp}"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": ""}, "pandas.DataFrame.to_msgpack": {"type": "function", "docstring": "Serialize object to input file path using msgpack format.\n\n.. deprecated:: 0.25.0\n\nto_msgpack is deprecated and will be removed in a future version.\nIt is recommended to use pyarrow for on-the-wire transmission of\npandas objects.\n\nParameters\n----------\npath : string File path, buffer-like, or None\n    if None, return generated bytes\nappend : bool whether to append to an existing msgpack\n    (default is False)\ncompress : type of compressor (zlib or blosc), default to None (no\n    compression)\n\nReturns\n-------\nNone or bytes\n    If path_or_buf is None, returns the resulting msgpack format as a\n    byte string. Otherwise returns None.", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 2511, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L2511", "errors": [["PR01", "Parameters {path_or_buf, encoding, **kwargs} not documented"], ["PR02", "Unknown parameters {path, append, compress}"], ["PR06", "Parameter \"path\" type should use \"str\" instead of \"string\""], ["PR08", "Parameter \"path\" description should start with a capital letter"], ["PR09", "Parameter \"path\" description should finish with \".\""], ["PR08", "Parameter \"append\" description should start with a capital letter"], ["PR09", "Parameter \"append\" description should finish with \".\""], ["PR08", "Parameter \"compress\" description should start with a capital letter"], ["PR09", "Parameter \"compress\" description should finish with \".\""]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": "pandas.Series.to_msgpack"}, "pandas.DataFrame.to_gbq": {"type": "function", "docstring": "Write a DataFrame to a Google BigQuery table.\n\nThis function requires the `pandas-gbq package\n<https://pandas-gbq.readthedocs.io>`__.\n\nSee the `How to authenticate with Google BigQuery\n<https://pandas-gbq.readthedocs.io/en/latest/howto/authentication.html>`__\nguide for authentication instructions.\n\nParameters\n----------\ndestination_table : str\n    Name of table to be written, in the form ``dataset.tablename``.\nproject_id : str, optional\n    Google BigQuery Account project ID. Optional when available from\n    the environment.\nchunksize : int, optional\n    Number of rows to be inserted in each chunk from the dataframe.\n    Set to ``None`` to load the whole dataframe at once.\nreauth : bool, default False\n    Force Google BigQuery to re-authenticate the user. This is useful\n    if multiple accounts are used.\nif_exists : str, default 'fail'\n    Behavior when the destination table exists. Value can be one of:\n\n    ``'fail'``\n        If table exists, do nothing.\n    ``'replace'``\n        If table exists, drop it, recreate it, and insert data.\n    ``'append'``\n        If table exists, insert data. Create if does not exist.\nauth_local_webserver : bool, default False\n    Use the `local webserver flow`_ instead of the `console flow`_\n    when getting user credentials.\n\n    .. _local webserver flow:\n        http://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_local_server\n    .. _console flow:\n        http://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_console\n\n    *New in version 0.2.0 of pandas-gbq*.\ntable_schema : list of dicts, optional\n    List of BigQuery table fields to which according DataFrame\n    columns conform to, e.g. ``[{'name': 'col1', 'type':\n    'STRING'},...]``. If schema is not provided, it will be\n    generated according to dtypes of DataFrame columns. See\n    BigQuery API documentation on available names of a field.\n\n    *New in version 0.3.1 of pandas-gbq*.\nlocation : str, optional\n    Location where the load job should run. See the `BigQuery locations\n    documentation\n    <https://cloud.google.com/bigquery/docs/dataset-locations>`__ for a\n    list of available locations. The location must match that of the\n    target dataset.\n\n    *New in version 0.5.0 of pandas-gbq*.\nprogress_bar : bool, default True\n    Use the library `tqdm` to show the progress bar for the upload,\n    chunk by chunk.\n\n    *New in version 0.5.0 of pandas-gbq*.\ncredentials : google.auth.credentials.Credentials, optional\n    Credentials for accessing Google APIs. Use this parameter to\n    override default credentials, such as to use Compute Engine\n    :class:`google.auth.compute_engine.Credentials` or Service\n    Account :class:`google.oauth2.service_account.Credentials`\n    directly.\n\n    *New in version 0.8.0 of pandas-gbq*.\n\n    .. versionadded:: 0.24.0\nverbose : bool, deprecated\n    Deprecated in pandas-gbq version 0.4.0. Use the `logging module\n    to adjust verbosity instead\n    <https://pandas-gbq.readthedocs.io/en/latest/intro.html#logging>`__.\nprivate_key : str, deprecated\n    Deprecated in pandas-gbq version 0.8.0. Use the ``credentials``\n    parameter and\n    :func:`google.oauth2.service_account.Credentials.from_service_account_info`\n    or\n    :func:`google.oauth2.service_account.Credentials.from_service_account_file`\n    instead.\n\n    Service account private key in JSON format. Can be file path\n    or string contents. This is useful for remote server\n    authentication (eg. Jupyter/IPython notebook on remote host).\n\nSee Also\n--------\npandas_gbq.to_gbq : This function in the pandas-gbq library.\nread_gbq : Read a DataFrame from Google BigQuery.", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 1370, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L1370", "errors": [], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": ""}, "pandas.DataFrame.to_records": {"type": "function", "docstring": "Convert DataFrame to a NumPy record array.\n\nIndex will be included as the first field of the record array if\nrequested.\n\nParameters\n----------\nindex : bool, default True\n    Include index in resulting record array, stored in 'index'\n    field or using the index label, if set.\nconvert_datetime64 : bool, default None\n    .. deprecated:: 0.23.0\n\n    Whether to convert the index to datetime.datetime if it is a\n    DatetimeIndex.\ncolumn_dtypes : str, type, dict, default None\n    .. versionadded:: 0.24.0\n\n    If a string or type, the data type to store all columns. If\n    a dictionary, a mapping of column names and indices (zero-indexed)\n    to specific data types.\nindex_dtypes : str, type, dict, default None\n    .. versionadded:: 0.24.0\n\n    If a string or type, the data type to store all index levels. If\n    a dictionary, a mapping of index level names and indices\n    (zero-indexed) to specific data types.\n\n    This mapping is applied only if `index=True`.\n\nReturns\n-------\nnumpy.recarray\n    NumPy ndarray with the DataFrame labels as fields and each row\n    of the DataFrame as entries.\n\nSee Also\n--------\nDataFrame.from_records: Convert structured or record ndarray\n    to DataFrame.\nnumpy.recarray: An ndarray that allows field access using\n    attributes, analogous to typed columns in a\n    spreadsheet.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': [1, 2], 'B': [0.5, 0.75]},\n...                   index=['a', 'b'])\n>>> df\n   A     B\na  1  0.50\nb  2  0.75\n>>> df.to_records()\nrec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n          dtype=[('index', 'O'), ('A', '<i8'), ('B', '<f8')])\n\nIf the DataFrame index has no label then the recarray field name\nis set to 'index'. If the index has a label then this is used as the\nfield name:\n\n>>> df.index = df.index.rename(\"I\")\n>>> df.to_records()\nrec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n          dtype=[('I', 'O'), ('A', '<i8'), ('B', '<f8')])\n\nThe index can be excluded from the record array:\n\n>>> df.to_records(index=False)\nrec.array([(1, 0.5 ), (2, 0.75)],\n          dtype=[('A', '<i8'), ('B', '<f8')])\n\nData types can be specified for the columns:\n\n>>> df.to_records(column_dtypes={\"A\": \"int32\"})\nrec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n          dtype=[('I', 'O'), ('A', '<i4'), ('B', '<f8')])\n\nAs well as for the index:\n\n>>> df.to_records(index_dtypes=\"<S2\")\nrec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],\n          dtype=[('I', 'S2'), ('A', '<i8'), ('B', '<f8')])\n\n>>> index_dtypes = \"<S{}\".format(df.index.str.len().max())\n>>> df.to_records(index_dtypes=index_dtypes)\nrec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],\n          dtype=[('I', 'S1'), ('A', '<i8'), ('B', '<f8')])", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 1627, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L1627", "errors": [["PR07", "Parameter \"convert_datetime64\" has no description"], ["PR07", "Parameter \"column_dtypes\" has no description"], ["PR07", "Parameter \"index_dtypes\" has no description"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": ""}, "pandas.DataFrame.to_sparse": {"type": "function", "docstring": "Convert to SparseDataFrame.\n\n.. deprecated:: 0.25.0\n\nImplement the sparse version of the DataFrame meaning that any data\nmatching a specific value it's omitted in the representation.\nThe sparse DataFrame allows for a more efficient storage.\n\nParameters\n----------\nfill_value : float, default None\n    The specific value that should be omitted in the representation.\nkind : {'block', 'integer'}, default 'block'\n    The kind of the SparseIndex tracking where data is not equal to\n    the fill value:\n\n    - 'block' tracks only the locations and sizes of blocks of data.\n    - 'integer' keeps an array with all the locations of the data.\n\n    In most cases 'block' is recommended, since it's more memory\n    efficient.\n\nReturns\n-------\nSparseDataFrame\n    The sparse representation of the DataFrame.\n\nSee Also\n--------\nDataFrame.to_dense :\n    Converts the DataFrame back to the its dense form.\n\nExamples\n--------\n>>> df = pd.DataFrame([(np.nan, np.nan),\n...                    (1., np.nan),\n...                    (np.nan, 1.)])\n>>> df\n     0    1\n0  NaN  NaN\n1  1.0  NaN\n2  NaN  1.0\n>>> type(df)\n<class 'pandas.core.frame.DataFrame'>\n\n>>> sdf = df.to_sparse()  # doctest: +SKIP\n>>> sdf  # doctest: +SKIP\n     0    1\n0  NaN  NaN\n1  1.0  NaN\n2  NaN  1.0\n>>> type(sdf)  # doctest: +SKIP\n<class 'pandas.core.sparse.frame.SparseDataFrame'>", "deprecated": true, "file": "pandas/core/frame.py", "file_line": 1914, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L1914", "errors": [["PR06", "Parameter \"kind\" type should use \"int\" instead of \"integer\""]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": ""}, "pandas.DataFrame.to_dense": {"type": "function", "docstring": "Return dense representation of Series/DataFrame (as opposed to sparse).\n\n.. deprecated:: 0.25.0\n\nReturns\n-------\n%(klass)s\n    Dense %(klass)s.", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 1984, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L1984", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": "pandas.Series.to_dense"}, "pandas.DataFrame.to_string": {"type": "function", "docstring": "Render a DataFrame to a console-friendly tabular output.\n\nParameters\n----------\nbuf : str, Path or StringIO-like, optional, default None\n    Buffer to write to. If None, the output is returned as a string.\ncolumns : sequence, optional, default None\n    The subset of columns to write. Writes all columns by default.\ncol_space : int, optional\n    The minimum width of each column.\nheader : bool, optional\n    Write out the column names. If a list of strings is given, it is assumed to be aliases for the column names.\nindex : bool, optional, default True\n    Whether to print index (row) labels.\nna_rep : str, optional, default 'NaN'\n    String representation of NAN to use.\nformatters : list, tuple or dict of one-param. functions, optional\n    Formatter functions to apply to columns' elements by position or\n    name.\n    The result of each function must be a unicode string.\n    List/tuple must be of length equal to the number of columns.\nfloat_format : one-parameter function, optional, default None\n    Formatter function to apply to columns' elements if they are\n    floats. The result of this function must be a unicode string.\nsparsify : bool, optional, default True\n    Set to False for a DataFrame with a hierarchical index to print\n    every multiindex key at each row.\nindex_names : bool, optional, default True\n    Prints the names of the indexes.\njustify : str, default None\n    How to justify the column labels. If None uses the option from\n    the print configuration (controlled by set_option), 'right' out\n    of the box. Valid values are\n\n    * left\n    * right\n    * center\n    * justify\n    * justify-all\n    * start\n    * end\n    * inherit\n    * match-parent\n    * initial\n    * unset.\nmax_rows : int, optional\n    Maximum number of rows to display in the console.\nmin_rows : int, optional\n    The number of rows to display in the console in a truncated repr\n    (when number of rows is above `max_rows`).\nmax_cols : int, optional\n    Maximum number of columns to display in the console.\nshow_dimensions : bool, default False\n    Display DataFrame dimensions (number of rows by number of columns).\ndecimal : str, default '.'\n    Character recognized as decimal separator, e.g. ',' in Europe.\n\nline_width : int, optional\n    Width to wrap a line in characters.\n\nReturns\n-------\nstr or None\n    If buf is None, returns the result as a string. Otherwise returns\n    None.\n\nSee Also\n--------\nto_html : Convert DataFrame to HTML.\n\nExamples\n--------\n>>> d = {'col1': [1, 2, 3], 'col2': [4, 5, 6]}\n>>> df = pd.DataFrame(d)\n>>> print(df.to_string())\n   col1  col2\n0     1     4\n1     2     5\n2     3     6", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 684, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L684", "errors": [], "warnings": [["ES01", "No extended summary found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": ""}, "pandas.DataFrame.to_clipboard": {"type": "function", "docstring": "Copy object to the system clipboard.\n\nWrite a text representation of object to the system clipboard.\nThis can be pasted into Excel, for example.\n\nParameters\n----------\nexcel : bool, default True\n    - True, use the provided separator, writing in a csv format for\n      allowing easy pasting into excel.\n    - False, write a string representation of the object to the\n      clipboard.\n\nsep : str, default ``'\\t'``\n    Field delimiter.\n**kwargs\n    These parameters will be passed to DataFrame.to_csv.\n\nSee Also\n--------\nDataFrame.to_csv : Write a DataFrame to a comma-separated values\n    (csv) file.\nread_clipboard : Read text from clipboard and pass to read_table.\n\nNotes\n-----\nRequirements for your platform.\n\n  - Linux : `xclip`, or `xsel` (with `PyQt4` modules)\n  - Windows : none\n  - OS X : none\n\nExamples\n--------\nCopy the contents of a DataFrame to the clipboard.\n\n>>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'])\n>>> df.to_clipboard(sep=',')\n... # Wrote the following to the system clipboard:\n... # ,A,B,C\n... # 0,1,2,3\n... # 1,4,5,6\n\nWe can omit the the index by passing the keyword `index` and setting\nit to false.\n\n>>> df.to_clipboard(sep=',', index=False)\n... # Wrote the following to the system clipboard:\n... # A,B,C\n... # 1,2,3\n... # 4,5,6", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 2752, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L2752", "errors": [["PR08", "Parameter \"excel\" description should start with a capital letter"]], "warnings": [], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": "pandas.Series.to_clipboard"}, "pandas.DataFrame.style": {"type": "property", "docstring": "Property returning a Styler object containing methods for\nbuilding a styled HTML representation fo the DataFrame.\n\nSee Also\n--------\nio.formats.style.Styler", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 756, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L756", "errors": [["SS06", "Summary should fit in a single line"], ["SA04", "Missing description for See Also \"io.formats.style.Styler\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Serialization / IO / conversion", "shared_code_with": ""}, "pandas.SparseDataFrame.to_coo": {"type": "function", "docstring": "Return the contents of the frame as a sparse SciPy COO matrix.\n\n.. versionadded:: 0.25.0\n\nReturns\n-------\ncoo_matrix : scipy.sparse.spmatrix\n    If the caller is heterogeneous and contains booleans or objects,\n    the result will be of dtype=object. See Notes.\n\nNotes\n-----\nThe dtype will be the lowest-common-denominator type (implicit\nupcasting); that is to say if the dtypes (even of numeric types)\nare mixed, the one that accommodates all will be chosen.\n\ne.g. If the dtypes are float16 and float32, dtype will be upcast to\nfloat32. By numpy.find_common_type convention, mixing int64 and\nand uint64 will result in a float64 dtype.", "deprecated": false, "file": "pandas/core/sparse/frame.py", "file_line": 275, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/sparse/frame.py#L275", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": true, "section": "", "subsection": "Sparse", "shared_code_with": ""}, "pandas.Series.as_blocks": {"type": "function", "docstring": "Convert the frame to a dict of dtype -> Constructor Types that each has\na homogeneous dtype.\n\n.. deprecated:: 0.21.0\n\nNOTE: the dtypes of the blocks WILL BE PRESERVED HERE (unlike in\n      as_matrix)\n\nParameters\n----------\ncopy : bool, default True\n\nReturns\n-------\ndict\n    Mapping dtype -> Constructor Types.", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 5670, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L5670", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"copy\" has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.Series.as_matrix": {"type": "function", "docstring": "Convert the frame to its Numpy-array representation.\n\n.. deprecated:: 0.23.0\n    Use :meth:`DataFrame.values` instead.\n\nParameters\n----------\ncolumns : list, optional, default:None\n    If None, return all columns, otherwise, returns specified columns.\n\nReturns\n-------\nvalues : ndarray\n    If the caller is heterogeneous and contains booleans or objects,\n    the result will be of dtype=object. See Notes.\n\nSee Also\n--------\nDataFrame.values\n\nNotes\n-----\nReturn is NOT a Numpy-matrix, rather, a Numpy-array.\n\nThe dtype will be a lower-common-denominator dtype (implicit\nupcasting); that is to say if the dtypes (even of numeric types)\nare mixed, the one that accommodates all will be chosen. Use this\nwith care if you are not dealing with the blocks.\n\ne.g. If the dtypes are float16 and float32, dtype will be upcast to\nfloat32.  If dtypes are int32 and uint8, dtype will be upcase to\nint32. By numpy.find_common_type convention, mixing int64 and uint64\nwill result in a float64 dtype.\n\nThis method is provided for backwards compatibility. Generally,\nit is recommended to use '.values'.", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 5294, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L5294", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["SA04", "Missing description for See Also \"DataFrame.values\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.Series.asobject": {"type": "property", "docstring": "Return object Series which contains boxed values.\n\n.. deprecated:: 0.23.0\n\n   Use ``astype(object)`` instead.\n\n*this is an internal non-public method*", "deprecated": true, "file": "pandas/core/series.py", "file_line": 588, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L588", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.Series.axes": {"type": "property", "docstring": "Return a list of the row axis labels.", "deprecated": false, "file": "pandas/core/series.py", "file_line": 1020, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L1020", "errors": [], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.Series.bfill": {"type": "function", "docstring": "Synonym for :meth:`DataFrame.fillna` with ``method='bfill'``.\n\nReturns\n-------\n%(klass)s\n    Object with missing values filled.", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 6282, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L6282", "errors": [["PR01", "Parameters {axis, limit, inplace, downcast} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.Series.blocks": {"type": "property", "docstring": "Internal property, property synonym for as_blocks().\n\n.. deprecated:: 0.21.0", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 5696, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L5696", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.Series.compress": {"type": "function", "docstring": "Return selected slices of an array along given axis as a Series.\n\n.. deprecated:: 0.24.0\n\nReturns\n-------\nSeries\n    Series without the slices for which condition is false.\n\nSee Also\n--------\nnumpy.ndarray.compress", "deprecated": true, "file": "pandas/core/series.py", "file_line": 622, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L622", "errors": [["PR01", "Parameters {**kwargs, *args, condition} not documented"], ["SA04", "Missing description for See Also \"numpy.ndarray.compress\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.Series.divide": {"type": "function", "docstring": "Return Floating division of series and other, element-wise (binary operator `truediv`).\n\nEquivalent to ``series / other``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.rtruediv\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.divide(b, fill_value=0)\na    1.0\nb    inf\nc    inf\nd    0.0\ne    NaN\ndtype: float64", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.rtruediv\" reference"]], "warnings": [], "examples_errors": "", "in_api": false}, "pandas.Series.divmod": {"type": "function", "docstring": "Return Integer division and modulo of series and other, element-wise (binary operator `divmod`).\n\nEquivalent to ``series divmod other``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.rdivmod", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.rdivmod\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.Series.ffill": {"type": "function", "docstring": "Synonym for :meth:`DataFrame.fillna` with ``method='ffill'``.\n\nReturns\n-------\n%(klass)s\n    Object with missing values filled.", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 6269, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L6269", "errors": [["PR01", "Parameters {axis, limit, inplace, downcast} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.Series.from_array": {"type": "method", "docstring": "Construct Series from array.\n\n.. deprecated:: 0.23.0\n    Use pd.Series(..) constructor instead.\n\nReturns\n-------\nSeries\n    Constructed Series.", "deprecated": true, "file": "pandas/core/series.py", "file_line": 366, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L366", "errors": [["PR01", "Parameters {dtype, index, copy, fastpath, arr, name} not documented"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.Series.get_dtype_counts": {"type": "function", "docstring": "Return counts of unique dtypes in this object.\n\n.. deprecated:: 0.25.0\n\nUse `.dtypes.value_counts()` instead.\n\nReturns\n-------\ndtype : Series\n    Series with the count of columns with each dtype.\n\nSee Also\n--------\ndtypes : Return the dtypes in this object.\n\nExamples\n--------\n>>> a = [['a', 1, 1.0], ['b', 2, 2.0], ['c', 3, 3.0]]\n>>> df = pd.DataFrame(a, columns=['str', 'int', 'float'])\n>>> df\n  str  int  float\n0   a    1    1.0\n1   b    2    2.0\n2   c    3    3.0\n\n>>> df.get_dtype_counts()\nfloat64    1\nint64      1\nobject     1\ndtype: int64", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 5486, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L5486", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [], "examples_errors": "", "in_api": false}, "pandas.Series.get_ftype_counts": {"type": "function", "docstring": "Return counts of unique ftypes in this object.\n\n.. deprecated:: 0.23.0\n\nThis is useful for SparseDataFrame or for DataFrames containing\nsparse arrays.\n\nReturns\n-------\ndtype : Series\n    Series with the count of columns with each type and\n    sparsity (dense/sparse).\n\nSee Also\n--------\nftypes : Return ftypes (indication of sparse/dense and dtype) in\n    this object.\n\nExamples\n--------\n>>> a = [['a', 1, 1.0], ['b', 2, 2.0], ['c', 3, 3.0]]\n>>> df = pd.DataFrame(a, columns=['str', 'int', 'float'])\n>>> df\n  str  int  float\n0   a    1    1.0\n1   b    2    2.0\n2   c    3    3.0\n\n>>> df.get_ftype_counts()  # doctest: +SKIP\nfloat64:dense    1\nint64:dense      1\nobject:dense     1\ndtype: int64", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 5531, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L5531", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"]], "warnings": [], "examples_errors": "", "in_api": false}, "pandas.Series.imag": {"type": "property", "docstring": "Return imag value of vector.\n\n.. deprecated:: 0.25.0", "deprecated": true, "file": "pandas/core/series.py", "file_line": 963, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L963", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.Series.isnull": {"type": "function", "docstring": "Detect missing values.\n\nReturn a boolean same-sized object indicating if the values are NA.\nNA values, such as None or :attr:`numpy.NaN`, gets mapped to True\nvalues.\nEverything else gets mapped to False values. Characters such as empty\nstrings ``''`` or :attr:`numpy.inf` are not considered NA values\n(unless you set ``pandas.options.mode.use_inf_as_na = True``).\n\nReturns\n-------\nSeries\n    Mask of bool values for each element in Series that\n    indicates whether an element is not an NA value.\n\nSee Also\n--------\nSeries.isnull : Alias of isna.\nSeries.notna : Boolean inverse of isna.\nSeries.dropna : Omit axes labels with missing values.\nisna : Top-level isna.\n\nExamples\n--------\nShow which entries in a DataFrame are NA.\n\n>>> df = pd.DataFrame({'age': [5, 6, np.NaN],\n...                    'born': [pd.NaT, pd.Timestamp('1939-05-27'),\n...                             pd.Timestamp('1940-04-25')],\n...                    'name': ['Alfred', 'Batman', ''],\n...                    'toy': [None, 'Batmobile', 'Joker']})\n>>> df\n   age       born    name        toy\n0  5.0        NaT  Alfred       None\n1  6.0 1939-05-27  Batman  Batmobile\n2  NaN 1940-04-25              Joker\n\n>>> df.isna()\n     age   born   name    toy\n0  False   True  False   True\n1  False  False  False  False\n2   True  False  False  False\n\nShow which entries in a Series are NA.\n\n>>> ser = pd.Series([5, 6, np.NaN])\n>>> ser\n0    5.0\n1    6.0\n2    NaN\ndtype: float64\n\n>>> ser.isna()\n0    False\n1    False\n2     True\ndtype: bool", "deprecated": false, "file": "pandas/core/series.py", "file_line": 4617, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L4617", "errors": [], "warnings": [], "examples_errors": "", "in_api": false}, "pandas.Series.ix": {"type": "property", "docstring": "A primarily label-location based indexer, with integer position\nfallback.\n\nWarning: Starting in 0.20.0, the .ix indexer is deprecated, in\nfavor of the more strict .iloc and .loc indexers.\n\n``.ix[]`` supports mixed integer and label based access. It is\nprimarily label based, but will fall back to integer positional\naccess unless the corresponding axis is of integer type.\n\n``.ix`` is the most general indexer and will support any of the\ninputs in ``.loc`` and ``.iloc``. ``.ix`` also supports floating\npoint label schemes. ``.ix`` is exceptionally useful when dealing\nwith mixed positional and label based hierarchical indexes.\n\nHowever, when an axis is integer based, ONLY label based access\nand not positional access is supported. Thus, in such cases, it's\nusually better to be explicit and use ``.iloc`` or ``.loc``.\n\nSee more at :ref:`Advanced Indexing <advanced>`.", "deprecated": false, "file": "pandas/core/indexing.py", "file_line": 1289, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexing.py#L1289", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.Series.multiply": {"type": "function", "docstring": "Return Multiplication of series and other, element-wise (binary operator `mul`).\n\nEquivalent to ``series * other``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.rmul\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.multiply(b, fill_value=0)\na    1.0\nb    0.0\nc    0.0\nd    0.0\ne    NaN\ndtype: float64", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.rmul\" reference"]], "warnings": [], "examples_errors": "", "in_api": false}, "pandas.Series.nonzero": {"type": "function", "docstring": "Return the *integer* indices of the elements that are non-zero.\n\n.. deprecated:: 0.24.0\n   Please use .to_numpy().nonzero() as a replacement.\n\nThis method is equivalent to calling `numpy.nonzero` on the\nseries data. For compatibility with NumPy, the return value is\nthe same (a tuple with an array of indices for each dimension),\nbut it will always be a one-item tuple because series only have\none dimension.\n\nReturns\n-------\nnumpy.ndarray\n    Indices of elements that are non-zero.\n\nSee Also\n--------\nnumpy.nonzero\n\nExamples\n--------\n>>> s = pd.Series([0, 3, 0, 4])\n>>> s.nonzero()\n(array([1, 3]),)\n>>> s.iloc[s.nonzero()[0]]\n1    3\n3    4\ndtype: int64\n\n# same return although index of s is different\n>>> s = pd.Series([0, 3, 0, 4], index=['a', 'b', 'c', 'd'])\n>>> s.nonzero()\n(array([1, 3]),)\n>>> s.iloc[s.nonzero()[0]]\nb    3\nd    4\ndtype: int64", "deprecated": true, "file": "pandas/core/series.py", "file_line": 646, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L646", "errors": [["SA04", "Missing description for See Also \"numpy.nonzero\" reference"]], "warnings": [], "examples_errors": "", "in_api": false}, "pandas.Series.notnull": {"type": "function", "docstring": "Detect existing (non-missing) values.\n\nReturn a boolean same-sized object indicating if the values are not NA.\nNon-missing values get mapped to True. Characters such as empty\nstrings ``''`` or :attr:`numpy.inf` are not considered NA values\n(unless you set ``pandas.options.mode.use_inf_as_na = True``).\nNA values, such as None or :attr:`numpy.NaN`, get mapped to False\nvalues.\n\nReturns\n-------\nSeries\n    Mask of bool values for each element in Series that\n    indicates whether an element is not an NA value.\n\nSee Also\n--------\nSeries.notnull : Alias of notna.\nSeries.isna : Boolean inverse of notna.\nSeries.dropna : Omit axes labels with missing values.\nnotna : Top-level notna.\n\nExamples\n--------\nShow which entries in a DataFrame are not NA.\n\n>>> df = pd.DataFrame({'age': [5, 6, np.NaN],\n...                    'born': [pd.NaT, pd.Timestamp('1939-05-27'),\n...                             pd.Timestamp('1940-04-25')],\n...                    'name': ['Alfred', 'Batman', ''],\n...                    'toy': [None, 'Batmobile', 'Joker']})\n>>> df\n   age       born    name        toy\n0  5.0        NaT  Alfred       None\n1  6.0 1939-05-27  Batman  Batmobile\n2  NaN 1940-04-25              Joker\n\n>>> df.notna()\n     age   born  name    toy\n0   True  False  True  False\n1   True   True  True   True\n2  False   True  True   True\n\nShow which entries in a Series are not NA.\n\n>>> ser = pd.Series([5, 6, np.NaN])\n>>> ser\n0    5.0\n1    6.0\n2    NaN\ndtype: float64\n\n>>> ser.notna()\n0     True\n1     True\n2    False\ndtype: bool", "deprecated": false, "file": "pandas/core/series.py", "file_line": 4625, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L4625", "errors": [], "warnings": [], "examples_errors": "", "in_api": false}, "pandas.Series.ptp": {"type": "function", "docstring": "Return the difference between the maximum value and the\n            minimum value in the object. This is the equivalent of the\n            ``numpy.ndarray`` method ``ptp``.\n\n.. deprecated:: 0.24.0\n                Use numpy.ptp instead\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a scalar.\nnumeric_only : bool, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or Series (if level specified)", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 11555, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L11555", "errors": [["SS06", "Summary should fit in a single line"], ["RT03", "Return value has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.Series.rdivmod": {"type": "function", "docstring": "Return Integer division and modulo of series and other, element-wise (binary operator `rdivmod`).\n\nEquivalent to ``other divmod series``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.divmod", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.divmod\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.Series.real": {"type": "property", "docstring": "Return the real value of vector.\n\n.. deprecated:: 0.25.0", "deprecated": true, "file": "pandas/core/series.py", "file_line": 943, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L943", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.Series.subtract": {"type": "function", "docstring": "Return Subtraction of series and other, element-wise (binary operator `sub`).\n\nEquivalent to ``series - other``, but with support to substitute a fill_value for\nmissing data in one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result will be missing.\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.rsub\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.subtract(b, fill_value=0)\na    0.0\nb    1.0\nc    1.0\nd   -1.0\ne    NaN\ndtype: float64", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 833, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L833", "errors": [["PR01", "Parameters {axis} not documented"], ["PR07", "Parameter \"other\" has no description"], ["SA04", "Missing description for See Also \"Series.rsub\" reference"]], "warnings": [], "examples_errors": "", "in_api": false}, "pandas.Series.swapaxes": {"type": "function", "docstring": "Interchange axes and swap values axes appropriately.\n\nReturns\n-------\ny : same as input", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 717, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L717", "errors": [["PR01", "Parameters {axis1, axis2, copy} not documented"], ["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.Series.tolist": {"type": "function", "docstring": "Return a list of the values.\n\nThese are each a scalar type, which is a Python scalar\n(for str, int, float) or a pandas scalar\n(for Timestamp/Timedelta/Interval/Period)\n\nReturns\n-------\nlist\n\nSee Also\n--------\nnumpy.ndarray.tolist", "deprecated": false, "file": "pandas/core/base.py", "file_line": 1137, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L1137", "errors": [["RT03", "Return value has no description"], ["SA04", "Missing description for See Also \"numpy.ndarray.tolist\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.Series.transpose": {"type": "function", "docstring": "Return the transpose, which is by definition self.\n\nReturns\n-------\n%(klass)s", "deprecated": false, "file": "pandas/core/base.py", "file_line": 653, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/base.py#L653", "errors": [["PR01", "Parameters {**kwargs, *args} not documented"], ["RT03", "Return value has no description"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.Series.valid": {"type": "function", "docstring": "Return Series without null values.\n\n.. deprecated:: 0.23.0\n    Use :meth:`Series.dropna` instead.\n\nReturns\n-------\nSeries\n    Series without null values.", "deprecated": true, "file": "pandas/core/series.py", "file_line": 4723, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/series.py#L4723", "errors": [["PR01", "Parameters {inplace, **kwargs} not documented"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.DataFrame.as_blocks": {"type": "function", "docstring": "Convert the frame to a dict of dtype -> Constructor Types that each has\na homogeneous dtype.\n\n.. deprecated:: 0.21.0\n\nNOTE: the dtypes of the blocks WILL BE PRESERVED HERE (unlike in\n      as_matrix)\n\nParameters\n----------\ncopy : bool, default True\n\nReturns\n-------\ndict\n    Mapping dtype -> Constructor Types.", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 5670, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L5670", "errors": [["SS06", "Summary should fit in a single line"], ["PR07", "Parameter \"copy\" has no description"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.DataFrame.as_matrix": {"type": "function", "docstring": "Convert the frame to its Numpy-array representation.\n\n.. deprecated:: 0.23.0\n    Use :meth:`DataFrame.values` instead.\n\nParameters\n----------\ncolumns : list, optional, default:None\n    If None, return all columns, otherwise, returns specified columns.\n\nReturns\n-------\nvalues : ndarray\n    If the caller is heterogeneous and contains booleans or objects,\n    the result will be of dtype=object. See Notes.\n\nSee Also\n--------\nDataFrame.values\n\nNotes\n-----\nReturn is NOT a Numpy-matrix, rather, a Numpy-array.\n\nThe dtype will be a lower-common-denominator dtype (implicit\nupcasting); that is to say if the dtypes (even of numeric types)\nare mixed, the one that accommodates all will be chosen. Use this\nwith care if you are not dealing with the blocks.\n\ne.g. If the dtypes are float16 and float32, dtype will be upcast to\nfloat32.  If dtypes are int32 and uint8, dtype will be upcase to\nint32. By numpy.find_common_type convention, mixing int64 and uint64\nwill result in a float64 dtype.\n\nThis method is provided for backwards compatibility. Generally,\nit is recommended to use '.values'.", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 5294, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L5294", "errors": [["RT02", "The first line of the Returns section should contain only the type, unless multiple values are being returned"], ["SA04", "Missing description for See Also \"DataFrame.values\" reference"]], "warnings": [["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.DataFrame.bfill": {"type": "function", "docstring": "Synonym for :meth:`DataFrame.fillna` with ``method='bfill'``.\n\nReturns\n-------\n%(klass)s\n    Object with missing values filled.", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 6282, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L6282", "errors": [["PR01", "Parameters {axis, limit, inplace, downcast} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.DataFrame.blocks": {"type": "property", "docstring": "Internal property, property synonym for as_blocks().\n\n.. deprecated:: 0.21.0", "deprecated": true, "file": "pandas/core/generic.py", "file_line": 5696, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L5696", "errors": [], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.DataFrame.divide": {"type": "function", "docstring": "Get Floating division of dataframe and other, element-wise (binary operator `truediv`).\n\nEquivalent to ``dataframe / other``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `rtruediv`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 974, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L974", "errors": [], "warnings": [], "examples_errors": "", "in_api": false}, "pandas.DataFrame.ffill": {"type": "function", "docstring": "Synonym for :meth:`DataFrame.fillna` with ``method='ffill'``.\n\nReturns\n-------\n%(klass)s\n    Object with missing values filled.", "deprecated": false, "file": "pandas/core/generic.py", "file_line": 6269, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L6269", "errors": [["PR01", "Parameters {axis, limit, inplace, downcast} not documented"]], "warnings": [["ES01", "No extended summary found"], ["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.DataFrame.isnull": {"type": "function", "docstring": "Detect missing values.\n\nReturn a boolean same-sized object indicating if the values are NA.\nNA values, such as None or :attr:`numpy.NaN`, gets mapped to True\nvalues.\nEverything else gets mapped to False values. Characters such as empty\nstrings ``''`` or :attr:`numpy.inf` are not considered NA values\n(unless you set ``pandas.options.mode.use_inf_as_na = True``).\n\nReturns\n-------\nDataFrame\n    Mask of bool values for each element in DataFrame that\n    indicates whether an element is not an NA value.\n\nSee Also\n--------\nDataFrame.isnull : Alias of isna.\nDataFrame.notna : Boolean inverse of isna.\nDataFrame.dropna : Omit axes labels with missing values.\nisna : Top-level isna.\n\nExamples\n--------\nShow which entries in a DataFrame are NA.\n\n>>> df = pd.DataFrame({'age': [5, 6, np.NaN],\n...                    'born': [pd.NaT, pd.Timestamp('1939-05-27'),\n...                             pd.Timestamp('1940-04-25')],\n...                    'name': ['Alfred', 'Batman', ''],\n...                    'toy': [None, 'Batmobile', 'Joker']})\n>>> df\n   age       born    name        toy\n0  5.0        NaT  Alfred       None\n1  6.0 1939-05-27  Batman  Batmobile\n2  NaN 1940-04-25              Joker\n\n>>> df.isna()\n     age   born   name    toy\n0  False   True  False   True\n1  False  False  False  False\n2   True  False  False  False\n\nShow which entries in a Series are NA.\n\n>>> ser = pd.Series([5, 6, np.NaN])\n>>> ser\n0    5.0\n1    6.0\n2    NaN\ndtype: float64\n\n>>> ser.isna()\n0    False\n1    False\n2     True\ndtype: bool", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 4647, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L4647", "errors": [], "warnings": [], "examples_errors": "", "in_api": false}, "pandas.DataFrame.ix": {"type": "property", "docstring": "A primarily label-location based indexer, with integer position\nfallback.\n\nWarning: Starting in 0.20.0, the .ix indexer is deprecated, in\nfavor of the more strict .iloc and .loc indexers.\n\n``.ix[]`` supports mixed integer and label based access. It is\nprimarily label based, but will fall back to integer positional\naccess unless the corresponding axis is of integer type.\n\n``.ix`` is the most general indexer and will support any of the\ninputs in ``.loc`` and ``.iloc``. ``.ix`` also supports floating\npoint label schemes. ``.ix`` is exceptionally useful when dealing\nwith mixed positional and label based hierarchical indexes.\n\nHowever, when an axis is integer based, ONLY label based access\nand not positional access is supported. Thus, in such cases, it's\nusually better to be explicit and use ``.iloc`` or ``.loc``.\n\nSee more at :ref:`Advanced Indexing <advanced>`.", "deprecated": false, "file": "pandas/core/indexing.py", "file_line": 1289, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexing.py#L1289", "errors": [["SS06", "Summary should fit in a single line"]], "warnings": [["SA01", "See Also section not found"], ["EX01", "No examples section found"]], "examples_errors": "", "in_api": false}, "pandas.DataFrame.multiply": {"type": "function", "docstring": "Get Multiplication of dataframe and other, element-wise (binary operator `mul`).\n\nEquivalent to ``dataframe * other``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `rmul`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 974, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L974", "errors": [], "warnings": [], "examples_errors": "", "in_api": false}, "pandas.DataFrame.notnull": {"type": "function", "docstring": "Detect existing (non-missing) values.\n\nReturn a boolean same-sized object indicating if the values are not NA.\nNon-missing values get mapped to True. Characters such as empty\nstrings ``''`` or :attr:`numpy.inf` are not considered NA values\n(unless you set ``pandas.options.mode.use_inf_as_na = True``).\nNA values, such as None or :attr:`numpy.NaN`, get mapped to False\nvalues.\n\nReturns\n-------\nDataFrame\n    Mask of bool values for each element in DataFrame that\n    indicates whether an element is not an NA value.\n\nSee Also\n--------\nDataFrame.notnull : Alias of notna.\nDataFrame.isna : Boolean inverse of notna.\nDataFrame.dropna : Omit axes labels with missing values.\nnotna : Top-level notna.\n\nExamples\n--------\nShow which entries in a DataFrame are not NA.\n\n>>> df = pd.DataFrame({'age': [5, 6, np.NaN],\n...                    'born': [pd.NaT, pd.Timestamp('1939-05-27'),\n...                             pd.Timestamp('1940-04-25')],\n...                    'name': ['Alfred', 'Batman', ''],\n...                    'toy': [None, 'Batmobile', 'Joker']})\n>>> df\n   age       born    name        toy\n0  5.0        NaT  Alfred       None\n1  6.0 1939-05-27  Batman  Batmobile\n2  NaN 1940-04-25              Joker\n\n>>> df.notna()\n     age   born  name    toy\n0   True  False  True  False\n1   True   True  True   True\n2  False   True  True   True\n\nShow which entries in a Series are not NA.\n\n>>> ser = pd.Series([5, 6, np.NaN])\n>>> ser\n0    5.0\n1    6.0\n2    NaN\ndtype: float64\n\n>>> ser.notna()\n0     True\n1     True\n2    False\ndtype: bool", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 4655, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L4655", "errors": [], "warnings": [], "examples_errors": "", "in_api": false}, "pandas.DataFrame.subtract": {"type": "function", "docstring": "Get Subtraction of dataframe and other, element-wise (binary operator `sub`).\n\nEquivalent to ``dataframe - other``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `rsub`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0", "deprecated": false, "file": "pandas/core/ops/__init__.py", "file_line": 974, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/ops/__init__.py#L974", "errors": [], "warnings": [], "examples_errors": "", "in_api": false}, "pandas.DataFrame.to_numpy": {"type": "function", "docstring": "Convert the DataFrame to a NumPy array.\n\n.. versionadded:: 0.24.0\n\nBy default, the dtype of the returned array will be the common NumPy\ndtype of all types in the DataFrame. For example, if the dtypes are\n``float16`` and ``float32``, the results dtype will be ``float32``.\nThis may require copying data and coercing values, which may be\nexpensive.\n\nParameters\n----------\ndtype : str or numpy.dtype, optional\n    The dtype to pass to :meth:`numpy.asarray`.\ncopy : bool, default False\n    Whether to ensure that the returned value is a not a view on\n    another array. Note that ``copy=False`` does not *ensure* that\n    ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that\n    a copy is made, even if not strictly necessary.\n\nReturns\n-------\nnumpy.ndarray\n\nSee Also\n--------\nSeries.to_numpy : Similar method for Series.\n\nExamples\n--------\n>>> pd.DataFrame({\"A\": [1, 2], \"B\": [3, 4]}).to_numpy()\narray([[1, 3],\n       [2, 4]])\n\nWith heterogenous data, the lowest common type will have to\nbe used.\n\n>>> df = pd.DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.5]})\n>>> df.to_numpy()\narray([[1. , 3. ],\n       [2. , 4.5]])\n\nFor a mix of numeric and non-numeric types, the output array will\nhave object dtype.\n\n>>> df['C'] = pd.date_range('2000', periods=2)\n>>> df.to_numpy()\narray([[1, 3.0, Timestamp('2000-01-01 00:00:00')],\n       [2, 4.5, Timestamp('2000-01-02 00:00:00')]], dtype=object)", "deprecated": false, "file": "pandas/core/frame.py", "file_line": 1178, "github_link": "https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L1178", "errors": [["RT03", "Return value has no description"]], "warnings": [], "examples_errors": "", "in_api": false}}